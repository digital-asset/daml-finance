-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Holding.Test.Upgrade where

import DA.Map qualified as Map (fromList)
import DA.Set (singleton)
import Daml.Finance.Holding.Factory qualified as Holding (Factory(..))
import Daml.Finance.Holding.Test.Common (TestInitialState(..), TestParties(..), setupInitialState, setupParties)
import Daml.Finance.Holding.Transferable qualified as Transferable (T)
import Daml.Finance.Interface.Holding.Factory qualified as HoldingFactory (I, Remove(..))
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Interface.Types.Common.Types (HoldingStandard(..), Id(..))
import Daml.Finance.Test.Util.Account qualified as Account (ControlledBy(..))
import Daml.Finance.Test.Util.HoldingDuplicates.Factory qualified as HoldingNew (Factory(..))
import Daml.Finance.Test.Util.HoldingDuplicates.Transferable qualified as TransferableNew (T)
import Daml.Finance.Test.Util.HoldingFactory (createHoldingFactory, submitExerciseInterfaceByKeyCmd)
import Daml.Script

run : Script ()
run = do
  -- Create parties
  tp@TestParties{custodian; issuer; investor; locker; publicParty} <- setupParties
  let observers = Map.fromList [("PublicParty", singleton publicParty)]

  -- Initialize state
  TestInitialState {investorAccount; issuerAccount; issuerHoldingCid; accountFactoryCid;
    holdingFactory} <-
    setupInitialState
      tp
      Holding.Factory with provider = custodian; id = Id "Holding Factory"; observers
      Transferable
      []
      Account.Owner

  -- The custodian decides to upgrade to a new implementation of the transferable holding.
  -- 1. The holding factory for the old version is archived.
  submitExerciseInterfaceByKeyCmd @HoldingFactory.I [custodian] [] holdingFactory
    HoldingFactory.Remove
  -- 2. A holding factory for the new version is created (the key remains the same).
  createHoldingFactory $
    HoldingNew.Factory with provider = custodian; id = Id "Holding Factory"; observers
  -- 3. Upon a transfer (to self), the transferable holding is upgraded to the new version.
  Some _ <- queryContractId custodian $ fromInterfaceContractId @Transferable.T issuerHoldingCid
  transferableCid <-
    submitMulti [issuer] [publicParty] do
      exerciseCmd (fromInterfaceContractId @Transferable.I issuerHoldingCid)
        Transferable.Transfer with
          actors = singleton issuer; newOwnerAccount = issuerAccount
  Some _ <- queryContractId custodian $ fromInterfaceContractId @TransferableNew.T transferableCid

  pure ()
