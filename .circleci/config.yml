#
# Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#

version: 2.1

executors:
  daml-executor:
    docker:
      - image: cimg/openjdk:11.0
  docs-executor:
    docker:
      - image: cimg/python:3.7-node

commands:
  install_sdk:
    description: "Install Daml SDK"
    steps:
      - run:
          name: "Create download directory"
          command: |
            mkdir -p $HOME/downloads
            >> $BASH_ENV echo 'export TEMPDIR=$HOME/downloads'
      - run:
          name: Install Daml SDK
          command: |
            curl -sSL https://get.daml.com/ | sh /dev/stdin ${SDK_VERSION}
            # idea from https://circleci.com/docs/2.0/env-vars/
            >> $BASH_ENV echo 'export PATH="$HOME/.daml/bin:$PATH"'
      - run:
          name: Verify Daml SDK
          command: |
            DAR=`basename ${TEMPDIR}/*.tar.gz`
            curl -SLf https://github.com/digital-asset/daml/releases/download/v${SDK_VERSION}/${DAR}.asc --output $TEMPDIR/$DAR.asc --progress-bar
            gpg --verify ${TEMPDIR}/${DAR}.asc
  install_yq:
    description: "Install yq from binary"
    steps:
      - run:
          name: Install yq
          command: |
            mkdir -p $HOME/yq
            curl -L https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64 -o $HOME/yq/yq &&\
              chmod +x $HOME/yq/yq &&\
              echo 'export PATH=$HOME/yq/yq:$PATH' >> $BASH_ENV
      - run:
          name: Verify yq
          command: |
            curl -L https://github.com/mikefarah/yq/releases/download/3.4.1/checksums -o $HOME/yq/checksums
            curl -L https://github.com/mikefarah/yq/releases/download/3.4.1/checksums_hashes_order -o $HOME/yq/checksums_hashes_order
            HASHPOSITION=`grep -m 1 -n "SHA3-512" ${HOME}/yq/checksums_hashes_order | cut -f1 -d:`
            CHECKSUM=`grep "yq_linux_amd64" ${HOME}/yq/checksums | sed 's/  /\t/g' | cut -f$((${HASHPOSITION}+1))`

            if [[ `openssl dgst -sha3-512 ${HOME}/yq/yq | cut -f2 -d" "` != ${CHECKSUM} ]] ; then
              echo "ERROR: yq - invalid checksum"
              exit 1
            fi
  install_gh:
    description: Install GitHub Cli
    steps:
      - run:
          name: Install gh
          command: |
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
  install_ruby_sass:
    description: Install Ruby and Sass
    steps:
      - run:
          name: Install Ruby
          command: sudo apt-get install ruby-full
      - run:
          name: Install Sass
          command: sudo gem install sass

  set_sdk_version:
    description: "Set Daml SDK version environment version"
    steps:
      - run:
          name: Set Daml SDK version
          command: echo 'export SDK_VERSION=$(yq e '.sdk-version' daml.yaml)' >> $BASH_ENV
  import_gpg_key:
    description: "Setup GPG for signing artifacts as part of a release"
    steps:
      - run:
          name: Import Digital Asset GPG key
          command: echo ${gpg_code_signing} | base64 -d | gpg --import --quiet
  run_release:
    description: "GitHub Release"
    steps:
      - run:
          name: "Run GitHub Release"
          command: |
            PACKAGES=(`ls package/main/daml/*/daml.yaml`)

            for package in ${PACKAGES[@]}; do
              PACKAGE=`echo ${package} | cut -f4 -d "/"`
              VERSION=`yq e '.version' ${package}`
              TAG="${PACKAGE}/${VERSION}"
              echo "Processing package '${PACKAGE}' with tag '${TAG}'..."

              if [[ `git tag -l ${TAG} | wc -l` -eq 0 ]]; then
                DAR_PREFIX=`awk '{ gsub(/\./, "-", $0); print tolower($0); }' \<<< ${PACKAGE}`
                DAR="${DAR_PREFIX}-${VERSION}.dar"
                gpg --armor --detach-sign .dars/${DAR}

                if [[ `echo $VERSION | grep ".99." | wc -l` -eq 0 ]] ; then
                  gh release create ${TAG} .dars/${DAR}* --target ${CIRCLE_BRANCH} --notes "See release notes (insert link here) for further details."
                else
                  gh release create ${TAG} .dars/${DAR}* --target ${CIRCLE_BRANCH} --prerelease --notes "Development snapshot of package '${PACKAGE}'. Use at your own risk."
                fi
                echo -e "Successfully released package '${PACKAGE}' with tag '${TAG}'.\n"
              else
                echo -e "Tag '${TAG}' already exists for package '${PACKAGE}'; Ignoring...\n"
              fi
            done
      - store_artifacts:
          path: .dars
          destination: daml-finance-dar-${VERSION}
  run_assembly:
    description: "Build Assembly for docs.daml.com"
    steps:
      - run:
          name: Build assembly
          command: |
            echo 'export ASSEMBLY_VERSION=$(yq e '.version' daml.yaml)' >> $BASH_ENV
            make ci-assembly
      - run:
          name: Compress and zip assembly
          command: |
            echo 'export DOC_SOURCES_TAR=daml-finance-doc-sources-${ASSEMBLY_VERSION}.tar.gz' >> $BASH_ENV && source "$BASH_ENV"
            tar czvf ${DOC_SOURCES_TAR} -C docs/.assembly .
      - run:
          name: Push assembly to Artifactory
          command: |
            URL="https://digitalasset.jfrog.io/artifactory/assembly/daml-finance/${ASSEMBLY_VERSION}/${DOC_SOURCES_TAR}"
            curl -u "${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD}" -sSf -X PUT -T ${DOC_SOURCES_TAR} ${URL}
      - run:
          name: Tag assembly in GitHub
          command: |
            TAG="assembly/${ASSEMBLY_VERSION}"
            COMMIT=`git rev-parse HEAD`
            DATE=`date +"%Y-%m-%dT%H:%M:%S%:z"`

            curl \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              https://api.github.com/repos/digital-asset/daml-finance/git/tags \
              -d '{"tag":"'${TAG}'"
                ,"message":"Assembly build - '${TAG}'"
                ,"object":"'${COMMIT}'"
                ,"type":"commit"
                ,"tagger":{"name":"Brian Weir"
                  ,"email":"brian.weir@digitalasset.com"
                  ,"date":"'${DATE}'"}}'

            gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              /repos/digital-asset/daml-finance/git/refs \
              -f ref='refs/tags/'${TAG}'' \
              -f sha=''${COMMIT}''

jobs:
  build:
    executor: daml-executor
    steps:
      - checkout
      - run:
          name: Validate Copyright headers
          command: |
            make headers-check
      - install_yq
      - set_sdk_version
      - import_gpg_key
      - install_sdk
      - run:
          name: Build source and packages
          command: make ci-build
      - run:
          name: Execute tests
          command: make ci-test
      - run:
          name: Validate packages
          command: make ci-validate
      - save_cache:
          paths:
            - .dars
          key: daml-finance-dars-{{ .Revision }}
      - save_cache:
          paths:
            - .daml
          key: daml-build-{{ .Revision }}

  release:
    executor: daml-executor
    steps:
      - checkout
      - install_yq
      - install_gh
      - import_gpg_key
      - restore_cache:
          keys:
            - daml-finance-dars-{{ .Revision }}
      - run_release

  docs:
    executor: docs-executor
    steps:
      - checkout
      - run:
          name: Update package list
          command: sudo apt-get update
      - install_ruby_sass
      - run:
          name: Install Grunt
          command: sudo npm install -g grunt-cli
      - run:
          name: Install Java JRE
          command: sudo apt-get install openjdk-11-jre-headless
      - set_sdk_version
      - import_gpg_key
      - install_sdk
      - restore_cache:
          keys:
            - daml-build-{{ .Revision }}
      - run:
          name: Install Python dependencies
          command: pipenv install
      - run:
          name: Build docs
          command: make ci-docs
      - save_cache:
          paths:
            - docs/build
          key: docs-build-{{ .Revision }}

  assembly:
    executor: docs-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - docs-build-{{ .Revision }}
      - install_gh
      - run_assembly

workflows:
  version: 2
  build:
    jobs:
      - build:
          context: npn-publish
          filters:
            branches:
              ignore:
                - /^(R|r)elease.*$/
                - /^(A|a)ssembly.*$/
      - docs:
          context: npn-publish
          filters:
            branches:
              ignore:
                - /^(R|r)elease.*$/
                - /^(A|a)ssembly.*$/
          requires:
            - build
  build-release:
    jobs:
      - build:
          context: npn-publish
          filters:
            branches:
              only:
                - /^(R|r)elease.*$/
      - docs:
          context: npn-publish
          filters:
            branches:
              only:
                - /^(R|r)elease.*$/
          requires:
            - build
      - release:
          context:
            - github-fin-eng-context
            - npn-publish
          requires:
            - build
            - docs
          filters:
            branches:
              only:
                - /^(R|r)elease.*$/
  assembly:
    jobs:
      - build:
          context: npn-publish
          filters:
            branches:
              only:
                - /^(A|a)ssembly.*$/
      - docs:
          context: npn-publish
          filters:
            branches:
              only:
                - /^(A|a)ssembly.*$/
          requires:
            - build
      - hold:
          type: approval
          requires:
            - docs
      - assembly:
          context:
            - github-fin-eng-context
          filters:
            branches:
              only:
                - /^(A|a)ssembly.*$/
          requires:
            - hold
