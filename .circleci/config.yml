#
# Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#

version: 2.1

executors:
  daml-finance-executor:
    docker:
      - image: cimg/base:2022.10

commands:
  setup_nix:
    description: Set up Nix
    steps:
      - run:
          name: Generate cache key
          command: |
            set -euo pipefail

            git log -n1 --format=%H nix shell.nix tools/packell daml.yaml > /tmp/nix-cache-key
            sudo mkdir /nix
            sudo chown circleci /nix
            echo 'export USER=circleci' >> "$BASH_ENV"
      - restore_cache:
          keys:
          - nix-{{ checksum "/tmp/nix-cache-key" }}
      - run:
          name: Setup Nix
          command: |
            set -euo pipefail

            if [ -f ~/.config/nix/nix.conf ]; then
                echo '. /home/circleci/.nix-profile/etc/profile.d/nix.sh' >> "$BASH_ENV"
                exit 0
            fi

            # Disabling sandbox because:
            # 1. It doesn't work on CircleCI (sethostname is not allowed)
            # 2. We don't plan to build anything, so the risk is fairly low
            mkdir -p ~/.config/nix
            echo 'sandbox = false' >> ~/.config/nix/nix.conf

            sh <(curl -fsSL https://nixos.org/nix/install) --no-daemon
            . /home/circleci/.nix-profile/etc/profile.d/nix.sh
            nix-shell shell.nix --run 'echo "Done loading all packages."'
            echo '. /home/circleci/.nix-profile/etc/profile.d/nix.sh' >> "$BASH_ENV"
      - save_cache:
          key: nix-{{ checksum "/tmp/nix-cache-key" }}
          paths:
          - /nix
          - /home/circleci/.nix-profile
          - /home/circleci/.nix-channels
          - /home/circleci/.nix-defexpr
          - /home/circleci/.config/nix
  import_gpg_key:
    description: "Setup GPG for signing artifacts as part of a release"
    steps:
      - run:
          name: Import Digital Asset GPG key
          command: |
            nix-shell \
              --pure \
              --keep gpg_code_signing \
              --run bash \<<'EOF'
                  set -euo pipefail

                  echo ${gpg_code_signing} | base64 -d | gpg --import --quiet
            EOF
  run_release:
    description: "GitHub Release"
    steps:
      - restore_cache:
          keys:
            - daml-finance-dars-{{ .Revision }}
      - run:
          name: "Run GitHub Release"
          command: |
            nix-shell \
              --pure \
              --keep GITHUB_TOKEN \
              --keep CIRCLE_BRANCH \
              --run bash \<<'EOF'
                  set -euo pipefail

                  while read PACKAGE_NAME PACKAGE_PATH
                  do
                    CONFIG="package/${PACKAGE_PATH}/daml.yaml"
                    VERSION=`yq e '.version' ${CONFIG}`
                    TAG="${PACKAGE_NAME}/${VERSION}"
                    echo "Processing package '${PACKAGE_NAME}' with tag '${TAG}'..."

                    if [[ `git tag -l ${TAG} | wc -l` -eq 0 ]]; then
                      DAR_PREFIX=`yq e '.name' ${CONFIG}`
                      DAR="${DAR_PREFIX}-${VERSION}.dar"
                      gpg --armor --detach-sign .dars/${DAR}

                      if [[ `echo $VERSION | grep ".99." | wc -l` -eq 0 ]] ; then
                        gh release create ${TAG} .dars/${DAR}* \
                          --target ${CIRCLE_BRANCH} \
                          --title ${TAG} \
                          --notes "See Daml-Finance [documentation](https://docs.daml.com/daml-finance/index.html) for further details."
                      else
                        gh release create ${TAG} .dars/${DAR}* \
                          --prerelease \
                          --target ${CIRCLE_BRANCH} \
                          --title ${TAG} \
                          --notes "Development snapshot of package '${PACKAGE_NAME}'. Use at your own risk."
                      fi
                      echo -e "Successfully released package '${PACKAGE_NAME}' with tag '${TAG}'.\n"
                    else
                      echo -e "Tag '${TAG}' already exists for package '${PACKAGE_NAME}'; Ignoring.\n"
                    fi
                  done < <(yq e '.local.packages
                    | to_entries
                    | map(.value.package)
                    | .[]
                    | select(.path == "main*")
                    | .name + " " + .path' package/packages.yaml)
            EOF
  run_assembly:
    description: "Build Assembly for docs.daml.com"
    steps:
      - restore_cache:
          keys:
            - docs-build-{{ .Revision }}
      - run:
          name: Run assembly build
          command: |
            set -euo pipefail

            # Build assembly
            make ci-assembly

            nix-shell \
              --pure \
              --keep GITHUB_TOKEN \
              --keep ARTIFACTORY_USERNAME \
              --keep ARTIFACTORY_PASSWORD \
              --run bash \<<'EOF'
                  set -euo pipefail

                  # Compress and zip assembly
                  ASSEMBLY_VERSION=`yq e '.version' daml.yaml`
                  DOC_SOURCES_TAR="daml-finance-doc-sources-${ASSEMBLY_VERSION}.tar.gz"
                  tar czvf ${DOC_SOURCES_TAR} -C docs/.assembly .

                  # Push assembly to Artifactory
                  URL="https://digitalasset.jfrog.io/artifactory/assembly/daml-finance/${ASSEMBLY_VERSION}/${DOC_SOURCES_TAR}"
                  curl \
                    -u "${ARTIFACTORY_USERNAME}:${ARTIFACTORY_PASSWORD}" \
                    -sSf \
                    -X PUT \
                    -T "${DOC_SOURCES_TAR}" \
                    "${URL}"

                  # Tag assembly in GitHub
                  TAG="assembly/${ASSEMBLY_VERSION}"
                  COMMIT=`git rev-parse HEAD`

                  gh api \
                    --method POST \
                    -H "Accept: application/vnd.github+json" \
                    /repos/digital-asset/daml-finance/git/refs \
                    -f ref='refs/tags/'${TAG}'' \
                    -f sha=''${COMMIT}''
            EOF

jobs:
  build:
    executor: daml-finance-executor
    steps:
      - checkout
      - setup_nix
      - run:
          name: Validate Copyright headers
          command:
            make ci-headers-check
      - run:
          name: Validate package versions
          command:
            nix-shell --pure --run 'export LANG=C.UTF-8; packell versioning validate'
      - run:
          name: Validate package data-dependencies
          command:
            nix-shell --pure --run 'export LANG=C.UTF-8; packell data-dependencies validate'
      - run:
          name: Build source and packages
          command:
            make ci-build
      - run:
          name: Validate packages
          command:
            make ci-validate
      - run:
          name: Build java codegen
          command:
            make ci-build-java
      - run:
          name: Build javascript codegen
          command:
            make ci-build-js
      - run:
          name: Execute tests
          command:
            make ci-test
      - run:
          name: Build docs
          command: |
            nix-shell --pure --run 'pipenv install'
            make ci-docs
      - save_cache:
          paths:
            - .dars
          key: daml-finance-dars-{{ .Revision }}
      - save_cache:
          paths:
            - docs/build
          key: docs-build-{{ .Revision }}
  release:
    executor: daml-finance-executor
    steps:
      - checkout
      - setup_nix
      - import_gpg_key
      - run_release
  assembly:
    executor: daml-finance-executor
    steps:
      - checkout
      - setup_nix
      - run_assembly

workflows:
  version: 2
  build:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - /^(R|r)elease.*$/
                - /^(A|a)ssembly.*$/
  release:
    jobs:
      - build:
          filters:
            branches:
              only:
                - /^(R|r)elease.*$/
      - hold:
          type: approval
          requires:
            - build
      - release:
          context:
            - github-fin-eng-context
            - npn-publish
          requires:
            - hold
          filters:
            branches:
              only:
                - /^(R|r)elease.*$/
  assembly:
    jobs:
      - build:
          filters:
            branches:
              only:
                - /^(A|a)ssembly.*$/
      - hold:
          type: approval
          requires:
            - build
      - assembly:
          context:
            - github-fin-eng-context
          filters:
            branches:
              only:
                - /^(A|a)ssembly.*$/
          requires:
            - hold
