-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Test.Util.HoldingDuplicates.Factory where

import DA.Set (singleton)
import Daml.Finance.Interface.Holding.Factory qualified as HoldingFactory (Create(..), F, View(..))
import Daml.Finance.Interface.Types.Common.Types (Id, PartiesMap)
import Daml.Finance.Interface.Types.Common.Types qualified as HoldingStandard (HoldingStandard(..))
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Test.Util.HoldingDuplicates.Fungible (Fungible(..))
import Daml.Finance.Test.Util.HoldingDuplicates.NonFungible (NonFungible(..))
import Daml.Finance.Test.Util.HoldingDuplicates.NonTransferable (NonTransferable(..))
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Implementation of a factory template for holdings.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    id : Id
      -- ^ Identifier for the factory.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance HoldingFactory.F for Factory
      where
        view = HoldingFactory.View with provider; id
        create' HoldingFactory.Create{instrument; account; amount; observers} = do
          assertMsg "amount must be positive" $ amount > 0.0
          case instrument.holdingStandard of
            HoldingStandard.Fungible ->
              toInterfaceContractId <$>
                create Fungible with instrument; account; amount; observers; lock = None
            HoldingStandard.NonFungible ->
              toInterfaceContractId <$>
                create NonFungible with instrument; account; amount; observers; lock = None
            HoldingStandard.NonTransferable ->
              toInterfaceContractId <$>
                create NonTransferable with instrument; account; amount; observers; lock = None

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None
