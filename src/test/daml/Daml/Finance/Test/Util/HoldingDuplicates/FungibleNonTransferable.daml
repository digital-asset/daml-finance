-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Test.Util.HoldingDuplicates.FungibleNonTransferable where

-- | Test Implementation.
-- This module contains a copy of the code from the Daml.Finance.Holding package. It is used
-- specifically for testing purposes, allowing the instantiation of an alternate implementation of
-- holdings.

import DA.Set (fromList, singleton)
import Daml.Finance.Holding.Util (mergeImpl, splitImpl)
import Daml.Finance.Interface.Holding.Base qualified as Base (I, View(..))
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I, View(..))
import Daml.Finance.Interface.Types.Common.Types (AccountKey(..), InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Interface.Util.Lockable qualified as Lockable (I, Lock(..), View(..), getLockers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)
import Daml.Finance.Util.Lockable (acquireImpl, isValidLock, releaseImpl)

-- | Type synonym for `FungibleNonTransferable`.
type T = FungibleNonTransferable

-- | Implementation of a fungible holding.
-- The `FungibleNonTransferable` template implements the interface `Fungible.I` (which requires
-- `Base.I`, `Lockable.I`, and `Disclosure.I` to be implemented), but not the `Transferable.I`.
template FungibleNonTransferable
  with
    instrument : InstrumentKey
      -- ^ The instrument of which units are held.
    account : AccountKey
      -- ^ The account at which the holding is held. Defines the holding's owner and custodian.
    amount : Decimal
      -- ^ Number of units.
    lock : Optional Lockable.Lock
      -- ^ An optional lock for the holding.
    observers : PartiesMap
      -- ^ Observers.
  where
    signatory account.custodian, account.owner, Lockable.getLockers this
    observer Disclosure.flattenObservers observers

    ensure amount > 0.0 && isValidLock lock

    interface instance Disclosure.I for FungibleNonTransferable where
      view = Disclosure.View with
        disclosureControllers = fromList [account.owner, account.custodian]; observers
      setObservers = setObserversImpl @_ @Disclosure.I this None
      addObservers = addObserversImpl @_ @Disclosure.I this None
      removeObservers = removeObserversImpl @_ @Disclosure.I this None

    interface instance Lockable.I for FungibleNonTransferable where
      view = Lockable.View with lock; controllers = singleton account.owner
      acquire = acquireImpl this.lock (\lock -> this with lock)
      release = releaseImpl this.lock (\lock -> this with lock)

    interface instance Base.I for FungibleNonTransferable where
      view = Base.View with instrument; account; amount

    interface instance Fungible.I for FungibleNonTransferable where
      view = Fungible.View with modifiers = singleton account.owner
      split = splitImpl (toInterface @Fungible.I this) (\amount -> this with amount)
      merge = mergeImpl (toInterface @Fungible.I this) (.amount) (\amount -> this with amount)
