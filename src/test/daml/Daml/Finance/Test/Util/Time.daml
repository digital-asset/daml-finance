-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Test.Util.Time
  ( createClockUpdateEvent
  , createDateClock
  ) where

import DA.Set (toList)
import Daml.Finance.Data.Time.DateClock (DateClock(..))
import Daml.Finance.Data.Time.DateClock.Types (Unit(..))
import Daml.Finance.Interface.Data.TimeObservable qualified as TimeObservable (I)
import Daml.Finance.Interface.Types.Common.Types (Id(..), Parties)
import Daml.Finance.Interface.Types.Date.Classes (HasUTCTimeConversion(..))
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I)
import Daml.Finance.Lifecycle.Event.DateClockUpdate (DateClockUpdateEvent(..))
import Daml.Script

-- | Given a `Date`, it creates a `DateClockUpdateEvent`.
createClockUpdateEvent : Parties -> Date -> Parties
  -> Script (ContractId Event.I)
createClockUpdateEvent providers today observers = do
  let
    description = show today
    id = Id description
    date = Unit today
    clock = DateClock with providers; date; id; description; observers
  eventCid <- toInterfaceContractId <$> submitMulti (toList providers) [] do
    createCmd DateClockUpdateEvent with
      providers; id; description; date = today; observers; eventTime = toUTCTime date
  pure eventCid

-- | Given a `Date`, it creates a `DateClock` and returns it as a `TimeObservable`.
createDateClock : Parties -> Date -> Parties
  -> Script (ContractId TimeObservable.I)
createDateClock providers today observers = do
  let
    description = show today
    id = Id description
    date = Unit today
  toInterfaceContractId <$> submitMulti (toList providers) [] do
    createCmd DateClock with
      providers; date; id; description; observers
