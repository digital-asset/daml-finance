-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

module Daml.Finance.Test.Util.Account where

import DA.Assert ((===))
import DA.List (head)
import DA.Map qualified as M (fromList)
import DA.Set qualified as S (empty, fromList, singleton)
import Daml.Finance.Account.Account qualified as Account (Factory(..))
import Daml.Finance.Interface.Account.Account qualified as Account (Controllers(..), Credit(..), Debit(..), GetCid(..), I, R)
import Daml.Finance.Interface.Account.Factory qualified as Account (Create(..), F)
import Daml.Finance.Interface.Holding.Base qualified as Base (GetView(..), I)
import Daml.Finance.Interface.Holding.Factory qualified as Holding (F)
import Daml.Finance.Interface.Types.Common.Types (AccountKey(..), Id(..), InstrumentKey, Parties)
import Daml.Finance.Interface.Util.Common (qty)
import Daml.Finance.Test.Util.Common (submitExerciseInterfaceByKeyCmdHelper, submitMustFailExerciseInterfaceByKeyCmdHelper)
import Daml.Script

-- | Options for transfer controllers.
data ControlledBy
  = Owner
    -- ^ Owner controls inbound and outbound transfers.
  | Custodian
    -- ^ Custodian controls inbound and outbound transfers.
  | OwnerAndCustodian
    -- ^ Owner and custodian jointly control inbound and outbound transfers.
  | OwnerWithAutoApproval
    -- ^ Owner controls outbound transfers, and inbound transfers are auto-approved.
  deriving (Eq, Show)

-- | Get account controllers depending on controlledBy.
toControllers : Party -> Party -> ControlledBy -> Account.Controllers
toControllers custodian owner controlledBy =
  case controlledBy of
    Owner -> Account.Controllers with
      outgoing = S.singleton owner; incoming = S.singleton owner
    Custodian -> Account.Controllers with
      outgoing = S.singleton custodian; incoming = S.singleton custodian
    OwnerAndCustodian -> Account.Controllers with
      outgoing = S.fromList [owner, custodian]; incoming = S.fromList [owner, custodian]
    OwnerWithAutoApproval -> Account.Controllers with
      outgoing = S.singleton owner; incoming = S.empty

-- | Create factory for `Account`.
createFactory : Party -> [(Text, Parties)] -> Script (ContractId Account.Factory)
createFactory provider observers = submit provider do
  createCmd Account.Factory with provider; observers = M.fromList observers

-- | Create `Account`.
createAccount : Text -> [Party] -> ContractId Account.F -> ContractId Holding.F ->
  [(Text, Parties)] -> ControlledBy -> Party -> Party -> Script AccountKey
createAccount description readAs factoryCid holdingFactoryCid
  observers controlledBy custodian owner = do
      let
        account = AccountKey with
          custodian; owner; id = Id $ show owner <> "@" <> show custodian <> "/" <> description
      submitMulti [custodian, owner] readAs do
        exerciseCmd factoryCid Account.Create with
          account; holdingFactoryCid; controllers = toControllers custodian owner controlledBy
          observers = M.fromList observers; description
      pure account

-- | Credit an `Account`.
credit : [Party] -> InstrumentKey -> Decimal -> AccountKey -> Script (ContractId Base.I)
credit readAs instrument amount account =
  submitExerciseInterfaceByKeyCmdHelper @Account.R @Account.I [account.custodian, account.owner]
  readAs account
  (Account.GetCid with viewer = account.owner)
  (Account.Credit with quantity = qty amount instrument)

-- | Debit an `Account`.
debit : [Party] -> Party -> ContractId Base.I -> Script ()
debit readAs holder holdingCid = do
  v <- submit holder do exerciseCmd holdingCid Base.GetView with viewer = holder
  v.account.owner === holder
  submitExerciseInterfaceByKeyCmdHelper @Account.R @Account.I
    [v.account.custodian, holder] readAs v.account
    (Account.GetCid with viewer = holder) (Account.Debit with holdingCid)

-- | Utilty function for exercising an interface by key.
submitExerciseInterfaceByKeyCmd : forall t2 c2 b.
  (HasInterfaceTypeRep t2, HasTemplateTypeRep t2, HasToAnyTemplate t2, HasFromAnyTemplate t2,
   HasFromAnyChoice t2 c2 b, HasToAnyChoice t2 c2 b, HasExercise t2 c2 b)
   => [Party] -> [Party] -> AccountKey -> c2 -> Script b
submitExerciseInterfaceByKeyCmd actAs readAs k arg =
  submitExerciseInterfaceByKeyCmdHelper @Account.R @t2 actAs readAs k
  (Account.GetCid with viewer = head actAs) arg

-- | Utilty function for exercising an interface by key.
submitMustFailExerciseInterfaceByKeyCmd : forall t2 c2.
  (HasInterfaceTypeRep t2, HasTemplateTypeRep t2, HasToAnyTemplate t2, HasFromAnyTemplate t2,
   HasFromAnyChoice t2 c2 (), HasToAnyChoice t2 c2 (), HasExercise t2 c2 ())
   => [Party] -> [Party] -> AccountKey -> c2 -> Script ()
submitMustFailExerciseInterfaceByKeyCmd actAs readAs k arg =
  submitMustFailExerciseInterfaceByKeyCmdHelper @Account.R @t2 actAs readAs k
  (Account.GetCid with viewer = head actAs) arg
