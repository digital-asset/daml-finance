-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

module Daml.Finance.Test.Util.HoldingFactory where

import DA.List (head)
import Daml.Finance.Interface.Holding.Factory (Reference(..))
import Daml.Finance.Interface.Holding.Factory qualified as HoldingFactory (F, GetCid(..), R, toKey)
import Daml.Finance.Interface.Types.Common.Types (HoldingFactoryKey)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I)
import Daml.Finance.Test.Util.Common (submitExerciseInterfaceByKeyCmdHelper, submitMustFailExerciseInterfaceByKeyCmdHelper)
import Daml.Script

-- | Create a holding factory with refernce.
createHoldingFactory :
  forall t.
  ( HasAgreement t
  , HasTemplateTypeRep t
  , HasToAnyTemplate t
  , HasFromAnyTemplate t
  , HasToInterface t HoldingFactory.F
  )
  => t -> Script HoldingFactoryKey
createHoldingFactory holdingFactory = do
  let
    factory = toInterface @HoldingFactory.F holdingFactory
    factoryView = view factory
  cid <- toInterfaceContractId @HoldingFactory.F <$> submit factoryView.provider do
    createCmd holdingFactory
  submit factoryView.provider do
    createCmd Reference with
      factoryView; cid; observers = (view $ toInterface @Disclosure.I factory).observers
  pure $ HoldingFactory.toKey factoryView

-- | Utilty function for exercising an interface by key.
submitExerciseInterfaceByKeyCmd : forall t2 c2 b.
  ( HasInterfaceTypeRep t2
  , HasTemplateTypeRep t2
  , HasToAnyTemplate t2
  , HasFromAnyTemplate t2
  , HasFromAnyChoice t2 c2 b
  , HasToAnyChoice t2 c2 b
  , HasExercise t2 c2 b
  )
  => [Party] -> [Party] -> HoldingFactoryKey -> c2 -> Script b
submitExerciseInterfaceByKeyCmd actAs readAs k arg =
  submitExerciseInterfaceByKeyCmdHelper @HoldingFactory.R @t2 actAs readAs k
    (HoldingFactory.GetCid with viewer = head actAs) arg

-- | Utilty function for exercising an interface by key.
submitMustFailExerciseInterfaceByKeyCmd : forall t2 c2 b.
  ( HasInterfaceTypeRep t2
  , HasTemplateTypeRep t2
  , HasToAnyTemplate t2
  , HasFromAnyTemplate t2
  , HasFromAnyChoice t2 c2 b
  , HasToAnyChoice t2 c2 b
  , HasExercise t2 c2 b
  )
  => [Party] -> [Party] -> HoldingFactoryKey -> c2 -> Script ()
submitMustFailExerciseInterfaceByKeyCmd actAs readAs k arg =
  submitMustFailExerciseInterfaceByKeyCmdHelper @HoldingFactory.R @t2 actAs readAs k
    (HoldingFactory.GetCid with viewer = head actAs) arg