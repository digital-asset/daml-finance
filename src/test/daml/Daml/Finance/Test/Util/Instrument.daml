-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

module Daml.Finance.Test.Util.Instrument where

import DA.List (head)
import DA.Map (fromList)
import Daml.Finance.Instrument.Token.Factory qualified as Token (Factory(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (GetCid(..), R)
import Daml.Finance.Interface.Instrument.Token.Factory qualified as TokenFactory (Create(..), I)
import Daml.Finance.Interface.Instrument.Token.Types (Token(..))
import Daml.Finance.Interface.Types.Common.Types (HoldingStandard(..), Id(..), InstrumentKey(..), Parties)
import Daml.Finance.Test.Util.Common (submitExerciseInterfaceByKeyCmdHelper)
import Daml.Script

-- | Originate a `Token` Instrument.
originate : Party -> Party -> Text -> HoldingStandard -> Text-> [(Text, Parties)] -> Time
  -> Script InstrumentKey
originate depository issuer label holdingStandard description observers timestamp = do
  tokenFactoryCid <- toInterfaceContractId @TokenFactory.I <$> submit issuer do
    createCmd Token.Factory with provider = issuer; observers = mempty
  let
    instrumentKey = InstrumentKey with
      depository
      issuer
      id = Id label
      version = "0"
      holdingStandard
    token = Token with
      instrument = instrumentKey
      validAsOf = timestamp
      description
  submitMulti [depository, issuer] [] do
    exerciseCmd tokenFactoryCid TokenFactory.Create with
      token
      observers = fromList observers
  submitMulti [depository, issuer] [] do archiveCmd tokenFactoryCid
  pure instrumentKey

-- | Utility for exercising an interface by key.
submitExerciseInterfaceByKeyCmd : forall t2 c2 b.
  ( HasInterfaceTypeRep t2
  , HasTemplateTypeRep t2
  , HasToAnyTemplate t2
  , HasFromAnyTemplate t2
  , HasFromAnyChoice t2 c2 b
  , HasToAnyChoice t2 c2 b
  , HasExercise t2 c2 b
  )
  => [Party] -> [Party] -> InstrumentKey -> c2 -> Script b
submitExerciseInterfaceByKeyCmd actAs readAs k arg = submitExerciseInterfaceByKeyCmdHelper
  @Instrument.R @t2 actAs readAs k (Instrument.GetCid with viewer = head actAs) arg
