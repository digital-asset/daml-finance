-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Data.Test.Observation where

import DA.Assert ((===))
import DA.Date
import DA.Time
import DA.Map qualified as M (fromList)
import DA.Set (singleton)
import Daml.Finance.Data.Numeric.Observation
import Daml.Finance.Interface.Data.Numeric.Observation (GetView(..))
import Daml.Finance.Interface.Data.Numeric.Observation.Factory qualified as Factory (Create(..), F, Remove(..))
import Daml.Finance.Interface.Data.NumericObservable qualified as NumericObservable (I, Observe(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..))
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Script

-- | Test `Observation`.
testObservation : Script ()
testObservation = script do
  [reuters, publicParty] <- createParties ["Reuters", "PublicParty"]

  let
    toTime d = time d 0 0 0
    observations = M.fromList $ fmap (\(d,v) -> (toTime d, v))
      [ (date 2019 Jan 16, -0.00311)
      , (date 2019 Feb 16, -0.00266)
      ]
    observers = M.fromList [("PublicParty", singleton publicParty)]

  -- Create observation via factory
  observationFactoryCid <- toInterfaceContractId @Factory.F <$> submit reuters do
    createCmd Factory with provider = reuters; observers
  observationCid <- submit reuters do
    exerciseCmd observationFactoryCid Factory.Create with
      provider = reuters
      observations
      observers
      id = Id "Observation"

  -- Get view
  view <- submit reuters do
    exerciseCmd observationCid GetView with viewer = reuters

  view.observations === observations

  -- Observe
  o <- submit reuters do
    exerciseCmd (toInterfaceContractId @NumericObservable.I observationCid)
      NumericObservable.Observe with t = toTime $ date 2019 Jan 16; actors = singleton reuters

  o === -0.00311

  -- Archive observation (via factory)
  submit reuters do
    exerciseCmd observationFactoryCid Factory.Remove with
      observationCid
      actors = singleton reuters

  pure ()
