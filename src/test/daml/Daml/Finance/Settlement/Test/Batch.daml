-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.Test.Batch where

import DA.Map qualified as M (fromList)
import DA.Set qualified as S (fromList, singleton, toList)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Cancel(..), Settle(..))
import Daml.Finance.Interface.Settlement.Factory qualified as Settlement (F, Instruct(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..), Execute(..))
import Daml.Finance.Interface.Settlement.RouteProvider qualified as RouteProvider (Discover(..), I)
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..), Step(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..))
import Daml.Finance.Interface.Util.Common (qty)
import Daml.Finance.Settlement.Factory (Factory(..))
import Daml.Finance.Settlement.RouteProvider.SingleCustodian (SingleCustodian(..))
import Daml.Finance.Test.Util.Account qualified as Account (ControlledBy(..), createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyNoObservers, verifyOwnerOfHolding)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate)
import Daml.Script

-- | Parties involved in the test script.
data TestParties = TestParties
  with
    bank : Party
      -- ^ Acts as custodian in the respective holdings (for both the cash and equity instrument).
    cb : Party
      -- ^ Depository and issuer of the cash instrument.
    csd : Party
      -- ^ Depository of the equity instrument.
    issuer : Party
      -- ^ Issuer of the equity instrument.
    buyer : Party
      -- ^ Buyer of the equity instrument.
    seller : Party
      -- ^ Seller of the equity instrument.
    publicParty : Party
      -- ^ The public party. Every party can readAs the public party.

-- DvP via settlement chain and instructions.
-- Seller transfers equity to buyer in exchange for cash.
-- +----------------------------------------+
-- | Accounts                               |
-- +----------------+-----------------------+
-- | structure:     | used for:             |
-- +----------------+-----------------------+
-- |     Bank       |                       |
-- |     /  \       | commercial bank money |
-- | Buyer  Seller  |                       |
-- |     \  /       | securities            |
-- |     Bank       |                       |
-- +----------------+-----------------------+
run: Bool -> Bool -> Script ()
run settleCashOnledger bankIsRequesting = script do
  TestParties{..} <- setupParties

  -- Account and holding factory
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory bank []
  holdingFactoryCid <- toInterfaceContractId <$> submit bank do
    createCmd Fungible.Factory with
      provider = bank; observers = M.fromList [("PublicParty", S.singleton publicParty)]

  -- Originate instruments
  now <- getTime
  equityInstrument <- Instrument.originate csd issuer "AAPL" "Apple Inc." [] now
  cashInstrument <- Instrument.originate cb cb "USD" "United States Dollar" [] now

  -- Custody accounts
  [buyerCustodyAccount, sellerCustodyAccount] <-
    mapA (Account.createAccount "Custody Account" [] accountFactoryCid holdingFactoryCid []
      Account.Owner bank) [buyer, seller]

  -- Cash accounts
  [buyerCashAccount, sellerCashAccount] <- mapA (Account.createAccount "Cash Account" []
    accountFactoryCid holdingFactoryCid [] Account.Owner bank) [buyer, seller]

  -- Distribute equity
  equityHoldingCid <- Account.credit [] equityInstrument 1_000.0 sellerCustodyAccount

  -- Settlement steps
  let
    steps =
      [ Step with sender = seller; receiver = buyer; quantity = qty 1_000.0 equityInstrument
      , Step with sender = buyer; receiver = seller; quantity = qty 200_000.0 cashInstrument
      ]

  -- Discover settlement routes
  routeProviderCid <- toInterfaceContractId @RouteProvider.I <$> submit bank do
    createCmd SingleCustodian with
      provider = bank; custodian = bank; observers = S.singleton publicParty
  routedSteps <- submit bank do
    exerciseCmd routeProviderCid RouteProvider.Discover with
      discoverors = S.singleton bank; contextId = None; steps

  -- Setup settlement factory
  settlementFactoryCid <- toInterfaceContractId @Settlement.F <$>
    submit bank do
      createCmd Factory with provider = bank; observers = S.singleton publicParty

  -- Instruct settlement
  let
    requestors = S.fromList $ if bankIsRequesting then [bank] else [buyer, seller]
    settlers = S.fromList [buyer, seller]
    instructCmd = submitMulti (S.toList requestors) [publicParty] do
      exerciseCmd settlementFactoryCid Settlement.Instruct with
        instructors = requestors; settlers; id = Id "APPL 1000@200.0USD"; description = "DVP"
        contextId = None; routedSteps; settlementTime = None

  -- Create batch and instructions, and then cancel
  (batchCid, _) <- instructCmd
  -- seller can't cancel batch
  submitMustFail seller do exerciseCmd batchCid Batch.Cancel with actors = S.singleton seller
  -- requestors can cancel batch
  submitMulti (S.toList requestors) [] do
    exerciseCmd batchCid Batch.Cancel with actors = requestors

  -- Create batch and instructions
  (batchCid, [equityInstructionCid, cashInstructionCid]) <- instructCmd

  -- Allocate and approve equity instruction
  (equityInstructionCid, _) <- submit seller do
    exerciseCmd equityInstructionCid Instruction.Allocate with
      actors = S.singleton seller; allocation = Pledge equityHoldingCid
  equityInstructionCid <- submit buyer do
    exerciseCmd equityInstructionCid Instruction.Approve with
      actors = S.singleton buyer; approval = TakeDelivery buyerCustodyAccount

  -- Allocate and approve cash instruction
  cashInstructionCid <- if settleCashOnledger
    then
      do
        -- Settle by on-ledger transfer
        cashHoldingCid <- Account.credit [] cashInstrument 200_000.0 buyerCashAccount
        (cashInstructionCid, _) <- submit buyer do
          exerciseCmd cashInstructionCid Instruction.Allocate with
            actors = S.singleton buyer; allocation = Pledge cashHoldingCid
        submit seller do
          exerciseCmd cashInstructionCid Instruction.Approve with
            actors = S.singleton seller; approval = TakeDelivery sellerCashAccount
    else
      do
        -- Settle by off ledger transfer
        (cashInstructionCid, _) <- submitMulti [buyer, bank] [] do
          exerciseCmd cashInstructionCid Instruction.Allocate with
            actors = S.fromList [buyer, bank]; allocation = SettleOffledger
        submitMulti [seller, bank] [] do
          exerciseCmd cashInstructionCid Instruction.Approve with
            actors = S.fromList [seller, bank]; approval = SettleOffledgerAcknowledge

  -- Settle batch
  -- neither the bank, nor seller, nor buyer can execute an instruction
  submitMustFail bank do
    exerciseCmd cashInstructionCid Instruction.Execute with actors = S.singleton bank
  submitMustFail seller do
    exerciseCmd cashInstructionCid Instruction.Execute with actors = S.singleton seller
  submitMustFail buyer do
    exerciseCmd cashInstructionCid Instruction.Execute with actors = S.singleton buyer
  -- the bank can't settle the batch
  if bankIsRequesting then
    submitMustFail bank do
      exerciseCmd batchCid Batch.Settle with actors = S.singleton bank
  else
    pure ()
  -- any of the settlers can settle the batch (i.e., buyer or seller)
  cids <- submitMulti [buyer] [publicParty] do
    exerciseCmd batchCid Batch.Settle with actors = S.singleton buyer

  -- Assert state
  let ts = zip [buyer, seller] cids
  Holding.verifyOwnerOfHolding ts
  Holding.verifyNoObservers ts

  pure ()

-- Settle cash on-ledger
-- with bank as requestor
run1 : Script ()
run1 = run True True
-- with buyer and seller as requestors
run2 : Script ()
run2 = run True False

-- Settle cash off-ledger
-- with bank as requestor
run3 : Script ()
run3 = run False True
-- with buyer and seller as requestors
run4 : Script ()
run4 = run False False

-- | Settup parties for the scripts
setupParties : Script TestParties
setupParties = do
  [cb, csd, bank, issuer, buyer, seller, publicParty] <- createParties
    ["CentralBank", "CentralSecurityDepository", "Bank", "Issuer", "Buyer", "Seller", "PublicParty"]
  pure TestParties with cb; csd; bank; issuer; buyer; seller; publicParty
