-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.Test.Batch where

import DA.Map qualified as M (empty)
import DA.Set (empty, singleton)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty)
import Daml.Finance.Interface.Settlement.Instructable qualified as Instructable (Instruct(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Settleable qualified as Settleable (Settle(..))
import Daml.Finance.Interface.Settlement.Types (Step(..))
import Daml.Finance.Settlement.Batch (BatchFactory(..))
import Daml.Finance.Test.Util.Account qualified as Account (createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Script

-- | Parties involved in the test script.
data TestParties = TestParties
  with
    bank : Party
      -- ^ Acts as custodian in the respective holdings (for both the cash and equity instrument).
    cb : Party
      -- ^ Depository and issuer of the cash instrument.
    depository : Party
      -- ^ Depository of the equity instrument.
    issuer : Party
      -- ^ Issuer of the equity instrument.

-- | DvP via settlement chain and instructions.
-- Bank transfers cash to Issuer in exchange for an equity instrument.
run : Script ()
run = script do
  TestParties{..} <- setupParties

  -- Account and holding factory
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory bank []
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [bank] [] do
    createCmd Fungible.Factory with provider = bank; observers = M.empty

  -- Create accounts
  [bankAccount, issuerAccount] <- mapA (Account.createAccount [] accountFactoryCid holdingFactoryCid [] bank) [bank, issuer]

  -- Distribute assets
  now <- getTime
  equityInstrument <- Instrument.originate depository issuer "AAPL" [] now
  equityTransferableCid <- Account.credit [] equityInstrument 1_000.0 issuerAccount
  cashInstrument <- Instrument.originate cb cb "USD" [] now
  cashTransferableCid <- Account.credit [] cashInstrument 200_000.0 bankAccount

  -- Instruct settlement
  let
    steps =
      [ Step with sender = issuer; receiver = bank; quantity = Instrument.qty 1_000.0 equityInstrument
      , Step with sender = bank; receiver = issuer; quantity = Instrument.qty 200_000.0 cashInstrument
      ]
  instructableCid <- submitMulti [bank] [] do createCmd BatchFactory with provider = bank; observers = empty
  (containerSettleableCid, [equityInstructionCid, cashInstructionCid]) <-
    submitMulti [bank] [] do exerciseCmd instructableCid Instructable.Instruct with instructors = singleton bank; settler = bank; id = "DVP"; steps

  -- Allocate instructions
  equityInstructionCid <- submitMulti [issuer] [] do exerciseCmd equityInstructionCid Instruction.Allocate with transferableCid = equityTransferableCid
  cashInstructionCid <- submitMulti [bank] [] do exerciseCmd cashInstructionCid Instruction.Allocate with transferableCid = cashTransferableCid

  -- Approve instructions
  equityInstructionCid <- submitMulti [bank] [] do exerciseCmd equityInstructionCid Instruction.Approve with receiverAccount = bankAccount
  cashInstructionCid <- submitMulti [issuer] [] do exerciseCmd cashInstructionCid Instruction.Approve with receiverAccount = issuerAccount

  -- Settle container
  [equityTransferableCid, cashTransferableCid] <- submitMulti [bank] [] do exerciseCmd containerSettleableCid Settleable.Settle

  -- Assert state
  Holding.verifyOwnerOfHolding [(bank, equityTransferableCid), (issuer, cashTransferableCid)]

  pure ()

setupParties : Script TestParties
setupParties = do
  [cb, depository, bank, issuer] <- createParties ["CentralBank", "CSD", "Bank", "Issuer"]
  pure TestParties with cb, depository, bank, issuer
