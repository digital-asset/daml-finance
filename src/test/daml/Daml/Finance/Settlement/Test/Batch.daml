-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.Test.Batch where

import DA.Map qualified as M (empty)
import DA.Set (empty, singleton)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Factory qualified as Factory (I, Instruct(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..), Step(..))
import Daml.Finance.Interface.Types.Common (Id(..))
import Daml.Finance.Settlement.Factory (Factory(..))
import Daml.Finance.Test.Util.Account qualified as Account (createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate)
import Daml.Script

-- | Parties involved in the test script.
data TestParties = TestParties
  with
    bank : Party
      -- ^ Acts as custodian in the respective holdings (for both the cash and equity instrument).
    cb : Party
      -- ^ Depository and issuer of the cash instrument.
    csd : Party
      -- ^ Depository of the equity instrument.
    issuer : Party
      -- ^ Issuer of the equity instrument.
    buyer : Party
      -- ^ Buyer of the equity instrument.
    seller : Party
      -- ^ Seller of the equity instrument.

-- | DvP via settlement chain and instructions.
-- Seller transfers equity to buyer in exchange for cash.
-- +----------------------------------------+
-- | Accounts                               |
-- +----------------+-----------------------+
-- | structure:     | used for:             |
-- +----------------+-----------------------+
-- |     Bank       |                       |
-- |     /  \       | commercial bank money |
-- | Buyer  Seller  |                       |
-- |     \  /       | securities            |
-- |     Bank       |                       |
-- +----------------+-----------------------+
run: Bool -> Script ()
run settleCashOnLedger = script do
  TestParties{..} <- setupParties

  -- Account and holding factory
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory bank []
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [bank] [] do
    createCmd Fungible.Factory with provider = bank; observers = M.empty

  -- Originate instruments
  now <- getTime
  equityInstrument <- Instrument.originate csd issuer "AAPL" "Apple Inc." [] now
  cashInstrument <- Instrument.originate cb cb "USD" "United States Doller" [] now

  -- Custody accounts
  [buyerCustodyAccount, sellerCustodyAccount] <- mapA (Account.createAccount "Custody Account" [] accountFactoryCid holdingFactoryCid [] bank) [buyer, seller]

  -- Cash accounts
  [buyerCashAccount, sellerCashAccount] <- mapA (Account.createAccount "Cash Account" [] accountFactoryCid holdingFactoryCid [] bank) [buyer, seller]

  -- Distribute equity
  equityTransferableCid <- Account.credit [] equityInstrument 1_000.0 sellerCustodyAccount

  -- Instruct settlement
  let
    steps =
      [ Step with sender = seller; receiver = buyer; quantity = Instrument.qty 1_000.0 equityInstrument
      , Step with sender = buyer; receiver = seller; quantity = Instrument.qty 200_000.0 cashInstrument
      ]
  settlementFactoryCid <- toInterfaceContractId @Factory.I <$> submitMulti [bank] [] do createCmd Factory with provider = bank; observers = empty
  (batchCid, [equityInstructionCid, cashInstructionCid]) <-
    submitMulti [bank] [] do exerciseCmd settlementFactoryCid Factory.Instruct with instructors = singleton bank; settler = bank; id = Id "APPL 1000@200.0USD"; description = "DVP"; steps

  -- Allocate and approve equity instruction
  equityInstructionCid <- submitMulti [seller] [] do exerciseCmd equityInstructionCid Instruction.Allocate with allocation = Pledge equityTransferableCid
  equityInstructionCid <- submitMulti [buyer] [] do exerciseCmd equityInstructionCid Instruction.Approve with approval = TakeDelivery buyerCustodyAccount

  -- Allocate and approve cash instruction
  cashInstructionCid <- if settleCashOnLedger
    then
      do
        -- Settle by on-ledger transfer
        cashTransferableCid <- Account.credit [] cashInstrument 200_000.0 buyerCashAccount
        cashInstructionCid <- submitMulti [buyer] [] do exerciseCmd cashInstructionCid Instruction.Allocate with allocation = Pledge cashTransferableCid
        submitMulti [seller] [] do exerciseCmd cashInstructionCid Instruction.Approve with approval = TakeDelivery sellerCashAccount
    else
      do
        -- Settle by off ledger trasnfer
        cashInstructionCid <- submitMulti [buyer] [] do exerciseCmd cashInstructionCid Instruction.Allocate with allocation = SettleOffLedger
        submitMulti [seller] [] do exerciseCmd cashInstructionCid Instruction.Approve with approval = SettleOffLedgerAcknowledge

  -- Settle batch
  cids <- submitMulti [bank] [] do exerciseCmd batchCid Batch.Settle

  -- Assert state
  Holding.verifyOwnerOfHolding $ zip [buyer, seller] cids

  pure ()

-- | Settle cash using offledger
run1 : Script ()
run1 = run True

-- | Settle cash onledger
run2 : Script ()
run2 = run False

-- | Settup parties for the scripts
setupParties : Script TestParties
setupParties = do
  [cb, csd, bank, issuer, buyer, seller] <- createParties ["CentralBank", "CentralSecurityDepository", "Bank", "Issuer", "Buyer", "Seller"]
  pure TestParties with cb, csd, bank, issuer, buyer, seller
