-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.Test.Intermediated where

import DA.Map qualified as M (fromList)
import DA.Set (empty, singleton)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..), T)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Factory qualified as Factory (I, Instruct(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..), I)
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..), Step(..))
import Daml.Finance.Interface.Types.Common (Id(..))
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (AddObservers(..), I, RemoveObservers(..))
import Daml.Finance.Settlement.Factory (Factory(..))
import Daml.Finance.Test.Util.Account qualified as Account (createAccount, createFactory, credit, submitExerciseInterfaceByKeyCmd)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate)
import Daml.Script

data TestParties = TestParties
  with
    bank1 : Party
      -- ^ Custodian of Buyer's cash holdings.
    bank2 : Party
      -- ^ Custodian of Seller's cash holdings.
    cb : Party
      -- ^ The Central Bank is the depository and the issuer of the cash instrument. It also acts as custodian for the cash holdings of Bank 1 and Bank 2.
    csd : Party
      -- ^ The Central Security Depository is the depository of the equity instrument. It also acts as custodian for the equity holdings of Custodian 1 and Custodian 2.
    custodian1 : Party
      -- ^ Custodian of Buyer's equity holdings.
    custodian2 : Party
      -- ^ Custodian of Seller's equity holdings.
    issuer : Party
      -- ^ Issuer of the equity instrument.
    buyer : Party
      -- ^ Sends money to Seller.
    seller : Party
      -- ^ Sends shares to Buyer.
    agent : Party
      -- ^ Party that requests and executes the settlement of the transaction between Buyer and Seller.
    delegatee : Party
      -- ^ Party that is granted the right to allocate Buyer's holdings on her behalf.
    publicParty : Party
      -- ^ The public party. Every party can readAs the public party.

-- | Cross-custodial payment with delegation
run1 : Script ()
run1 = run True

-- | Cross-custodial payment without delegation
run2 : Script ()
run2 = run False

-- | Cross-custodial payment
-- Dvp of $ 200'000 vs 1'250 shares.
-- +------------------------------------------------------+
-- | Accounts                                             |
-- +------------------------------+-----------------------+
-- | structure:                   | used for:             |
-- +------------------------------+-----------------------+
-- |        Central Bank          |                       |
-- |            /  \              | central bank money    |
-- |     Bank 1      Bank 2       |                       |
-- |         /        \           | commercial bank money |
-- |    Buyer          Seller     |                       |
-- |         \        /           | securities            |
-- | Custodian 2      Custodian 1 |                       |
-- |            \   /             | securities            |
-- |  Central Security Depository |                       |
-- +------------------------------+-----------------------+
--
-- Setup and assumptions:
-- 1. The cash settles via Bank 1 and Bank 2, and the Central Bank (CB), i.e., Buyer -> Bank 1 -> CB -> Bank 2 -> Seller.
-- 2. The security settles via Custodian 1 and Custodian 2, and the Central Security Depository (CSD), i.e., Buyer <- Custodian 1 <- CSD -> Custodian 2 <- Seller.
-- 3. The cash with CB as custodian (i.e., Central Bank Money) settles off ledger, all other cash and securities settle on ledger.
-- 4. The CSD does not need credit/debit its accounts actively, rather this happens as a consequence of transfers of holdings (with CSD as custodian) between Custodian 1 and Custodian 2.
-- 5. The intermediary banks/custodians allocate and approve their instructions with the Buyer/Seller by a direct credit/debit of the Buyer's/Seller's accounts.
-- 6. Buyer and Seller allocate and approve their instructions by pledging holdings and taking delivery to their accounts, respectively.
run : Bool -> Script ()
run useDelegatee = script do
  TestParties{..} <- setupParties

  -- Account and holding factory
  let fp = [("FactoryProvider", singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory publicParty []
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [publicParty] [] do
    createCmd Fungible.Factory with provider = publicParty; observers = M.fromList fp

  -- Create accounts
  let createAccounts description custodian = mapA (Account.createAccount description [publicParty] accountFactoryCid holdingFactoryCid [] custodian)
  -- cash
  [buyerCashAccount] <- createAccounts "Cash Account" bank1 [buyer]
  [sellerCashAccount] <- createAccounts "Cash Account" bank2 [seller]
  [bank1CashAccount, bank2CashAccount] <- createAccounts "Cash Account" cb [bank1, bank2]
  -- asset
  [custodian1DepoAccount, custodian2DepoAccount] <- createAccounts "Securities Account" csd [custodian1, custodian2]
  [buyerDepoAccount] <- createAccounts "Securities Account" custodian2 [buyer]
  [custodian1OwnDepoAccount, sellerDepoAccount] <- createAccounts "Securities Account" custodian1 [custodian1, seller]

  -- Distribute
  -- cash
  now <- getTime
  cashInstrument <- Instrument.originate cb cb "USD" "United States Doller" [] now
  [buyerCashCid] <- mapA (Account.credit [publicParty] cashInstrument 200_000.0) [buyerCashAccount]

  -- assets
  assetInstrument <- Instrument.originate csd issuer "SHARE" "Stock" [] now
  [sellerAssetCid, custodian1AssetCid] <- mapA (Account.credit [publicParty] assetInstrument 1_250.0) [sellerDepoAccount, custodian1DepoAccount]

  -- Instruct settlement
  let
    cashQuantity = Instrument.qty 200_000.0 cashInstrument
    assetQuantity = Instrument.qty 1_250.0 assetInstrument
    steps =
      [ -- Payment route
        Step with sender = buyer; receiver = bank1; quantity = cashQuantity
      , Step with sender = bank1; receiver = bank2; quantity = cashQuantity
      , Step with sender = bank2; receiver = seller; quantity = cashQuantity
        -- Delivery route
      , Step with sender = seller; receiver = custodian1; quantity = assetQuantity
      , Step with sender = custodian1; receiver = custodian2; quantity = assetQuantity
      , Step with sender = custodian2; receiver = buyer; quantity = assetQuantity
      ]
  -- Create settlement factory
  settlementFactoryCid <- toInterfaceContractId @Factory.I <$> submitMulti [agent] [] do createCmd Factory with provider = agent; observers = empty

  -- Instruct settlement
  (batchCid, [buyerInstructionCid, bank1InstructionCid, bank2InstructionCid, sellerInstructionCid, custodian1InstructionCid, custodian2InstructionCid]) <-
    submitMulti [agent] [] do exerciseCmd settlementFactoryCid Factory.Instruct with instructors = singleton agent; settler = agent; id = Id "SHARE 200000.0@160.0USD DVP"; description = "Crosspayment"; steps

  -- Allocate and approve instructions
  buyerInstructionCid <-
    if useDelegatee then
      do
        -- delegate
        delegationCid <- submitMulti [buyer] [] do createCmd AllocationDelegation with delegator = buyer; delegatee
        -- disclose
        -- TODO: use explicit disclosure (once available)
        let observerContext = ("delegation123", singleton delegatee)
        buyerCashCid : ContractId Transferable.I <- coerceContractId <$> submitMulti [buyer] [] do exerciseCmd (coerceContractId buyerCashCid : ContractId Disclosure.I) Disclosure.AddObservers with disclosers = singleton buyer; observersToAdd = observerContext
        buyerInstructionCid : ContractId Instruction.I <- coerceContractId <$> submitMulti [buyer] [] do exerciseCmd (coerceContractId buyerInstructionCid : ContractId Disclosure.I) Disclosure.AddObservers with disclosers = singleton buyer; observersToAdd = observerContext
        Account.submitExerciseInterfaceByKeyCmd @Disclosure.I [buyer] [] buyerCashAccount Disclosure.AddObservers with disclosers = singleton buyer; observersToAdd = observerContext
        -- allocate (on behalf of buyer)
        instructionCid <- submitMulti [delegatee] [] do exerciseCmd delegationCid OnBehalfAllocation with id = observerContext._1; instructionCid = buyerInstructionCid; transferableCid = buyerCashCid
        -- undisclose
        Account.submitExerciseInterfaceByKeyCmd @Disclosure.I [buyer] [] buyerCashAccount Disclosure.RemoveObservers with disclosers = singleton buyer; observersToRemove = observerContext
        pure instructionCid
    else
      submitMulti [buyer] [] do exerciseCmd buyerInstructionCid Instruction.Allocate with allocation = Pledge buyerCashCid
  buyerInstructionCid <- submitMulti [bank1] [] do exerciseCmd buyerInstructionCid Instruction.Approve with approval = DebitSender
  bank2InstructionCid <- submitMulti [seller] [] do exerciseCmd bank2InstructionCid Instruction.Approve with approval = TakeDelivery sellerCashAccount
  bank2InstructionCid <- submitMulti [bank2] [] do exerciseCmd bank2InstructionCid Instruction.Allocate with allocation = CreditReceiver
  bank1InstructionCid <- submitMulti [bank1] [] do exerciseCmd bank1InstructionCid Instruction.Allocate with allocation = SettleOffLedger
  bank1InstructionCid <- submitMulti [bank2] [] do exerciseCmd bank1InstructionCid Instruction.Approve with approval = SettleOffLedgerAcknowledge
  sellerInstructionCid <- submitMulti [seller] [] do exerciseCmd sellerInstructionCid Instruction.Allocate with allocation = Pledge sellerAssetCid
  sellerInstructionCid <- submitMulti [custodian1] [] do exerciseCmd sellerInstructionCid Instruction.Approve with approval = DebitSender
  custodian1InstructionCid <- submitMulti [custodian1] [] do exerciseCmd custodian1InstructionCid Instruction.Allocate with allocation = Pledge custodian1AssetCid
  custodian1InstructionCid <- submitMulti [custodian2] [] do exerciseCmd custodian1InstructionCid Instruction.Approve with approval = TakeDelivery custodian2DepoAccount
  -- Can't settle batch before all `Instruction`s have been allocated and approved
  submitMultiMustFail [agent] [publicParty] do exerciseCmd batchCid Batch.Settle
  custodian2InstructionCid <- submitMulti [custodian2] [] do exerciseCmd custodian2InstructionCid Instruction.Allocate with allocation = CreditReceiver
  -- Buyer approves her instrcution with an incompatible approval
  custodian2InstructionCid <- submitMulti [buyer] [] do exerciseCmd custodian2InstructionCid Instruction.Approve with approval = SettleOffLedgerAcknowledge
  -- Settlement of batch must fail due to the incompatible approval
  submitMultiMustFail [agent] [publicParty] do exerciseCmd batchCid Batch.Settle
  -- Buyer approves her instruction with a compatible approval
  custodian2InstructionCid <- submitMulti [buyer] [] do exerciseCmd custodian2InstructionCid Instruction.Approve with approval = TakeDelivery buyerDepoAccount

  -- Settle batch
  [sellerCashCid, custodian2AssetCid, buyerAssetCid] <- submitMulti [agent] [publicParty] do exerciseCmd batchCid Batch.Settle

  -- Assert state
  Holding.verifyOwnerOfHolding [(seller, sellerCashCid), (custodian2, custodian2AssetCid), (buyer, buyerAssetCid)]

  pure ()

setupParties : Script TestParties
setupParties = do
  [cb, csd, bank1, bank2, custodian2, custodian1, issuer, buyer, seller, agent, delegatee, publicParty] <-
    createParties ["CentralBank", "CSD", "Bank 1", "Bank 2", "Custodian 2", "Custodian 1", "Issuer", "Buyer", "Seller", "Agent", "Delegatee", "PublicParty"]
  pure TestParties with cb; csd; bank1; bank2; custodian2; custodian1; issuer; buyer; seller; agent; delegatee; publicParty

-- | Grants the `delegatee` the right to allocate holdings on behalf of the `delegator`
template AllocationDelegation
  with
    delegator : Party
    delegatee : Party
  where
    signatory delegator
    observer delegatee

    choice OnBehalfAllocation : ContractId Instruction.I
      with
        transferableCid : ContractId Transferable.I
          -- ^ The transferable to allocate.
        instructionCid : ContractId Instruction.I
          -- ^ The instruction that needs allocation.
        id : Text
          -- ^ Identifier of the observation context on the transferable, allowing the delegatee to undisclose themselves from a transferable.
      controller delegatee
      do
        Some cid : Optional (ContractId Fungible.T) <- fmap coerceContractId <$> exercise (coerceContractId transferableCid : ContractId Disclosure.I) Disclosure.RemoveObservers with disclosers = singleton delegator; observersToRemove = (id, singleton delegatee)
        fungible <- fetch cid
        exercise instructionCid Instruction.Allocate with allocation = Pledge $ coerceContractId cid
