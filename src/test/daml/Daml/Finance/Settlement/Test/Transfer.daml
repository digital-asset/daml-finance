-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.Test.Transfer where

import DA.Map qualified as M (fromList)
import DA.Set (empty, singleton)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Factory qualified as Factory (Instruct(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Types (Step(..))
import Daml.Finance.Settlement.Factory (Factory(..))
import Daml.Finance.Test.Util.Account qualified as Account (credit, createAccount, createFactory)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate)
import Daml.Script

-- | Parties involved in the test script.
data TestParties = TestParties
  with
    bank : Party
      -- ^ Acts as custodian in the respective holdings.
    cb : Party
      -- ^ Depository and issuer of the cash instrument.
    sender : Party
      -- ^ Sends units of cash to receiver.
    receiver : Party
      -- ^ Receives units of cash from sender.
    provider : Party
      -- ^ Acts as provider of account and holding factory.
    publicParty : Party
      -- ^ The public party. Every party can readAs the public party.

-- Transfer of cash between two parties (sender -> receiver) facilitated by an intermediary (bank)
run : Script ()
run = script do
  TestParties{..} <- setupParties

  -- Account and holding factory
  let
    pp = [("PublicParty", singleton $ singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory provider pp
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [publicParty] [] do
    createCmd Fungible.Factory with provider = publicParty; observers = M.fromList pp

  -- Create accounts
  [senderAccount, receiverAccount] <- mapA (Account.createAccount [publicParty] accountFactoryCid holdingFactoryCid [] bank) [sender, receiver]

  -- Distribute asset
  now <- getTime
  let obs = [("public party", singleton publicParty)]
  cashInstrument <- Instrument.originate cb cb "USD" [] now
  cashTransferableCid <- Account.credit [publicParty] cashInstrument 200_000.0 senderAccount

  -- Create settlement factory
  settlementFactoryCid <- submitMulti [bank] [] do createCmd Factory with provider = bank; observers = empty

  -- Instruct transfer
  let step = Step with sender; receiver; quantity = Instrument.qty 200_000.0 cashInstrument
  (cashTransferCid, [cashInstructionCid]) <- submitMulti [bank] [] do exerciseCmd settlementFactoryCid Factory.Instruct with instructors = singleton bank; settler = bank; id = "TFER"; steps = [step]

  -- Allocate instruction
  cashInstructionCid <- submitMulti [sender] [publicParty] do exerciseCmd cashInstructionCid Instruction.Allocate with transferableCid = coerceContractId cashTransferableCid

  -- Approve instructions
  cashInstructionCid <- submitMulti [receiver] [publicParty] do exerciseCmd cashInstructionCid Instruction.Approve with receiverAccount

  -- Settle transfer
  [cashHoldingCid] <- submitMulti [bank] [publicParty] do exerciseCmd cashTransferCid Batch.Settle

  -- Assert state
  Holding.verifyOwnerOfHolding [(receiver, cashHoldingCid)]

  pure ()

setupParties : Script TestParties
setupParties = do
  [cb, bank, sender, receiver, provider, publicParty] <- createParties ["CentralBank", "Bank", "Sender", "Receiver", "Provider", "PublicParty"]
  pure TestParties with cb, bank, sender, receiver, provider, publicParty
