-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.Test.Transfer where

import DA.Map qualified as M (fromList)
import DA.Set (empty, fromList, singleton)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Factory qualified as Factory (I, Instruct(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..), Step(..))
import Daml.Finance.Interface.Types.Common (Id(..))
import Daml.Finance.Settlement.Factory (Factory(..))
import Daml.Finance.Test.Util.Account qualified as Account (credit, createAccount, createFactory, verifyAccountDisclosureContexts)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyNoObservers, verifyOwnerOfHolding)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate)
import Daml.Script

-- | Parties involved in the test script.
data TestParties = TestParties
  with
    bank : Party
      -- ^ Acts as custodian in the respective holdings.
    cb : Party
      -- ^ Depository and issuer of the cash instrument.
    sender : Party
      -- ^ Sends units of cash to receiver.
    receiver : Party
      -- ^ Receives units of cash from sender.
    provider : Party
      -- ^ Acts as provider of account and holding factory.
    publicParty : Party
      -- ^ The public party. Every party can readAs the public party.

-- Transfer of cash between two parties (sender -> receiver) facilitated by an intermediary (bank).
-- +------------------------------------------+
-- | Accounts                                 |
-- +------------------+-----------------------+
-- | structure:       | used for:             |
-- +------------------+-----------------------+
-- |      Bank        |                       |
-- |      /  \        | commercial bank money |
-- | Sender  Receiver |                       |
-- +------------------+-----------------------+
run : Script ()
run = script do
  TestParties{..} <- setupParties

  -- Account and holding factory
  let fp = [("FactoryProvider", singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory provider fp
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [publicParty] [] do
    createCmd Fungible.Factory with provider = publicParty; observers = M.fromList fp

  -- Create accounts
  [senderAccount, receiverAccount] <- mapA (Account.createAccount "Cash Account" [publicParty] accountFactoryCid holdingFactoryCid [] bank) [sender, receiver]

  -- Distribute asset
  now <- getTime
  cashInstrument <- Instrument.originate cb cb "USD" "United States Dollar" [] now
  transferableCid <- coerceContractId <$> Account.credit [publicParty] cashInstrument 200_000.0 senderAccount

  -- Create settlement factory
  settlementFactoryCid <- toInterfaceContractId @Factory.I <$> submitMulti [bank] [] do createCmd Factory with provider = bank; observers = empty

  -- Instruct transfer
  let step = Step with sender; receiver; quantity = Instrument.qty 200_000.0 cashInstrument
  (batchCid, [cashInstructionCid]) <- submitMulti [bank] [] do exerciseCmd settlementFactoryCid Factory.Instruct with instructors = singleton bank; settlers = singleton bank; id = Id "transfer 1"; description = "transfer of 200000.0 USD payment"; steps = [step]

  -- Allocate instruction
  (cashInstructionCid, _) <- submitMulti [sender] [publicParty] do exerciseCmd cashInstructionCid Instruction.Allocate with allocation = Pledge transferableCid

  -- Approve instruction
  cashInstructionCid <- submitMulti [receiver] [publicParty] do exerciseCmd cashInstructionCid Instruction.Approve with approval = TakeDelivery receiverAccount

  -- Settle batch
  [cashHoldingCid] <- submitMulti [bank] [publicParty] do exerciseCmd batchCid Batch.Settle with actors = singleton bank

  -- Assert state
  let ts = [(receiver, cashHoldingCid)]
  Holding.verifyOwnerOfHolding ts
  Holding.verifyNoObservers ts

  pure ()

-- Multiple transfers can be processed in any order. To achieve this, each
-- transfer process discloses/undiscloses accounts/transferables under
-- different contexts to not affect eachother. In this test, the same accounts
-- and parties are used for 3 cash transfers (sender -> receiver facilitated by
-- an intermediary bank).
-- +------------------------------------------+
-- | Accounts                                 |
-- +------------------+-----------------------+
-- | structure:       | used for:             |
-- +------------------+-----------------------+
-- |      Bank        |                       |
-- |      /  \        | commercial bank money |
-- | Sender  Receiver |                       |
-- +------------------+-----------------------+
run2 : Script ()
run2 = script do
  TestParties{..} <- setupParties

  -- Account and holding factory
  let fp = [("FactoryProvider", singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory provider fp
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [publicParty] [] do
    createCmd Fungible.Factory with provider = publicParty; observers = M.fromList fp

  -- Create accounts
  [senderAccount, receiverAccount] <- mapA (Account.createAccount "Cash Account" [publicParty] accountFactoryCid holdingFactoryCid [] bank) [sender, receiver]

  -- Distribute asset
  now <- getTime
  cashInstrument <- Instrument.originate cb cb "USD" "United States Dollar" [] now
  transferableCid1 <- coerceContractId <$> Account.credit [publicParty] cashInstrument 100_000.0 senderAccount
  transferableCid2 <- coerceContractId <$> Account.credit [publicParty] cashInstrument 200_000.0 senderAccount
  transferableCid3 <- coerceContractId <$> Account.credit [publicParty] cashInstrument 300_000.0 senderAccount

  -- Create settlement factory
  settlementFactoryCid <- toInterfaceContractId @Factory.I <$> submitMulti [bank] [] do createCmd Factory with provider = bank; observers = empty

  -- Instruct independent transfers
  let
    id1 = Id "transfer 1"
    id2 = Id "transfer 2"
    id3 = Id "transfer 3"
    first = Step with sender; receiver; quantity = Instrument.qty 100_000.0 cashInstrument
    second = Step with sender; receiver; quantity = Instrument.qty 200_000.0 cashInstrument
    third = Step with sender; receiver; quantity = Instrument.qty 300_000.0 cashInstrument
  (batchCid1, [cashInstructionCid1]) <- submitMulti [bank] [] do exerciseCmd settlementFactoryCid Factory.Instruct with instructors = singleton bank; settlers = singleton bank; id = id1; description = "transfer of 100000.0 USD payment"; steps = [first]
  -- the id of the batch must be unique
  submitMultiMustFail [bank] [] do exerciseCmd settlementFactoryCid Factory.Instruct with instructors = singleton bank; settlers = singleton bank; id = id1; description = "transfer of 200000.0 USD payment"; steps = [second]
  (batchCid2, [cashInstructionCid2]) <- submitMulti [bank] [] do exerciseCmd settlementFactoryCid Factory.Instruct with instructors = singleton bank; settlers = singleton bank; id = id2; description = "transfer of 200000.0 USD payment"; steps = [second]
  (batchCid3, [cashInstructionCid3]) <- submitMulti [bank] [] do exerciseCmd settlementFactoryCid Factory.Instruct with instructors = singleton bank; settlers = singleton bank; id = id3; description = "transfer of 300000.0 USD payment"; steps = [third]

  let verifyAccountDisclosureContexts owner ids = Account.verifyAccountDisclosureContexts [(M.fromList $ fmap (\id -> (show id, singleton bank)) ids)] owner

  -- check account observers
  verifyAccountDisclosureContexts sender []
  verifyAccountDisclosureContexts receiver []

  -- Allocate instruction (in any order)
  -- first
  (cashInstructionCid1, _) <- submitMulti [sender] [publicParty] do exerciseCmd cashInstructionCid1 Instruction.Allocate with allocation = Pledge transferableCid1
  verifyAccountDisclosureContexts sender [id1]
  (cashInstructionCid1, Some transferableCid1) <- submitMulti [sender] [publicParty] do exerciseCmd cashInstructionCid1 Instruction.Allocate with allocation = Unallocated
  verifyAccountDisclosureContexts sender []
  (cashInstructionCid1, _) <- submitMulti [sender] [publicParty] do exerciseCmd cashInstructionCid1 Instruction.Allocate with allocation = Pledge transferableCid1
  verifyAccountDisclosureContexts sender [id1]

  -- second
  (cashInstructionCid2, _) <- submitMulti [sender] [publicParty] do exerciseCmd cashInstructionCid2 Instruction.Allocate with allocation = Pledge transferableCid2
  verifyAccountDisclosureContexts sender [id1, id2]
  -- third
  (cashInstructionCid3, _) <- submitMulti [sender] [publicParty] do exerciseCmd cashInstructionCid3 Instruction.Allocate with allocation = Pledge transferableCid3
  verifyAccountDisclosureContexts sender [id1, id2, id3]

  -- Approve instruction (in any order)
  -- third
  cashInstructionCid3 <- submitMulti [receiver] [publicParty] do exerciseCmd cashInstructionCid3 Instruction.Approve with approval = TakeDelivery receiverAccount
  verifyAccountDisclosureContexts receiver [id3]
  -- first
  cashInstructionCid1 <- submitMulti [receiver] [publicParty] do exerciseCmd cashInstructionCid1 Instruction.Approve with approval = TakeDelivery receiverAccount
  verifyAccountDisclosureContexts receiver [id1, id3]
  -- second
  cashInstructionCid2 <- submitMulti [receiver] [publicParty] do exerciseCmd cashInstructionCid2 Instruction.Approve with approval = TakeDelivery receiverAccount
  verifyAccountDisclosureContexts receiver [id1, id2, id3]

  -- Settle transfers (in any order)
  -- second
  [cashHoldingCid2] <- submitMulti [bank] [publicParty] do exerciseCmd batchCid2 Batch.Settle with actors = singleton bank
  verifyAccountDisclosureContexts sender [id1, id3]
  verifyAccountDisclosureContexts receiver [id1, id3]
  -- first
  [cashHoldingCid1] <- submitMulti [bank] [publicParty] do exerciseCmd batchCid1 Batch.Settle with actors = singleton bank
  verifyAccountDisclosureContexts sender [id3]
  verifyAccountDisclosureContexts receiver [id3]
  -- third
  [cashHoldingCid3] <- submitMulti [bank] [publicParty] do exerciseCmd batchCid3 Batch.Settle with actors = singleton bank
  verifyAccountDisclosureContexts sender []
  verifyAccountDisclosureContexts receiver []

  -- Assert state
  let ts = [(receiver, cashHoldingCid1), (receiver, cashHoldingCid2), (receiver, cashHoldingCid3)]
  Holding.verifyOwnerOfHolding ts
  Holding.verifyNoObservers ts

  pure ()

-- Transfer of cash between two parties (sender -> receiver) which can be executed by either party.
-- +------------------------------------------+
-- | Accounts                                 |
-- +------------------+-----------------------+
-- | structure:       | used for:             |
-- +------------------+-----------------------+
-- |      Bank        |                       |
-- |      /  \        | commercial bank money |
-- | Sender  Receiver |                       |
-- +------------------+-----------------------+
run3 : Script ()
run3 = script do
  TestParties{..} <- setupParties

  -- Account and holding factory
  let fp = [("FactoryProvider", singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory provider fp
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [publicParty] [] do
    createCmd Fungible.Factory with provider = publicParty; observers = M.fromList fp

  -- Create accounts
  [senderAccount, receiverAccount] <- mapA (Account.createAccount "Cash Account" [publicParty] accountFactoryCid holdingFactoryCid [] bank) [sender, receiver]

  -- Distribute asset
  now <- getTime
  cashInstrument <- Instrument.originate cb cb "USD" "United States Dollar" [] now
  transferableCid <- coerceContractId <$> Account.credit [publicParty] cashInstrument 200_000.0 senderAccount

  -- Create settlement factory
  settlementFactoryCid <- toInterfaceContractId @Factory.I <$> submitMulti [bank] [] do createCmd Factory with provider = bank; observers = singleton publicParty

  -- Instruct transfer
  let step = Step with sender; receiver; quantity = Instrument.qty 200_000.0 cashInstrument
  (batchCid, [cashInstructionCid]) <- submitMulti [bank] [] do
    exerciseCmd settlementFactoryCid Factory.Instruct with
      instructors = singleton bank; settlers = fromList [sender, receiver]; id = Id "transfer 1"; description = "transfer of 200000.0 USD payment"; steps = [step]

  -- Allocate instruction
  (cashInstructionCid, _) <- submitMulti [sender] [publicParty] do exerciseCmd cashInstructionCid Instruction.Allocate with allocation = Pledge transferableCid

  -- Approve instruction
  cashInstructionCid <- submitMulti [receiver] [publicParty] do exerciseCmd cashInstructionCid Instruction.Approve with approval = TakeDelivery receiverAccount

  -- Settle batch
  -- either sender, receiver or both can settle
  [cashHoldingCid] <- submitMulti [sender] [publicParty] do exerciseCmd batchCid Batch.Settle with actors = singleton sender

  -- Assert state
  let ts = [(receiver, cashHoldingCid)]
  Holding.verifyOwnerOfHolding ts
  Holding.verifyNoObservers ts

  pure ()

-- Transfer of 2 cash holdings between two parties/accounts (sender -> receiver).
-- +------------------------------------------+
-- | Accounts                                 |
-- +------------------+-----------------------+
-- | structure:       | used for:             |
-- +------------------+-----------------------+
-- |      Bank        |                       |
-- |      /  \        | commercial bank money |
-- | Sender  Receiver |                       |
-- +------------------+-----------------------+
run4 : Script ()
run4 = script do
  TestParties{..} <- setupParties

  -- Account and holding factory
  let fp = [("FactoryProvider", singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory provider fp
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [publicParty] [] do
    createCmd Fungible.Factory with provider = publicParty; observers = M.fromList fp

  -- Create accounts
  [senderAccount, receiverAccount] <- mapA (Account.createAccount "Cash Account" [publicParty] accountFactoryCid holdingFactoryCid [] bank) [sender, receiver]

  -- Distribute asset
  now <- getTime
  cashInstrument1 <- Instrument.originate cb cb "USD" "United States Dollar" [] now
  transferableCid1 <- coerceContractId <$> Account.credit [publicParty] cashInstrument1 200_000.0 senderAccount
  transferableCid2 <- coerceContractId <$> Account.credit [publicParty] cashInstrument1 100_000.0 senderAccount

  -- Create settlement factory
  settlementFactoryCid <- toInterfaceContractId @Factory.I <$> submitMulti [bank] [] do createCmd Factory with provider = bank; observers = singleton publicParty

  -- Instruct transfer
  let
    step1 = Step with sender; receiver; quantity = Instrument.qty 200_000.0 cashInstrument1
    step2 = Step with sender; receiver; quantity = Instrument.qty 100_000.0 cashInstrument1
  (batchCid, [cashInstructionCid1, cashInstructionCid2]) <- submitMulti [bank] [] do
    exerciseCmd settlementFactoryCid Factory.Instruct with
      instructors = singleton bank; settlers = fromList [sender, receiver]; id = Id "transfer 1"; description = "transfer of 200000.0 USD and 100000.0 CHF payment"; steps = [step1, step2]

  -- Allocate instruction
  (cashInstructionCid1, _) <- submitMulti [sender] [publicParty] do exerciseCmd cashInstructionCid1 Instruction.Allocate with allocation = Pledge transferableCid1
  (cashInstructionCid2, _) <- submitMulti [sender] [publicParty] do exerciseCmd cashInstructionCid2 Instruction.Allocate with allocation = Pledge transferableCid2

  -- Approve instruction
  cashInstructionCid1 <- submitMulti [receiver] [publicParty] do exerciseCmd cashInstructionCid1 Instruction.Approve with approval = TakeDelivery receiverAccount
  cashInstructionCid2 <- submitMulti [receiver] [publicParty] do exerciseCmd cashInstructionCid2 Instruction.Approve with approval = TakeDelivery receiverAccount

  -- Settle batch
  -- either sender, receiver or both can settle
  [cashHoldingCid1, cashHoldingCid2] <- submitMulti [sender] [publicParty] do exerciseCmd batchCid Batch.Settle with actors = singleton sender

  -- Assert state
  let ts = [(receiver, cashHoldingCid1), (receiver, cashHoldingCid2)]
  Holding.verifyOwnerOfHolding ts
  Holding.verifyNoObservers ts

  pure ()

setupParties : Script TestParties
setupParties = do
  [cb, bank, sender, receiver, provider, publicParty] <- createParties ["CentralBank", "Bank", "Sender", "Receiver", "Provider", "PublicParty"]
  pure TestParties with cb, bank, sender, receiver, provider, publicParty
