-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.Test.BatchWithIntermediaries where

import DA.Date (addDays, toDateUTC)
import DA.Map qualified as M (fromList)
import DA.Set qualified as S (empty, fromList, singleton)
import DA.Time (time)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Factory qualified as Settlement (F, Instruct(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.RouteProvider qualified as RouteProvider (I, Discover(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..), Step(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..))
import Daml.Finance.Interface.Util.Common (qty)
import Daml.Finance.Settlement.Factory (Factory(..))
import Daml.Finance.Settlement.Hierarchy (Hierarchy(..))
import Daml.Finance.Settlement.RouteProvider.IntermediatedStatic (IntermediatedStatic(..))
import Daml.Finance.Test.Util.Account qualified as Account (ControlledBy(..), createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyNoObservers, verifyOwnerOfHolding)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate)
import Daml.Script

-- | Parties involved in the test script.
data TestParties = TestParties
  with
    buyer : Party
      -- ^ Receives the equity instrument in exchange for cash.
    seller : Party
      -- ^ Seller of the equity instrument. Receives cash in exchange for units of equity.
    bank : Party
      -- ^ Custodian of the issuer's cash holdings.
    cb : Party
      -- ^ Depository and issuer of the cash instrument. Custodian of the cash holdings of Bank 1
      --   and Bank 2.
    csd : Party
      -- ^ Depository of the equity instrument. Custodian of the equity holdings of Bank 1 and
      --   Issuer.
    issuer : Party
      -- ^ Issuer of the equity instrument. Receives cash in exchange for units of equity.
    publicParty : Party
      -- ^ The public party. Every party can readAs the public party.

-- DvP via settlement chain and instructions.
-- Buyer transfers cash to Seller in exchange for an equity instrument (detained by issuer at
-- depository).
-- Seller transfers equity to Buyer in exchange for cash.
-- +------------------------------------------------------+
-- | Accounts                                             |
-- +-----------------------------+------------------------+
-- | structure:                  | used for:              |
-- +-----------------------------+------------------------+
-- |       Central Bank          |                        |
-- |         /      \            | central bank money     |
-- |      Buyer     Bank         |                        |
-- |                /            | commercial bank money  |
-- |      Buyer   Seller         |                        |
-- |          \   /              | securities             |
-- | Central Security Depository |                        |
-- +-----------------------------+------------------------+
run : Bool -> Script ()
run settleWithOwnAccount = script do
  TestParties{..} <- setupParties

  -- Setup security accounts
  let pp = [("PublicParty", S.singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory csd []
  holdingFactoryCid <- toInterfaceContractId <$> submit csd do
    createCmd Fungible.Factory with provider = csd; observers = M.fromList pp
  [buyerSecurityAccount, sellerSecurityAccount] <- mapA (Account.createAccount "Security Account" []
    accountFactoryCid holdingFactoryCid [] Account.Owner csd) [buyer, seller]

  -- Setup cash accounts at CB
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory cb []
  holdingFactoryCid <- toInterfaceContractId <$> submit cb do
    createCmd Fungible.Factory with provider = cb; observers = M.fromList pp
  [buyerCashAccount, bankCashAccount] <- mapA (Account.createAccount "Cash Account" []
    accountFactoryCid holdingFactoryCid [] Account.Owner cb) [buyer, bank]

  -- Setup cash accounts at Bank
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory bank []
  holdingFactoryCid <- toInterfaceContractId <$> submit bank do
    createCmd Fungible.Factory with provider = bank; observers = M.fromList pp
  [sellerCashAccount] <- mapA (Account.createAccount "Cash Account" [] accountFactoryCid
    holdingFactoryCid [] Account.Owner bank) [seller]

  -- Distribute assets
  now <- getTime
  equityInstrument <- Instrument.originate csd issuer "AAPL" "Apple Inc." [] now
  equityHoldingCid <- Account.credit [] equityInstrument 1_000.0 sellerSecurityAccount
  cashInstrument <- Instrument.originate cb cb "USD" "United States Dollar" [] now
  buyerCashHoldingCid <- Account.credit [] cashInstrument 200_000.0 buyerCashAccount

  -- Settlement steps
  let
    steps =
      [ Step with sender = seller; receiver = buyer; quantity = qty 1_000.0 equityInstrument
      , Step with sender = buyer; receiver = seller; quantity = qty 200_000.0 cashInstrument
      ]
    settlementTime = time (addDays (toDateUTC now) 1) 0 0 0

  -- Discover settlement routes (by first creating a route provider with intermediaries from Buyer
  -- to Seller)
  let
    paths = M.fromList
      [ ("USD", Hierarchy with rootCustodian = cb; pathsToRootCustodian = [[buyer], [seller, bank]])
      , ("AAPL", Hierarchy with rootCustodian = csd; pathsToRootCustodian = [[seller], [buyer]])
      ]
  routeProviderCid <- toInterfaceContractId @RouteProvider.I <$> submit buyer do
    createCmd IntermediatedStatic with provider = buyer; paths; observers = S.empty
  routedSteps <- submit buyer do
    exerciseCmd routeProviderCid RouteProvider.Discover with
      discoverors = S.singleton buyer; contextId = None; steps

  -- Instruct settlement
  settlementFactoryCid <- toInterfaceContractId @Settlement.F <$> submit buyer do
    createCmd Factory with provider = buyer; observers = S.empty
  (batchCid, [equityInstructionCid, cashInstruction1Cid, cashInstruction2Cid]) <-
    submitMulti [buyer, seller] [] do
      exerciseCmd settlementFactoryCid Settlement.Instruct with
        instructors = S.fromList [buyer, seller]; settlers = S.fromList [buyer, seller]
        id = Id "APPL 1000@200.0USD"; description = "DVP"; contextId = None; routedSteps
        settlementTime = Some settlementTime

  -- Allocate instructions
  (equityInstructionCid, _) <- submit seller do
    exerciseCmd equityInstructionCid
      Instruction.Allocate with actors = S.singleton seller; allocation = Pledge equityHoldingCid
  (cashInstruction1Cid, _) <- submit buyer do
    exerciseCmd cashInstruction1Cid
      Instruction.Allocate with actors = S.singleton buyer; allocation = Pledge buyerCashHoldingCid
  (cashInstruction2Cid, _) <-
    if settleWithOwnAccount then
      do
        ownCashAccount <- Account.createAccount "Own Cash Account" [] accountFactoryCid
          holdingFactoryCid [] Account.Owner bank bank
        ownCashHoldingCid <- Account.credit [] cashInstrument 200_000.0 ownCashAccount
        submit bank do
          exerciseCmd cashInstruction2Cid
            Instruction.Allocate with actors = S.singleton bank; allocation = Pledge ownCashHoldingCid
    else
      submit bank do
        exerciseCmd cashInstruction2Cid
          Instruction.Allocate with actors = S.singleton bank; allocation = CreditReceiver

  submitMustFail buyer do
    exerciseCmd cashInstruction1Cid
      Instruction.Allocate with actors = S.singleton buyer; allocation = CreditReceiver

  -- Approve instructions
  equityInstructionCid <- submit buyer do
    exerciseCmd equityInstructionCid
      Instruction.Approve with
        actors = S.singleton buyer; approval = TakeDelivery buyerSecurityAccount
  cashInstruction1Cid <- submit bank do
    exerciseCmd cashInstruction1Cid
      Instruction.Approve with actors = S.singleton bank; approval = TakeDelivery bankCashAccount
  cashInstruction2Cid <- submit seller do
    exerciseCmd cashInstruction2Cid
      Instruction.Approve with actors = S.singleton seller; approval = TakeDelivery sellerCashAccount

  submitMustFail buyer do
    exerciseCmd equityInstructionCid
      Instruction.Approve with actors = S.singleton buyer; approval = DebitSender

  -- Set time
  setTime settlementTime

  -- Settle batch
  [equityHoldingCid, bankCashHoldingCid, sellerCashHoldingCid] <-
    submitMulti [buyer] [publicParty] do
      exerciseCmd batchCid Batch.Settle with actors = S.singleton buyer

  -- Assert state
  let ts = [(buyer, equityHoldingCid), (bank, bankCashHoldingCid), (seller, sellerCashHoldingCid)]
  Holding.verifyOwnerOfHolding ts
  Holding.verifyNoObservers ts

  pure ()

-- Settlement where the Bank allocates its `Instruction` using an "own" account. To be more precise,
-- the Bank allocates its `Instruction` (between itself and the seller) using cash which it has
-- credited to an account where the Bank takes the role as both the custodian and the owner (i.e.,
-- an IOU to itself). Although this works, it is more efficient for the Bank to allocate using a
-- direct credit instead (see the following script).
run1 : Script ()
run1 = run True

-- Settlement where the Bank allocates its `Instruction` with a direct credit to the seller.
run2 : Script ()
run2 = run False

setupParties : Script TestParties
setupParties = do
  [buyer, seller, cb, csd, bank, issuer, publicParty] <- createParties
    ["Buyer", "Seller", "CentralBank", "CentralSecurityDepository", "Bank", "Issuer", "PublicParty"]
  pure TestParties with buyer, seller, cb, csd, bank, issuer, publicParty
