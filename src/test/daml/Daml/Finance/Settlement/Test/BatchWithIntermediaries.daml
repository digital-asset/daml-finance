-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.Test.BatchWithIntermediaries where

import DA.Map qualified as M (fromList)
import DA.Set (empty, fromList, singleton)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Factory qualified as Factory (I, Instruct(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..), Step(..))
import Daml.Finance.Interface.Types.Common (Id(..))
import Daml.Finance.Settlement.Factory (FactoryWithIntermediaries(..), Path(..))
import Daml.Finance.Test.Util.Account qualified as Account (createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyNoObservers, verifyOwnerOfHolding)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate)
import Daml.Script

-- | Parties involved in the test script.
data TestParties = TestParties
  with
    buyer : Party
      -- ^ Receives the equity instrument in exchange for cash.
    seller : Party
      -- ^ Seller of the equity instrument. Receives cash in exchange for units of equity.
    bank : Party
      -- ^ Custodian of the issuer's cash holdings.
    cb : Party
      -- ^ Depository and issuer of the cash instrument. Custodian of the cash holdings of Bank 1 and Bank 2.
    csd : Party
      -- ^ Depository of the equity instrument. Custodian of the equity holdings of Bank 1 and Issuer.
    issuer : Party
      -- ^ Issuer of the equity instrument. Receives cash in exchange for units of equity.
    publicParty : Party
      -- ^ The public party. Every party can readAs the public party.

-- DvP via settlement chain and instructions.
-- Buyer transfers cash to Seller in exchange for an equity instrument (detained by issuer at depository).
-- Seller transfers equity to Buyer in exchange for cash.
-- +------------------------------------------------------+
-- | Accounts                                             |
-- +-----------------------------+------------------------+
-- | structure:                  | used for:              |
-- +-----------------------------+------------------------+
-- |         Central Bank        |                        |
-- |          /      \           | central bank money     |
-- |      Buyer     Bank         |                        |
-- |                /   \        | commercial bank money  |
-- |      Buyer  Seller  Bank    |                        |
-- |          \   /              | securities             |
-- | Central Security Depository |                        |
-- +-----------------------------+------------------------+
run : Bool -> Script ()
run settleWithOwnAccount = script do
  TestParties{..} <- setupParties

  -- Setup security accounts
  let fp = [("FactoryProvider", singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory csd []
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [csd] [] do
    createCmd Fungible.Factory with provider = csd; observers = M.fromList fp
  [buyerSecurityAccount, sellerSecurityAccount] <- mapA (Account.createAccount "Security Account" [] accountFactoryCid holdingFactoryCid [] csd) [buyer, seller]

  -- Setup cash accounts at CB
  let pp = [("PublicParty", singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory cb []
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [cb] [] do
    createCmd Fungible.Factory with provider = cb; observers = M.fromList pp
  [buyerCashAccount, bankCashAccount] <- mapA (Account.createAccount "Cash Account" [] accountFactoryCid holdingFactoryCid [] cb) [buyer, bank]

  -- Setup cash accounts at Bank
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory bank []
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [bank] [] do
    createCmd Fungible.Factory with provider = bank; observers = M.fromList pp
  [sellerCashAccount] <- mapA (Account.createAccount "Cash Account" [] accountFactoryCid holdingFactoryCid [] bank) [seller]

  -- Distribute assets
  now <- getTime
  equityInstrument <- Instrument.originate csd issuer "AAPL" "Apple Inc." [] now
  equityTransferableCid <- Account.credit [] equityInstrument 1_000.0 sellerSecurityAccount
  cashInstrument <- Instrument.originate cb cb "USD" "United States Dollar" [] now
  buyerCashTransferableCid <- Account.credit [] cashInstrument 200_000.0 buyerCashAccount

  -- Instruct settlement (by first creating a settlement factory with intermediaries from Buyer to Seller)
  let
    paths = M.fromList
      [ ("USD", Path with senderPath = [buyer, cb]; receiverPath = [seller, bank, cb])
      , ("AAPL", Path with senderPath = [seller, csd]; receiverPath = [buyer, csd])
      ]
  settlementFactoryCid <- toInterfaceContractId @Factory.I <$> submitMulti [buyer] [] do
    createCmd FactoryWithIntermediaries with
        provider = buyer
        paths
        observers = empty
  let
    steps =
      [ Step with sender = seller; receiver = buyer; quantity = Instrument.qty 1_000.0 equityInstrument
      , Step with sender = buyer; receiver = seller; quantity = Instrument.qty 200_000.0 cashInstrument
      ]
  (batchCid, [equityInstructionCid, cashInstruction1Cid, cashInstruction2Cid]) <-
    submitMulti [buyer, seller] [] do exerciseCmd settlementFactoryCid Factory.Instruct with instructors = fromList [buyer, seller]; settlers = fromList [buyer, seller]; id = Id "APPL 1000@200.0USD"; description = "DVP"; contextId = None; steps

  -- Allocate instructions
  (equityInstructionCid, _) <- submitMulti [seller] [] do exerciseCmd equityInstructionCid Instruction.Allocate with actors = singleton seller; allocation = Pledge equityTransferableCid
  (cashInstruction1Cid, _) <- submitMulti [buyer] [] do exerciseCmd cashInstruction1Cid Instruction.Allocate with  actors = singleton buyer; allocation = Pledge buyerCashTransferableCid
  (cashInstruction2Cid, _) <-
    if settleWithOwnAccount then
      do
        ownCashAccount <- Account.createAccount "Own Cash Account" [] accountFactoryCid holdingFactoryCid [] bank bank
        ownCashTransferableCid <- Account.credit [] cashInstrument 200_000.0 ownCashAccount
        submitMulti [bank] [] do exerciseCmd cashInstruction2Cid Instruction.Allocate with actors = singleton bank; allocation = Pledge ownCashTransferableCid
    else
      submitMulti [bank] [] do exerciseCmd cashInstruction2Cid Instruction.Allocate with actors = singleton bank; allocation = CreditReceiver

  -- Approve instructions
  equityInstructionCid <- submitMulti [buyer] [] do exerciseCmd equityInstructionCid Instruction.Approve with actors = singleton buyer; approval = TakeDelivery buyerSecurityAccount
  cashInstruction1Cid <- submitMulti [bank] [] do exerciseCmd cashInstruction1Cid Instruction.Approve with actors = singleton bank; approval = TakeDelivery bankCashAccount
  cashInstruction2Cid <- submitMulti [seller] [] do exerciseCmd cashInstruction2Cid Instruction.Approve with actors = singleton seller; approval = TakeDelivery sellerCashAccount

  -- Settle batch
  [equityTransferableCid, bankCashTransferableCid, sellerCashTransferableCid] <-
    submitMulti [buyer] [publicParty] do exerciseCmd batchCid Batch.Settle with actors = singleton buyer

  -- Assert state
  let ts = [(buyer, equityTransferableCid), (bank, bankCashTransferableCid), (seller, sellerCashTransferableCid)]
  Holding.verifyOwnerOfHolding ts
  Holding.verifyNoObservers ts

  pure ()

-- Settlement where the Bank allocates its `Instruction` using an "own" account. To be more precise,
-- the Bank allocates its `Instruction` (between itself and the seller) using cash which it has credited to
-- an account where the Bank takes the role as both the custodian and the owner (i.e., an IOU to itself).
-- Although this works, it is more efficient for the Bank to allocate using a direct credit instead (see the following
-- script).
run1 : Script ()
run1 = run True

-- Settlement where the Bank allocates its `Instruction` with a direct credit to the seller.
run2 : Script ()
run2 = run False

setupParties : Script TestParties
setupParties = do
  [buyer, seller, cb, csd, bank, issuer, publicParty] <- createParties ["Buyer", "Seller", "CentralBank", "CentralSecurityDepository", "Bank", "Issuer", "PublicParty"]
  pure TestParties with buyer, seller, cb, csd, bank, issuer, publicParty
