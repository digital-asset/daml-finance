-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.Test.BatchWithRoute where

import DA.Map qualified as M (fromList)
import DA.Set (empty, singleton)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Factory qualified as Factory (I, Instruct(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..), Step(..))
import Daml.Finance.Interface.Types.Common (Id(..))
import Daml.Finance.Settlement.Factory (FactoryWithIntermediaries(..), Path(..))
import Daml.Finance.Test.Util.Account qualified as Account (createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate)
import Daml.Script

-- | Parties involved in the test script.
data TestParties = TestParties
  with
    bank1 : Party
      -- ^ Receives the equity instrument in exchange for cash.
    bank2 : Party
      -- ^ Custodian of the issuer's cash holdings.
    cb : Party
      -- ^ Depository and issuer of the cash instrument. Custodian of the cash holdings of Bank 1 and Bank 2.
    depository : Party
      -- ^ Depository of the equity instrument. Custodian of the equity holdings of Bank 1 and Issuer.
    issuer : Party
      -- ^ Issuer of the equity instrument. Receives cash in exchange for units of equity.
    publicParty : Party
      -- ^ The public party. Every party can readAs the public party.

-- | DvP via settlement chain and instructions.
-- Bank 1 transfers cash to Issuer in exchange for an equity instrument (detained by issuer at depository).
--
-- Equity (security) account structure :
--
--          Depository
--            /    \
--         Bank 1  Issuer
--
-- Cash account structure :
--
--         Central Bank
--         /        \
--      Bank 1      Bank 2
--                    \
--                   Issuer
run : Script ()
run = script do
  TestParties{..} <- setupParties

  -- Setup security accounts
  let fp = [("FactoryProvider", singleton $ singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory depository []
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [depository] [] do
    createCmd Fungible.Factory with provider = depository; observers = M.fromList fp
  [bank1SecurityAccount, issuerSecurityAccount] <- mapA (Account.createAccount "Security Account" [] accountFactoryCid holdingFactoryCid [] depository) [bank1, issuer]

  -- Setup cash accounts at CB
  let pp = [("PublicParty", singleton $ singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory cb []
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [cb] [] do
    createCmd Fungible.Factory with provider = cb; observers = M.fromList pp
  [bank1CashAccount, bank2CashAccount] <- mapA (Account.createAccount "Cash Account" [] accountFactoryCid holdingFactoryCid [] cb) [bank1, bank2]

  -- Setup cash accounts at Bank 2
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory bank2 []
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [bank2] [] do
    createCmd Fungible.Factory with provider = bank2; observers = M.fromList pp
  [bank2OwnCashAccount, issuerCashAccount] <- mapA (Account.createAccount "Cash Account" [] accountFactoryCid holdingFactoryCid [] bank2) [bank2, issuer]

  -- Distribute assets
  now <- getTime
  equityInstrument <- Instrument.originate depository issuer "AAPL" "Apple Inc." [] now
  equityTransferableCid <- Account.credit [] equityInstrument 1_000.0 issuerSecurityAccount
  cashInstrument <- Instrument.originate cb cb "USD" "United States Doller" [] now
  bank1CashTransferableCid <- Account.credit [] cashInstrument 200_000.0 bank1CashAccount
  bank2CashTransferableCid <- Account.credit [] cashInstrument 200_000.0 bank2OwnCashAccount

  -- Instruct settlement (by first creating settlement factory with routes from Bank 1 to Issuer)
  let
    routes =
      [ ("USD", Path with senderPath = [bank1, cb]; receiverPath = [issuer, bank2, cb])
      , ("AAPL", Path with senderPath = [bank1, depository]; receiverPath = [issuer, depository])
      ]
  settlementFactoryCid <- toInterfaceContractId @Factory.I <$> submitMulti [bank1] [] do
    createCmd FactoryWithIntermediaries with
        provider = bank1
        paths = M.fromList routes
        observers = empty
  let
    steps =
      [ Step with sender = issuer; receiver = bank1; quantity = Instrument.qty 1_000.0 equityInstrument
      , Step with sender = bank1; receiver = issuer; quantity = Instrument.qty 200_000.0 cashInstrument
      ]
  (batchCid, [equityInstructionCid, cashInstruction1Cid, cashInstruction2Cid]) <-
    submitMulti [bank1] [] do exerciseCmd settlementFactoryCid Factory.Instruct with instructors = singleton bank1; settler = bank1; id = Id "APPL 1000@200.0USD"; description = "DVP"; steps

  -- Allocate instructions
  equityInstructionCid <- submitMulti [issuer] [] do exerciseCmd equityInstructionCid Instruction.Allocate with allocation = Pledge equityTransferableCid
  cashInstruction1Cid <- submitMulti [bank1] [] do exerciseCmd cashInstruction1Cid Instruction.Allocate with allocation = Pledge bank1CashTransferableCid
  cashInstruction2Cid <- submitMulti [bank2] [] do exerciseCmd cashInstruction2Cid Instruction.Allocate with allocation = Pledge bank2CashTransferableCid

  -- Approve instructions
  equityInstructionCid <- submitMulti [bank1] [] do exerciseCmd equityInstructionCid Instruction.Approve with approval = TakeDelivery bank1SecurityAccount
  cashInstruction1Cid <- submitMulti [bank2] [] do exerciseCmd cashInstruction1Cid Instruction.Approve with approval = TakeDelivery bank2CashAccount
  cashInstruction2Cid <- submitMulti [issuer] [] do exerciseCmd cashInstruction2Cid Instruction.Approve with approval = TakeDelivery issuerCashAccount

  -- Settle batch
  [equityTransferableCid, bank2CashTransferableCid, issuerCashTransferableCid] <-
    submitMulti [bank1] [publicParty] do exerciseCmd batchCid Batch.Settle

  -- Assert state
  Holding.verifyOwnerOfHolding [(bank1, equityTransferableCid), (bank2, bank2CashTransferableCid), (issuer, issuerCashTransferableCid)]

  pure ()

setupParties : Script TestParties
setupParties = do
  [cb, depository, bank1, bank2, issuer, publicParty] <- createParties ["CentralBank", "CSD", "Bank 1", "Bank 2", "Issuer", "PublicParty"]
  pure TestParties with cb, depository, bank1, bank2, issuer, publicParty
