-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Asset.Test.Fungible where

import DA.Map qualified as M (empty)
import DA.Set (singleton)
import Daml.Finance.Asset.Fungible qualified as Fungible (Factory(..), T)
import Daml.Finance.Asset.Test.Common (TestInitialState(..), TestParties(..), setupInitialState, setupParties)
import Daml.Finance.Asset.Test.Util.Account qualified as Account (submitExerciseInterfaceByKeyCmd, submitMustFailExerciseInterfaceByKeyCmd)
import Daml.Finance.Asset.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Finance.Interface.Asset.Account qualified as Account (Debit(..), I)
import Daml.Finance.Interface.Asset.Fungible qualified as Fungible (I, Merge(..), Split(..), SplitResult(..), verifyAmountPreserving, verifySplit)
import Daml.Finance.Interface.Asset.Lockable qualified as Lockable (Acquire(..), I, LockType(..), Release(..))
import Daml.Finance.Interface.Asset.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Test.Util.Common (validateAssertionFailure)
import Daml.Script

run : Script ()
run = script do
  -- Create parties
  tp@TestParties{custodian; issuer; investor; locker; locker2} <- setupParties

  -- Initialize state with `Fungible.Factory`
  TestInitialState {investorAccount; issuerAccount; issuerHoldingCid} <- setupInitialState tp (Fungible.Factory with provider = custodian; observers = M.empty)

  -- Lock asset
  lockableCid <- submitMulti [issuer, locker] [] do exerciseCmd (coerceContractId issuerHoldingCid : ContractId Lockable.I) Lockable.Acquire with newLocker = singleton locker; context = "Test Lock"; lockType = Lockable.Semaphore

  -- Cannot split
  submitMultiMustFail [issuer, investor] [] do exerciseCmd (coerceContractId lockableCid : ContractId Fungible.I) Fungible.Split with amounts = [500.0, 250.0]

  -- Cannot transfer
  submitMultiMustFail [issuer, investor] [] do exerciseCmd (coerceContractId lockableCid : ContractId Transferable.I) Transferable.Transfer with newOwnerAccount = investorAccount

  -- Cannot debit
  Account.submitMustFailExerciseInterfaceByKeyCmd @Account.I [custodian, issuer] [] issuerAccount (Account.Debit with holdingCid = toInterfaceContractId lockableCid)

  -- Unlock asset
  fungibleCid : ContractId Fungible.I <- coerceContractId <$> submitMulti [locker] [] do exerciseCmd lockableCid Lockable.Release with context = "Test Lock"

  -- Attempt to split more than the amount available fails
  submitMultiMustFail [issuer, investor] [] do exerciseCmd fungibleCid Fungible.Split with amounts = [1_000.1]
  submitMultiMustFail [issuer, investor] [] do exerciseCmd fungibleCid Fungible.Split with amounts = [1_000.0, 0.1]

  -- Attempt to split negative amount fails
  submitMultiMustFail [issuer, investor] [] do exerciseCmd fungibleCid Fungible.Split with amounts = [-20.0]
  submitMultiMustFail [issuer, investor] [] do exerciseCmd fungibleCid Fungible.Split with amounts = [100.0, -20.0]

  -- Split fungible
  Fungible.SplitResult [splitCid1, splitCid2] (Some restCid) <- submitMulti [issuer, investor] [] do exerciseCmd fungibleCid Fungible.Split with amounts = [500.0, 250.0]

  -- Merge fungibles
  fungibleCid <- submitMulti [issuer, investor] [] do exerciseCmd restCid Fungible.Merge with fungibleCids = [splitCid1, splitCid2]

  -- Transfer
  transferableCid <- submitMulti [issuer, investor] [] do exerciseCmd (coerceContractId fungibleCid : ContractId Transferable.I) Transferable.Transfer with newOwnerAccount = investorAccount

  -- Assert state
  Holding.verifyOwnerOfHolding [(investor, transferableCid)]

  -- Debit asset
  Account.submitExerciseInterfaceByKeyCmd @Account.I [custodian, investor] [] investorAccount (Account.Debit with holdingCid = toInterfaceContractId transferableCid)

  pure ()

testVerifyAmountPreserving : Script ()
testVerifyAmountPreserving = do
  -- Create parties
  tp@TestParties{custodian; issuer; investor; locker; locker2} <- setupParties

  -- Initialize state with `Fungible.Factory`
  TestInitialState {investorAccount; issuerAccount; issuerHoldingCid} <- setupInitialState tp (Fungible.Factory with provider = custodian; observers = M.empty)

  -- Get fungible
  Some fungibleImp <- queryContractId @Fungible.T issuer (fromInterfaceContractId issuerHoldingCid)
  let fungible = toInterface @Fungible.I fungibleImp

  -- Positive case - Single quantities match
  Fungible.verifyAmountPreserving [fungible] [fungible]

  -- Positive case - Multiple amounts match
  Fungible.verifyAmountPreserving [fungible, fungible] [fungible, fungible]

  -- Negative case - Quantites of new fungibles do not match previous fungible
  validateAssertionFailure (Fungible.verifyAmountPreserving [fungible, fungible] [fungible])
    "Fungible::verifyAmountPreserving - Sum of fungible amounts do not match the expected amount. newAmounTotal=2000.0, previousAmountTotal=1000.0"

  -- Negative case - Quantites of previous fungibles do not match new fungible
  validateAssertionFailure (Fungible.verifyAmountPreserving [fungible] [fungible, fungible])
    "Fungible::verifyAmountPreserving - Sum of fungible amounts do not match the expected amount. newAmounTotal=1000.0, previousAmountTotal=2000.0"

  -- Negative edge case - No new fungibles provided
  validateAssertionFailure (Fungible.verifyAmountPreserving [] [fungible, fungible])
    "Fungible::verifyAmountPreserving - Sum of fungible amounts do not match the expected amount. newAmounTotal=0.0, previousAmountTotal=2000.0"

  -- Negative edge case - No previous fungibles provided
  validateAssertionFailure (Fungible.verifyAmountPreserving [fungible, fungible] [])
    "Fungible::verifyAmountPreserving - Sum of fungible amounts do not match the expected amount. newAmounTotal=2000.0, previousAmountTotal=0.0"

  pure ()

testVerifySplit : Script ()
testVerifySplit = do
  -- Positive case - Sum of quantites to split matches current amount
  Fungible.verifySplit [1.0, 2.0, 3.0, 4.0, 5.0] 15.0

  -- Positive case - Sum of quantites to split is less than current amount
  Fungible.verifySplit [1.0, 2.0, 3.0] 15.0

  -- Negative case - Sum of quantities to split higher than current amount
  validateAssertionFailure (Fungible.verifySplit [1.0, 2.0, 3.0] 1.0)
    "Fungible::verifySplit - Amounts must be strictly positive and not exceed current amount. amounts=[1.0,2.0,3.0], splitAmountSum=6.0, currentAmount=1.0"

  validateAssertionFailure (Fungible.verifySplit [1.0, -2.0, 3.0] 1.0)
    "Fungible::verifySplit - Amounts must be strictly positive and not exceed current amount. amounts=[1.0,-2.0,3.0], splitAmountSum=2.0, currentAmount=1.0"

  pure ()
