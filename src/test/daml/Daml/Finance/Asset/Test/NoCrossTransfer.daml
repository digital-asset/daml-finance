-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Asset.Test.NoCrossTransfer where

import DA.Map qualified as M (fromList)
import DA.Set (singleton)
import Daml.Finance.Asset.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Asset.NonFungible qualified as NonFungible (Factory(..))
import Daml.Finance.Asset.Test.Common (TestInitialState(..), TestParties(..), setupInitialState, setupParties)
import Daml.Finance.Asset.Test.Util.Account qualified as Account (createFactory)
import Daml.Finance.Interface.Asset.Factory.Account qualified as Account (Create(..), F)
import Daml.Finance.Interface.Asset.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Interface.Asset.Types (AccountKey(..))
import Daml.Script

-- | Verify that I cannot transfer a non-fungible holding to a fungible account.
run : Script ()
run = script do
  -- Create parties
  tp@TestParties{custodian; issuer; investor; locker; locker2; publicParty} <- setupParties

  -- Initialize state with `NonFungible.Factory`
  let pp = M.fromList [("PublicParty", singleton $ singleton publicParty)]
  TestInitialState {issuerAccount; issuerHoldingCid} <- setupInitialState tp $ NonFungible.Factory with provider = custodian; observers = pp

  -- Create investor account for fungible holdings
  accountFactoryCid <- toInterfaceContractId @Account.F <$> Account.createFactory custodian []
  holdingFactoryCid <- toInterfaceContractId <$> submit custodian do createCmd Fungible.Factory with provider = custodian; observers = pp
  let
    id = show investor <> "@" <> show custodian <> " - Fungible"
    investorAccount = AccountKey with custodian; owner = investor; id
  submitMulti [custodian, investor] [] do
    exerciseCmd accountFactoryCid Account.Create
      with
        account = investorAccount
        holdingFactoryCid
        observers = M.fromList [("Issuer", singleton $ singleton issuer)]

  -- Attempt to transfer a non-fungible holding to a fungible holding.
  submitMultiMustFail [issuer, investor] [publicParty] do exerciseCmd (coerceContractId issuerHoldingCid : ContractId Transferable.I) Transferable.Transfer with newOwnerAccount = investorAccount

  pure ()
