-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Asset.Test.NonTransferable where

import DA.Map qualified as M (empty)
import DA.Set (singleton)
import Daml.Finance.Asset.NonTransferable qualified as NonTransferable (Factory(..))
import Daml.Finance.Asset.Test.Common (TestInitialState(..), TestParties(..), setupInitialState, setupParties)
import Daml.Finance.Asset.Test.Util.Account qualified as Account (submitExerciseInterfaceByKeyCmd, submitMustFailExerciseInterfaceByKeyCmd)
import Daml.Finance.Interface.Asset.Account qualified as Account (Debit(..), I)
import Daml.Finance.Interface.Asset.Fungible qualified as Fungible (I, Split(..))
import Daml.Finance.Interface.Asset.Lockable qualified as Lockable (Acquire(..), I, LockType(..), Release(..))
import Daml.Finance.Interface.Asset.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Script

run : Script ()
run = script do
   -- Create parties
  tp@TestParties{custodian; issuer; investor; locker; locker2} <- setupParties

  -- Initialize state with `NonTransferable.Factory`
  TestInitialState {investorAccount; issuerAccount; issuerHoldingCid} <- setupInitialState tp (NonTransferable.Factory with provider = custodian; observers = M.empty)

  -- Cannot split
  submitMultiMustFail [issuer, investor] [] do exerciseCmd (coerceContractId issuerHoldingCid : ContractId Fungible.I) Fungible.Split with amounts = [100.0]

  -- Cannot transfer
  submitMultiMustFail [issuer, investor] [] do exerciseCmd (coerceContractId issuerHoldingCid : ContractId Transferable.I) Transferable.Transfer with newOwnerAccount = investorAccount

  -- Lock asset with a one time lock
  lockableCid <- submitMulti [issuer, locker] [] do exerciseCmd (coerceContractId issuerHoldingCid : ContractId Lockable.I) Lockable.Acquire with newLocker = singleton locker; context = "Test Lock"; lockType = Lockable.Semaphore

  -- Same Locker attempts locks asset again
  submitMultiMustFail [issuer, locker] [] do exerciseCmd lockableCid Lockable.Acquire with newLocker = singleton locker; context = "Second attempt"; lockType = Lockable.Semaphore

  -- Another locker attempts to lock this asset
  submitMultiMustFail [issuer, locker2] [] do exerciseCmd lockableCid Lockable.Acquire with newLocker = singleton locker2; context = "Steal lock"; lockType = Lockable.Semaphore

  -- Cannot debit
  Account.submitMustFailExerciseInterfaceByKeyCmd @Account.I [custodian, issuer] [] issuerAccount (Account.Debit with holdingCid = toInterfaceContractId lockableCid)

  -- Unlock asset
  lockableCid <- submitMulti [locker] [] do exerciseCmd lockableCid Lockable.Release with context = "Test Lock"

  -- Lock asset with a reentrant lock
  lockableCid <- submitMulti [issuer, locker] [] do exerciseCmd lockableCid Lockable.Acquire with newLocker = singleton locker; context = "Lock 1"; lockType = Lockable.Reentrant

  -- Same Locker locks asset again for the same context
  submitMultiMustFail [issuer, locker] [] do exerciseCmd lockableCid Lockable.Acquire with newLocker = singleton locker; context = "Lock 1"; lockType = Lockable.Reentrant

  -- Lock asset with a reentrant lock for another context
  lockableCid <- submitMulti [issuer, locker] [] do exerciseCmd lockableCid Lockable.Acquire with newLocker = singleton locker; context = "Lock 2"; lockType = Lockable.Reentrant

  -- Another locker attempts to lock this asset
  submitMultiMustFail [issuer, locker2] [] do exerciseCmd lockableCid Lockable.Acquire with newLocker = singleton locker2; context = "Steal lock"; lockType = Lockable.Semaphore
  submitMultiMustFail [issuer, locker2] [] do exerciseCmd lockableCid Lockable.Acquire with newLocker = singleton locker2; context = "Steal lock"; lockType = Lockable.Reentrant

  -- Unlock one lock
  lockableCid <- submitMulti [locker] [] do exerciseCmd lockableCid Lockable.Release with context = "Lock 2"

  -- Debit fails as the asset is still locked
  Account.submitMustFailExerciseInterfaceByKeyCmd @Account.I [custodian, issuer] [] issuerAccount (Account.Debit with holdingCid = toInterfaceContractId lockableCid)

  -- Unlock the final lock
  lockableCid <- submitMulti [locker] [] do exerciseCmd lockableCid Lockable.Release with context = "Lock 1"

  -- Debit asset
  Account.submitExerciseInterfaceByKeyCmd @Account.I [custodian, issuer] [] issuerAccount (Account.Debit with holdingCid = toInterfaceContractId lockableCid)

  pure ()
