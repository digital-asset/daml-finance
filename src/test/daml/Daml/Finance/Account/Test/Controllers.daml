-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Account.Test.Controllers where

import DA.Set qualified as Set (fromList, singleton)
import Daml.Finance.Holding.Factory qualified as Holding (Factory(..))
import Daml.Finance.Holding.Test.Common (TestInitialState(..), TestParties(..), setupInitialState, setupParties)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Interface.Types.Common.Types (HoldingStandard(..), Id(..))
import Daml.Finance.Test.Util.Account (ControlledBy(..))
import Daml.Script

-- | Verify that custodian can transfer (in its sole discretion).
custodianControlled : Script ()
custodianControlled = script do
  -- Create parties
  tp@TestParties{custodian; issuer; investor} <- setupParties

  -- Initialize state
  TestInitialState {issuerAccount; investorAccount; issuerHoldingCid; disclosedHoldingFactory} <-
    setupInitialState
      tp
      Holding.Factory with
        provider = custodian; id = Id "Holding Factory @ custodian"; observers = mempty
      TransferableFungible
      []
      Custodian

  -- Owners can't transfer
  submitMultiWithDisclosuresMustFail [issuer, investor] [] disclosedHoldingFactory do
    exerciseCmd (fromInterfaceContractId @Transferable.I issuerHoldingCid)
      Transferable.Transfer with actors = Set.singleton issuer; newOwnerAccount = investorAccount

  -- Custodian can transfer
  submit custodian do
    exerciseCmd (fromInterfaceContractId @Transferable.I issuerHoldingCid)
      Transferable.Transfer with actors = Set.singleton custodian; newOwnerAccount = investorAccount

  pure ()

-- | Verify that owner and new owner can transfer jointly.
ownerControlled : Script ()
ownerControlled = script do
  -- Create parties
  tp@TestParties{custodian; issuer; investor} <- setupParties

  -- Initialize state
  TestInitialState {issuerAccount; investorAccount; issuerHoldingCid; disclosedHoldingFactory} <-
    setupInitialState
      tp
      Holding.Factory with provider = custodian; id = Id "Holding Factory"; observers = mempty
      TransferableFungible
      []
      Owner

  -- Custodian can't transfer.
  submitMustFail custodian do
    exerciseCmd (fromInterfaceContractId @Transferable.I issuerHoldingCid)
      Transferable.Transfer with actors = Set.singleton custodian; newOwnerAccount = investorAccount

  -- Owners can transfer.
  submitMultiWithDisclosures [issuer, investor] [] disclosedHoldingFactory do
    exerciseCmd (fromInterfaceContractId @Transferable.I issuerHoldingCid)
      Transferable.Transfer with
        actors = Set.fromList [issuer, investor]; newOwnerAccount = investorAccount

  pure ()

-- | Verify that owner, custodian, and new owner can transfer jointly.
ownerAndCustodianControlled : Script ()
ownerAndCustodianControlled = script do
  -- Create parties
  tp@TestParties{custodian; issuer; investor} <- setupParties

  -- Initialize state
  TestInitialState {issuerAccount; investorAccount; issuerHoldingCid; disclosedHoldingFactory} <-
    setupInitialState
      tp
      Holding.Factory with provider = custodian; id = Id "Holding Factory"; observers = mempty
      TransferableFungible
      []
      OwnerAndCustodian

  -- Owners can't transfer.
  submitMultiWithDisclosuresMustFail [issuer, investor] [] disclosedHoldingFactory do
    exerciseCmd (fromInterfaceContractId @Transferable.I issuerHoldingCid)
      Transferable.Transfer with
        actors = Set.fromList [issuer, investor]; newOwnerAccount = investorAccount

  -- Custodian can't transfer.
  submitMustFail custodian do
    exerciseCmd (fromInterfaceContractId @Transferable.I issuerHoldingCid)
      Transferable.Transfer with actors = Set.singleton custodian; newOwnerAccount = investorAccount

  -- Owners and Custodian can transfer.
  submitMulti [custodian, issuer, investor] [] do
    exerciseCmd (fromInterfaceContractId @Transferable.I issuerHoldingCid)
      Transferable.Transfer with
        actors = Set.fromList [custodian, issuer, investor]; newOwnerAccount = investorAccount

  pure ()

-- | Verify that owner can transfer (in its sole discretion).
ownerControlledWithAutoApproval : Script ()
ownerControlledWithAutoApproval = script do
  -- Create parties
  tp@TestParties{custodian; issuer; investor} <- setupParties

  -- Initialize state
  TestInitialState {issuerAccount; investorAccount; issuerHoldingCid; disclosedHoldingFactory} <-
    setupInitialState
      tp
      Holding.Factory with provider = custodian; id = Id "Holding Factory"; observers = mempty
      TransferableFungible
      []
      OwnerWithAutoApproval

  -- Custodian can't transfer.
  submitMustFail custodian do
    exerciseCmd (fromInterfaceContractId @Transferable.I issuerHoldingCid)
      Transferable.Transfer with actors = Set.singleton custodian; newOwnerAccount = investorAccount

  -- Owner can transfer.
  submitMultiWithDisclosures [issuer] [] disclosedHoldingFactory do
    exerciseCmd (fromInterfaceContractId @Transferable.I issuerHoldingCid)
      Transferable.Transfer with actors = Set.singleton issuer; newOwnerAccount = investorAccount

  pure ()
