-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Equity.Test.ShareDividend where

import DA.Date (toDateUTC)
import DA.Map qualified as M (empty, fromList)
import DA.Set (empty, singleton)
import Daml.Finance.Asset.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Asset.Test.Util.Account qualified as Account (createAccount, createFactory, credit)
import Daml.Finance.Asset.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Finance.Asset.Test.Util.Instrument qualified as Instrument (submitExerciseInterfaceByKeyCmd)
import Daml.Finance.Equity.Test.Util (originateEquity)
import Daml.Finance.Interface.Asset.Instrument qualified as Instrument (qty)
import Daml.Finance.Interface.Equity.Instrument qualified as Equity (I, Distribution(..))
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I)
import Daml.Finance.Interface.Lifecycle.Lifecyclable qualified as Lifecyclable (I, Lifecycle(..))
import Daml.Finance.Interface.Lifecycle.SettlementRule qualified as SettlementRule (Claim(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Settleable qualified as Settleable (Settle(..))
import Daml.Finance.Lifecycle.SettlementRule (Rule(..))
import Daml.Finance.RefData.Time.DateClock as Clock (DateClock(..), Unit(..))
import Daml.Finance.Settlement.Batch (BatchFactory(..))
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Script

-- Share dividend lifecycling and settlement
run : Script ()
run = script do
  -- Create parties
  [depository, bank, issuer, investor, settler, publicParty] <-
    createParties ["CSD", "Bank", "Issuer", "Investor", "Settler", "PublicParty"]

  -- Account and holding factory
  let pp = [("PublicParty", singleton $ singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory bank pp
  holdingFactoryCid <- toInterfaceContractId <$> submit bank do
    createCmd Fungible.Factory with provider = bank; observers = M.fromList pp

  -- Create accounts
  [bankAccount, investorAccount] <- mapA (Account.createAccount [publicParty] accountFactoryCid holdingFactoryCid [] bank) [bank, investor]

  -- Distribute assets
  now <- getTime
  equityInstrument <- originateEquity depository issuer "AAPL" "0" pp now
  investorEquityTransferableCid <- Account.credit [publicParty] equityInstrument 1_000.0 investorAccount

  -- Originate new equity version
  equityInstrument2 <- originateEquity depository issuer "AAPL" "1" [] now

  -- Create share dividend
  shareDividendCid <- Instrument.submitExerciseInterfaceByKeyCmd @Equity.I [bank, issuer] [publicParty] equityInstrument Equity.Distribution with
    id = "SHAREDIV"
    perUnitDistribution = [Instrument.qty 0.01 equityInstrument2]
    effectiveDate = toDateUTC now
    newInstrument = equityInstrument2
  let
    eventCid : ContractId Event.I = coerceContractId shareDividendCid
    lifecyclableCid : ContractId Lifecyclable.I = coerceContractId shareDividendCid

  -- Create clock
  clockCid <- toInterfaceContractId <$> submitMulti [issuer] [] do createCmd DateClock with u = Clock.Unit $ toDateUTC now; id = "Date clock"; provider = issuer; observers = M.empty

  -- Lifecycle share dividend
  (_, [effectCid]) <- submitMulti [issuer] [] do exerciseCmd lifecyclableCid Lifecyclable.Lifecycle with ruleName = "Dividend"; settler; eventCid; observableCids = []; clockCid

  -- Create settlement factory
  factoryCid <- submitMulti [investor] [] do createCmd BatchFactory with provider = investor; observers = empty

  -- Claim effect
  settlementRuleCid <- submitMulti [bank, investor] [] do
    createCmd Rule
      with
        custodian = bank
        owner = investor
        claimers = singleton investor
        settler
        instrumentLabel = "AAPL"
        instructableCid = toInterfaceContractId factoryCid

  result <- submitMulti [investor] [publicParty] do
    exerciseCmd settlementRuleCid SettlementRule.Claim with
      claimer = investor
      holdingCids = [investorEquityTransferableCid]
      effectCid

  let
    Some [investorEquityTransferableCid1] = result.newInstrumentHoldingCids
    [bankEquityInstructionCid] = result.instructionCids

  -- Issue new equity version to pay dividend
  bankEquityTransferableCid <- Account.credit [publicParty] equityInstrument2 10.0 bankAccount

  -- Allocate instructions
  bankEquityInstructionCid <- submitMulti [bank] [] do exerciseCmd bankEquityInstructionCid Instruction.Allocate with transferableCid = bankEquityTransferableCid

  -- Approve instructions
  issuerEquityInstructionCid <- submitMulti [investor] [] do exerciseCmd bankEquityInstructionCid Instruction.Approve with receiverAccount = investorAccount

  -- Settle container
  [investorEquityTransferableCid2] <- submitMulti [settler] [publicParty] do fmap coerceContractId <$> exerciseCmd result.containerCid Settleable.Settle

  -- Assert state
  Holding.verifyOwnerOfHolding [(investor, investorEquityTransferableCid1), (investor, investorEquityTransferableCid2)]

  pure ()
