-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Holding.Test.Common where

import DA.Map qualified as M (Map)
import Daml.Finance.Interface.Common.Types
import Daml.Finance.Interface.Holding.Base qualified as Base (I)
import Daml.Finance.Interface.Holding.Factory.Holding qualified as Holding (F)
import Daml.Finance.Test.Util.Account qualified as Account (createAccount, credit, createFactory, credit)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Instrument (originate)
import Daml.Script

-- | Parties involved in the initial test state.
data TestParties = TestParties
  with
    custodian : Party
      -- ^ Acts as custodian of holdings. It also acts as depository of the instrument.
    issuer : Party
      -- ^ Acts as the issuer of the instrument. Is also the initial owner of the holding.
    investor : Party
      -- ^ Owner of the holding.
    locker : Party
      -- ^ Locker of the holding.
    locker2 : Party
      -- ^ Additional locker of the holding.
    publicParty : Party
      -- ^ The public party. Every party can readAs the public party.

-- | Initial test state.
data TestInitialState = TestInitialState
  with
    investorAccount : AccountKey
      -- ^ Investor account at the custodian.
    issuerAccount : AccountKey
      -- ^ Issuer account at the custodian.
    instrument : InstrumentKey
      -- ^ Key of the instrument.
    issuerHoldingCid : ContractId Base.I
      -- ^ Initial holding of the issuer.

-- | Setup test parties.
setupParties : Script TestParties
setupParties = do
  -- Create parties
  [custodian, issuer, investor, locker, locker2, publicParty] <- createParties ["Custodian", "Issuer", "Investor", "Locker", "Locker2", "PublicParty"]
  pure TestParties{..}

-- | Setup test initial state.
setupInitialState : (HasToInterface a Holding.F, HasSignatory a, HasObserver a, HasEnsure a, HasAgreement a, HasCreate a, HasFetch a, HasArchive a, HasTemplateTypeRep a, HasToAnyTemplate a, HasFromAnyTemplate a, DA.Internal.Record.HasField "observers" a (M.Map k v), DA.Internal.Record.HasField "provider" a Party) => TestParties -> a -> Script TestInitialState
setupInitialState (tp : TestParties) (factory : a) = do
  let TestParties{..} = tp

  -- Create account and holding factory
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory custodian []
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [custodian] [] do createCmd factory

  -- Create account
  [issuerAccount, investorAccount] <- mapA (Account.createAccount [] accountFactoryCid holdingFactoryCid [] custodian) [issuer, investor]

  -- Originate instrument
  now <- getTime
  instrument <- originate custodian issuer "ABC.DE" [] now

  -- Credit asset
  issuerHoldingCid : ContractId Base.I <- coerceContractId <$> Account.credit [] instrument 1_000.0 issuerAccount

  pure TestInitialState{..}
