-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Holding.Test.Transfer where

import DA.Assert ((===))
import DA.Map qualified as M (fromList)
import DA.Set qualified as S (fromList, singleton)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Holding.Test.Common (TestInitialState(..), TestParties(..), setupInitialState, setupParties)
import Daml.Finance.Interface.Holding.Base qualified as Base (Acquire(..), GetView(..), I, LockType(..))
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Test.Util.Account qualified as Account (ControlledBy(..))
import Daml.Script

-- | Verify that transfer preserves holding locks.
locksArePreserved : Script ()
locksArePreserved = script do
  -- Create parties
  tp@TestParties{custodian; issuer; investor; lockers; publicParty} <- setupParties

  -- Initialize state with `Fungible.Factory`
  let pp = M.fromList [("PublicParty", S.singleton publicParty)]
  TestInitialState {issuerAccount; issuerHoldingCid; investorAccount} <-
    setupInitialState
      tp
      Fungible.Factory with provider = custodian; observers = pp
      []
      Account.Owner

  -- Lock asset (with 2 contexts)
  baseCid <- submitMulti [issuer, lockers] [] do
    exerciseCmd (coerceInterfaceContractId @Base.I issuerHoldingCid) Base.Acquire with
      newLockers = S.singleton lockers; context = "C1"; lockType = Base.Reentrant
  baseCid <- submitMulti [issuer, lockers] [] do
    exerciseCmd baseCid Base.Acquire with
      newLockers = S.singleton lockers; context = "C2"; lockType = Base.Reentrant

  -- Transfer
  newHoldingCid <- submitMulti [issuer, investor, lockers] [publicParty] do
    exerciseCmd (coerceInterfaceContractId @Transferable.I baseCid) Transferable.Transfer with
      actors = S.fromList [issuer, investor, lockers]; newOwnerAccount = investorAccount

  -- Verify lock is maintained
  Some lock <- (.lock) <$> submit lockers do
    exerciseCmd (coerceInterfaceContractId @Base.I newHoldingCid)
      Base.GetView with viewer = lockers
  lock.lockers === S.singleton lockers
  lock.context === S.fromList ["C1", "C2"]
  lock.lockType === Base.Reentrant

  pure ()
