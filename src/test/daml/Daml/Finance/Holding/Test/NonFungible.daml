-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Holding.Test.NonFungible where

import DA.Map qualified as M (fromList)
import DA.Set qualified as S (fromList, singleton)
import Daml.Finance.Holding.NonFungible qualified as NonFungible (Factory(..))
import Daml.Finance.Holding.Test.Common (TestInitialState(..), TestParties(..), setupInitialState, setupParties)
import Daml.Finance.Interface.Account.Account qualified as Account (Debit(..), I)
import Daml.Finance.Interface.Holding.Base qualified as Base (Acquire(..), I, LockType(..), Release(..))
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I, Split(..))
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Test.Util.Account qualified as Account (ControlledBy(..), submitExerciseInterfaceByKeyCmd, submitMustFailExerciseInterfaceByKeyCmd)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Script

run : Script ()
run = script do
  -- Create parties
  tp@TestParties{custodian; issuer; investor; locker; publicParty} <- setupParties

  -- Initialize state with `NonFungible.Factory`
  TestInitialState {investorAccount; issuerAccount; issuerHoldingCid} <-
    setupInitialState
      tp
      NonFungible.Factory with
        provider = custodian; observers = M.fromList [("PublicParty", S.singleton publicParty)]
      []
      Account.Owner

  -- Cannot split
  submitMultiMustFail [issuer, investor] [] do
    exerciseCmd (coerceInterfaceContractId @Fungible.I issuerHoldingCid)
      Fungible.Split with amounts = [100.0]

  -- Lock asset
  baseCid <- submitMulti [issuer, locker] [] do
    exerciseCmd (coerceInterfaceContractId @Base.I issuerHoldingCid)
      Base.Acquire with
        newLockers = S.singleton locker; context = "Test Lock"; lockType = Base.Semaphore

  -- Cannot transfer
  submitMultiMustFail [issuer, investor] [] do
    exerciseCmd (coerceInterfaceContractId @Transferable.I baseCid)
      Transferable.Transfer with actors = S.singleton investor; newOwnerAccount = investorAccount

  -- Cannot debit
  Account.submitMustFailExerciseInterfaceByKeyCmd @Account.I [custodian, issuer] [] issuerAccount $
    Account.Debit with holdingCid = toInterfaceContractId baseCid

  -- Unlock asset
  baseCid <- submit locker do exerciseCmd baseCid Base.Release with context = "Test Lock"

  -- Transfer
  transferableCid <- submitMulti [issuer, investor] [publicParty] do
    exerciseCmd (coerceInterfaceContractId @Transferable.I baseCid)
      Transferable.Transfer with
        actors = S.fromList [issuer, investor]; newOwnerAccount = investorAccount

  -- Assert state
  Holding.verifyOwnerOfHolding [(investor, transferableCid)]

  -- Debit asset
  Account.submitExerciseInterfaceByKeyCmd @Account.I [custodian, investor] [] investorAccount $
    Account.Debit with holdingCid = toInterfaceContractId transferableCid

  pure ()
