-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Holding.Test.NonFungible where

import DA.Map qualified as M (fromList)
import DA.Set qualified as S (fromList, singleton)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Holding.NonFungible qualified as NonFungible (Factory(..))
import Daml.Finance.Holding.NonTransferable qualified as NonTransferable (Factory(..))
import Daml.Finance.Holding.Test.Common (TestInitialState(..), TestParties(..), setupInitialState, setupParties)
import Daml.Finance.Interface.Account.Account qualified as Account (Debit(..), I)
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I, Split(..))
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Interface.Util.Lockable qualified as Lockable (Acquire(..), I, LockType(..), Release(..))
import Daml.Finance.Test.Util.Account qualified as Account (ControlledBy(..), createAccount, submitExerciseInterfaceByKeyCmd, submitMustFailExerciseInterfaceByKeyCmd)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Finance.Test.Util.HoldingDuplicates.NonFungible qualified as NonFungibleV2 (Factory(..))
import Daml.Script

run1 : Script ()
run1 = script do
  -- Create parties
  tp@TestParties{custodian; issuer; investor; locker; publicParty} <- setupParties
  let observers = M.fromList [("PublicParty", S.singleton publicParty)]

  -- Initialize state with `NonFungible.Factory`
  TestInitialState {investorAccount; issuerAccount; issuerHoldingCid} <-
    setupInitialState tp NonFungible.Factory with provider = custodian; observers [] Account.Owner

  -- Cannot split
  submitMultiMustFail [issuer, investor] [] do
    exerciseCmd (fromInterfaceContractId @Fungible.I issuerHoldingCid)
      Fungible.Split with amounts = [100.0]

  -- Lock asset
  lockableCid <- submitMulti [issuer, locker] [] do
    exerciseCmd (toInterfaceContractId @Lockable.I issuerHoldingCid)
      Lockable.Acquire with
        newLockers = S.singleton locker; context = "Test Lock"; lockType = Lockable.Semaphore

  -- Cannot transfer
  submitMultiMustFail [issuer, investor] [] do
    exerciseCmd (fromInterfaceContractId @Transferable.I lockableCid)
      Transferable.Transfer with actors = S.singleton investor; newOwnerAccount = investorAccount

  -- Cannot debit
  Account.submitMustFailExerciseInterfaceByKeyCmd @Account.I [custodian, issuer] [] issuerAccount $
    Account.Debit with holdingCid = fromInterfaceContractId lockableCid

  -- Unlock asset
  lockableCid <- submit locker do
    exerciseCmd lockableCid Lockable.Release with context = "Test Lock"

  -- Transfer
  transferableCid <- submitMulti [issuer, investor] [publicParty] do
    exerciseCmd (fromInterfaceContractId @Transferable.I lockableCid)
      Transferable.Transfer with
        actors = S.fromList [issuer, investor]; newOwnerAccount = investorAccount

  -- Assert state
  Holding.verifyOwnerOfHolding [(investor, transferableCid)]

  -- Debit asset
  Account.submitExerciseInterfaceByKeyCmd @Account.I [custodian, investor] [] investorAccount $
    Account.Debit with holdingCid = toInterfaceContractId transferableCid

  pure ()

run2 : Script ()
run2 = do
  -- Create parties
  tp@TestParties{custodian; issuer; investor; locker; publicParty} <- setupParties
  let observers = M.fromList [("PublicParty", S.singleton publicParty)]

  -- Initialize state with `NonFungible.Factory`
  TestInitialState {investorAccount; issuerAccount; issuerHoldingCid; accountFactoryCid} <-
    setupInitialState tp NonFungible.Factory with provider = custodian; observers [] Account.Owner

  -- A transfer to an account which uses a new holding implementation (here NonFungibleV2) works
  holdingFactoryNonFungibleV2Cid <- toInterfaceContractId <$> submit custodian do
    createCmd NonFungibleV2.Factory with provider = custodian; observers
  issuerAccountNonFungibleV2 <- Account.createAccount "Default Account for NonFungibleV2" []
    accountFactoryCid holdingFactoryNonFungibleV2Cid [] Account.Owner custodian issuer
  transferableCid <- submitMulti [issuer] [publicParty] do
    exerciseCmd (fromInterfaceContractId @Transferable.I issuerHoldingCid)
      Transferable.Transfer with
        actors = S.singleton issuer; newOwnerAccount = issuerAccountNonFungibleV2

  -- A transfer to an account using a different holding standard (here NonTransferable) must fail
  holdingFactoryForNonTransferableCid <- toInterfaceContractId <$> submit custodian do
    createCmd NonTransferable.Factory with provider = custodian; observers
  issuerAccountForNonFungible <- Account.createAccount "Default Account for NonTransferable" []
    accountFactoryCid holdingFactoryForNonTransferableCid [] Account.Owner custodian issuer
  submitMultiMustFail [issuer] [publicParty] do
    exerciseCmd transferableCid Transferable.Transfer with
      actors = S.singleton issuer; newOwnerAccount = issuerAccountForNonFungible

  -- A transfer to an account using a different holding standard (here Fungible) must fail
  holdingFactoryForFungibleCid <- toInterfaceContractId <$> submit custodian do
    createCmd Fungible.Factory with provider = custodian; observers
  issuerAccountForFungible <- Account.createAccount "Default Account for Fungible" []
    accountFactoryCid holdingFactoryForFungibleCid [] Account.Owner custodian issuer
  submitMultiMustFail [issuer] [publicParty] do
    exerciseCmd transferableCid
      Transferable.Transfer with
        actors = S.singleton issuer; newOwnerAccount = issuerAccountForFungible

  pure ()
