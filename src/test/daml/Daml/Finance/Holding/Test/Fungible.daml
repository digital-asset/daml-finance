-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Holding.Test.Fungible where

import DA.Map qualified as M (fromList)
import DA.Optional (fromSome)
import DA.Set qualified as S (fromList, singleton)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..), T)
import Daml.Finance.Holding.Test.Common (TestInitialState(..), TestParties(..), setupInitialState, setupParties)
import Daml.Finance.Interface.Account.Account qualified as Account (Debit(..), I)
import Daml.Finance.Interface.Holding.Base qualified as Base (Acquire(..), I, LockType(..), Release(..))
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I, Merge(..), Split(..), SplitResult(..), verifyAmountPreserving, verifySplit)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Test.Util.Account qualified as Account (ControlledBy(..), submitExerciseInterfaceByKeyCmd, submitMustFailExerciseInterfaceByKeyCmd)
import Daml.Finance.Test.Util.Common (validateAssertionFailure)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Script

run : Script ()
run = script do
  -- Create parties
  tp@TestParties{custodian; issuer; investor; lockers; publicParty} <- setupParties

  -- Initialize state with `Fungible.Factory`
  TestInitialState {investorAccount; issuerAccount; issuerHoldingCid} <- setupInitialState
      tp
      Fungible.Factory with
        provider = custodian; observers = M.fromList [("PublicParty", S.singleton publicParty)]
      [] Account.Owner

  -- Lock asset
  baseCid <- submitMulti [issuer, lockers] [] do
    exerciseCmd (coerceInterfaceContractId @Base.I issuerHoldingCid)
      Base.Acquire with
        newLockers = S.singleton lockers; context = "Test Lock"; lockType = Base.Semaphore

  -- Cannot split
  submitMultiMustFail [issuer, investor] [] do
    exerciseCmd (coerceInterfaceContractId @Fungible.I baseCid) Fungible.Split with
      amounts = [500.0, 250.0]

  -- Cannot transfer
  submitMultiMustFail [issuer, investor] [] do
    exerciseCmd (coerceInterfaceContractId @Transferable.I baseCid)
      Transferable.Transfer with
        actors = S.fromList [issuer, investor]; newOwnerAccount = investorAccount

  -- Cannot debit
  Account.submitMustFailExerciseInterfaceByKeyCmd @Account.I [custodian, issuer] [] issuerAccount $
    Account.Debit with holdingCid = toInterfaceContractId baseCid

  -- Unlock asset
  fungibleCid <- coerceInterfaceContractId @Fungible.I <$> submit lockers do
    exerciseCmd baseCid Base.Release with context = "Test Lock"

  -- Attempt to split more than the amount available fails
  submitMultiMustFail [issuer, investor] [] do
    exerciseCmd fungibleCid Fungible.Split with amounts = [1_000.1]
  submitMultiMustFail [issuer, investor] [] do
    exerciseCmd fungibleCid Fungible.Split with amounts = [1_000.0, 0.1]

  -- Attempt to split negative amount fails
  submitMultiMustFail [issuer, investor] [] do
    exerciseCmd fungibleCid Fungible.Split with amounts = [-20.0]
  submitMultiMustFail [issuer, investor] [] do
    exerciseCmd fungibleCid Fungible.Split with amounts = [100.0, -20.0]
  submitMultiMustFail [issuer, investor] [] do
    exerciseCmd fungibleCid Fungible.Split with amounts = [0.0]
  submitMultiMustFail [issuer, investor] [] do
    exerciseCmd fungibleCid Fungible.Split with amounts = []

  -- Fungible (before split)
  fungible <- fmap (\o -> toInterface @Fungible.I $ fromSome o) <$>
    queryContractId @Fungible.T issuer $ fromInterfaceContractId fungibleCid

  -- Split fungible
  Fungible.SplitResult [splitCid1, splitCid2] (Some restCid) <-
    submitMulti [issuer, investor] [] do
      exerciseCmd fungibleCid Fungible.Split with amounts = [500.0, 250.0]

  -- Fungibles (after split)
  [fungible1, fungible2, rest] <- fmap (\f -> toInterface @Fungible.I $ fromSome f) <$>
    mapA
      (\cid -> queryContractId @Fungible.T issuer $ fromInterfaceContractId cid)
      [splitCid1, splitCid2, restCid]

  -- Test utility function `verifyAmountPreserving`
  Fungible.verifyAmountPreserving [] []
  Fungible.verifyAmountPreserving [fungible] [fungible1, fungible2, rest]
  Fungible.verifyAmountPreserving
    [fungible, fungible] [fungible1, fungible2, rest, fungible1, fungible2, rest]
  Fungible.verifyAmountPreserving [fungible, fungible, fungible] [fungible, fungible, fungible]
  validateAssertionFailure (Fungible.verifyAmountPreserving [fungible, fungible] [fungible]) $
    "Fungible::verifyAmountPreserving - Sum of fungible amounts do not match the expected " <>
    "amount. newAmounTotal=2000.0, previousAmountTotal=1000.0"
  validateAssertionFailure (Fungible.verifyAmountPreserving [fungible] []) $
    "Fungible::verifyAmountPreserving - Sum of fungible amounts do not match the expected " <>
    "amount. newAmounTotal=1000.0, previousAmountTotal=0.0"
  validateAssertionFailure (Fungible.verifyAmountPreserving [] [fungible]) $
    "Fungible::verifyAmountPreserving - Sum of fungible amounts do not match the expected " <>
    "amount. newAmounTotal=0.0, previousAmountTotal=1000.0"

  -- Test utility function `verifySplit`
  Fungible.verifySplit [1.0] 10.0
  validateAssertionFailure(Fungible.verifySplit [1.0, 2.0, 3.0, 4.0] 9.0) $
    "Fungible::verifySplit - Amounts must be non-empty, strictly positive, and not exceed " <>
    "current amount. amounts=[1.0,2.0,3.0,4.0], splitAmountSum=10.0, currentAmount=9.0"
  Fungible.verifySplit [1.0, 2.0, 3.0, 4.0] 10.0
  validateAssertionFailure (Fungible.verifySplit [1.0, 0.0, 3.0, 4.0] 10.0) $
    "Fungible::verifySplit - Amounts must be non-empty, strictly positive, and not exceed " <>
    "current amount. amounts=[1.0,0.0,3.0,4.0], splitAmountSum=8.0, currentAmount=10.0"
  Fungible.verifySplit [1.0, 3.0, 4.0] 10.0
  Fungible.verifySplit [1.0, 2.0, 3.0, 4.0] 11.0
  validateAssertionFailure (Fungible.verifySplit [1.0, -2.0, 3.0, 4.0, 2.0] 10.0) $
    "Fungible::verifySplit - Amounts must be non-empty, strictly positive, and not exceed " <>
    "current amount. amounts=[1.0,-2.0,3.0,4.0,2.0], splitAmountSum=8.0, currentAmount=10.0"
  validateAssertionFailure (Fungible.verifySplit [1.0, 2.0, 30.0, 4.0] 10.0) $
    "Fungible::verifySplit - Amounts must be non-empty, strictly positive, and not exceed " <>
    "current amount. amounts=[1.0,2.0,30.0,4.0], splitAmountSum=37.0, currentAmount=10.0"
  validateAssertionFailure (Fungible.verifySplit [] 10.0) $
    "Fungible::verifySplit - Amounts must be non-empty, strictly positive, and not exceed " <>
    "current amount. amounts=[], splitAmountSum=0.0, currentAmount=10.0"
  validateAssertionFailure (Fungible.verifySplit [-1.0] 10.0) $
    "Fungible::verifySplit - Amounts must be non-empty, strictly positive, and not exceed " <>
    "current amount. amounts=[-1.0], splitAmountSum=-1.0, currentAmount=10.0"
  validateAssertionFailure (Fungible.verifySplit [] 0.0) $
    "Fungible::verifySplit - Amounts must be non-empty, strictly positive, and not exceed " <>
    "current amount. amounts=[], splitAmountSum=0.0, currentAmount=0.0"
  validateAssertionFailure (Fungible.verifySplit [] (-1.0)) $
    "Fungible::verifySplit - Amounts must be non-empty, strictly positive, and not exceed " <>
    "current amount. amounts=[], splitAmountSum=0.0, currentAmount=-1.0"

  -- Merge fungibles
  fungibleCid <- submitMulti [issuer, investor] [] do
    exerciseCmd restCid Fungible.Merge with fungibleCids = [splitCid1, splitCid2]

  -- Fungibles (after merge)
  fungible' <- fmap (\o -> toInterface @Fungible.I $ fromSome o) <$>
    queryContractId @Fungible.T issuer $ fromInterfaceContractId fungibleCid
  Fungible.verifyAmountPreserving [fungible] [fungible']

  -- Transfer
  transferableCid <- submitMulti [issuer, investor] [publicParty] do
    exerciseCmd (coerceInterfaceContractId @Transferable.I fungibleCid)
      Transferable.Transfer with
        actors = S.fromList [issuer, investor]; newOwnerAccount = investorAccount

  -- Assert state
  Holding.verifyOwnerOfHolding [(investor, transferableCid)]

  -- Debit asset
  Account.submitExerciseInterfaceByKeyCmd @Account.I [custodian, investor] [] investorAccount $
    Account.Debit with holdingCid = toInterfaceContractId transferableCid

  pure ()
