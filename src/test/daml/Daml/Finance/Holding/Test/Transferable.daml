-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Holding.Test.Transferable where

import DA.Map qualified as Map (fromList)
import DA.Set qualified as Set (fromList, singleton)
import Daml.Finance.Holding.V4.Factory qualified as Holding (Factory(..))
import Daml.Finance.Holding.Test.Common (TestInitialState(..), TestParties(..), setupInitialState, setupParties)
import Daml.Finance.Interface.Account.V4.Account qualified as Account (Debit(..), I)
import Daml.Finance.Interface.Holding.V4.Fungible qualified as Fungible (I, Split(..))
import Daml.Finance.Interface.Holding.V4.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Interface.Types.Common.V3.Types (HoldingStandard(..), Id(..))
import Daml.Finance.Interface.Util.V3.Lockable qualified as Lockable (Acquire(..), I, LockType(..), Release(..))
import Daml.Finance.Test.Util.Account qualified as Account (ControlledBy(..), submitExerciseInterfaceByKeyCmd, submitMustFailExerciseInterfaceByKeyCmd)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Script

run : Script ()
run = script do
  -- Create parties
  tp@TestParties{custodian; issuer; investor; locker; publicParty} <- setupParties
  let observers = Map.fromList [("PublicParty", Set.singleton publicParty)]

  -- Initialize state
  TestInitialState {investorAccount; issuerAccount; issuerHoldingCid} <- setupInitialState
    tp
    Holding.Factory with provider = custodian; id = Id "Holding Factory"; observers
    Transferable
    []
    Account.Owner

  -- Cannot split
  submitMultiMustFail [issuer, investor] [] do
    exerciseCmd (fromInterfaceContractId @Fungible.I issuerHoldingCid)
      Fungible.Split with amounts = [100.0]

  -- Lock asset
  lockableCid <- submitMulti [issuer, locker] [] do
    exerciseCmd (toInterfaceContractId @Lockable.I issuerHoldingCid)
      Lockable.Acquire with
        newLockers = Set.singleton locker; context = "Test Lock"; lockType = Lockable.Semaphore

  -- Cannot transfer
  submitMultiMustFail [issuer, investor] [] do
    exerciseCmd (fromInterfaceContractId @Transferable.I lockableCid)
      Transferable.Transfer with actors = Set.singleton investor; newOwnerAccount = investorAccount

  -- Cannot debit
  Account.submitMustFailExerciseInterfaceByKeyCmd @Account.I [custodian, issuer] [] issuerAccount $
    Account.Debit with holdingCid = fromInterfaceContractId lockableCid

  -- Unlock asset
  lockableCid <- submit locker do
    exerciseCmd lockableCid Lockable.Release with context = "Test Lock"

  -- Transfer
  transferableCid <- submitMulti [issuer, investor] [publicParty] do
    exerciseCmd (fromInterfaceContractId @Transferable.I lockableCid)
      Transferable.Transfer with
        actors = Set.fromList [issuer, investor]; newOwnerAccount = investorAccount

  -- Assert state
  Holding.verifyOwnerOfHolding [(investor, transferableCid)]

  -- Debit asset
  Account.submitExerciseInterfaceByKeyCmd @Account.I [custodian, investor] [] investorAccount $
    Account.Debit with holdingCid = toInterfaceContractId transferableCid

  pure ()
