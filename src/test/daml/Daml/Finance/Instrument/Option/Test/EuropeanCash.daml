-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Option.Test.EuropeanCash where

import DA.Date
import DA.Map qualified as M (empty, fromList)
import DA.Set (singleton)
import Daml.Finance.Data.Numeric.Observation (Observation(..))
import Daml.Finance.Instrument.Option.Test.Util
import Daml.Finance.Interface.Instrument.Option.Types (OptionTypeEnum(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..))
import Daml.Finance.Interface.Util.Common (qty)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Instrument (lifecycleAndVerifyPaymentEffects, originate, verifyNoLifecycleEffects)
import Daml.Finance.Test.Util.Time (dateToDateClockTime)
import Daml.Script

-- Define and lifecycle European call/put options, which are automatically exercised and cash
-- settled.
run : Script ()
run = script do
  [custodian, issuer, calendarDataProvider, publicParty] <-
    createParties ["Custodian", "Issuer", "Calendar Data Provider", "PublicParty"]

  -- Distribute commercial-bank cash
  now <- getTime
  let observers = [("PublicParty", singleton publicParty)]
  cashInstrumentCid <- originate custodian issuer "USD" "US Dollars" observers now

  -- Create and distribute option
  let
    strikeLow = 40.0
    -- CREATE_EUROPEAN_OPTION_VARIABLES_BEGIN
    strike = 50.0
    expiryDate = date 2019 May 15
    referenceAssetId = "AAPL-CLOSE"
    -- CREATE_EUROPEAN_OPTION_VARIABLES_END
    longOption = True
    shortOption = False

  -- CREATE_EUROPEAN_OPTION_OBSERVATIONS_BEGIN
  let observations = M.fromList [(dateToDateClockTime $ date 2019 May 15, 48.78)]
  observableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id referenceAssetId; observations; observers = M.empty
  -- CREATE_EUROPEAN_OPTION_OBSERVATIONS_END

  -- Issue instruments
  itmLongCallInstrument <- originateEuropeanCashOption custodian issuer "Long ITM Call" "Option"
    observers now expiryDate Call strikeLow cashInstrumentCid referenceAssetId longOption
  itmShortCallInstrument <- originateEuropeanCashOption custodian issuer "Short ITM Call" "Option"
    observers now expiryDate Call strikeLow cashInstrumentCid referenceAssetId shortOption
  otmLongCallInstrument <- originateEuropeanCashOption custodian issuer "Long OTM Call" "Option"
    observers now expiryDate Call strike cashInstrumentCid referenceAssetId longOption
  otmShortCallInstrument <- originateEuropeanCashOption custodian issuer "Short OTM Call" "Option"
    observers now expiryDate Call strike cashInstrumentCid referenceAssetId shortOption
  itmLongPutInstrument <- originateEuropeanCashOption custodian issuer "Long ITM Put" "Option"
    observers now expiryDate Put strike cashInstrumentCid referenceAssetId longOption
  itmShortPutInstrument <- originateEuropeanCashOption custodian issuer "Short ITM Put" "Option"
    observers now expiryDate Put strike cashInstrumentCid referenceAssetId shortOption
  otmLongPutInstrument <- originateEuropeanCashOption custodian issuer "Long OTM Put" "Option"
    observers now expiryDate Put strikeLow cashInstrumentCid referenceAssetId longOption
  otmShortPutInstrument <- originateEuropeanCashOption custodian issuer "Short OTM Put" "Option"
    observers now expiryDate Put strikeLow cashInstrumentCid referenceAssetId shortOption

  -- One day before the expiry date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays expiryDate 1) itmLongCallInstrument issuer
    [observableCid]

  -- Long call: Lifecycle and verify the lifecycle effects for an in-the-money option.
  let
    expectedConsumed = []
    expectedProduced = [qty 8.78 cashInstrumentCid]
  optionInstrumentAfterFirstPayment <- lifecycleAndVerifyPaymentEffects [publicParty] expiryDate
    itmLongCallInstrument issuer [observableCid] expectedConsumed expectedProduced

  -- Short call: Lifecycle and verify the lifecycle effects for an in-the-money option.
  let
    expectedConsumed = [qty 8.78 cashInstrumentCid]
    expectedProduced = []
  optionInstrumentAfterFirstPayment <- lifecycleAndVerifyPaymentEffects [publicParty] expiryDate
    itmShortCallInstrument issuer [observableCid] expectedConsumed expectedProduced

  -- Long call: Lifecycle and verify the lifecycle effects for an out-of-the-money option.
  let
    expectedConsumed = []
    expectedProduced = []
  optionInstrumentAfterFirstPayment <- lifecycleAndVerifyPaymentEffects [publicParty] expiryDate
    otmLongCallInstrument issuer [observableCid] expectedConsumed expectedProduced

  -- Short call: Lifecycle and verify the lifecycle effects for an out-of-the-money option.
  let
    expectedConsumed = []
    expectedProduced = []
  optionInstrumentAfterFirstPayment <- lifecycleAndVerifyPaymentEffects [publicParty] expiryDate
    otmShortCallInstrument issuer [observableCid] expectedConsumed expectedProduced

  -- Long put: Lifecycle and verify the lifecycle effects for an in-the-money option.
  let
    expectedConsumed = []
    expectedProduced = [qty 1.22 cashInstrumentCid]
  optionInstrumentAfterFirstPayment <- lifecycleAndVerifyPaymentEffects [publicParty] expiryDate
    itmLongPutInstrument issuer [observableCid] expectedConsumed expectedProduced

  -- Short put: Lifecycle and verify the lifecycle effects for an in-the-money option.
  let
    expectedConsumed = [qty 1.22 cashInstrumentCid]
    expectedProduced = []
  optionInstrumentAfterFirstPayment <- lifecycleAndVerifyPaymentEffects [publicParty] expiryDate
    itmShortPutInstrument issuer [observableCid] expectedConsumed expectedProduced

  -- Long put: Lifecycle and verify the lifecycle effects for an out-of-the-money option.
  let
    expectedConsumed = []
    expectedProduced = []
  optionInstrumentAfterFirstPayment <- lifecycleAndVerifyPaymentEffects [publicParty] expiryDate
    otmLongPutInstrument issuer [observableCid] expectedConsumed expectedProduced

  -- Short put: Lifecycle and verify the lifecycle effects for an out-of-the-money option.
  let
    expectedConsumed = []
    expectedProduced = []
  optionInstrumentAfterFirstPayment <- lifecycleAndVerifyPaymentEffects [publicParty] expiryDate
    otmShortPutInstrument issuer [observableCid] expectedConsumed expectedProduced

  pure ()
