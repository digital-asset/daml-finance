-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Option.Test.Util where

import DA.Map qualified as M (fromList)
import Daml.Finance.Instrument.Option.European.Instrument qualified as EuropeanOption (Instrument(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I)
import Daml.Finance.Interface.Instrument.Option.European.Types (OptionTypeEnum)
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey, Parties)
import Daml.Finance.Interface.Util.KeyTable (getKey)
import Daml.Script

-- | Originate a European option.
originateEuropeanOption : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time ->
  Date -> OptionTypeEnum -> Decimal -> InstrumentKey -> Text -> Bool -> Script InstrumentKey
originateEuropeanOption depository issuer label description observers lastEventTimestamp
  expiryDate optionType strike currency referenceAssetId ownerReceives = do
    -- CREATE_EUROPEAN_OPTION_INSTRUMENT_BEGIN
    let
      instrument = EuropeanOption.Instrument with
        depository; issuer; id = Id label; version = "0"; description
        observers = M.fromList observers; lastEventTimestamp
        ownerReceives; optionType; strike; expiryDate
        referenceAssetId; currency
    cid <- submitMulti [depository, issuer] [] do createCmd instrument
    -- CREATE_EUROPEAN_OPTION_INSTRUMENT_END
    pure $ getKey $ toInterface @BaseInstrument.I instrument