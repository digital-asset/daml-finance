-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Option.Test.Util where

import DA.Map qualified as M (empty, fromList)
import DA.Set qualified as S (fromList, singleton)
import Daml.Finance.Claims.Lifecycle.Rule qualified as Lifecycle (Rule(..))
import Daml.Finance.Instrument.Option.Dividend.Election qualified as DivOptionElection (Factory(..))
import Daml.Finance.Instrument.Option.Dividend.Instrument qualified as DividendOption (Instrument(..))
import Daml.Finance.Instrument.Option.EuropeanCash.Instrument qualified as EuropeanCashOption (Instrument(..))
import Daml.Finance.Instrument.Option.EuropeanPhysical.Instrument qualified as EuropeanPhysicalOption (Instrument(..))
import Daml.Finance.Interface.Instrument.Option.Dividend.Election.Factory qualified as DivOptionElection (Create(..), F)
import Daml.Finance.Interface.Instrument.Option.Dividend.Types (ElectionTypeEnum(..))
import Daml.Finance.Interface.Instrument.Option.Types (OptionTypeEnum)
import Daml.Finance.Interface.Lifecycle.Effect qualified as Effect (I)
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey, InstrumentQuantity, Parties)
import Daml.Finance.Test.Util.Instrument (createReference)
import Daml.Finance.Test.Util.Lifecycle (applyElectionAndVerify)
import Daml.Finance.Test.Util.Time (dateToDateClockTime)
import Daml.Script

-- | Originate a cash-settled European option.
originateEuropeanCashOption : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time ->
  Date -> OptionTypeEnum -> Decimal -> InstrumentKey -> Text -> Bool -> Script InstrumentKey
originateEuropeanCashOption depository issuer label description observers lastEventTimestamp
  expiryDate optionType strike currency referenceAssetId ownerReceives = do
  -- CREATE_EUROPEAN_OPTION_INSTRUMENT_BEGIN
    cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
      createCmd EuropeanCashOption.Instrument with
        depository; issuer; id = Id label; version = "0"; description
        observers = M.fromList observers; lastEventTimestamp
        ownerReceives; optionType; strike; expiryDate
        referenceAssetId; currency
  -- CREATE_EUROPEAN_OPTION_INSTRUMENT_END
    createReference cid depository issuer observers

-- | Originate a physically settled European option.
originateEuropeanPhysicalOption : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time ->
  Date -> OptionTypeEnum -> Decimal -> InstrumentKey -> InstrumentKey -> Bool ->
  Script InstrumentKey
originateEuropeanPhysicalOption depository issuer label description observers lastEventTimestamp
  expiryDate optionType strike currency referenceAsset ownerReceives = do
  -- CREATE_EUROPEAN_PHYSICAL_OPTION_INSTRUMENT_BEGIN
    cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
      createCmd EuropeanPhysicalOption.Instrument with
        depository; issuer; id = Id label; version = "0"; description
        observers = M.fromList observers; lastEventTimestamp; prevElections = []
        ownerReceives; optionType; strike; expiryDate
        referenceAsset; currency
  -- CREATE_EUROPEAN_PHYSICAL_OPTION_INSTRUMENT_END
    createReference cid depository issuer observers

-- | Originate a physically settled Dividend option.
originateDividendOption : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time ->
  Date -> InstrumentQuantity -> Optional InstrumentQuantity -> Optional InstrumentQuantity
  -> Script InstrumentKey
originateDividendOption depository issuer label description observers lastEventTimestamp
  expiryDate cashQuantity sharesQuantity fxQuantity = do
  -- CREATE_DIVIDEND_OPTION_INSTRUMENT_BEGIN
    cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
      createCmd DividendOption.Instrument with
        depository; issuer; id = Id label; version = "0"; description
        observers = M.fromList observers; lastEventTimestamp; prevElections = []
        expiryDate; cashQuantity; sharesQuantity; fxQuantity
  -- CREATE_DIVIDEND_OPTION_INSTRUMENT_END
    createReference cid depository issuer observers

-- | Verify the payments of an instrument after an election (excluding settlement)
electAndVerifyDivOptionPaymentEffects : [Party] -> Date -> Decimal -> InstrumentKey -> Party ->
  Party -> ElectionTypeEnum -> [InstrumentQuantity] -> [InstrumentQuantity]
  -> Script (Optional InstrumentKey, ContractId Effect.I)
electAndVerifyDivOptionPaymentEffects readAs today amount instrument issuer
  elector electedTag expectedConsumed expectedProduced = do
    -- Create election factory to allow holders to create elections
    electionFactoryCid <- submit issuer do
      toInterfaceContractId @DivOptionElection.F <$> createCmd DivOptionElection.Factory with
        provider = issuer
        observers = M.fromList [("Observers", S.fromList [elector, issuer])]

    -- Create a lifecycle rule
    lifecycleRuleCid <- toInterfaceContractId <$> submit issuer do
      createCmd Lifecycle.Rule with
        providers = S.singleton issuer
        observers = M.empty
        lifecycler = issuer
        id = Id "LifecycleRule"
        description = "Rule to lifecycle a generic instrument"

    -- Create the Election
    let
      electorIsOwner = True
      counterparty = issuer
      description = "election for physically settled option"
    electionCid <- submitMulti [elector] readAs
      do
        exerciseCmd electionFactoryCid DivOptionElection.Create with
          actors = S.singleton elector
          id = Id "election id"
          description
          claimType = electedTag
          electionTime = dateToDateClockTime today
          electorIsOwner
          elector
          counterparty
          instrument
          amount
          observers = M.fromList [("Holders", S.fromList [issuer, elector, counterparty])]
          provider = issuer

    applyElectionAndVerify issuer readAs [] expectedConsumed expectedProduced electionCid
      lifecycleRuleCid
