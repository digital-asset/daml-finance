-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Option.Test.Util where

import DA.List (sort)
import DA.Map qualified as M (empty, fromList)
import DA.Set qualified as S (fromList, singleton)
import Daml.Finance.Claims.Lifecycle.Rule qualified as Lifecycle (Rule(..))
import Daml.Finance.Instrument.Option.Dividend.Election qualified as DivOptionElection (Factory(..))
import Daml.Finance.Instrument.Option.Dividend.Instrument qualified as DividendOption (Instrument(..))
import Daml.Finance.Instrument.Option.EuropeanCash.Instrument qualified as EuropeanCashOption (Instrument(..))
import Daml.Finance.Instrument.Option.EuropeanPhysical.Instrument qualified as EuropeanPhysicalOption (Instrument(..))
import Daml.Finance.Interface.Instrument.Option.Dividend.Election.Factory qualified as DivOptionElection (Create(..), F)
import Daml.Finance.Interface.Instrument.Option.Dividend.Types (ElectionTypeEnum(..))
import Daml.Finance.Interface.Instrument.Option.Types (OptionTypeEnum)
import Daml.Finance.Interface.Lifecycle.Effect qualified as Effect (GetView(..), I)
import Daml.Finance.Interface.Lifecycle.Election qualified as Election (Apply(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey, InstrumentQuantity, Parties)
import Daml.Finance.Test.Util.Instrument (createReference)
import Daml.Finance.Test.Util.Time (dateToDateClockTime)
import Daml.Script

-- | Originate a cash-settled European option.
originateEuropeanCashOption : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time ->
  Date -> OptionTypeEnum -> Decimal -> InstrumentKey -> Text -> Bool -> Script InstrumentKey
originateEuropeanCashOption depository issuer label description observers lastEventTimestamp
  expiryDate optionType strike currency referenceAssetId ownerReceives = do
  -- CREATE_EUROPEAN_OPTION_INSTRUMENT_BEGIN
    cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
      createCmd EuropeanCashOption.Instrument with
        depository; issuer; id = Id label; version = "0"; description
        observers = M.fromList observers; lastEventTimestamp
        ownerReceives; optionType; strike; expiryDate
        referenceAssetId; currency
  -- CREATE_EUROPEAN_OPTION_INSTRUMENT_END
    createReference cid depository issuer observers

-- | Originate a physically settled European option.
originateEuropeanPhysicalOption : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time ->
  Date -> OptionTypeEnum -> Decimal -> InstrumentKey -> InstrumentKey -> Bool ->
  Script InstrumentKey
originateEuropeanPhysicalOption depository issuer label description observers lastEventTimestamp
  expiryDate optionType strike currency referenceAsset ownerReceives = do
  -- CREATE_EUROPEAN_PHYSICAL_OPTION_INSTRUMENT_BEGIN
    cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
      createCmd EuropeanPhysicalOption.Instrument with
        depository; issuer; id = Id label; version = "0"; description
        observers = M.fromList observers; lastEventTimestamp; prevElections = []
        ownerReceives; optionType; strike; expiryDate
        referenceAsset; currency
  -- CREATE_EUROPEAN_PHYSICAL_OPTION_INSTRUMENT_END
    createReference cid depository issuer observers

-- | Originate a physically settled Dividend option.
originateDividendOption : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time ->
  Date -> InstrumentQuantity -> Optional InstrumentQuantity -> Optional InstrumentQuantity
  -> Script InstrumentKey
originateDividendOption depository issuer label description observers lastEventTimestamp
  expiryDate cashQuantity sharesQuantity fxQuantity = do
  -- CREATE_DIVIDEND_OPTION_INSTRUMENT_BEGIN
    cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
      createCmd DividendOption.Instrument with
        depository; issuer; id = Id label; version = "0"; description
        observers = M.fromList observers; lastEventTimestamp; prevElections = []
        expiryDate; cashQuantity; sharesQuantity; fxQuantity
  -- CREATE_DIVIDEND_OPTION_INSTRUMENT_END
    createReference cid depository issuer observers

-- | Verify the payments of an instrument after an election (excluding settlement)
electAndVerifyDivOptionPaymentEffects : [Party] -> Date -> Decimal -> InstrumentKey -> Party ->
  Party -> ElectionTypeEnum -> [InstrumentQuantity] -> [InstrumentQuantity]
  -> Script (Optional InstrumentKey, ContractId Effect.I)
electAndVerifyDivOptionPaymentEffects readAs today amount instrument issuer
  custodian electedTag expectedConsumedQuantities expectedProducedQuantities = do

    -- Create election offers to allow holders to create elections
    electionFactoryCid <- submit issuer do
      toInterfaceContractId @DivOptionElection.F <$> createCmd DivOptionElection.Factory with
        provider = issuer
        observers = M.fromList [("Holders", S.singleton custodian)]
    -- Apply election to generate new instrument version + effects
    lifecycleRuleCid <- toInterfaceContractId <$> submit custodian do
      createCmd Lifecycle.Rule with
        providers = S.singleton custodian
        observers = M.empty
        lifecycler = issuer
        id = Id "LifecycleRule"
        description = "Rule to lifecycle a generic instrument"

    let
      electorIsOwner = True
      counterparty = issuer
      description = "election for physically settled option"
    exerciseOptionCid <- submitMulti [custodian] readAs
      do
        exerciseCmd electionFactoryCid DivOptionElection.Create with
          actors = S.singleton custodian
          id = Id "election id"
          description
          claimType = electedTag
          electionTime = dateToDateClockTime today
          electorIsOwner
          elector = custodian
          counterparty
          instrument
          amount
          observers = M.fromList [("Holders", S.fromList [custodian, issuer])]
          provider = issuer

    (newInstrumentKey, [effectCid]) <- submit issuer do
      exerciseCmd exerciseOptionCid Election.Apply with
        observableCids = []
        exercisableCid = lifecycleRuleCid

    -- Get the effect
    effectView <- submit issuer do
      exerciseCmd effectCid Effect.GetView with viewer = issuer

    -- Verify that the consumed/produced quantities match the expected ones
    assertMsg "The consumed quantities do not match the expected ones" $
      sort expectedConsumedQuantities == sort effectView.otherConsumed
    assertMsg "The produced quantities do not match the expected ones" $
      sort expectedProducedQuantities == sort effectView.otherProduced

    pure (newInstrumentKey, effectCid)
