-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Option.Test.Util where

import DA.List (head, sort)
import DA.Map qualified as M (empty, fromList)
import DA.Set qualified as S (empty, singleton)
import Daml.Finance.Claims.Lifecycle.Rule (Rule(..))
import Daml.Finance.Instrument.Option.European.Instrument qualified as EuropeanOption (Instrument(..))
import Daml.Finance.Interface.Instrument.Option.European.Types (OptionTypeEnum)
import Daml.Finance.Interface.Lifecycle.Effect qualified as Effect (I, GetView(..))
import Daml.Finance.Interface.Lifecycle.Observable.NumericObservable qualified as NumericObservable (I)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (I, Evolve(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey, InstrumentQuantity, Parties)
import Daml.Finance.Test.Util.Instrument (createReference)
import Daml.Finance.Test.Util.Time (createClockUpdateEvent)
import Daml.Script

-- | Originate a European option.
originateEuropeanOption : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time ->
  Date -> OptionTypeEnum -> Decimal -> InstrumentKey -> Text -> Bool -> Script InstrumentKey
originateEuropeanOption depository issuer label description observers lastEventTimestamp
  expiryDate optionType strike currency referenceAssetId ownerReceives = do
    cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
      createCmd EuropeanOption.Instrument with
        depository; issuer; id = Id label; version = "0"; description
        observers = M.fromList observers; lastEventTimestamp
        ownerReceives; optionType; strike; expiryDate
        referenceAssetId; currency
    createReference cid depository issuer observers

-- | Lifecycle the instrument as of this date.
lifecycleInstrument : [Party] -> Date -> InstrumentKey -> Party ->
  [ContractId NumericObservable.I] -> Script (Optional InstrumentKey, [ContractId Effect.I])
lifecycleInstrument readAs today instrument issuer observableCids = do
  -- create clock update event
  clockEventCid <- createClockUpdateEvent (S.singleton issuer) today S.empty

  -- Create a lifecycle rule
  lifecycleRuleCid <- toInterfaceContractId @Lifecycle.I <$> submit issuer do
    createCmd Rule with
      providers = S.singleton issuer
      observers = M.empty
      lifecycler = issuer
      id = Id "LifecycleRule"
      description = "Rule to lifecycle an option instrument"

  -- Try to lifecycle instrument
  (lifecycleCid, effectCids) <- submitMulti [issuer] readAs do
    exerciseCmd lifecycleRuleCid Lifecycle.Evolve with
      eventCid = clockEventCid
      observableCids
      instrument

  pure (lifecycleCid, effectCids)

-- | Verify a that there are no lifecycle effects of the instrument on this date.
verifyNoLifecycleEffects : [Party] -> Date -> InstrumentKey -> Party ->
  [ContractId NumericObservable.I] -> Script ()
verifyNoLifecycleEffects readAs today instrument issuer observableCids = do
  (_, effectCids) <- lifecycleInstrument readAs today instrument issuer observableCids
  assertMsg ("There should be no lifecycle effects on " <> show today) (null effectCids)

-- | Verify the lifecycling effects of an option (excluding settlement)
lifecycleAndVerifyEffects : [Party] -> Date -> InstrumentKey -> Party ->
  [ContractId NumericObservable.I] -> [InstrumentQuantity] -> [InstrumentQuantity] ->
  Script (Optional InstrumentKey)
lifecycleAndVerifyEffects readAs today optionInstrument issuer
  observableCids expectedConsumedQuantities expectedProducedQuantities = do
    (newInstrumentKey, effectCids) <- lifecycleInstrument readAs today optionInstrument issuer
      observableCids
    let effectCid = head effectCids -- gives a better error message in case there are no effects

    -- Get the effect
    effectView <- submit issuer do
      exerciseCmd effectCid Effect.GetView with viewer = issuer

    -- Verify that the consumed/produced quantities match the expected ones
    assertMsg "The consumed quantities do not match the expected ones" $
      sort expectedConsumedQuantities == sort effectView.otherConsumed
    assertMsg "The produced quantities do not match the expected ones" $
      sort expectedProducedQuantities == sort effectView.otherProduced

    pure newInstrumentKey
