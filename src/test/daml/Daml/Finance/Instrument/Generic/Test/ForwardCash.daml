-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Generic.Test.ForwardCash where

import ContingentClaims.Core.Claim (Inequality(..), one, scale, when)
import ContingentClaims.Core.Observation (Observation(..))
import DA.Date (addDays, toDateUTC)
import DA.Map qualified as M (empty, fromList)
import DA.Set (empty, fromList, singleton, toList)
import Daml.Finance.Data.Observable.Observation (Observation(..))
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Instrument.Generic.Test.Util (originateGeneric, dateToDateClockTime)
import Daml.Finance.Interface.Lifecycle.Rule.Claim qualified as Claim (ClaimEffect(..), I)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (Evolve(..), I)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..))
import Daml.Finance.Interface.Types.Common (Id(..), Parties)
import Daml.Finance.Lifecycle.Rule.Claim qualified as Claim (Rule(..))
import Daml.Finance.Settlement.Factory (Factory(..))
import Daml.Finance.Test.Util.Account qualified as Account (ControlledBy(..), createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate, submitExerciseInterfaceByKeyCmd)
import Daml.Finance.Test.Util.Lifecycle (createClockAndEvent)
import Daml.Script

-- | Parties involved in the test script.
data TestParties = TestParties
  with
    bank : Party
      -- ^ Acts as custodian in the respective holdings (both cash holdings and instrument holdings). It also acts as depository in the forward instrument.
    broker : Party
      -- ^ Acts as issuer of the forward contract. It is also the party tasked with lifecycling of the contract.
    centralBank : Party
      -- ^ The Central Bank is the depository and the issuer of the cash instrument.
    investor : Party
      -- ^ Owner of the equity forward holding.
    settlers : Parties
      -- ^ Any of the parties can trigger the settlement of fully allocated settlement instructions.
    publicParty : Party
      -- ^ The public party. Every party can readAs the public party.

-- Cash-settled forward trade lifecycling and settlement (needs observations)
run : Script ()
run = script do
  TestParties{..} <- setupParties

  -- Account and holding factory
  let pp = [("PublicParty", singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory bank pp
  holdingFactoryCid <- toInterfaceContractId <$> submit bank do
    createCmd Fungible.Factory with provider = bank; observers = M.fromList pp

  -- Create accounts
  investorAccount <- Account.createAccount "Default Account" [] accountFactoryCid holdingFactoryCid [] Account.Owner bank investor

  -- Distribute cash
  now <- getTime
  cashInstrument <- Instrument.originate centralBank centralBank "USD" "United States Dollar" pp now

  -- Create observable
  let
    maturity = addDays (toDateUTC now) 1
    observations = M.fromList [(dateToDateClockTime maturity, 200.0)]
  observableCid <- coerceContractId <$> submit broker do createCmd Observation with provider = broker; id = Id "SPOT/AAPL"; observations; observers = M.empty

  -- Create and distribute a gerneric derivative
  let
    equityObservable = "SPOT/AAPL"
    claims = when (TimeGte $ dateToDateClockTime maturity) $ scale (Observe equityObservable - Const 150.0) $ one cashInstrument
  genericInstrument <- originateGeneric bank broker "FWD-AAPL" "Forward Contract" now claims pp now
  investorGenericTransferableCid <- Account.credit [publicParty] genericInstrument 1_000.0 investorAccount

  -- create clock and clock update event
  (clockCid, clockEventCid) <- createClockAndEvent (singleton broker) maturity empty

  -- Lifecycle derivative
  (_, [effectCid]) <- Instrument.submitExerciseInterfaceByKeyCmd @Lifecycle.I [broker] [] genericInstrument Lifecycle.Evolve with eventCid = clockEventCid; observableCids = [observableCid]; ruleName = "Time"; timeObservableCid = clockCid

  -- Create settlement factory
  settlementFactoryCid <- toInterfaceContractId <$> submit bank do createCmd Factory with provider = bank; observers = empty

  -- Claim effect
  lifecycleClaimRuleCid <- toInterfaceContractId @Claim.I <$> submit bank do
    createCmd Claim.Rule
      with
        providers = singleton bank
        claimers = fromList [bank, investor]
        settlers
        settlementFactoryCid

  result <- submitMulti [bank] [publicParty] do
    exerciseCmd lifecycleClaimRuleCid Claim.ClaimEffect with
      claimer = bank
      holdingCids = [coerceContractId investorGenericTransferableCid]
      effectCid
      batchId = Id "ForwardCashSettlement"

  let [investorInstrumentInstructionCid, bankCashInstructionCid] = result.instructionCids

  -- Allocate instructions
  (investorInstrumentInstructionCid, _) <- submit investor do exerciseCmd investorInstrumentInstructionCid Instruction.Allocate with actors = singleton investor; allocation = Pledge investorGenericTransferableCid
  (bankCashInstructionCid, _) <- submit bank do exerciseCmd bankCashInstructionCid Instruction.Allocate with actors = singleton bank; allocation = CreditReceiver

  -- Approve instructions
  investorInstrumentInstructionCid <- submit bank do exerciseCmd investorInstrumentInstructionCid Instruction.Approve with actors = singleton bank; approval = DebitSender
  bankCashInstructionCid <- submit investor do exerciseCmd bankCashInstructionCid Instruction.Approve with actors = singleton investor; approval = TakeDelivery investorAccount

  -- Settle batch
  [investorCashTransferableCid] <- submitMulti (toList settlers) [publicParty] do exerciseCmd result.batchCid Batch.Settle with actors = settlers

  -- Assert state
  Holding.verifyOwnerOfHolding [(investor, investorCashTransferableCid)]

  pure ()

setupParties : Script TestParties
setupParties = do
  [bank, broker, centralBank, investor, settler, publicParty] <-
    createParties ["Bank", "Broker", "Central Bank", "Investor", "Settler", "PublicParty"]
  pure $ TestParties with bank; broker; centralBank; investor; settlers = singleton settler; publicParty
