-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Generic.Test.ForwardPhysical where

import ContingentClaims.Claim (Inequality(..), and, give, one, scale, when)
import ContingentClaims.Observation (Observation(..))
import DA.Date (addDays, toDateUTC)
import DA.Map qualified as M (fromList)
import DA.Set (empty, fromList, singleton, toList)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Instrument.Generic.Test.Util (originateGeneric, dateToDateClockTime)
import Daml.Finance.Interface.Lifecycle.Rule.Claim qualified as Claim (ClaimEffect(..), I)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (Evolve(..), I)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..))
import Daml.Finance.Interface.Types.Common (Id(..), Parties)
import Daml.Finance.Lifecycle.Rule.Claim (Rule(..))
import Daml.Finance.Settlement.Factory (Factory(..))
import Daml.Finance.Test.Util.Account qualified as Account (createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate, submitExerciseInterfaceByKeyCmd)
import Daml.Finance.Test.Util.Lifecycle (createClockAndEvent)
import Daml.Script
import Prelude hiding (and)

-- | Parties involved in the test script.
data TestParties = TestParties
  with
    bank : Party
      -- ^ Acts as custodian in the respective holdings (both cash holdings and instrument holdings). It also acts as depository in the forward instrument and the equity instrument.
    broker : Party
      -- ^ Acts as issuer of the forward contract. It is also the party tasked with lifecycling of the contract.
    centralBank : Party
      -- ^ The Central Bank is the depository and the issuer of the cash instrument.
    equityIssuer : Party
      -- ^ Acts as issuer of the underlying equity contract.
    investor : Party
      -- ^ Owner of the equity forward holding.
    settlers : Parties
      -- ^ Any of the parties can trigger the settlement of fully allocated settlement instructions.
    publicParty : Party
      -- ^ The public party. Every party can readAs the public party.

-- Physically-settled forward trade lifecycling and settlement (no observations)
run : Script ()
run = script do
  TestParties{..} <- setupParties

  -- Account and holding factory
  let fp = [("FactoryProvider", singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory bank fp
  holdingFactoryCid <- toInterfaceContractId <$> submit bank do
    createCmd Fungible.Factory with provider = bank; observers = M.fromList fp

  -- Create accounts
  [bankOwnAccount, investorAccount] <- mapA (Account.createAccount "Default Account" [publicParty] accountFactoryCid holdingFactoryCid [] bank) [bank, investor]

  -- Distribute assets
  now <- getTime
  let pp = [("PublicParty", singleton publicParty)]
  equityInstrument <- Instrument.originate bank equityIssuer "AAPL" "Apple Inc." pp now
  bankEquityTransferableCid <- Account.credit [publicParty] equityInstrument 1_000.0 bankOwnAccount
  cashInstrument <- Instrument.originate centralBank centralBank "USD" "United States Dollar" pp now
  investorCashTransferableCid <- Account.credit [publicParty] cashInstrument 200_000.0 investorAccount

  -- Create and distribute a generic derivative
  let
    maturity = addDays (toDateUTC now) 1
    cashInstrumentDeliverable = one cashInstrument
    equityInstrumentDeliverable = one equityInstrument
    claims = when (TimeGte $ dateToDateClockTime maturity) $ and equityInstrumentDeliverable $ scale (Const 200.0) $ give cashInstrumentDeliverable
  genericInstrument <- originateGeneric bank broker "FWD-AAPL" "Forward Contract" now claims [("PublicParty", singleton publicParty)] now
  investorGenericTransferableCid <- Account.credit [publicParty] genericInstrument 1_000.0 investorAccount

  -- create clock and clock update event
  (clockCid, clockEventCid) <- createClockAndEvent (singleton broker) maturity empty

  -- Lifecycle a generic derivative
  (_, [effectCid]) <- Instrument.submitExerciseInterfaceByKeyCmd @Lifecycle.I [broker] [] genericInstrument Lifecycle.Evolve with settlers; eventCid = clockEventCid; observableCids = []; ruleName = "Time"; clockCid

  -- Create settlement factory
  settlementFactoryCid <- toInterfaceContractId <$> submitMulti [investor] [] do createCmd Factory with provider = investor; observers = empty

  -- Claim effect
  lifecycleClaimRuleCid <- toInterfaceContractId @Claim.I <$> submitMulti [bank, investor] [] do
    createCmd Rule
      with
        providers = fromList [bank, investor]
        claimers = singleton investor
        settlers
        settlementFactoryCid

  result <- submitMulti [investor] [publicParty] do
    exerciseCmd lifecycleClaimRuleCid Claim.ClaimEffect with
      claimer = investor
      holdingCids = [coerceContractId investorGenericTransferableCid]
      effectCid
      batchId = Id "ForwardPhysicalSettlement"

  let [investorCashInstructionCid, bankEquityInstructionCid] = result.instructionCids

  -- Allocate instructions
  (bankEquityInstructionCid, _) <- submitMulti [bank] [] do exerciseCmd bankEquityInstructionCid Instruction.Allocate with allocation = Pledge bankEquityTransferableCid
  (investorCashInstructionCid, _) <- submitMulti [investor] [] do exerciseCmd investorCashInstructionCid Instruction.Allocate with allocation = Pledge investorCashTransferableCid

  -- Approve instructions
  investorCashInstructionCid <- submitMulti [bank] [] do exerciseCmd investorCashInstructionCid Instruction.Approve with approval = TakeDelivery bankOwnAccount
  bankEquityInstructionCid <- submitMulti [investor] [] do exerciseCmd bankEquityInstructionCid Instruction.Approve with approval = TakeDelivery investorAccount

  -- Settle batch
  [bankCashTransferableCid, investorEquityTransferableCid] <-
    submitMulti (toList settlers) [publicParty] do exerciseCmd result.batchCid Batch.Settle with actors = settlers

  -- Assert state
  Holding.verifyOwnerOfHolding [(bank, bankCashTransferableCid), (investor, investorEquityTransferableCid)]

  pure ()

setupParties : Script TestParties
setupParties = do
  [bank, broker, centralBank, equityIssuer, investor, settler, publicParty] <-
    createParties ["Bank", "Broker", "Central Bank", "Equity Issuer", "Investor", "Settler", "PublicParty"]
  pure $ TestParties with bank; broker; centralBank; equityIssuer; investor; settlers = singleton settler; publicParty
