-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Generic.Test.ForwardPhysical where

import ContingentClaims.Core.Claim (Inequality(..), and, give, one, scale, when)
import ContingentClaims.Core.Observation (Observation(..))
import DA.Date (addDays, toDateUTC)
import DA.Map qualified as M (empty, fromList)
import DA.Set (empty, fromList, singleton, toList)
import DA.Time (time)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Instrument.Generic.Lifecycle.Rule qualified as Lifecycle (Rule(..))
import Daml.Finance.Instrument.Generic.Test.Util (originateGeneric, dateToDateClockTime)
import Daml.Finance.Interface.Lifecycle.Rule.Claim qualified as Claim (ClaimEffect(..), I)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (Evolve(..), I)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..), Parties)
import Daml.Finance.Lifecycle.Rule.Claim (Rule(..))
import Daml.Finance.Settlement.Factory (Factory(..))
import Daml.Finance.Settlement.RouteProvider.SingleCustodian (SingleCustodian(..))
import Daml.Finance.Test.Util.Account qualified as Account (ControlledBy(..), createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate)
import Daml.Finance.Test.Util.Time (createClockUpdateEvent)
import Daml.Script
import Prelude hiding (and)

-- | Parties involved in the test script.
data TestParties = TestParties
  with
    bank : Party
      -- ^ Acts as custodian in the respective holdings (both cash holdings and instrument
      --   holdings). It also acts as depository in the forward instrument and the equity
      --   instrument.
    broker : Party
      -- ^ Acts as issuer of the forward contract. It is also the party tasked with lifecycling of
      --   the contract.
    centralBank : Party
      -- ^ The Central Bank is the depository and the issuer of the cash instrument.
    equityIssuer : Party
      -- ^ Acts as issuer of the underlying equity contract.
    investor : Party
      -- ^ Owner of the equity forward holding.
    settlers : Parties
      -- ^ Any of the parties can trigger the settlement of fully allocated settlement instructions.
    publicParty : Party
      -- ^ The public party. Every party can readAs the public party.

-- Physically-settled forward trade lifecycling and settlement (no observations)
run : Script ()
run = script do
  TestParties{..} <- setupParties

  -- Account and holding factory
  let pp = [("PublicParty", singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory bank pp
  holdingFactoryCid <- toInterfaceContractId <$> submit bank do
    createCmd Fungible.Factory with provider = bank; observers = M.fromList pp

  -- Create accounts
  investorAccount <- Account.createAccount "Default Account" [] accountFactoryCid holdingFactoryCid
    [] Account.Owner bank investor

  -- Distribute assets
  now <- getTime
  equityInstrument <- Instrument.originate bank equityIssuer "AAPL" "Apple Inc." pp now
  cashInstrument <- Instrument.originate centralBank centralBank "USD" "United States Dollar" pp now
  investorCashHoldingCid <- Account.credit [publicParty] cashInstrument 200_000.0 investorAccount

  -- Create and distribute a generic derivative
  let
    maturity = addDays (toDateUTC now) 1
    cashInstrumentDeliverable = one cashInstrument
    equityInstrumentDeliverable = one equityInstrument
    claims = when (TimeGte $ dateToDateClockTime maturity)
             $ and equityInstrumentDeliverable
             $ scale (Const 200.0)
             $ give cashInstrumentDeliverable
  genericInstrument <- originateGeneric bank broker "FWD-AAPL" "Forward Contract" now claims
    [("PublicParty", singleton publicParty)] now
  investorGenericHoldingCid <- Account.credit [publicParty] genericInstrument 1_000.0
    investorAccount

  -- create clock update event
  clockEventCid <- createClockUpdateEvent (singleton broker) maturity empty

  -- Lifecycle a generic derivative
  lifecycleRuleCid <- toInterfaceContractId @Lifecycle.I <$>
    submit bank do
      createCmd Lifecycle.Rule with
        providers = singleton bank
        observers= M.empty
        lifecycler = broker
        id = Id "LifecycleRule"
        description = "Rule to lifecycle a generic instrument"

  (_, [effectCid]) <- submit broker do
    exerciseCmd lifecycleRuleCid Lifecycle.Evolve with
      eventCid = clockEventCid
      observableCids = []
      instrument = genericInstrument

  -- Create route provider
  routeProviderCid <- toInterfaceContractId <$>
    submit investor do
      createCmd SingleCustodian with
        provider = investor; observers = empty; custodian = bank

  -- Create settlement factory
  settlementFactoryCid <- toInterfaceContractId <$>
    submit investor do createCmd Factory with provider = investor; observers = empty

  -- Claim effect
  lifecycleClaimRuleCid <- toInterfaceContractId @Claim.I <$>
    submitMulti [bank, investor] [] do
      createCmd Rule with
        providers = fromList [bank, investor]
        claimers = singleton investor
        settlers
        routeProviderCid
        settlementFactoryCid
        netInstructions = False

  result <- submitMulti [investor] [publicParty] do
    exerciseCmd lifecycleClaimRuleCid Claim.ClaimEffect with
      claimer = investor
      holdingCids = [investorGenericHoldingCid]
      effectCid
      batchId = Id "ForwardPhysicalSettlement"

  let
    [investorInstrumentInstructionCid, investorCashInstructionCid,
      bankEquityInstructionCid] = result.instructionCids

  -- Allocate instructions
  (investorInstrumentInstructionCid, _) <- submit investor do
    exerciseCmd investorInstrumentInstructionCid Instruction.Allocate with
      actors = singleton investor; allocation = Pledge investorGenericHoldingCid
  (bankEquityInstructionCid, _) <- submit bank do
    exerciseCmd bankEquityInstructionCid Instruction.Allocate with
      actors = singleton bank; allocation = CreditReceiver
  (investorCashInstructionCid, _) <- submit investor do
    exerciseCmd investorCashInstructionCid Instruction.Allocate with
      actors = singleton investor; allocation = Pledge investorCashHoldingCid

  -- Approve instructions
  investorInstrumentInstructionCid <- submit bank do
    exerciseCmd investorInstrumentInstructionCid Instruction.Approve with
      actors = singleton bank; approval = DebitSender
  investorCashInstructionCid <- submit bank do
    exerciseCmd investorCashInstructionCid Instruction.Approve with
      actors = singleton bank; approval = DebitSender
  bankEquityInstructionCid <- submit investor do
    exerciseCmd bankEquityInstructionCid Instruction.Approve with
      actors = singleton investor; approval = TakeDelivery investorAccount

  -- Set time
  setTime $ time maturity 0 0 0

  -- Settle batch
  [investorEquityHoldingCid] <-
    submitMulti (toList settlers) [publicParty] do
      exerciseCmd result.batchCid Batch.Settle with actors = settlers

  -- Assert state
  Holding.verifyOwnerOfHolding [(investor, investorEquityHoldingCid)]

  pure ()

setupParties : Script TestParties
setupParties = do
  [bank, broker, centralBank, equityIssuer, investor, settler, publicParty] <- createParties
    ["Bank", "Broker", "Central Bank", "Equity Issuer", "Investor", "Settler", "PublicParty"]
  pure TestParties with
    bank; broker; centralBank; equityIssuer; investor; settlers = singleton settler; publicParty
