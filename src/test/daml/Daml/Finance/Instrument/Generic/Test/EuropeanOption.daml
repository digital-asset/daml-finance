-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Generic.Test.EuropeanOption where

import ContingentClaims.Core.Builders (european)
import ContingentClaims.Core.Claim (one, or, scale, zero)
import ContingentClaims.Core.Observation (Observation(..))
import DA.Assert ((===))
import DA.Date (addDays, toDateUTC)
import DA.Map qualified as M (empty, fromList)
import DA.Set (empty, fromList, singleton, toList)
import DA.Text (sha256)
import Daml.Finance.Data.Observable.Observation (Observation(..))
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..), T)
import Daml.Finance.Instrument.Generic.Election (CreateElection(..), ElectionFactory(..))
import Daml.Finance.Instrument.Generic.Lifecycle.Rule qualified as Lifecycle (Rule(..))
import Daml.Finance.Instrument.Generic.Test.Util (originateGeneric, dateToDateClockTime, mapClaimToUTCTime)
import Daml.Finance.Interface.Account.Util (getOwner)
import Daml.Finance.Interface.Claims.Types (C, Observable, Deliverable)
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (SplitResult(..), I, Split(..))
import Daml.Finance.Interface.Holding.Util (getAmount)
import Daml.Finance.Interface.Instrument.Generic.Election qualified as Election (Apply(..), I)
import Daml.Finance.Interface.Lifecycle.Rule.Claim qualified as Claim (ClaimEffect(..), I)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..))
import Daml.Finance.Interface.Types.Common (Id(..), Parties)
import Daml.Finance.Lifecycle.Rule.Claim qualified as Claim (Rule(..))
import Daml.Finance.Settlement.Factory (Factory(..))
import Daml.Finance.Settlement.RouteProvider.SingleCustodian (SingleCustodian(..))
import Daml.Finance.Test.Util.Account qualified as Account (ControlledBy(..), createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate)
import Daml.Script
import Prelude hiding (or)

-- This script tests the election mechanism on an Instrument.Generic using the example of a
-- cash-settled European Call option. The owner of the option holding has the right to exercise it
-- at maturity.

-- | Parties involved in the test script.
data TestParties = TestParties
  with
    bank : Party
      -- ^ Acts as custodian in the respective holdings (both cash holdings and instrument
      --   holdings). It also acts as depository in the option instrument.
    broker : Party
      -- ^ Acts as issuer of the option instrument. It is also the party tasked with lifecycling the
      --   contract and processing elections.
    centralBank : Party
      -- ^ The Central Bank is the depository and the issuer of the cash instrument.
    investor1 : Party
      -- ^ Owner of the option holding. Chooses to exercise the right of the call option.
    investor2 : Party
      -- ^ Owner of the option holding. Chooses to not exercise the right of the call option.
    settlers : Parties
      -- ^ Any of the parties can trigger the settlement of fully allocated settlement instructions.
    publicParty : Party
      -- ^ The public party. Every party can readAs the public party.

-- | Creates the claim for a European Call option and the corresponding elections
bootstrapOption : Date -> Decimal -> Observable -> Deliverable -> (C, C, C)
bootstrapOption maturity strike spot ccy =
  let
    exercised = scale (Observe spot - Const strike) $ one ccy
    notExercised = zero
    option = european maturity $ exercised `or` notExercised
  in (mapClaimToUTCTime option, mapClaimToUTCTime exercised, mapClaimToUTCTime notExercised)

run : Script ()
run = script do

  --------------
  -- 0. SETUP --
  --------------
  TestParties{..} <- setupParties

  -- Account and holding factory
  let pp = [("PublicParty", singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory bank pp
  holdingFactoryCid <- toInterfaceContractId <$> submit bank do
    createCmd Fungible.Factory with provider = bank; observers = M.fromList pp

  -- Create accounts
  [investor1Account, investor2Account] <- mapA (Account.createAccount "Default Account" []
    accountFactoryCid holdingFactoryCid [] Account.Owner bank) [investor1, investor2]

  -- Originate cash
  now <- getTime
  cashInstrument <- Instrument.originate centralBank centralBank "USD" "United States Dollar" pp now

  -- Create observable for the underlying fixing
  let
    maturity = addDays (toDateUTC now) 1
    observations = M.fromList [(dateToDateClockTime maturity, 200.0)]
  observableCid <- toInterfaceContractId <$> submit broker do
    createCmd Observation with
      provider = broker; id = Id "SPOT/AAPL"; observations; observers = M.empty

  -- Create and distribute a generic derivative
  let
    equityObservable = "SPOT/AAPL"
    (option, exercised, notExercised) = bootstrapOption maturity 150.0 equityObservable
      cashInstrument
  genericInstrument <-
    originateGeneric bank broker "OPTION-AAPL" "European Option" now option pp now
  investor1GenericHoldingCid <-
    Account.credit [publicParty] genericInstrument 1_000.0 investor1Account
  investor2GenericHoldingCid <-
    Account.credit [publicParty] genericInstrument 1_000.0 investor2Account

  -- Create election factory to allow holders to create elections
  exerciseElectionFactoryCid <- submit broker do
    createCmd ElectionFactory with
      provider = broker
      id = Id . sha256 $ show exercised
      description = "OPTION-AAPL - Exercise"
      claim = exercised
      observers = singleton publicParty
      instrument = genericInstrument

  expireElectionFactoryCid <- submit broker do
    createCmd ElectionFactory with
      provider = broker
      id = Id . sha256 $ show notExercised
      description = "OPTION-AAPL - Expire"
      claim = notExercised
      observers = singleton publicParty
      instrument = genericInstrument

  -----------------------------------------
  -- 1. ELECTION 1 : EXERCISE THE OPTION --
  -----------------------------------------

  -- One cannot exercise for more units than they own
  submitMultiMustFail [investor1] [publicParty] do
    exerciseCmd exerciseElectionFactoryCid CreateElection with
      elector = investor1
      electionTime = dateToDateClockTime maturity
      holdingCid = investor1GenericHoldingCid
      amount = 5000.0

  -- Create election
  exerciseOptionCid <- toInterfaceContractId @Election.I <$> submitMulti [investor1] [publicParty]
    do
      exerciseCmd exerciseElectionFactoryCid CreateElection with
        elector = investor1
        electionTime = dateToDateClockTime maturity
        holdingCid = investor1GenericHoldingCid
        amount = 500.0

  -- Apply election to generate new instrument version + effects
  lifecycleRuleCid <- toInterfaceContractId <$> submit bank do
    createCmd Lifecycle.Rule with
      providers = singleton bank
      observers= M.empty
      lifecycler = broker
      id = Id "LifecycleRule"
      description = "Rule to lifecycle a generic instrument"

  (_, [effectCid]) <- submit broker do
    exerciseCmd exerciseOptionCid Election.Apply with
      observableCids = [observableCid]
      exercisableCid = lifecycleRuleCid

  -- Create route provider
  routeProviderCid <- toInterfaceContractId <$> submit investor1 do
    createCmd SingleCustodian with provider = investor1; observers = empty; custodian = bank

  -- Create settlement factory
  settlementFactoryCid <- toInterfaceContractId <$> submit investor1 do
    createCmd Factory with provider = investor1; observers = empty

  -- Claim effect
  lifecycleClaimRuleCid <- toInterfaceContractId @Claim.I <$> submit bank do
    createCmd Claim.Rule with
      providers = singleton bank
      claimers = fromList [bank, investor1]
      settlers
      routeProviderCid
      settlementFactoryCid
      netInstructions = False

  -- Cannot claim effect for a different amount than what was elected
  submitMultiMustFail [investor1] [publicParty] do
    exerciseCmd lifecycleClaimRuleCid Claim.ClaimEffect with
      claimer = investor1
      holdingCids = [investor1GenericHoldingCid]
      effectCid
      batchId = Id "OptionExerciseSettlement"

  -- Split fungible in order to claim with the right amount
  let fungibleCid : ContractId Fungible.I = coerceInterfaceContractId investor1GenericHoldingCid
  Fungible.SplitResult [splitCid] (Some restCid) <- submit investor1 do
    exerciseCmd (fungibleCid) Fungible.Split with amounts = [500.0]

  result <- submitMulti [investor1] [publicParty] do
    exerciseCmd lifecycleClaimRuleCid Claim.ClaimEffect with
      claimer = investor1
      holdingCids = [toInterfaceContractId splitCid]
      effectCid
      batchId = Id "OptionExerciseSettlement"

  let [investorInstrumentInstructionCid, bankCashInstructionCid] = result.instructionCids

  -- Allocate instructions
  (investorInstrumentInstructionCid, _) <- submit investor1 do
    exerciseCmd investorInstrumentInstructionCid Instruction.Allocate with
      actors = singleton investor1; allocation = Pledge $ toInterfaceContractId splitCid
  (bankCashInstructionCid, _) <- submit bank do
    exerciseCmd bankCashInstructionCid Instruction.Allocate with
      actors = singleton bank; allocation = CreditReceiver

  -- Approve instructions
  investorInstrumentInstructionCid <- submit bank do
    exerciseCmd investorInstrumentInstructionCid Instruction.Approve with
      actors = singleton bank; approval = DebitSender
  bankCashInstructionCid <- submit investor1 do
    exerciseCmd bankCashInstructionCid Instruction.Approve with
      actors = singleton investor1; approval = TakeDelivery investor1Account

  -- Settle batch
  [investorCashHoldingCid] <- submitMulti (toList settlers) [publicParty] do
    exerciseCmd result.batchCid Batch.Settle with actors = settlers

  -- Assert state
  Some investorCash <-
    queryContractId investor1 $ fromInterfaceContractId @Fungible.T investorCashHoldingCid
  getAmount investorCash === 25_000.0
  getOwner investorCash === investor1

  -----------------------------------------
  -- 1. ELECTION 2 : EXPIRE THE OPTION --
  -----------------------------------------

  expireOptionCid : ContractId Election.I <- toInterfaceContractId <$>
    submitMulti [investor2] [publicParty] do
      exerciseCmd expireElectionFactoryCid CreateElection with
        elector = investor2
        electionTime = dateToDateClockTime maturity
        holdingCid = investor2GenericHoldingCid
        amount = 1000.0

  (_, [effectCid]) <- submit broker do
    exerciseCmd expireOptionCid Election.Apply with
      observableCids = [observableCid]
      exercisableCid = lifecycleRuleCid

  -- Create route provider
  routeProviderCid <- toInterfaceContractId <$> submit investor2 do
    createCmd SingleCustodian with provider = investor2; observers = empty; custodian = bank

  -- Create settlement factory
  settlementFactoryCid <- toInterfaceContractId <$> submit investor2 do
    createCmd Factory with provider = investor2; observers = empty

  lifecycleClaimRuleCid <- toInterfaceContractId @Claim.I <$> submit bank do
    createCmd Claim.Rule with
      providers = singleton bank
      claimers = fromList [bank, investor2]
      settlers
      routeProviderCid
      settlementFactoryCid
      netInstructions = False

  -- Investor 1 cannot claim an effect for an election made by Investor 2
  submitMultiMustFail [investor1] [publicParty] do
    exerciseCmd lifecycleClaimRuleCid Claim.ClaimEffect with
      claimer = investor1
      holdingCids = [investor1GenericHoldingCid]
      effectCid
      batchId = Id "OptionExpirySettlement"

  -- Claim effect
  result <- submitMulti [investor2] [publicParty] do
    exerciseCmd lifecycleClaimRuleCid Claim.ClaimEffect with
      claimer = investor2
      holdingCids = [investor2GenericHoldingCid]
      effectCid
      batchId = Id "OptionExpirySettlement"

  let [investorInstrumentInstructionCid] = result.instructionCids

  -- Allocate instructions
  (investorInstrumentInstructionCid, _) <- submit investor2 do
    exerciseCmd investorInstrumentInstructionCid Instruction.Allocate with
      actors = singleton investor2; allocation = Pledge investor2GenericHoldingCid

  -- Approve instructions
  investorInstrumentInstructionCid <- submit bank do
    exerciseCmd investorInstrumentInstructionCid Instruction.Approve with
      actors = singleton bank; approval = DebitSender

  -- Settle batch
  [] <- submitMulti (toList settlers) [publicParty] do
    exerciseCmd result.batchCid Batch.Settle with actors = settlers

  pure ()

setupParties : Script TestParties
setupParties = do
  [bank, broker, centralBank, investor1, investor2, settler, publicParty] <- createParties
    ["Bank", "Broker", "Central Bank", "Investor 1", "Investor 2", "Settler", "PublicParty"]
  pure $ TestParties with
    bank; broker; centralBank; investor1; investor2; settlers = singleton settler; publicParty
