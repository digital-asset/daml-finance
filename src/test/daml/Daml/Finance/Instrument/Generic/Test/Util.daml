-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Generic.Test.Util where

import ContingentClaims.Core.Claim (Claim)
import DA.Map qualified as M (fromList)
import Daml.Finance.Claims.Util (toTime)
import Daml.Finance.Data.Time.DateClock.Types (Unit(..))
import Daml.Finance.Instrument.Generic.Instrument (Instrument(..))
import Daml.Finance.Interface.Claims.Types (C, Deliverable, Observable)
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey, Parties)
import Daml.Finance.Interface.Types.Date.Classes (toUTCTime)
import Daml.Finance.Test.Util.Instrument (createReference)
import Daml.Script

-- | Maps a `Date` to `Time` using the mapping defined in the `DateClock`.
dateToDateClockTime : Date -> Time
dateToDateClockTime = toUTCTime . Unit

-- | Maps a `Date` claim to a `Time` claim using the rule in the `DateClock`.
mapClaimToUTCTime : Claim Date Decimal Deliverable Observable -> C
mapClaimToUTCTime = toTime dateToDateClockTime

-- | Originate generic instrument
originateGeneric : Party -> Party -> Text -> Text -> Time -> C -> [(Text, Parties)] -> Time ->
  Script InstrumentKey
originateGeneric depository issuer label description acquisitionTime claims observers
  lastEventTimestamp = do
    cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
      createCmd Instrument with
        depository; issuer; id = Id label; version = "0"; description; acquisitionTime; claims
        observers = M.fromList observers; lastEventTimestamp
    createReference cid depository issuer observers
