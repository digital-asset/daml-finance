-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Generic.Test.Util where

import ContingentClaims.Claim (Claim)
import DA.Map qualified as M
import Daml.Finance.Instrument.Generic.Instrument (Instrument(..))
import Daml.Finance.Interface.Claims.Types (C, Deliverable, Observable)
import Daml.Finance.Interface.Claims.Util (toTime')
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (K)
import Daml.Finance.Interface.Types.Common (Id(..), Parties)
import Daml.Finance.Interface.Types.Date.Classes (toUTCTime)
import Daml.Finance.Lifecycle.Types (Unit(..))
import Daml.Finance.Test.Util.Instrument (createReference)
import Daml.Script

-- | Maps a `Date` to `Time` using the rule in the `DateClock`.
dateToDateClockTime : Date -> Time
dateToDateClockTime d = (toUTCTime . Unit) d

-- | Maps a `Date` claim to a `Time` claim using the rule in the `DateClock`.
mapClaimToUTCTime : Claim Date Decimal Deliverable Observable -> C
mapClaimToUTCTime c = let dateToTime = toUTCTime . Unit in toTime' dateToTime c

-- | Originate generic instrument
originateGeneric : Party -> Party -> Text -> Text -> Time -> C -> [(Text, Parties)] -> Time -> Script Instrument.K
originateGeneric depository issuer label description acquisitionTime claims observers lastEventTimestamp = do
  cid <- coerceContractId <$> submitMulti [depository, issuer] [] do
    createCmd Instrument with depository; issuer; id = Id label; version = "0"; description; acquisitionTime; claims; observers = M.fromList observers; lastEventTimestamp
  createReference cid depository issuer observers
