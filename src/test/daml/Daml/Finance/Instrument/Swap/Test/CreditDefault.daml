-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.Test.CreditDefault where

import DA.Date
import DA.Map qualified as M (empty, fromList)
import DA.Set (singleton)
import Daml.Finance.Claims.Util.Builders
import Daml.Finance.Data.Observable.Observation (Observation(..))
import Daml.Finance.Data.Reference.HolidayCalendar
import Daml.Finance.Instrument.Swap.Test.Util
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty, K)
import Daml.Finance.Interface.Types.Common (Id(..))
import Daml.Finance.Interface.Types.Date.Calendar
import Daml.Finance.Interface.Types.Date.DayCount
import Daml.Finance.Interface.Types.Date.RollConvention
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate)
import Daml.Script

-- | Parties involved in the test script.
data TestParties = TestParties
  with
    calendarDataProvider : Party
      -- ^ Publishes the holiday calendar.
    custodian : Party
      -- ^ Acts as custodian in the respective holdings (both cash holdings and instrument
      --   holdings). It also acts as depository in the option instrument.
    issuer : Party
      -- ^ Acts as issuer of the instrument. It is also the party tasked with lifecycling the
      --   contract.
    publicParty : Party
      -- ^ The public party. Every party can readAs the public party.

-- Economics of the Credit Default Swap
-- CREATE_CREDIT_DEFAULT_SWAP_VARIABLES_BEGIN
issueDate = date 2019 Jan 16
firstPaymentDate = date 2019 Feb 15
maturityDate = date 2019 May 15
defaultProbabilityReferenceId = "TSLA-DEFAULT-PROB"
recoveryRateReferenceId = "TSLA-RECOVERY-RATE"
issuerPaysFix = False
fixRate = 0.0201
paymentPeriod = M
paymentPeriodMultiplier = 3
dayCountConvention = Act360
businessDayConvention = ModifiedFollowing
-- CREATE_CREDIT_DEFAULT_SWAP_VARIABLES_END

-- Calculate credit default swap payments (test case with a credit event), including lifecycling and
-- creation of new instrument version.
runCreditEvent : Script ()
runCreditEvent = script do
  parties@TestParties{..} <- setupParties

  -- Public party observer
  let pp = [("PublicParty", singleton publicParty)]

  -- Distribute commercial-bank cash
  now <- getTime
  cashInstrument <- setupCash parties now

  -- Create and distribute swap
  swapInstrument <- setupSwap parties now cashInstrument

  -- Populate holiday calendar and observations.
  setupCalendar parties
  let
    creditEventDate = date 2019 Mar 15
    defaultProbabilityObservations = M.fromList
      [ (dateToDateClockTime (subtractDays firstPaymentDate 1), 0.2)
      , (dateToDateClockTime firstPaymentDate                 , 0.2)
      , (dateToDateClockTime (addDays firstPaymentDate 1)     , 0.2)
      , (dateToDateClockTime creditEventDate                  , 1.0) -- credit event
      ]
    recoveryRateObservations = M.fromList
      [(dateToDateClockTime creditEventDate, 0.6)]

  observableDefaultProbabilityCid <- coerceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id defaultProbabilityReferenceId
      observations = defaultProbabilityObservations; observers = M.empty
  observableRecoveryRateCid <- coerceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id recoveryRateReferenceId; observations = recoveryRateObservations
      observers = M.empty
  let observableCids = [observableDefaultProbabilityCid, observableRecoveryRateCid]

  -- One day before the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstPaymentDate 1) swapInstrument issuer
    observableCids

  -- First payment date: Lifecycle and verify the lifecycle effects for the fix payment.
  let
    expectedConsumedQuantities = [Instrument.qty 0.001675 cashInstrument]
    expectedProducedQuantities = []
  Some swapInstrumentAfterFirstPayment <- lifecycleAndVerifySwapPaymentEffects [publicParty]
    firstPaymentDate swapInstrument issuer observableCids expectedConsumedQuantities
    expectedProducedQuantities

  -- One day after the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstPaymentDate 1)
    swapInstrumentAfterFirstPayment issuer observableCids

  -- Credit event date: Lifecycle and verify that there is a lifecycle effect for the
  -- (1-recoveryRate) payment.
  let
    expectedConsumedQuantities = []
    expectedProducedQuantities = [Instrument.qty 0.4 cashInstrument]
  Some swapInstrumentAfterCreditEvent <- lifecycleAndVerifySwapPaymentEffects [publicParty]
    creditEventDate swapInstrumentAfterFirstPayment issuer observableCids expectedConsumedQuantities
    expectedProducedQuantities

  -- Second payment date: try to lifecycle and verify that there are no lifecycle effects (because a
  -- credit event has happened).
  verifyNoLifecycleEffects [publicParty] maturityDate swapInstrumentAfterCreditEvent issuer
    observableCids

  pure ()

-- | Verify that no coupon is paid if credit event happens on a payment date.
runCreditEventOnPaymentDate : Script ()
runCreditEventOnPaymentDate = script do
  parties@TestParties{..} <- setupParties

  -- Public party observer
  let pp = [("PublicParty", singleton publicParty)]

  -- Distribute commercial-bank cash
  now <- getTime
  cashInstrument <- setupCash parties now

  -- Create and distribute swap
  swapInstrument <- setupSwap parties now cashInstrument

  -- Populate holiday calendar and observations.
  setupCalendar parties
  let
    creditEventDate = maturityDate
    defaultProbabilityObservations = M.fromList
      [ (dateToDateClockTime (subtractDays firstPaymentDate 1), 0.2)
      , (dateToDateClockTime firstPaymentDate                 , 0.2)
      , (dateToDateClockTime (addDays firstPaymentDate 1)     , 0.2)
      , (dateToDateClockTime creditEventDate                  , 1.0) -- credit event
      ]
    recoveryRateObservations = M.fromList
      [(dateToDateClockTime creditEventDate, 0.6)]

  observableDefaultProbabilityCid <- coerceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id defaultProbabilityReferenceId
      observations = defaultProbabilityObservations; observers = M.empty
  observableRecoveryRateCid <- coerceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id recoveryRateReferenceId; observations = recoveryRateObservations
      observers = M.empty
  let observableCids = [observableDefaultProbabilityCid, observableRecoveryRateCid]

  -- First payment date: Lifecycle and verify the lifecycle effects for the fix payment.
  let
    expectedConsumedQuantities = [Instrument.qty 0.001675 cashInstrument]
    expectedProducedQuantities = []
  Some swapInstrumentAfterFirstPayment <- lifecycleAndVerifySwapPaymentEffects [publicParty]
    firstPaymentDate swapInstrument issuer observableCids expectedConsumedQuantities
    expectedProducedQuantities

  -- One day after the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstPaymentDate 1)
    swapInstrumentAfterFirstPayment issuer observableCids

  -- Credit event date: Lifecycle and verify that there is a lifecycle effect for the
  -- (1-recoveryRate) payment.
  let
    expectedConsumedQuantities = []
    expectedProducedQuantities = [Instrument.qty 0.4 cashInstrument]
  swapInstrumentAfterCreditEvent <- lifecycleAndVerifySwapPaymentEffects [publicParty]
    creditEventDate swapInstrumentAfterFirstPayment issuer observableCids expectedConsumedQuantities
    expectedProducedQuantities

  pure ()

-- Calculate credit default swap payments (test case without a credit event), including lifecycling
-- and creation of new instrument version.
runNoCreditEvent : Script ()
runNoCreditEvent = script do
  parties@TestParties{..} <- setupParties

  -- Public party observer
  let pp = [("PublicParty", singleton publicParty)]

  -- Distribute commercial-bank cash
  now <- getTime
  cashInstrument <- setupCash parties now

  -- Create and distribute swap
  swapInstrument <- setupSwap parties now cashInstrument

  -- Populate holiday calendar and observations.
  setupCalendar parties
  let
    defaultProbabilityObservations = M.fromList
      [ (dateToDateClockTime (subtractDays firstPaymentDate 1), 0.2)
      , (dateToDateClockTime firstPaymentDate                 , 0.2)
      , (dateToDateClockTime (addDays firstPaymentDate 1)     , 0.2)
      , (dateToDateClockTime maturityDate                     , 0.2)
      , (dateToDateClockTime (addDays maturityDate 1)         , 0.2)
      ]

  observableDefaultProbabilityCid <- coerceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id defaultProbabilityReferenceId
      observations = defaultProbabilityObservations; observers = M.empty
  let observableCids = [observableDefaultProbabilityCid]

  -- One day before the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstPaymentDate 1) swapInstrument issuer
    observableCids

  -- First payment date: Lifecycle and verify the lifecycle effects for the fix payment.
  let
    expectedConsumedQuantities = [Instrument.qty 0.001675 cashInstrument]
    expectedProducedQuantities = []
  Some swapInstrumentAfterFirstPayment <- lifecycleAndVerifySwapPaymentEffects [publicParty]
    firstPaymentDate swapInstrument issuer observableCids expectedConsumedQuantities
    expectedProducedQuantities

  -- One day after the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstPaymentDate 1)
    swapInstrumentAfterFirstPayment issuer observableCids

  -- Second payment date: Lifecycle and verify the lifecycle effects for the fix payment.
  let
    expectedConsumedQuantities = [Instrument.qty 0.0049691667 cashInstrument]
    expectedProducedQuantities = []
  Some swapInstrumentAfterSecondPayment <- lifecycleAndVerifySwapPaymentEffects [publicParty]
    maturityDate swapInstrumentAfterFirstPayment issuer observableCids expectedConsumedQuantities
    expectedProducedQuantities

  -- One day after the maturity: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (addDays maturityDate 1) swapInstrumentAfterSecondPayment
    issuer observableCids

  pure ()

-- | Verify that a credit event after maturity does not pay the recovery rate.
runCreditEventAfterMaturity : Script ()
runCreditEventAfterMaturity = script do
  parties@TestParties{..} <- setupParties

  -- Public party observer
  let pp = [("PublicParty", singleton publicParty)]

  -- Distribute commercial-bank cash
  now <- getTime
  cashInstrument <- setupCash parties now

  -- Create and distribute swap
  swapInstrument <- setupSwap parties now cashInstrument

  -- Populate holiday calendar and observations.
  setupCalendar parties
  let
    defaultProbabilityObservations = M.fromList
      [ (dateToDateClockTime firstPaymentDate, 0.2)
      , (dateToDateClockTime maturityDate, 0.2)
      , (dateToDateClockTime (addDays maturityDate 1), 1.0) -- credit event
      ]

  observableDefaultProbabilityCid <- coerceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id defaultProbabilityReferenceId
      observations = defaultProbabilityObservations; observers = M.empty
  let observableCids = [observableDefaultProbabilityCid]

  -- First payment date: Lifecycle and verify the lifecycle effects for the fix payment.
  let
    expectedConsumedQuantities = [Instrument.qty 0.001675 cashInstrument]
    expectedProducedQuantities = []
  Some swapInstrumentAfterFirstPayment <- lifecycleAndVerifySwapPaymentEffects [publicParty]
    firstPaymentDate swapInstrument issuer observableCids expectedConsumedQuantities
    expectedProducedQuantities

  -- Second payment date: Lifecycle and verify the lifecycle effects for the fix payment.
  let
    expectedConsumedQuantities = [Instrument.qty 0.0049691667 cashInstrument]
    expectedProducedQuantities = []
  swapInstrumentAfterSecondPayment <- lifecycleAndVerifySwapPaymentEffects [publicParty]
    maturityDate swapInstrumentAfterFirstPayment issuer observableCids expectedConsumedQuantities
    expectedProducedQuantities

  -- One day after the maturity: no payment is made, instrument expires
  let
    expectedConsumedQuantities = []
    expectedProducedQuantities = []
  lifecycleAndVerifySwapPaymentEffects [publicParty] (addDays maturityDate 1)
    swapInstrumentAfterFirstPayment issuer observableCids expectedConsumedQuantities
    expectedProducedQuantities

  pure ()

-- | Setup parties.
setupParties : Script TestParties
setupParties = do
  [custodian, issuer, calendarDataProvider, publicParty] <-
    createParties ["Custodian", "Issuer", "Calendar Data Provider", "PublicParty"]
  pure $ TestParties with custodian; issuer; calendarDataProvider; publicParty

-- Setup holiday calendar
holidayCalendarData = HolidayCalendarData with
  id = "USD"
  weekend = [Saturday, Sunday]
  holidays = [date 2019 Dec 19]

-- | Create holiday calendar on ledger.
setupCalendar : TestParties -> Script (ContractId HolidayCalendar)
setupCalendar TestParties{..} = do
  let pp = [("PublicParty", singleton publicParty)]
  submit calendarDataProvider do
    createCmd HolidayCalendar with
      agency = calendarDataProvider
      entity = holidayCalendarData.id
      calendar = holidayCalendarData
      observers = M.fromList pp

-- | Setup cash instrument.
setupCash : TestParties -> Time -> Script Instrument.K
setupCash TestParties{..} now = do
  let pp = [("PublicParty", singleton publicParty)]
  Instrument.originate custodian issuer "USD" "US Dollars" pp now

-- | Setup Credit Default Swap instrument.
setupSwap : TestParties -> Time -> Instrument.K -> Script Instrument.K
setupSwap TestParties{..} now cashInstrument = do
  let pp = [("PublicParty", singleton publicParty)]
  originateCreditDefaultSwap custodian issuer "SwapTest1" "Credit default swap" pp now issueDate
    [holidayCalendarData.id] calendarDataProvider firstPaymentDate maturityDate dayCountConvention
    businessDayConvention fixRate paymentPeriod paymentPeriodMultiplier cashInstrument
    defaultProbabilityReferenceId recoveryRateReferenceId issuerPaysFix

