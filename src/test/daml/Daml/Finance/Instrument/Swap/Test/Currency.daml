-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.Test.Currency where

import DA.Date (DayOfWeek(..), Month(..), addDays, date, subtractDays)
import DA.Map qualified as M (fromList)
import DA.Set (singleton)
import Daml.Finance.Data.Reference.HolidayCalendar (HolidayCalendar(..))
import Daml.Finance.Instrument.Swap.Test.Util (originateCurrencySwap)
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayConventionEnum(..), HolidayCalendarData(..))
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum(..))
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum(..))
import Daml.Finance.Interface.Util.Common (qty)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Instrument (lifecycleAndVerifyPaymentEffects, originate, verifyNoLifecycleEffects)
import Daml.Script

-- Calculate fix rate payments on a currency swap, including lifecycling and creation of new
-- instrument version.
run : Script ()
run = script do
  [custodian, issuer, calendarDataProvider, publicParty] <-
    createParties ["Custodian", "Issuer", "Calendar Data Provider", "PublicParty"]

  -- Distribute commercial-bank cash
  now <- getTime
  let observers = [("PublicParty", singleton publicParty)]
  -- CREATE_CURRENCY_SWAP_CASH_INSTRUMENTS_BEGIN
  cashInstrumentCid <- originate custodian issuer "USD" "US Dollars" observers now
  foreignCashInstrumentCid <- originate custodian issuer "EUR" "Euro" observers now
  -- CREATE_CURRENCY_SWAP_CASH_INSTRUMENTS_END

  -- Create and distribute swap
  -- Fix vs fix currency swap: 3% p.a. in USD vs 2% p.a. in EUR, payment every 3M
  -- CREATE_CURRENCY_SWAP_VARIABLES_BEGIN
  let
    issueDate = date 2019 Jan 16
    firstPaymentDate = date 2019 Feb 15
    maturityDate = date 2019 May 15
    ownerReceivesBase = False
    baseRate = 0.03
    foreignRate = 0.02
    fxRate = 1.1
    paymentPeriod = M
    paymentPeriodMultiplier = 3
    dayCountConvention = Act360
    businessDayConvention = ModifiedFollowing
    -- CREATE_CURRENCY_SWAP_VARIABLES_END
    cal =
      HolidayCalendarData with
        id = "USD"
        weekend = [Saturday, Sunday]
        holidays = [date 2019 Dec 19]
    holidayCalendarIds = [cal.id]

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submit calendarDataProvider do
    createCmd HolidayCalendar with
      provider = calendarDataProvider
      calendar = cal
      observers = M.fromList observers

  swapInstrument <- originateCurrencySwap issuer issuer "SwapTest1" "Currency swap" observers now
    issueDate holidayCalendarIds calendarDataProvider firstPaymentDate maturityDate
    dayCountConvention businessDayConvention baseRate foreignRate paymentPeriod
    paymentPeriodMultiplier cashInstrumentCid foreignCashInstrumentCid fxRate ownerReceivesBase

  -- One day before the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstPaymentDate 1) swapInstrument issuer []

  -- First payment date: Lifecycle and verify the lifecycle effects for base currency and foreign
  -- currency payments.
  let
    expectedConsumedQuantities = [qty 0.0025 cashInstrumentCid]
    expectedProducedQuantities = [qty 0.0018333333 foreignCashInstrumentCid]
  Some swapInstrumentAfterFirstPayment <- lifecycleAndVerifyPaymentEffects [publicParty]
    firstPaymentDate swapInstrument issuer [] expectedConsumedQuantities expectedProducedQuantities

  -- One day after the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstPaymentDate 1)
    swapInstrumentAfterFirstPayment issuer []

  -- One day before expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays maturityDate 1)
    swapInstrumentAfterFirstPayment issuer []

  -- Lifecycle on the second payment date, which is also the expiry date. Verify the lifecycle
  -- effects for base currency and foreign currency payments.
  let
    expectedConsumedQuantities = [qty 0.0074166667 cashInstrumentCid]
    expectedProducedQuantities = [qty 0.0054388889 foreignCashInstrumentCid]
  lifecycleAndVerifyPaymentEffects [publicParty] maturityDate swapInstrumentAfterFirstPayment
    issuer [] expectedConsumedQuantities expectedProducedQuantities

  pure ()
