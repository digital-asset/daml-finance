-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.Test.Asset where

import DA.Date (DayOfWeek(..), Month(..), addDays, date, subtractDays)
import DA.List (head)
import DA.Map (fromList)
import DA.Map qualified as Map (fromList)
import DA.Set qualified as Set (singleton)
import Daml.Finance.Data.Numeric.Observation (Observation(..))
import Daml.Finance.Data.Reference.HolidayCalendar (HolidayCalendar(..))
import Daml.Finance.Data.Time.DateClock (dateToDateClockTime)
import Daml.Finance.Instrument.Equity.Test.Util (originateEquity)
import Daml.Finance.Instrument.Swap.Test.Util (originateAssetSwap)
import Daml.Finance.Interface.Claims.Dynamic.Instrument qualified as DynamicInstrument (CreateNewVersion(..), GetView(..), I)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (exerciseInterfaceByKey)
import Daml.Finance.Interface.Instrument.Equity.Instrument qualified as Equity (DeclareDistribution(..), I)
import Daml.Finance.Interface.Instrument.Types.FloatingRate (DateRelativeToEnum(..), FloatingRate(..), ReferenceRateTypeEnum(..))
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (Evolve(..), I, View(..))
import Daml.Finance.Interface.Types.Common.Types (HoldingStandard(..), Id(..), Parties)
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayConventionEnum(..), HolidayCalendarData(..))
import Daml.Finance.Interface.Types.Date.DateOffset (DateOffset(..), DayTypeEnum(..))
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum(..))
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum(..))
import Daml.Finance.Interface.Util.Common (qty, scale)
import Daml.Finance.Lifecycle.Effect (Effect(..))
import Daml.Finance.Lifecycle.Event.Distribution qualified as Distribution (Event(..))
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Instrument (originate)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (submitExerciseInterfaceByKeyCmd)
import Daml.Finance.Test.Util.Lifecycle (lifecycleAndVerifyPaymentEffects, verifyNoLifecycleEffects)
import Daml.Script

-- Calculate payments on an asset swap, including lifecycling and creation of new instrument
-- version.
run : Script ()
run = script do
  [custodian, issuer, calendarDataProvider, publicParty] <-
    createParties ["Custodian", "Issuer", "Calendar Data Provider", "PublicParty"]

  -- Distribute commercial-bank cash
  now <- getTime
  let observers = [("PublicParty", Set.singleton publicParty)]
  cashInstrument <- originate custodian issuer "USD" TransferableFungible "US Dollars" observers now

  -- Create and distribute swap
  -- Equity vs fix asset swap: AAPL total return vs 2.01% p.a. payment every 3M
  -- CREATE_ASSET_SWAP_VARIABLES_BEGIN
  let
    issueDate = date 2019 Jan 16
    firstPaymentDate = date 2019 Feb 15
    maturityDate = date 2019 May 15
    referenceAssetId = "AAPL-CLOSE-ADJ"
    ownerReceivesFix = False
    floatingRate = None
    fixRate = 0.0201
    paymentPeriod = M
    paymentPeriodMultiplier = 3
    dayCountConvention = Act360
    businessDayConvention = ModifiedFollowing
    -- CREATE_ASSET_SWAP_VARIABLES_END
    observations = Map.fromList
      [ (dateToDateClockTime $ date 2019 Jan 16, 43.54)
      , (dateToDateClockTime $ date 2019 Feb 15, 47.03)
      , (dateToDateClockTime $ date 2019 May 15, 48.78)
      ]
    calendar =
      HolidayCalendarData with
        id = "USD"
        weekend = [Saturday, Sunday]
        holidays = [date 2019 Dec 19]
    holidayCalendarIds = [calendar.id]

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submit calendarDataProvider do
    createCmd HolidayCalendar with
      provider = calendarDataProvider
      calendar
      observers = Map.fromList observers

  observableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id referenceAssetId; observations; observers = mempty

  swapInstrument <- originateAssetSwap issuer issuer "SwapTest1" BaseHolding "Asset swap" observers
    now issueDate holidayCalendarIds calendarDataProvider firstPaymentDate maturityDate
    dayCountConvention businessDayConvention floatingRate fixRate paymentPeriod
    paymentPeriodMultiplier cashInstrument referenceAssetId ownerReceivesFix publicParty

  -- One day before the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstPaymentDate 1) swapInstrument issuer
    [observableCid]

  -- First payment date: Lifecycle and verify the lifecycle effects for fix rate and asset
  -- performance payments.
  let
    expectedConsumedQuantities = [qty 0.001675 cashInstrument]
    expectedProducedQuantities = [qty 0.0801561782 cashInstrument]
  Some swapInstrumentAfterFirstPayment <- lifecycleAndVerifyPaymentEffects [publicParty]
    firstPaymentDate swapInstrument issuer [observableCid] expectedConsumedQuantities
    expectedProducedQuantities

  -- One day after the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstPaymentDate 1)
    swapInstrumentAfterFirstPayment issuer [observableCid]

  -- One day before expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays maturityDate 1)
    swapInstrumentAfterFirstPayment issuer [observableCid]

  -- Lifecycle on the second payment date, which is also the expiry date. Verify the lifecycle
  -- effects for fix rate and asset performance payments.
  let
    expectedConsumedQuantities = [qty 0.0049691667 cashInstrument]
    expectedProducedQuantities = [qty 0.0372102913 cashInstrument]
  lifecycleAndVerifyPaymentEffects [publicParty] maturityDate swapInstrumentAfterFirstPayment
    issuer [observableCid] expectedConsumedQuantities expectedProducedQuantities

  pure ()

-- Calculate payments on an asset swap, including lifecycling and creation of new instrument
-- version. This example has a floating rate leg.
runFloat : Script ()
runFloat = script do
  [custodian, issuer, calendarDataProvider, publicParty] <-
    createParties ["Custodian", "Issuer", "Calendar Data Provider", "PublicParty"]

  -- Distribute commercial-bank cash
  now <- getTime
  let observers = [("PublicParty", Set.singleton publicParty)]
  cashInstrument <- originate custodian issuer "USD" TransferableFungible "US Dollars" observers now

  -- Create and distribute swap
  -- Equity vs fix asset swap: AAPL total return vs 2.01% p.a. payment every 3M
  -- CREATE_ASSET_SWAP_VARIABLES_BEGIN
  let
    issueDate = date 2019 Jan 16
    firstPaymentDate = date 2019 Feb 15
    maturityDate = date 2019 May 15
    referenceAssetId = "AAPL-CLOSE-ADJ"
    referenceRateId = "USD/LIBOR/3M"
    floatingRate = Some FloatingRate with
      referenceRateId
      referenceRateType = SingleFixing CalculationPeriodStartDate
      fixingDates = DateOffset with
        periodMultiplier = 0
        period = D
        dayType = Some Business
        businessDayConvention = NoAdjustment
        businessCenters = ["USD"]
    ownerReceivesRate = False
    fixRate = 0.0
    paymentPeriod = M
    paymentPeriodMultiplier = 3
    dayCountConvention = Act360
    businessDayConvention = ModifiedFollowing
    -- CREATE_ASSET_SWAP_VARIABLES_END
    observations = Map.fromList
      [ (dateToDateClockTime $ date 2019 Jan 16, 43.54)
      , (dateToDateClockTime $ date 2019 Feb 15, 47.03)
      , (dateToDateClockTime $ date 2019 May 15, 48.78)
      ]
    rateObservations = Map.fromList
      [ (dateToDateClockTime $ date 2019 Jan 16, 0.0027406)
      , (dateToDateClockTime $ date 2019 Feb 15, 0.002035)
      ]
    calendar =
      HolidayCalendarData with
        id = "USD"
        weekend = [Saturday, Sunday]
        holidays = [date 2019 Dec 19]
    holidayCalendarIds = [calendar.id]

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submit calendarDataProvider do
    createCmd HolidayCalendar with
      provider = calendarDataProvider
      calendar
      observers = Map.fromList observers

  observableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id referenceAssetId; observations; observers = mempty

  rateObservableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id referenceRateId; observations = rateObservations
      observers = mempty

  let observableCids = [observableCid, rateObservableCid]

  swapInstrument <- originateAssetSwap issuer issuer "SwapTest1" BaseHolding "Asset swap" observers
    now issueDate holidayCalendarIds calendarDataProvider firstPaymentDate maturityDate
    dayCountConvention businessDayConvention floatingRate fixRate paymentPeriod
    paymentPeriodMultiplier cashInstrument referenceAssetId ownerReceivesRate publicParty

  -- One day before the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstPaymentDate 1) swapInstrument issuer
    observableCids

  -- First payment date: Lifecycle and verify the lifecycle effects for fix rate and asset
  -- performance payments.
  let
    expectedConsumedQuantities = [qty 0.0002283833 cashInstrument]
    expectedProducedQuantities = [qty 0.0801561782 cashInstrument]
  Some swapInstrumentAfterFirstPayment <- lifecycleAndVerifyPaymentEffects [publicParty]
    firstPaymentDate swapInstrument issuer observableCids expectedConsumedQuantities
    expectedProducedQuantities

  -- One day after the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstPaymentDate 1)
    swapInstrumentAfterFirstPayment issuer observableCids

  -- One day before expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays maturityDate 1)
    swapInstrumentAfterFirstPayment issuer observableCids

  -- Lifecycle on the second payment date, which is also the expiry date. Verify the lifecycle
  -- effects for fix rate and asset performance payments.
  let
    expectedConsumedQuantities = [qty 0.0005030972 cashInstrument]
    expectedProducedQuantities = [qty 0.0372102913 cashInstrument]
  lifecycleAndVerifyPaymentEffects [publicParty] maturityDate swapInstrumentAfterFirstPayment
    issuer observableCids expectedConsumedQuantities expectedProducedQuantities

  pure ()

-- Calculate payments on an asset swap, including lifecycling and creation of new instrument
-- version. This example has a single underlying stock with dividend passthrough.
-- It still represents a total return swap, but the instrument only models the price performance
-- (using an unadjusted price series). The dividends are paid using a separate distribution rule.
runDivPassthrough : Script ()
runDivPassthrough = script do
  [custodian, issuer, calendarDataProvider, publicParty] <-
    createParties ["Custodian", "Issuer", "Calendar Data Provider", "PublicParty"]

  -- Distribute commercial-bank cash
  now <- getTime
  let observers = [("PublicParty", Set.singleton publicParty)]
  cashInstrument <- originate custodian issuer "USD" TransferableFungible "US Dollars" observers now

  -- Create and distribute swap
  -- Equity vs rate asset swap: AAPL price return (dividends paid separately) vs floating rate
  -- payment.
  -- CREATE_ASSET_SWAP_VARIABLES_BEGIN
  let
    issueDate = date 2019 Jan 16
    firstPaymentDate = date 2019 Feb 15
    maturityDate = date 2019 May 15
    referenceAssetId = "AAPL-CLOSE-UNADJ" -- Unadjusted price series
    referenceRateId = "USD/LIBOR/3M"
    floatingRate = Some FloatingRate with
      referenceRateId
      referenceRateType = SingleFixing CalculationPeriodStartDate
      fixingDates = DateOffset with
        periodMultiplier = 0
        period = D
        dayType = Some Business
        businessDayConvention = NoAdjustment
        businessCenters = ["USD"]
    ownerReceivesRate = False
    fixRate = 0.0
    paymentPeriod = M
    paymentPeriodMultiplier = 3
    dayCountConvention = Act360
    businessDayConvention = ModifiedFollowing
    -- CREATE_ASSET_SWAP_VARIABLES_END
    observations = Map.fromList
      [ (dateToDateClockTime $ date 2019 Jan 16, 43.54)
      , (dateToDateClockTime $ date 2019 Feb 15, 47.03)
      , (dateToDateClockTime $ date 2019 May 15, 47.78)
      ]
    rateObservations = Map.fromList
      [ (dateToDateClockTime $ date 2019 Jan 16, 0.0027406)
      , (dateToDateClockTime $ date 2019 Feb 15, 0.002035)
      ]
    calendar =
      HolidayCalendarData with
        id = "USD"
        weekend = [Saturday, Sunday]
        holidays = [date 2019 Dec 19]
    holidayCalendarIds = [calendar.id]

  cumEquityInstrument <-
    originateEquity issuer issuer "EQUITY-INST-1" "0" TransferableFungible "AAPL" observers now
  exEquityInstrument <-
    originateEquity issuer issuer "EQUITY-INST-1" "1" TransferableFungible "AAPL" [] now

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submit calendarDataProvider do
    createCmd HolidayCalendar with
      provider = calendarDataProvider
      calendar
      observers = Map.fromList observers

  observableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id referenceAssetId; observations; observers = mempty

  rateObservableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id referenceRateId; observations = rateObservations
      observers = mempty

  let observableCids = [observableCid, rateObservableCid]

  swapInstrument <- originateAssetSwap issuer issuer "SwapTest1" BaseHolding "Asset swap" observers
    now issueDate holidayCalendarIds calendarDataProvider firstPaymentDate maturityDate
    dayCountConvention businessDayConvention floatingRate fixRate paymentPeriod
    paymentPeriodMultiplier cashInstrument referenceAssetId ownerReceivesRate publicParty

  -- One day before the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstPaymentDate 1) swapInstrument issuer
    observableCids

  -- First payment date: Lifecycle and verify the lifecycle effects for fix rate and asset
  -- performance payments.
  let
    expectedConsumedQuantities = [qty 0.0002283833 cashInstrument]
    expectedProducedQuantities = [qty 0.0801561782 cashInstrument]
  Some swapInstrumentAfterFirstPayment <- lifecycleAndVerifyPaymentEffects [publicParty]
    firstPaymentDate swapInstrument issuer observableCids expectedConsumedQuantities
    expectedProducedQuantities

  -- One day after the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstPaymentDate 1)
    swapInstrumentAfterFirstPayment issuer observableCids

  -- One day before expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays maturityDate 1)
    swapInstrumentAfterFirstPayment issuer observableCids

  -- Create cash dividend rule (specific for asset swaps)
  distributionRuleCid <- toInterfaceContractId @Lifecycle.I <$> submit issuer do
    createCmd DistributionRule with
      providers = Set.singleton issuer
      lifecycler = issuer
      observers = Set.singleton publicParty
      id = Id "LifecycleRule"
      description = "Rule to lifecycle an instrument following a distribution event"

  -- Create cash dividend event: USD 1 per share (this also works with fractional shares)
  distributionEventCid <-
    Instrument.submitExerciseInterfaceByKeyCmd @Equity.I [issuer] [] cumEquityInstrument
      Equity.DeclareDistribution with
        id = Id $ "ABC - " <> show now
        description = "Cash Dividend"
        effectiveTime = now
        newInstrument = exEquityInstrument
        perUnitDistribution = [qty 1.0 cashInstrument]

  -- Lifecycle the asset swap to create an effect for the dividend.
  (Some swapInstrumentAfterDividend, [effectCid]) <- submit issuer do
    exerciseCmd distributionRuleCid Lifecycle.Evolve with
      observableCids = []
      eventCid = distributionEventCid
      instrument = swapInstrumentAfterFirstPayment
  -- 0.0212630236 USD per asset swap unit


  -- Lifecycle on the second payment date, which is also the expiry date. Verify the lifecycle
  -- effects for fix rate and asset performance payments.
  let
    expectedConsumedQuantities = [qty 0.0005030972 cashInstrument]
    expectedProducedQuantities = [qty 0.0159472677 cashInstrument]
  lifecycleAndVerifyPaymentEffects [publicParty] maturityDate swapInstrumentAfterDividend
    issuer observableCids expectedConsumedQuantities expectedProducedQuantities

  pure ()

-- | Rule contract that defines the distribution of units of an instrument for each unit of a target
-- instrument (e.g. share or cash dividends).
template DistributionRule
  with
    providers : Parties
      -- ^ Providers of the distribution rule.
    lifecycler : Party
      -- ^ Party performing the lifecycling.
    observers : Parties
      -- ^ Observers of the distribution rule.
    id : Id
      -- ^ Identifier for the rule contract.
    description : Text
      -- ^ Textual description.
  where
    signatory providers
    observer observers, lifecycler

    interface instance Lifecycle.I for DistributionRule where
      view = Lifecycle.View with lifecycler; id; description
      evolve Lifecycle.Evolve{eventCid; instrument} = do
        distribution <- fetch $ fromInterfaceContractId @Distribution.Event eventCid

        -- Get the dynamic instrument view
        dynInstrView <- BaseInstrument.exerciseInterfaceByKey @DynamicInstrument.I
          instrument
          lifecycler
          DynamicInstrument.GetView with viewer = lifecycler

        -- Create a new asset swap instrument (ex div)
        let swapInstrumentAfterDiv = instrument with version = "exDiv"
        BaseInstrument.exerciseInterfaceByKey @DynamicInstrument.I
          instrument
          lifecycler
          DynamicInstrument.CreateNewVersion with
            lastEventTimestamp = dynInstrView.lastEventTimestamp
            prevEvents = dynInstrView.prevEvents
            version = swapInstrumentAfterDiv.version

        -- Calculate dividend amount (divide by initial fixing)
        let
          stock1Distr = head distribution.perUnitDistribution
          stock1DistrAdj = scale (1.0/47.03) stock1Distr

        -- Create lifecycle effect
        effectCid <- toInterfaceContractId <$>
          create Effect with
            providers
            id = distribution.id
            description = distribution.description
            targetInstrument = instrument
            producedInstrument = Some swapInstrumentAfterDiv
            otherConsumed = []
            otherProduced = [stock1DistrAdj]
            settlementTime = Some distribution.effectiveTime
            observers = fromList [("RuleObservers", observers)]
        pure (Some swapInstrumentAfterDiv, [effectCid])
