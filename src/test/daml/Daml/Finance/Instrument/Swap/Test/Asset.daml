-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.Test.Asset where

import DA.Date (DayOfWeek(..), Month(..), addDays, date, subtractDays)
import DA.Map qualified as Map (fromList)
import DA.Set qualified as Set (singleton)
import Daml.Finance.Data.Numeric.Observation (Observation(..))
import Daml.Finance.Data.Reference.HolidayCalendar (HolidayCalendar(..))
import Daml.Finance.Data.Time.DateClock (dateToDateClockTime)
import Daml.Finance.Instrument.Equity.Test.Util (originateEquity)
import Daml.Finance.Instrument.Swap.Asset.DistributionRule (DistributionRule(..))
import Daml.Finance.Instrument.Swap.Test.Util (originateAssetSwap)
import Daml.Finance.Interface.Instrument.Equity.Instrument qualified as Equity (DeclareDistribution(..), I)
import Daml.Finance.Interface.Instrument.Swap.Asset.Types (Underlying(..))
import Daml.Finance.Interface.Instrument.Types.FloatingRate (DateRelativeToEnum(..), FloatingRate(..), ReferenceRateTypeEnum(..))
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (Evolve(..), I)
import Daml.Finance.Interface.Types.Common.Types (HoldingStandard(..), Id(..), InstrumentKey(..))
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayConventionEnum(..), HolidayCalendarData(..))
import Daml.Finance.Interface.Types.Date.DateOffset (DateOffset(..), DayTypeEnum(..))
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum(..))
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum(..))
import Daml.Finance.Interface.Util.Common (qty)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Instrument (originate)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (submitExerciseInterfaceByKeyCmd)
import Daml.Finance.Test.Util.Lifecycle (lifecycleAndVerifyPaymentEffects, verifyConsumedAndProduced, verifyNoLifecycleEffects)
import Daml.Script

-- Calculate payments on an asset swap, including lifecycling and creation of new instrument
-- version.
run : Script ()
run = script do
  [custodian, issuer, calendarDataProvider, publicParty] <-
    createParties ["Custodian", "Issuer", "Calendar Data Provider", "PublicParty"]

  -- Distribute commercial-bank cash
  now <- getTime
  let observers = [("PublicParty", Set.singleton publicParty)]
  cashInstrument <- originate custodian issuer "USD" TransferableFungible "US Dollars" observers now

  -- Create and distribute swap
  -- Equity vs fix asset swap: AAPL total return vs 2.01% p.a. payment every 3M
  -- CREATE_ASSET_SWAP_VARIABLES_BEGIN
  let
    issueDate = date 2019 Jan 16
    firstPaymentDate = date 2019 Feb 15
    maturityDate = date 2019 May 15
    referenceAssetId = "AAPL-CLOSE-ADJ"
    ownerReceivesFix = False
    floatingRate = None
    fixRate = 0.0201
    paymentPeriod = M
    paymentPeriodMultiplier = 3
    dayCountConvention = Act360
    businessDayConvention = ModifiedFollowing
    -- CREATE_ASSET_SWAP_VARIABLES_END
    observations = Map.fromList
      [ (dateToDateClockTime $ date 2019 Jan 16, 43.54)
      , (dateToDateClockTime $ date 2019 Feb 15, 47.03)
      , (dateToDateClockTime $ date 2019 May 15, 48.78)
      ]
    calendar =
      HolidayCalendarData with
        id = "USD"
        weekend = [Saturday, Sunday]
        holidays = [date 2019 Dec 19]
    holidayCalendarIds = [calendar.id]
    aapl = InstrumentKey with
      depository = custodian
      issuer
      id = Id "AAPL"
      version = "0"
      holdingStandard = BaseHolding
    underlyings = [Underlying with
      referenceAsset = aapl
      referenceAssetId
      weight = 1.0
      initialPrice = 43.54]

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submit calendarDataProvider do
    createCmd HolidayCalendar with
      provider = calendarDataProvider
      calendar
      observers = Map.fromList observers

  observableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id referenceAssetId; observations; observers = mempty

  (swapInstrument, _) <- originateAssetSwap issuer issuer "SwapTest1" BaseHolding "Asset swap"
    observers now issueDate holidayCalendarIds calendarDataProvider firstPaymentDate maturityDate
    dayCountConvention businessDayConvention floatingRate fixRate paymentPeriod
    paymentPeriodMultiplier cashInstrument underlyings ownerReceivesFix publicParty

  -- One day before the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstPaymentDate 1) swapInstrument issuer
    [observableCid]

  -- First payment date: Lifecycle and verify the lifecycle effects for fix rate and asset
  -- performance payments.
  let
    expectedConsumed = [qty 0.001675 cashInstrument]
    expectedProduced = [qty 0.0801561782 cashInstrument]
  Some swapInstrumentAfterFirstPayment <- lifecycleAndVerifyPaymentEffects [publicParty]
    firstPaymentDate swapInstrument issuer [observableCid] expectedConsumed expectedProduced

  -- One day after the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstPaymentDate 1)
    swapInstrumentAfterFirstPayment issuer [observableCid]

  -- One day before expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays maturityDate 1)
    swapInstrumentAfterFirstPayment issuer [observableCid]

  -- Lifecycle on the second payment date, which is also the expiry date. Verify the lifecycle
  -- effects for fix rate and asset performance payments.
  let
    expectedConsumed = [qty 0.0049691667 cashInstrument]
    expectedProduced = [qty 0.0372102913 cashInstrument]
  lifecycleAndVerifyPaymentEffects [publicParty] maturityDate swapInstrumentAfterFirstPayment
    issuer [observableCid] expectedConsumed expectedProduced

  pure ()

-- Calculate payments on an asset swap, including lifecycling and creation of new instrument
-- version. This example has a floating rate leg.
runFloat : Script ()
runFloat = script do
  [custodian, issuer, calendarDataProvider, publicParty] <-
    createParties ["Custodian", "Issuer", "Calendar Data Provider", "PublicParty"]

  -- Distribute commercial-bank cash
  now <- getTime
  let observers = [("PublicParty", Set.singleton publicParty)]
  cashInstrument <- originate custodian issuer "USD" TransferableFungible "US Dollars" observers now

  -- Create and distribute swap
  -- Equity vs fix asset swap: AAPL total return vs 2.01% p.a. payment every 3M
  -- CREATE_FLOAT_ASSET_SWAP_VARIABLES_BEGIN
  let
    issueDate = date 2019 Jan 16
    firstPaymentDate = date 2019 Feb 15
    maturityDate = date 2019 May 15
    referenceAssetId = "AAPL-CLOSE-ADJ"
    referenceRateId = "USD/LIBOR/3M"
    floatingRate = Some FloatingRate with
      referenceRateId
      referenceRateType = SingleFixing CalculationPeriodStartDate
      fixingDates = DateOffset with
        periodMultiplier = 0
        period = D
        dayType = Some Business
        businessDayConvention = NoAdjustment
        businessCenters = ["USD"]
    ownerReceivesRate = False
    fixRate = 0.0
    paymentPeriod = M
    paymentPeriodMultiplier = 3
    dayCountConvention = Act360
    businessDayConvention = ModifiedFollowing
    -- CREATE_FLOAT_ASSET_SWAP_VARIABLES_END
    observations = Map.fromList
      [ (dateToDateClockTime $ date 2019 Jan 16, 43.54)
      , (dateToDateClockTime $ date 2019 Feb 15, 47.03)
      , (dateToDateClockTime $ date 2019 May 15, 48.78)
      ]
    rateObservations = Map.fromList
      [ (dateToDateClockTime $ date 2019 Jan 16, 0.0027406)
      , (dateToDateClockTime $ date 2019 Feb 15, 0.002035)
      ]
    calendar =
      HolidayCalendarData with
        id = "USD"
        weekend = [Saturday, Sunday]
        holidays = [date 2019 Dec 19]
    holidayCalendarIds = [calendar.id]
    aapl = InstrumentKey with
      depository = custodian
      issuer
      id = Id "AAPL"
      version = "0"
      holdingStandard = BaseHolding
    underlyings = [Underlying with
      referenceAsset = aapl
      referenceAssetId
      weight = 1.0
      initialPrice = 43.54]

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submit calendarDataProvider do
    createCmd HolidayCalendar with
      provider = calendarDataProvider
      calendar
      observers = Map.fromList observers

  observableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id referenceAssetId; observations; observers = mempty

  rateObservableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id referenceRateId; observations = rateObservations
      observers = mempty

  let observableCids = [observableCid, rateObservableCid]

  (swapInstrument, _) <- originateAssetSwap issuer issuer "SwapTest1" BaseHolding "Asset swap"
    observers now issueDate holidayCalendarIds calendarDataProvider firstPaymentDate maturityDate
    dayCountConvention businessDayConvention floatingRate fixRate paymentPeriod
    paymentPeriodMultiplier cashInstrument underlyings ownerReceivesRate publicParty

  -- One day before the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstPaymentDate 1) swapInstrument issuer
    observableCids

  -- First payment date: Lifecycle and verify the lifecycle effects for fix rate and asset
  -- performance payments.
  let
    expectedConsumed = [qty 0.0002283833 cashInstrument]
    expectedProduced = [qty 0.0801561782 cashInstrument]
  Some swapInstrumentAfterFirstPayment <- lifecycleAndVerifyPaymentEffects [publicParty]
    firstPaymentDate swapInstrument issuer observableCids expectedConsumed expectedProduced

  -- One day after the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstPaymentDate 1)
    swapInstrumentAfterFirstPayment issuer observableCids

  -- One day before expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays maturityDate 1)
    swapInstrumentAfterFirstPayment issuer observableCids

  -- Lifecycle on the second payment date, which is also the expiry date. Verify the lifecycle
  -- effects for fix rate and asset performance payments.
  let
    expectedConsumed = [qty 0.0005030972 cashInstrument]
    expectedProduced = [qty 0.0372102913 cashInstrument]
  lifecycleAndVerifyPaymentEffects [publicParty] maturityDate swapInstrumentAfterFirstPayment
    issuer observableCids expectedConsumed expectedProduced

  pure ()

-- Calculate payments on an asset swap, including lifecycling and creation of new instrument
-- version. This example has a single underlying stock with dividend passthrough.
-- It still represents a total return swap, but the instrument only models the price performance
-- (using an unadjusted price series). The dividends are paid using a separate distribution rule.
runDividendPassthrough : Script ()
runDividendPassthrough = script do
  [custodian, issuer, calendarDataProvider, publicParty] <-
    createParties ["Custodian", "Issuer", "Calendar Data Provider", "PublicParty"]

  -- Distribute commercial-bank cash
  now <- getTime
  let observers = [("PublicParty", Set.singleton publicParty)]
  cashInstrument <- originate custodian issuer "USD" TransferableFungible "US Dollars" observers now

  -- Create and distribute swap
  -- Equity vs rate asset swap: AAPL price return (dividends paid separately) vs floating rate
  -- payment.
  -- CREATE_DIV_PASSTHROUGH_ASSET_SWAP_VARIABLES_BEGIN
  let
    issueDate = date 2019 Jan 16
    firstPaymentDate = date 2019 Feb 15
    maturityDate = date 2019 May 15
    referenceAssetId = "AAPL-CLOSE-UNADJ" -- Unadjusted price series
    referenceRateId = "USD/LIBOR/3M"
    floatingRate = Some FloatingRate with
      referenceRateId
      referenceRateType = SingleFixing CalculationPeriodStartDate
      fixingDates = DateOffset with
        periodMultiplier = 0
        period = D
        dayType = Some Business
        businessDayConvention = NoAdjustment
        businessCenters = ["USD"]
    ownerReceivesRate = False
    fixRate = 0.0
    paymentPeriod = M
    paymentPeriodMultiplier = 3
    dayCountConvention = Act360
    businessDayConvention = ModifiedFollowing
    -- CREATE_DIV_PASSTHROUGH_ASSET_SWAP_VARIABLES_END
    observations = Map.fromList
      [ (dateToDateClockTime $ date 2019 Jan 16, 43.54)
      , (dateToDateClockTime $ date 2019 Feb 15, 47.03)
      , (dateToDateClockTime $ date 2019 May 15, 47.78)
      ]
    rateObservations = Map.fromList
      [ (dateToDateClockTime $ date 2019 Jan 16, 0.0027406)
      , (dateToDateClockTime $ date 2019 Feb 15, 0.002035)
      ]
    calendar =
      HolidayCalendarData with
        id = "USD"
        weekend = [Saturday, Sunday]
        holidays = [date 2019 Dec 19]
    holidayCalendarIds = [calendar.id]

  cumEquityInstrument <-
    originateEquity issuer issuer "EQUITY-INST-1" "0" TransferableFungible "AAPL" observers now
  exEquityInstrument <-
    originateEquity issuer issuer "EQUITY-INST-1" "1" TransferableFungible "AAPL" [] now

  let
    underlyings = [Underlying with
      referenceAsset = cumEquityInstrument
      referenceAssetId
      weight = 1.0
      initialPrice = 43.54]

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submit calendarDataProvider do
    createCmd HolidayCalendar with
      provider = calendarDataProvider
      calendar
      observers = Map.fromList observers

  observableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id referenceAssetId; observations; observers = mempty

  rateObservableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id referenceRateId; observations = rateObservations
      observers = mempty

  let observableCids = [observableCid, rateObservableCid]

  (swapInstrument, assetSwapFactoryCid) <- originateAssetSwap issuer issuer "SwapTest1" BaseHolding
    "Asset swap" observers now issueDate holidayCalendarIds calendarDataProvider firstPaymentDate
    maturityDate dayCountConvention businessDayConvention floatingRate fixRate paymentPeriod
    paymentPeriodMultiplier cashInstrument underlyings ownerReceivesRate publicParty

  -- One day before the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstPaymentDate 1) swapInstrument issuer
    observableCids

  -- First payment date: Lifecycle and verify the lifecycle effects for fix rate and asset
  -- performance payments.
  let
    expectedConsumed = [qty 0.0002283833 cashInstrument]
    expectedProduced = [qty 0.0801561782 cashInstrument]
  Some swapInstrumentAfterFirstPayment <- lifecycleAndVerifyPaymentEffects [publicParty]
    firstPaymentDate swapInstrument issuer observableCids expectedConsumed expectedProduced

  -- One day after the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstPaymentDate 1)
    swapInstrumentAfterFirstPayment issuer observableCids

  -- One day before expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays maturityDate 1)
    swapInstrumentAfterFirstPayment issuer observableCids

  -- Create cash dividend rule (specific for asset swaps)
  distributionRuleCid <- toInterfaceContractId @Lifecycle.I <$> submit issuer do
    createCmd DistributionRule with
      providers = Set.singleton issuer
      lifecycler = issuer
      observers = Set.singleton publicParty
      id = Id "LifecycleRule"
      description = "Rule to lifecycle an instrument following a distribution event"
      assetSwapFactoryCid
      newInstrumentObservers = observers

  -- Create cash dividend event: USD 1 per share (this also works with fractional shares)
  aaplDividendDistributionEventCid <-
    Instrument.submitExerciseInterfaceByKeyCmd @Equity.I [issuer] [] cumEquityInstrument
      Equity.DeclareDistribution with
        id = Id $ "AAPL - " <> show now
        description = "Cash Dividend"
        effectiveTime = now
        newInstrument = exEquityInstrument
        perUnitDistribution = [qty 1.0 cashInstrument]

  -- ASSET_SWAP_DIV_LIFECYCLING_START
  -- Lifecycle the asset swap to create an effect for the dividend.
  (Some swapInstrumentAfterDividend, [effectCid]) <- submitMulti [issuer] [publicParty] do
    exerciseCmd distributionRuleCid Lifecycle.Evolve with
      observableCids = []
      eventCid = aaplDividendDistributionEventCid
      instrument = swapInstrumentAfterFirstPayment
  -- ASSET_SWAP_DIV_LIFECYCLING_END
  let
    expectedConsumedQuantities = []
    expectedProducedQuantities = [qty 0.0229673863 cashInstrument]
  verifyConsumedAndProduced expectedConsumedQuantities expectedProducedQuantities effectCid issuer

  -- Lifecycle on the second payment date, which is also the expiry date. Verify the lifecycle
  -- effects for fix rate and asset performance payments.
  let
    expectedConsumed = [qty 0.0005030972 cashInstrument]
    expectedProduced = [qty 0.0159472677 cashInstrument]
  lifecycleAndVerifyPaymentEffects [publicParty] maturityDate swapInstrumentAfterDividend
    issuer observableCids expectedConsumed expectedProduced

  pure ()

-- Calculate payments on an asset swap, including lifecycling and creation of new instrument
-- version. This example has a basket of stock underlyings with dividend passthrough.
-- It still represents a total return swap, but the instrument only models the price performance
-- (using unadjusted price series). The dividends are paid using a separate distribution rule.
runBasketDividendPassthrough : Script ()
runBasketDividendPassthrough = script do
  [custodian, issuer, calendarDataProvider, publicParty] <-
    createParties ["Custodian", "Issuer", "Calendar Data Provider", "PublicParty"]

  -- Distribute commercial-bank cash
  now <- getTime
  let observers = [("PublicParty", Set.singleton publicParty)]
  cashInstrument <- originate custodian issuer "USD" TransferableFungible "US Dollars" observers now

  -- Create and distribute swap
  -- Equity vs rate asset swap: AAPL price return (dividends paid separately) vs floating rate
  -- payment.
  -- CREATE_BASKET_ASSET_SWAP_VARIABLES_BEGIN
  let
    issueDate = date 2019 Jan 16
    firstPaymentDate = date 2019 Feb 15
    maturityDate = date 2019 May 15
    referenceAssetId = "AAPL-CLOSE-UNADJ" -- Unadjusted price series
    referenceAsset2Id = "MSFT-CLOSE-UNADJ" -- Unadjusted price series
    referenceRateId = "USD/LIBOR/3M"
    floatingRate = Some FloatingRate with
      referenceRateId
      referenceRateType = SingleFixing CalculationPeriodStartDate
      fixingDates = DateOffset with
        periodMultiplier = 0
        period = D
        dayType = Some Business
        businessDayConvention = NoAdjustment
        businessCenters = ["USD"]
    ownerReceivesRate = False
    fixRate = 0.0
    paymentPeriod = M
    paymentPeriodMultiplier = 3
    dayCountConvention = Act360
    businessDayConvention = ModifiedFollowing
    -- CREATE_BASKET_ASSET_SWAP_VARIABLES_END
    observations = Map.fromList
      [ (dateToDateClockTime $ date 2019 Jan 16, 43.54)
      , (dateToDateClockTime $ date 2019 Feb 15, 47.03)
      , (dateToDateClockTime $ date 2019 May 15, 47.78)
      ]
    observations2 = Map.fromList
      [ (dateToDateClockTime $ date 2019 Jan 16, 105.38)
      , (dateToDateClockTime $ date 2019 Feb 15, 108.22)
      , (dateToDateClockTime $ date 2019 May 15, 120.87)
      ]
    rateObservations = Map.fromList
      [ (dateToDateClockTime $ date 2019 Jan 16, 0.0027406)
      , (dateToDateClockTime $ date 2019 Feb 15, 0.002035)
      ]
    calendar =
      HolidayCalendarData with
        id = "USD"
        weekend = [Saturday, Sunday]
        holidays = [date 2019 Dec 19]
    holidayCalendarIds = [calendar.id]

  cumEquityInstrument <-
    originateEquity issuer issuer "EQUITY-INST-1" "0" TransferableFungible "AAPL" observers now
  exEquityInstrument <-
    originateEquity issuer issuer "EQUITY-INST-1" "1" TransferableFungible "AAPL" [] now

  cumEquity2Instrument <-
    originateEquity issuer issuer "EQUITY-INST-2" "0" TransferableFungible "MSFT" observers now
  exEquity2Instrument <-
    originateEquity issuer issuer "EQUITY-INST-2" "1" TransferableFungible "MSFT" [] now

  let
    underlyings = [(Underlying with
      referenceAsset = cumEquityInstrument
      referenceAssetId
      weight = 0.5
      initialPrice = 43.54),
      (Underlying with
      referenceAsset = cumEquity2Instrument
      referenceAssetId = referenceAsset2Id
      weight = 0.5
      initialPrice = 105.38)]

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submit calendarDataProvider do
    createCmd HolidayCalendar with
      provider = calendarDataProvider
      calendar
      observers = Map.fromList observers

  observableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id referenceAssetId; observations; observers = mempty
  observable2Cid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id referenceAsset2Id; observations = observations2; observers = mempty

  rateObservableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id referenceRateId; observations = rateObservations
      observers = mempty

  let observableCids = [observableCid, observable2Cid, rateObservableCid]

  (swapInstrument, assetSwapFactoryCid) <- originateAssetSwap issuer issuer "SwapTest1" BaseHolding
    "Asset swap" observers now issueDate holidayCalendarIds calendarDataProvider firstPaymentDate
    maturityDate dayCountConvention businessDayConvention floatingRate fixRate paymentPeriod
    paymentPeriodMultiplier cashInstrument underlyings ownerReceivesRate publicParty

  -- One day before the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstPaymentDate 1) swapInstrument issuer
    observableCids

  -- First payment date: Lifecycle and verify the lifecycle effects for fix rate and asset
  -- performance payments.
  let
    expectedConsumed = [qty 0.0002283833 cashInstrument]
    expectedProduced = [qty 0.0535531318 cashInstrument]

  Some swapInstrumentAfterFirstPayment <- lifecycleAndVerifyPaymentEffects [publicParty]
    firstPaymentDate swapInstrument issuer observableCids expectedConsumed expectedProduced

  -- One day after the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstPaymentDate 1)
    swapInstrumentAfterFirstPayment issuer observableCids

  -- One day before expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays maturityDate 1)
    swapInstrumentAfterFirstPayment issuer observableCids

  -- Create cash dividend rule (specific for asset swaps)
  distributionRuleCid <- toInterfaceContractId @Lifecycle.I <$> submit issuer do
    createCmd DistributionRule with
      providers = Set.singleton issuer
      lifecycler = issuer
      observers = Set.singleton publicParty
      id = Id "LifecycleRule"
      description = "Rule to lifecycle an instrument following a distribution event"
      assetSwapFactoryCid
      newInstrumentObservers = observers

  -- Create a cash dividend event with 2 distributions: 0.5 and 1.5 USD per share, respectively
  -- (to test multiple distributions).
  distributionEventCid <-
    Instrument.submitExerciseInterfaceByKeyCmd @Equity.I [issuer] [] cumEquityInstrument
      Equity.DeclareDistribution with
        id = Id $ "AAPL - " <> show now
        description = "Cash Dividend"
        effectiveTime = now
        newInstrument = exEquityInstrument
        perUnitDistribution = [(qty 0.5 cashInstrument), (qty 1.5 cashInstrument)]

  -- Lifecycle the asset swap to create an effect for the dividend.
  (Some swapInstrumentAfterDividend, [effectCid]) <- submitMulti [issuer] [publicParty] do
    exerciseCmd distributionRuleCid Lifecycle.Evolve with
      observableCids = []
      eventCid = distributionEventCid
      instrument = swapInstrumentAfterFirstPayment
  let
    expectedConsumed = []
    expectedProduced = [(qty 0.0057418466 cashInstrument), (qty 0.0172255398 cashInstrument)]
  verifyConsumedAndProduced expectedConsumed expectedProduced effectCid issuer

  -- Lifecycle on the second payment date, which is also the expiry date. Verify the lifecycle
  -- effects for fix rate and asset performance payments.
  let
    expectedConsumed = [qty 0.0005030972 cashInstrument]
    expectedProduced = [qty 0.0664193924 cashInstrument]
  lifecycleAndVerifyPaymentEffects [publicParty] maturityDate swapInstrumentAfterDividend
    issuer observableCids expectedConsumed expectedProduced

  pure ()
