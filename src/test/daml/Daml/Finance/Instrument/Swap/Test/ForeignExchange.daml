-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.Test.ForeignExchange where

import DA.Date
import DA.Set (singleton)
import Daml.Finance.Instrument.Swap.Test.Util
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate)
import Daml.Script

-- Calculate the fx payments of a foreign exchange swap, including lifecycling and creation of new
-- instrument version.
run : Script ()
run = script do
  [custodian, issuer, publicParty] <-
    createParties ["Custodian", "Issuer", "PublicParty"]

  -- Distribute commercial-bank cash
  now <- getTime
  let observers = [("PublicParty", singleton publicParty)]

  -- CREATE_FX_SWAP_CASH_INSTRUMENTS_BEGIN
  cashInstrumentCid <- Instrument.originate custodian issuer "USD" "US Dollars" observers now
  foreignCashInstrumentCid <- Instrument.originate custodian issuer "EUR" "Euro" observers now
  -- CREATE_FX_SWAP_CASH_INSTRUMENTS_END

  -- Create and distribute swap
  -- Foreign exchange swap: USD vs EUR
  -- CREATE_FX_SWAP_VARIABLES_BEGIN
  let
    issueDate = date 2019 Jan 16
    firstPaymentDate = date 2019 Feb 15
    maturityDate = date 2019 May 15
    firstFxRate = 1.1
    finalFxRate = 1.2
    -- CREATE_FX_SWAP_VARIABLES_END
    fxRateSameCurrency = 1.0

  swapInstrument <- originateForeignExchangeSwap custodian issuer "SwapTest1"
    "Foreign exchange swap" observers now issueDate firstPaymentDate maturityDate cashInstrumentCid
    foreignCashInstrumentCid firstFxRate finalFxRate

  -- One day before the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstPaymentDate 1) swapInstrument issuer []

  -- First payment date: Lifecycle and verify the lifecycle effects for the fx payments.
  let
    expectedConsumedQuantities = [Instrument.qty fxRateSameCurrency cashInstrumentCid]
    expectedProducedQuantities = [Instrument.qty firstFxRate foreignCashInstrumentCid]
  swapInstrumentAfterFirstPayment <- lifecycleAndVerifySwapPaymentEffects [publicParty]
    firstPaymentDate swapInstrument issuer [] expectedConsumedQuantities expectedProducedQuantities

  -- One day after the first payment date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstPaymentDate 1)
    swapInstrumentAfterFirstPayment issuer []

  -- One day before expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays maturityDate 1)
    swapInstrumentAfterFirstPayment issuer []

  -- Lifecycle on the second payment date, which is also the expiry date. Verify the lifecycle
  -- effects for the fx payments.
  let
    expectedConsumedQuantities = [Instrument.qty finalFxRate foreignCashInstrumentCid]
    expectedProducedQuantities = [Instrument.qty fxRateSameCurrency cashInstrumentCid]
  lifecycleAndVerifySwapPaymentEffects [publicParty] maturityDate swapInstrumentAfterFirstPayment
    issuer [] expectedConsumedQuantities expectedProducedQuantities

  pure ()
