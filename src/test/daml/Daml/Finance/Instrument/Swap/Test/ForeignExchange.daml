-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.Test.ForeignExchange where

import DA.Date
import DA.Map qualified as M (fromList)
import DA.Set (singleton)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Instrument.Swap.Test.Util
import Daml.Finance.Test.Util.Account qualified as Account (createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate)
import Daml.Script

-- Calculate the fx payments of a foreign exchange swap, including lifecycling and creation of new instrument version.
run : Script ()
run = script do
  [custodian, issuer, investor, publicParty] <-
    createParties ["Custodian", "Issuer", "Investor", "PublicParty"]

  -- Account and holding factory
  let pp = [("FactoryProvider", singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory custodian pp
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [custodian] [] do
    createCmd Fungible.Factory with provider = custodian; observers = M.fromList pp

  -- Create accounts
  [custodianAccount, investorAccount] <- mapA (Account.createAccount "Default Account" [publicParty] accountFactoryCid holdingFactoryCid [] custodian) [custodian, investor]

  -- Distribute commercial-bank cash
  now <- getTime
  let observers = [("PublicParty", singleton publicParty)]
  cashInstrumentCid <- Instrument.originate custodian issuer "USD" "US Dollars" observers now
  foreignCashInstrumentCid <- Instrument.originate custodian issuer "EUR" "Euro" observers now

  -- Create and distribute swap
  -- Foreign exchange swap: USD vs EUR
  let
    issueDate = date 2019 Jan 16
    firstPaymentDate = date 2019 Feb 15
    maturityDate = date 2019 May 15
    firstFxRate = 1.1
    finalFxRate = 1.2
    firstForeignPaymentAmount : Decimal = 1_100_000.0
    firstBasePaymentAmount : Decimal = 1_000_000.0
    secondForeignPaymentAmount : Decimal = 1_200_000.0
    secondBasePaymentAmount : Decimal = 1_000_000.0
    principalAmount = 1_000_000.0

  swapInstrument <- originateForeignExchangeSwap custodian issuer "SwapTest1" "Foreign exchange swap" pp now issueDate firstPaymentDate maturityDate cashInstrumentCid foreignCashInstrumentCid firstFxRate finalFxRate
  investorSwapTransferableCid <- Account.credit [publicParty] swapInstrument principalAmount investorAccount

  -- One day before the first payment date: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstPaymentDate 1) swapInstrument custodian issuer []

  -- First payment date: Lifecycle and verify that there are lifecycle effects for the fx payments.
  investorCashForBasePaymentTransferableCid <- Account.credit [publicParty] cashInstrumentCid firstBasePaymentAmount investorAccount
  custodianCashForForeignPaymentTransferableCid <- Account.credit [publicParty] foreignCashInstrumentCid firstForeignPaymentAmount custodianAccount
  (swapInstrumentAfterFirstPayment, investorSwapTransferableCid) <- lifecycleAndVerifySwapPaymentEffectsAndSettlement [publicParty] firstPaymentDate swapInstrument custodian issuer investor investorSwapTransferableCid investorCashForBasePaymentTransferableCid custodianCashForForeignPaymentTransferableCid custodianAccount investorAccount observers custodian []

  -- One day after the first payment date: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstPaymentDate 1) swapInstrumentAfterFirstPayment custodian issuer []

  -- One day before expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays maturityDate 1) swapInstrumentAfterFirstPayment custodian issuer []

  -- Lifecycle on the second payment date, which is also the expiry date. Verify that there are lifecycle effects for the fx payments.
  investorCashForForeignPaymentTransferableCid <- Account.credit [publicParty] foreignCashInstrumentCid secondForeignPaymentAmount investorAccount
  custodianCashForBasePaymentTransferableCid <- Account.credit [publicParty] cashInstrumentCid secondBasePaymentAmount custodianAccount
  lifecycleAndVerifyFinalSwapPaymentEffects [publicParty] maturityDate swapInstrumentAfterFirstPayment custodian issuer investor investorSwapTransferableCid investorCashForForeignPaymentTransferableCid custodianCashForBasePaymentTransferableCid custodianAccount investorAccount observers custodian []

  pure ()
