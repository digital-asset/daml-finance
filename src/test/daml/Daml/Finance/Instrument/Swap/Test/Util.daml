-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.Test.Util where

import DA.Map qualified as M (fromList)
import Daml.Finance.Instrument.Swap.Asset.Instrument qualified as AssetSwap (Instrument(..))
import Daml.Finance.Instrument.Swap.CreditDefault.Instrument qualified as CreditDefaultSwap (Instrument(..))
import Daml.Finance.Instrument.Swap.Currency.Instrument qualified as CurrencySwap (Instrument(..))
import Daml.Finance.Instrument.Swap.ForeignExchange.Instrument qualified as ForeignExchange (Instrument(..))
import Daml.Finance.Instrument.Swap.Fpml.Instrument qualified as FpmlSwap (Instrument(..))
import Daml.Finance.Instrument.Swap.InterestRate.Instrument qualified as InterestRateSwap (Instrument(..))
import Daml.Finance.Interface.Instrument.Swap.Fpml.FpmlTypes (SwapStream(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey, Parties)
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayConventionEnum)
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum)
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum)
import Daml.Finance.Test.Util.Instrument (createReference)
import Daml.Finance.Test.Util.Time (createPaymentPeriodicSchedule)
import Daml.Script

-- | Originate an interest rate swap.
originateInterestRateSwap : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time -> Date ->
  [Text] -> Party -> Date -> Date -> DayCountConventionEnum ->
  BusinessDayConventionEnum -> Decimal -> PeriodEnum -> Int -> InstrumentKey -> Text ->
  Bool -> Script InstrumentKey
originateInterestRateSwap depository issuer label description observers lastEventTimestamp issueDate
  holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention
  businessDayConvention fixRate couponPeriod couponPeriodMultiplier currency referenceRateId
  ownerReceivesFix = do
    let
      periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds
        businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
    -- CREATE_INTEREST_RATE_SWAP_INSTRUMENT_BEGIN
    cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
      createCmd InterestRateSwap.Instrument with
        depository; issuer; id = Id label; version = "0"; description
        observers = M.fromList observers; lastEventTimestamp; periodicSchedule; holidayCalendarIds
        calendarDataProvider; dayCountConvention; ownerReceivesFix; fixRate; referenceRateId
        currency
    -- CREATE_INTEREST_RATE_SWAP_INSTRUMENT_END
    createReference cid depository issuer observers

-- | Originate a swap specified by FpML swapStream modules
originateFpmlSwap : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time ->
  [SwapStream] -> Party -> [InstrumentKey] -> Text -> Script InstrumentKey
originateFpmlSwap depository issuer label description observers lastEventTimestamp swapStreams
  calendarDataProvider currencies issuerPartyRef = do
    -- CREATE_FPML_SWAP_INSTRUMENT_BEGIN
    cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
      createCmd FpmlSwap.Instrument with
        depository; issuer; id = Id label; version = "0"; description
        observers = M.fromList observers; lastEventTimestamp; swapStreams; issuerPartyRef
        calendarDataProvider; currencies
    -- CREATE_FPML_SWAP_INSTRUMENT_END
    createReference cid depository issuer observers

-- | Originate an asset swap.
originateAssetSwap : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time -> Date ->
  [Text] -> Party -> Date -> Date -> DayCountConventionEnum ->
  BusinessDayConventionEnum -> Decimal -> PeriodEnum -> Int -> InstrumentKey -> Text ->
  Bool -> Script InstrumentKey
originateAssetSwap depository issuer label description observers lastEventTimestamp issueDate
  holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention
  businessDayConvention fixRate couponPeriod couponPeriodMultiplier currency referenceAssetId
  ownerReceivesFix = do
    let
      periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds
        businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
    -- CREATE_ASSET_SWAP_INSTRUMENT_BEGIN
    cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
      createCmd AssetSwap.Instrument with
        depository; issuer; id = Id label; version = "0"; description
        observers = M.fromList observers; lastEventTimestamp; periodicSchedule; holidayCalendarIds
        calendarDataProvider; dayCountConvention; ownerReceivesFix; fixRate; referenceAssetId
        currency
    -- CREATE_ASSET_SWAP_INSTRUMENT_END
    createReference cid depository issuer observers

-- | Originate a credit default swap.
originateCreditDefaultSwap : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time ->
  Date -> [Text] -> Party -> Date -> Date -> DayCountConventionEnum ->
  BusinessDayConventionEnum -> Decimal -> PeriodEnum -> Int -> InstrumentKey ->
  Text -> Text -> Bool -> Script InstrumentKey
originateCreditDefaultSwap depository issuer label description observers lastEventTimestamp
  issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention
  businessDayConvention fixRate couponPeriod couponPeriodMultiplier currency
  defaultProbabilityReferenceId recoveryRateReferenceId ownerReceivesFix = do
    let
      periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds
        businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
    -- CREATE_CREDIT_DEFAULT_SWAP_INSTRUMENT_BEGIN
    cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
      createCmd CreditDefaultSwap.Instrument with
        depository; issuer; id = Id label; version = "0"; description
        observers = M.fromList observers; lastEventTimestamp; periodicSchedule; holidayCalendarIds
        calendarDataProvider; dayCountConvention; ownerReceivesFix; fixRate
        defaultProbabilityReferenceId; recoveryRateReferenceId; currency
    -- CREATE_CREDIT_DEFAULT_SWAP_INSTRUMENT_END
    createReference cid depository issuer observers

-- | Originate a currency swap.
originateCurrencySwap : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time -> Date ->
  [Text] -> Party -> Date -> Date -> DayCountConventionEnum ->
  BusinessDayConventionEnum -> Decimal -> Decimal -> PeriodEnum -> Int -> InstrumentKey ->
  InstrumentKey -> Decimal -> Bool -> Script InstrumentKey
originateCurrencySwap depository issuer label description observers lastEventTimestamp issueDate
  holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention
  businessDayConvention baseRate foreignRate couponPeriod couponPeriodMultiplier baseCurrency
  foreignCurrency fxRate ownerReceivesBase = do
    let
      periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds
        businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
    -- CREATE_CURRENCY_SWAP_INSTRUMENT_BEGIN
    cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
      createCmd CurrencySwap.Instrument with
        depository; issuer; id = Id label; version = "0"; description
        observers = M.fromList observers; lastEventTimestamp; periodicSchedule; holidayCalendarIds
        calendarDataProvider; dayCountConvention; ownerReceivesBase; baseRate; foreignRate
        baseCurrency; foreignCurrency; fxRate
    -- CREATE_CURRENCY_SWAP_INSTRUMENT_BEGIN
    createReference cid depository issuer observers

-- | Originate an FX swap.
originateForeignExchangeSwap : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time ->
  Date -> Date -> Date -> InstrumentKey -> InstrumentKey -> Decimal -> Decimal ->
  Script InstrumentKey
originateForeignExchangeSwap depository issuer label description observers lastEventTimestamp
  issueDate firstPaymentDate maturityDate baseCurrency foreignCurrency firstFxRate finalFxRate = do
    -- CREATE_FOREIGN_EXCHANGE_SWAP_INSTRUMENT_BEGIN
    cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
      createCmd ForeignExchange.Instrument with
        depository; issuer; id = Id label; version = "0"; description
        observers = M.fromList observers; lastEventTimestamp; firstFxRate; finalFxRate; issueDate
        firstPaymentDate; maturityDate, baseCurrency; foreignCurrency
    -- CREATE_FOREIGN_EXCHANGE_SWAP_INSTRUMENT_END
    createReference cid depository issuer observers
