-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.Test.Util where

import DA.Map qualified as M (empty, fromList)
import Daml.Finance.Instrument.Swap.Asset.Factory qualified as Asset (Factory(..))
import Daml.Finance.Instrument.Swap.CreditDefault.Factory qualified as CreditDefault (Factory(..))
import Daml.Finance.Instrument.Swap.Currency.Factory qualified as Currency (Factory(..))
import Daml.Finance.Instrument.Swap.ForeignExchange.Factory qualified as ForeignExchange (Factory(..))
import Daml.Finance.Instrument.Swap.Fpml.Factory qualified as Fpml (Factory(..))
import Daml.Finance.Instrument.Swap.InterestRate.Factory qualified as InterestRate (Factory(..))
import Daml.Finance.Interface.Instrument.Swap.Asset.Factory qualified as Asset (Create(..), F(..))
import Daml.Finance.Interface.Instrument.Swap.Asset.Types (Asset(..))
import Daml.Finance.Interface.Instrument.Swap.CreditDefault.Factory qualified as CreditDefault (Create(..), F(..))
import Daml.Finance.Interface.Instrument.Swap.CreditDefault.Types (CreditDefault(..))
import Daml.Finance.Interface.Instrument.Swap.Currency.Factory qualified as Currency (Create(..), F(..))
import Daml.Finance.Interface.Instrument.Swap.Currency.Types (CurrencySwap(..))
import Daml.Finance.Interface.Instrument.Swap.ForeignExchange.Factory qualified as ForeignExchange (Create(..), F(..))
import Daml.Finance.Interface.Instrument.Swap.ForeignExchange.Types (ForeignExchange(..))
import Daml.Finance.Interface.Instrument.Swap.Fpml.Factory qualified as Fpml (Create(..), F(..))
import Daml.Finance.Interface.Instrument.Swap.Fpml.FpmlTypes (SwapStream(..))
import Daml.Finance.Interface.Instrument.Swap.Fpml.Types (Fpml(..))
import Daml.Finance.Interface.Instrument.Swap.InterestRate.Factory qualified as InterestRate (Create(..), F(..))
import Daml.Finance.Interface.Instrument.Swap.InterestRate.Types (InterestRate(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey(..), Parties)
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayConventionEnum)
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum)
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum)
import Daml.Finance.Test.Util.Time (createPaymentPeriodicSchedule)
import Daml.Script

-- | Originate an interest rate swap.
originateInterestRateSwap : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time -> Date ->
  [Text] -> Party -> Date -> Date -> DayCountConventionEnum ->
  BusinessDayConventionEnum -> Decimal -> PeriodEnum -> Int -> InstrumentKey -> Text ->
  Bool -> Party -> Script InstrumentKey
originateInterestRateSwap depository issuer label description observers lastEventTimestamp issueDate
  holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention
  businessDayConvention fixRate couponPeriod couponPeriodMultiplier currency referenceRateId
  ownerReceivesFix publicParty = do
    let
      periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds
        businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate

    -- Create an interest rate swap factory
    interestRateSwapFactoryCid <- toInterfaceContractId @InterestRate.F <$> submit issuer do
      createCmd InterestRate.Factory with
        provider = issuer
        observers = M.empty

    -- CREATE_INTEREST_RATE_SWAP_INSTRUMENT_BEGIN
    let
      instrument = InstrumentKey with
        issuer
        depository
        id = Id label
        version = "0"

    cid <- submitMulti [issuer] [publicParty] do
      exerciseCmd interestRateSwapFactoryCid InterestRate.Create with
        interestRate = InterestRate with
          instrument
          description
          periodicSchedule
          holidayCalendarIds
          calendarDataProvider
          dayCountConvention
          referenceRateId
          fixRate
          ownerReceivesFix
          currency
          lastEventTimestamp
        observers = M.fromList observers
    -- CREATE_INTEREST_RATE_SWAP_INSTRUMENT_END
    pure instrument

-- | Originate a swap specified by FpML swapStream modules
originateFpmlSwap : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time ->
  [SwapStream] -> Party -> [InstrumentKey] -> Text -> Party -> Script InstrumentKey
originateFpmlSwap depository issuer label description observers lastEventTimestamp swapStreams
  calendarDataProvider currencies issuerPartyRef publicParty = do
    -- Create an FpML swap factory
    fpmlSwapFactoryCid <- toInterfaceContractId @Fpml.F <$> submit issuer do
      createCmd Fpml.Factory with
        provider = issuer
        observers = M.empty

    -- CREATE_FPML_SWAP_INSTRUMENT_BEGIN
    let
      instrument = InstrumentKey with
        issuer
        depository
        id = Id label
        version = "0"

    cid <- submitMulti [issuer] [publicParty] do
      exerciseCmd fpmlSwapFactoryCid Fpml.Create with
        fpml = Fpml with
          instrument
          description
          swapStreams
          issuerPartyRef
          currencies
          calendarDataProvider
          lastEventTimestamp
        observers = M.fromList observers
    -- CREATE_FPML_SWAP_INSTRUMENT_END
    pure instrument

-- | Originate an asset swap.
originateAssetSwap : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time -> Date ->
  [Text] -> Party -> Date -> Date -> DayCountConventionEnum ->
  BusinessDayConventionEnum -> Decimal -> PeriodEnum -> Int -> InstrumentKey -> Text ->
  Bool -> Party -> Script InstrumentKey
originateAssetSwap depository issuer label description observers lastEventTimestamp issueDate
  holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention
  businessDayConvention fixRate couponPeriod couponPeriodMultiplier currency referenceAssetId
  ownerReceivesFix publicParty = do
    let
      periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds
        businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate

    -- Create an asset swap factory
    assetSwapFactoryCid <- toInterfaceContractId @Asset.F <$> submit issuer do
      createCmd Asset.Factory with
        provider = issuer
        observers = M.empty

    -- CREATE_ASSET_SWAP_INSTRUMENT_BEGIN
    let
      instrument = InstrumentKey with
        issuer
        depository
        id = Id label
        version = "0"

    cid <- submitMulti [issuer] [publicParty] do
      exerciseCmd assetSwapFactoryCid Asset.Create with
        asset = Asset with
          instrument
          description
          periodicSchedule
          holidayCalendarIds
          calendarDataProvider
          dayCountConvention
          fixRate
          ownerReceivesFix
          referenceAssetId
          currency
          lastEventTimestamp
        observers = M.fromList observers
    -- CREATE_ASSET_SWAP_INSTRUMENT_END
    pure instrument

-- | Originate a credit default swap (CDS).
originateCreditDefaultSwap : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time ->
  Date -> [Text] -> Party -> Date -> Date -> DayCountConventionEnum ->
  BusinessDayConventionEnum -> Decimal -> PeriodEnum -> Int -> InstrumentKey ->
  Text -> Text -> Bool -> Party -> Script InstrumentKey
originateCreditDefaultSwap depository issuer label description observers lastEventTimestamp
  issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention
  businessDayConvention fixRate couponPeriod couponPeriodMultiplier currency
  defaultProbabilityReferenceId recoveryRateReferenceId ownerReceivesFix publicParty = do
    let
      periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds
        businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate

    -- Create a credit default swap factory
    cdsFactoryCid <- toInterfaceContractId @CreditDefault.F <$> submit issuer do
      createCmd CreditDefault.Factory with
        provider = issuer
        observers = M.empty

    -- CREATE_CREDIT_DEFAULT_SWAP_INSTRUMENT_BEGIN
    let
      instrument = InstrumentKey with
        issuer
        depository
        id = Id label
        version = "0"

    cid <- submitMulti [issuer] [publicParty] do
      exerciseCmd cdsFactoryCid CreditDefault.Create with
        creditDefault = CreditDefault with
          instrument
          description
          periodicSchedule
          holidayCalendarIds
          calendarDataProvider
          dayCountConvention
          fixRate
          ownerReceivesFix
          defaultProbabilityReferenceId
          recoveryRateReferenceId
          currency
          lastEventTimestamp
        observers = M.fromList observers
    -- CREATE_CREDIT_DEFAULT_SWAP_INSTRUMENT_END
    pure instrument

-- | Originate a currency swap.
originateCurrencySwap : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time -> Date ->
  [Text] -> Party -> Date -> Date -> DayCountConventionEnum ->
  BusinessDayConventionEnum -> Decimal -> Decimal -> PeriodEnum -> Int -> InstrumentKey ->
  InstrumentKey -> Decimal -> Bool -> Party -> Script InstrumentKey
originateCurrencySwap depository issuer label description observers lastEventTimestamp issueDate
  holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention
  businessDayConvention baseRate foreignRate couponPeriod couponPeriodMultiplier baseCurrency
  foreignCurrency fxRate ownerReceivesBase publicParty = do
    let
      periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds
        businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate

    -- Create a currency swap factory
    currencySwapFactoryCid <- toInterfaceContractId @Currency.F <$> submit issuer do
      createCmd Currency.Factory with
        provider = issuer
        observers = M.empty

    -- CREATE_CURRENCY_SWAP_INSTRUMENT_BEGIN
    let
      instrument = InstrumentKey with
        issuer
        depository
        id = Id label
        version = "0"

    cid <- submitMulti [issuer] [publicParty] do
      exerciseCmd currencySwapFactoryCid Currency.Create with
        currencySwap = CurrencySwap with
          instrument
          description
          periodicSchedule
          holidayCalendarIds
          calendarDataProvider
          dayCountConvention
          ownerReceivesBase
          baseRate
          foreignRate
          baseCurrency
          foreignCurrency
          fxRate
          lastEventTimestamp
        observers = M.fromList observers
    -- CREATE_CURRENCY_SWAP_INSTRUMENT_BEGIN
    pure instrument

-- | Originate an FX swap.
originateForeignExchangeSwap : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time ->
  Date -> Date -> Date -> InstrumentKey -> InstrumentKey -> Decimal -> Decimal ->
  Party -> Script InstrumentKey
originateForeignExchangeSwap depository issuer label description observers lastEventTimestamp
  issueDate firstPaymentDate maturityDate baseCurrency foreignCurrency firstFxRate finalFxRate
  publicParty = do
    -- Create an FX swap factory
    fxSwapFactoryCid <- toInterfaceContractId @ForeignExchange.F <$> submit issuer do
      createCmd ForeignExchange.Factory with
        provider = issuer
        observers = M.empty

    -- CREATE_FOREIGN_EXCHANGE_SWAP_INSTRUMENT_BEGIN
    let
      instrument = InstrumentKey with
        issuer
        depository
        id = Id label
        version = "0"

    cid <- submitMulti [issuer] [publicParty] do
      exerciseCmd fxSwapFactoryCid ForeignExchange.Create with
        foreignExchange = ForeignExchange with
          instrument
          description
          baseCurrency
          foreignCurrency
          firstFxRate
          finalFxRate
          issueDate
          firstPaymentDate
          maturityDate
          lastEventTimestamp
        observers = M.fromList observers
    -- CREATE_FOREIGN_EXCHANGE_SWAP_INSTRUMENT_END
    pure instrument
