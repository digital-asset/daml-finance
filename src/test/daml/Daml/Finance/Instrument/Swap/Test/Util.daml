-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.Test.Util where

import DA.Date
import DA.List (head, sort)
import DA.Map qualified as M (fromList)
import DA.Set qualified as S (empty, singleton)
import Daml.Finance.Instrument.Swap.Asset.Instrument qualified as AssetSwap (Instrument(..))
import Daml.Finance.Instrument.Swap.CreditDefault.Instrument qualified as CreditDefaultSwap (Instrument(..))
import Daml.Finance.Instrument.Swap.Currency.Instrument qualified as CurrencySwap (Instrument(..))
import Daml.Finance.Instrument.Swap.ForeignExchange.Instrument qualified as ForeignExchange (Instrument(..))
import Daml.Finance.Instrument.Swap.Fpml.Instrument qualified as FpmlSwap (Instrument(..))
import Daml.Finance.Instrument.Swap.InterestRate.Instrument qualified as InterestRateSwap (Instrument(..))
import Daml.Finance.Interface.Data.NumericObservable qualified as NumericObservable (I)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (GetView(..), K, I, Q, toKey)
import Daml.Finance.Interface.Lifecycle.Effect qualified as Effect (I, GetView(..))
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (I, Evolve(..))
import Daml.Finance.Interface.Types.Common
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayAdjustment(..), BusinessDayConventionEnum)
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum)
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum, RollConventionEnum(..))
import Daml.Finance.Interface.Types.Date.Schedule (Frequency(..), PeriodicSchedule(..))
import Daml.Finance.Interface.Types.Fpml
import Daml.Finance.Test.Util.Instrument (createReference)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (submitExerciseInterfaceByKeyCmd)
import Daml.Finance.Test.Util.Lifecycle (createClockAndEvent)
import Daml.Script

-- | Create a schedule for periodic payments.
createPaymentPeriodicSchedule : Date -> [Text] -> BusinessDayConventionEnum -> PeriodEnum -> Int -> Date -> Date -> PeriodicSchedule
createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate = do
  -- CREATE_SWAP_PERIODIC_SCHEDULE_BEGIN
  let
    (y, m, d) = toGregorian firstCouponDate
    periodicSchedule = PeriodicSchedule with
      businessDayAdjustment =
        BusinessDayAdjustment with
          calendarIds = holidayCalendarIds
          convention = businessDayConvention
      effectiveDateBusinessDayAdjustment = None
      terminationDateBusinessDayAdjustment = None
      frequency =
        Frequency with
          rollConvention = DOM d
          period = couponPeriod
          periodMultiplier = couponPeriodMultiplier
      effectiveDate = issueDate
      firstRegularPeriodStartDate = Some firstCouponDate
      lastRegularPeriodEndDate = Some maturityDate
      stubPeriodType = None
      terminationDate = maturityDate
  -- CREATE_SWAP_PERIODIC_SCHEDULE_END
  periodicSchedule

-- | Originate an interest rate swap.
originateInterestRateSwap : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time -> Date -> [Text] -> Party -> Date -> Date -> DayCountConventionEnum -> BusinessDayConventionEnum -> Decimal -> PeriodEnum -> Int -> Instrument.K -> Text -> Bool -> Script Instrument.K
originateInterestRateSwap depository issuer label description observers lastEventTimestamp issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention businessDayConvention fixRate couponPeriod couponPeriodMultiplier currency referenceRateId issuerPaysFix = do
  let
    periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
  -- CREATE_INTEREST_RATE_SWAP_INSTRUMENT_BEGIN
  cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
    createCmd InterestRateSwap.Instrument with depository; issuer; id = Id label; version = "0"; description; observers = M.fromList observers; lastEventTimestamp; periodicSchedule; holidayCalendarIds; calendarDataProvider; dayCountConvention; issuerPaysFix; fixRate; referenceRateId; currency
  -- CREATE_INTEREST_RATE_SWAP_INSTRUMENT_END
  createReference cid depository issuer observers

-- | Originate a swap specified by FpML swapStream modules
originateFpmlSwap : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time -> [SwapStream] -> Party -> Instrument.K -> Text -> Script Instrument.K
originateFpmlSwap depository issuer label description observers lastEventTimestamp swapStreams calendarDataProvider currency issuerPartyRef = do
  -- CREATE_FPML_SWAP_INSTRUMENT_BEGIN
  cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
    createCmd FpmlSwap.Instrument with depository; issuer; id = Id label; version = "0"; description; observers = M.fromList observers; lastEventTimestamp; swapStreams; issuerPartyRef; calendarDataProvider; currency
  -- CREATE_FPML_SWAP_INSTRUMENT_END
  createReference cid depository issuer observers

-- | Originate an asset swap.
originateAssetSwap : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time -> Date -> [Text] -> Party -> Date -> Date -> DayCountConventionEnum -> BusinessDayConventionEnum -> Decimal -> PeriodEnum -> Int -> Instrument.K -> Text -> Bool -> Script Instrument.K
originateAssetSwap depository issuer label description observers lastEventTimestamp issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention businessDayConvention fixRate couponPeriod couponPeriodMultiplier currency referenceAssetId issuerPaysFix = do
  let
    periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
  -- CREATE_ASSET_SWAP_INSTRUMENT_BEGIN
  cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
    createCmd AssetSwap.Instrument with depository; issuer; id = Id label; version = "0"; description; observers = M.fromList observers; lastEventTimestamp; periodicSchedule; holidayCalendarIds; calendarDataProvider; dayCountConvention; issuerPaysFix; fixRate; referenceAssetId; currency
  -- CREATE_ASSET_SWAP_INSTRUMENT_END
  createReference cid depository issuer observers

-- | Originate a credit default swap.
originateCreditDefaultSwap : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time -> Date -> [Text] -> Party -> Date -> Date -> DayCountConventionEnum -> BusinessDayConventionEnum -> Decimal -> PeriodEnum -> Int -> Instrument.K -> Text -> Text -> Bool -> Script Instrument.K
originateCreditDefaultSwap depository issuer label description observers lastEventTimestamp issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention businessDayConvention fixRate couponPeriod couponPeriodMultiplier currency defaultProbabilityReferenceId recoveryRateReferenceId issuerPaysFix = do
  let
    periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
  -- CREATE_CREDIT_DEFAULT_SWAP_INSTRUMENT_BEGIN
  cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
    createCmd CreditDefaultSwap.Instrument with depository; issuer; id = Id label; version = "0"; description; observers = M.fromList observers; lastEventTimestamp; periodicSchedule; holidayCalendarIds; calendarDataProvider; dayCountConvention; issuerPaysFix; fixRate; defaultProbabilityReferenceId; recoveryRateReferenceId; currency
  -- CREATE_CREDIT_DEFAULT_SWAP_INSTRUMENT_END
  createReference cid depository issuer observers

-- | Originate a currency swap.
originateCurrencySwap : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time -> Date -> [Text] -> Party -> Date -> Date -> DayCountConventionEnum -> BusinessDayConventionEnum -> Decimal -> Decimal -> PeriodEnum -> Int -> Instrument.K -> Instrument.K -> Decimal -> Bool -> Script Instrument.K
originateCurrencySwap depository issuer label description observers lastEventTimestamp issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention businessDayConvention baseRate foreignRate couponPeriod couponPeriodMultiplier baseCurrency foreignCurrency fxRate issuerPaysBase = do
  let
    periodicSchedule = createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod couponPeriodMultiplier issueDate maturityDate
  -- CREATE_CURRENCY_SWAP_INSTRUMENT_BEGIN
  cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
    createCmd CurrencySwap.Instrument with depository; issuer; id = Id label; version = "0"; description; observers = M.fromList observers; lastEventTimestamp; periodicSchedule; holidayCalendarIds; calendarDataProvider; dayCountConvention; issuerPaysBase; baseRate; foreignRate; baseCurrency; foreignCurrency; fxRate
  -- CREATE_CURRENCY_SWAP_INSTRUMENT_BEGIN
  createReference cid depository issuer observers

-- | Originate an FX swap.
originateForeignExchangeSwap : Party -> Party -> Text -> Text -> [(Text, Parties)] -> Time -> Date -> Date -> Date -> Instrument.K -> Instrument.K -> Decimal -> Decimal -> Script Instrument.K
originateForeignExchangeSwap depository issuer label description observers lastEventTimestamp issueDate firstPaymentDate maturityDate baseCurrency foreignCurrency firstFxRate finalFxRate = do
  -- CREATE_FOREIGN_EXCHANGE_SWAP_INSTRUMENT_BEGIN
  cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
    createCmd ForeignExchange.Instrument with depository; issuer; id = Id label; version = "0"; description; observers = M.fromList observers; lastEventTimestamp; firstFxRate; finalFxRate; issueDate; firstPaymentDate; maturityDate, baseCurrency; foreignCurrency
  -- CREATE_FOREIGN_EXCHANGE_SWAP_INSTRUMENT_END
  createReference cid depository issuer observers

-- | Lifecycle the instrument as of this date. This is a general function that can be used for both bonds and swaps.
lifecycleInstrument : [Party] -> Date -> Instrument.K -> Parties -> Party -> [ContractId NumericObservable.I] -> Script (ContractId Lifecycle.I, [ContractId Effect.I])
lifecycleInstrument readAs today instrument settlers issuer observableCids = do
  -- CREATE_CLOCK_FOR_BOND_LIFECYCLING_BEGIN
  -- create clock and clock update event
  (clockCid, clockEventCid) <- createClockAndEvent (S.singleton issuer) today S.empty
  -- CREATE_CLOCK_FOR_BOND_LIFECYCLING_END

  -- LIFECYCLE_BOND_BEGIN
  -- Try to lifecycle instrument
  (lifecycleCid, effectCids) <- Instrument.submitExerciseInterfaceByKeyCmd @Lifecycle.I [issuer] readAs instrument
    Lifecycle.Evolve with settlers; eventCid = clockEventCid; observableCids; ruleName = "Time"; timeObservableCid = clockCid
  -- LIFECYCLE_BOND_END

  pure (lifecycleCid, effectCids)

-- | Verify a that there are no lifecycle effects of the instrument on this date. This is a general function that can be used for both bonds and swaps.
verifyNoLifecycleEffects : [Party] -> Date -> Instrument.K -> Parties -> Party -> [ContractId NumericObservable.I] -> Script ()
verifyNoLifecycleEffects readAs today instrument settlers issuer observableCids = do
  (bondLifecycleCid2, effectCids) <- lifecycleInstrument readAs today instrument settlers issuer observableCids
  assertMsg ("There should be no lifecycle effects on " <> show today) (null effectCids)

-- | Verify the payments from a payment date of a swap (excluding settlement)
lifecycleAndVerifySwapPaymentEffects : [Party] -> Date -> Instrument.K -> Parties -> Party -> [ContractId NumericObservable.I] -> [Instrument.Q] -> [Instrument.Q] -> Script Instrument.K
lifecycleAndVerifySwapPaymentEffects readAs today swapInstrument settlers issuer observableCids expectedConsumedQuantities expectedProducedQuantities = do
  (swapLifecycleCid, effectCids) <- lifecycleInstrument readAs today swapInstrument settlers issuer observableCids
  let effectCid = head effectCids -- this gives a better error message in case there are no effects

  newSwapInstrumentKey <- submit issuer do
    Instrument.toKey <$> exerciseCmd @Instrument.I (coerceContractId swapLifecycleCid) Instrument.GetView with viewer = issuer

  -- Get the effect
  effectView <- submit issuer do
    exerciseCmd effectCid Effect.GetView with viewer = issuer

  -- Verify that the consumed/produced quantities match the expected ones
  assertMsg "The consumed quantities do not match the expected ones" (sort expectedConsumedQuantities == sort effectView.consumed)
  assertMsg "The produced quantities do not match the expected ones" (sort expectedProducedQuantities == sort effectView.produced)

  pure newSwapInstrumentKey
