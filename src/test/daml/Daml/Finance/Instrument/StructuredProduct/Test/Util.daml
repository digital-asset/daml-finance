-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.StructuredProduct.Test.Util where

import DA.Map qualified as Map (fromList)
import Daml.Finance.Instrument.StructuredProduct.V1.AutoCallable.Factory qualified as AutoCallable (Factory(..))
import Daml.Finance.Instrument.StructuredProduct.V1.BarrierReverseConvertible.Factory qualified as BarrierReverseConvertible (Factory(..))
import Daml.Finance.Interface.Instrument.StructuredProduct.V1.AutoCallable.Factory qualified as AutoCallableFactory (Create(..), I(..))
import Daml.Finance.Interface.Instrument.StructuredProduct.V1.AutoCallable.Types (AutoCallable(..))
import Daml.Finance.Interface.Instrument.StructuredProduct.V1.BarrierReverseConvertible.Factory qualified as BarrierReverseConvertibleFactory (Create(..), I(..))
import Daml.Finance.Interface.Instrument.StructuredProduct.V1.BarrierReverseConvertible.Types (BarrierReverseConvertible(..))
import Daml.Finance.Interface.Types.Common.V3.Types (HoldingStandard(..), Id(..), InstrumentKey(..), Parties)
import Daml.Finance.Interface.Types.Date.V3.DayCount (DayCountConventionEnum)
import Daml.Finance.Interface.Types.Date.V3.Schedule (PeriodicSchedule(..))
import Daml.Script

-- | Originate a barrier reverse convertible (BRC) instrument.
originateBarrierReverseConvertible : Party -> Party -> Text -> HoldingStandard -> Text ->
  [(Text, Parties)] -> Time -> Date -> Decimal -> Decimal -> Date -> InstrumentKey -> Text
  -> Decimal -> PeriodicSchedule -> [Text] -> DayCountConventionEnum -> Decimal
  -> Party -> Party -> Script InstrumentKey
originateBarrierReverseConvertible depository issuer label holdingStandard description
  observers lastEventTimestamp expiryDate strike barrier barrierStartDate currency referenceAssetId
  couponRate periodicSchedule holidayCalendarIds dayCountConvention notional
  calendarDataProvider publicParty = do
    -- Create a BRC factory
    brcFactoryCid <- toInterfaceContractId @BarrierReverseConvertibleFactory.I <$> submit issuer do
      createCmd BarrierReverseConvertible.Factory with
        provider = issuer
        observers = mempty

  -- CREATE_BARRIER_REVERSE_CONVERTIBLE_INSTRUMENT_BEGIN
    let
      instrument = InstrumentKey with
        issuer
        depository
        id = Id label
        version = "0"
        holdingStandard

    cid <- submitMulti [issuer] [publicParty] do
      exerciseCmd brcFactoryCid BarrierReverseConvertibleFactory.Create with
        barrierReverseConvertible = BarrierReverseConvertible with
          instrument
          description
          expiryDate
          strike
          barrier
          barrierStartDate
          referenceAssetId
          couponRate
          periodicSchedule
          holidayCalendarIds
          calendarDataProvider
          dayCountConvention
          notional
          currency
          lastEventTimestamp
          prevEvents = []
        observers = Map.fromList observers
  -- CREATE_BARRIER_REVERSE_CONVERTIBLE_INSTRUMENT_END
    pure instrument

-- | Originate an AutoCallable instrument.
originateAutoCallable : Party -> Party -> Text -> HoldingStandard -> Text -> [(Text, Parties)]
  -> Time -> Decimal -> Decimal -> Decimal -> Decimal -> InstrumentKey -> Text
  -> Decimal -> PeriodicSchedule -> PeriodicSchedule -> [Text] -> DayCountConventionEnum -> Decimal
  -> Party -> Party -> Script InstrumentKey
originateAutoCallable depository issuer label holdingStandard description observers
  lastEventTimestamp putStrike couponBarrier callBarrier finalBarrier currency referenceAssetId
  couponRate observationSchedule periodicSchedule holidayCalendarIds dayCountConvention notional
  calendarDataProvider publicParty = do
    -- Create an AutoCallable factory
    factoryCid <- toInterfaceContractId @AutoCallableFactory.I <$> submit issuer do
      createCmd AutoCallable.Factory with
        provider = issuer
        observers = mempty

  -- CREATE_AUTO_CALLABLE_INSTRUMENT_BEGIN
    let
      instrument = InstrumentKey with
        issuer
        depository
        id = Id label
        version = "0"
        holdingStandard

    cid <- submitMulti [issuer] [publicParty] do
      exerciseCmd factoryCid AutoCallableFactory.Create with
        autoCallable = AutoCallable with
          instrument
          description
          putStrike
          couponBarrier
          callBarrier
          finalBarrier
          referenceAssetId
          couponRate
          observationSchedule
          periodicSchedule
          holidayCalendarIds
          calendarDataProvider
          dayCountConvention
          notional
          currency
          lastEventTimestamp
          prevEvents = []
        observers = Map.fromList observers
  -- CREATE_AUTO_CALLABLE_INSTRUMENT_END
    pure instrument
