-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Equity.Test.DivOption where

import DA.Date (Month(..), date)
import DA.Map qualified as M (fromList)
import DA.Set (fromList, singleton)
import Daml.Finance.Data.Reference.HolidayCalendar qualified as HolidayCalendar (T)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Instrument.Equity.Instrument qualified as Equity (T)
import Daml.Finance.Instrument.Equity.Instrument qualified as Instrument (T)
import Daml.Finance.Instrument.Equity.Test.Util
import Daml.Finance.Instrument.Option.Dividend.Instrument qualified as DividendOption (T)
import Daml.Finance.Instrument.Option.Test.Util (electAndVerifyDivOptionPaymentEffects, originateDividendOption)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I)
import Daml.Finance.Interface.Instrument.Equity.Instrument qualified as Equity (DeclareDistribution(..), I)
import Daml.Finance.Interface.Instrument.Option.Dividend.Types (ElectionTypeEnum(..))
import Daml.Finance.Interface.Lifecycle.Rule.Claim qualified as Claim (ClaimEffect(..), I)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (Evolve(..), I)
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..))
import Daml.Finance.Interface.Util.Common (qty)
import Daml.Finance.Lifecycle.Rule.Claim qualified as Claim (Rule(..))
import Daml.Finance.Lifecycle.Rule.Distribution qualified as Distribution (Rule(..))
import Daml.Finance.Settlement.Factory (Factory(..))
import Daml.Finance.Settlement.RouteProvider.SingleCustodian (SingleCustodian(..))
import Daml.Finance.Settlement.Test.Util (allocateAny, approveAny, settleAny)
import Daml.Finance.Test.Util.Account qualified as Account (ControlledBy(..), createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Common (createParties, queryAnyByKey)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyOwnerAndAmountOfHolding)
import Daml.Finance.Test.Util.Instrument (originate)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (buildKeyTable)
import Daml.Script

-- Issue dividend option and do an election: lifecycling and settlement
run : Script ()
run = script do
  -----------------------------
  -- Issue a dividend option --
  -----------------------------

  -- Create parties
  [cb, issuer, custodian, investor, publicParty] <-
    createParties ["CentralBank", "Issuer", "Custodian", "Investor", "PublicParty"]

  -- Create holding and account factory
  let pp = [("PublicParty", singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory issuer pp
  holdingFactoryCid <- toInterfaceContractId <$> submit issuer do
    createCmd Fungible.Factory with provider = issuer; observers = M.fromList pp

  -- Create accounts
  investorAccount <-
    Account.createAccount "Investor Account" [publicParty] accountFactoryCid holdingFactoryCid []
    Account.Owner custodian investor

  let
    expiryDate = date 2019 May 15

  -- Originate instruments
  now <- getTime
  cashInstrument <- originate cb cb "USD" "United States Dollar" pp now
  eurInstrument <- originate cb cb "EUR" "Euro"  pp now
  cumEquityInstrument <- originateEquity issuer issuer "EQUITY-INST-1" "0" "ABC" pp now
  exEquityInstrument <- originateEquity issuer issuer "EQUITY-INST-1" "1" "ABC" [] now

  let
    cashQuantity = qty 0.19 cashInstrument
    sharesQuantity = Some $ qty 0.0041 exEquityInstrument
    fxQuantity = Some $ qty 0.17 eurInstrument

  longDivOptionInstrument <- originateDividendOption custodian issuer "long div option"
    "Option" pp now expiryDate cashQuantity sharesQuantity fxQuantity

  -- Distribute holdings: fractional holdings are also supported.
  investorEquityCid <- Account.credit [publicParty] cumEquityInstrument 1000.0 investorAccount

  -- Create distribution rule for the dividend option
  distributionRuleCid <- toInterfaceContractId @Lifecycle.I <$> submit issuer do
    createCmd Distribution.Rule with
      providers = singleton issuer
      lifecycler = issuer
      observers = singleton publicParty
      id = Id "LifecycleRule"
      description = "Rule to lifecycle an instrument following a distribution event"

  -- Create dividend option event: 1.0 per share (this also works with fractional shares)
  (cumEquityInstrumentCid, _) <- queryAnyByKey @Equity.T @BaseInstrument.I [issuer]
    cumEquityInstrument
  distributionEventCid <-
    submit issuer do
      exerciseCmd (coerceInterfaceContractId @Equity.I cumEquityInstrumentCid)
        Equity.DeclareDistribution with
          id = Id $ "ABC - " <> show now
          description = "Dividend options issue"
          effectiveTime = now
          newInstrument = exEquityInstrument
          perUnitDistribution = [qty 1.0 longDivOptionInstrument]

  -- Build key table
  keyTable <- Instrument.buildKeyTable @Instrument.T @HolidayCalendar.T [issuer] cumEquityInstrument

  -- Lifecycle dividend option distribution
  (_, [effectCid]) <- submit issuer do
    fst <$> exerciseCmd distributionRuleCid Lifecycle.Evolve with
      observableCids = []
      eventCid = distributionEventCid
      instrument = cumEquityInstrument
      keyTable

  -- Claim effect
  routeProviderCid <- toInterfaceContractId <$> submit custodian do
    createCmd SingleCustodian with
      provider = custodian; observers = singleton publicParty; custodian
  settlementFactoryCid <- toInterfaceContractId <$> submit custodian do
    createCmd Factory with provider = custodian; observers = singleton publicParty
  -- Enable netting so that there is only one holding with the new correct quantity
  let settlers = fromList [investor, custodian]
  claimRuleCid <- toInterfaceContractId @Claim.I <$> submit custodian do
    createCmd Claim.Rule with
      providers = singleton custodian
      claimers = fromList [investor, custodian]
      settlers
      routeProviderCid
      settlementFactoryCid
      netInstructions = True

  -- The effect is claimed and then settled by the custodian, but it could also be claimed and then
  -- settled by the investor.
  result <- submitMulti [custodian] [publicParty] do
    exerciseCmd claimRuleCid Claim.ClaimEffect with
      claimer = custodian
      holdingCids = [investorEquityCid]
      effectCid
      batchId = Id "DivOptionSettlement"

  let
    [investorInstrumentInstructionCid, custodianInstrumentInstructionCid,
      custodianDivOptionInstructionCid] = result.instructionCids

  -- Allocate instructions
  (investorInstrumentInstructionCid, _) <-
    allocateAny [investor] investorInstrumentInstructionCid $
      Pledge $ coerceInterfaceContractId investorEquityCid
  (custodianInstrumentInstructionCid, _) <-
    allocateAny [custodian] custodianInstrumentInstructionCid $ CreditReceiver
  (custodianDivOptionInstructionCid, _) <-
    allocateAny [custodian] custodianDivOptionInstructionCid $ CreditReceiver

  -- Approve instructions
  investorInstrumentInstructionCid <- approveAny [custodian] investorInstrumentInstructionCid $
    DebitSender
  custodianInstrumentInstructionCid <- approveAny [investor] custodianInstrumentInstructionCid $
    TakeDelivery investorAccount
  custodianDivOptionInstructionCid <- approveAny [investor] custodianDivOptionInstructionCid $
    TakeDelivery investorAccount

  -- Settle batch
  [investorDivOptionHoldingCid, investorEquityHoldingCid] <-
    settleAny [custodian] [publicParty] result.batchCid

  -- Assert state
  Holding.verifyOwnerAndAmountOfHolding [(investor, 1000.00, investorEquityHoldingCid),
    (investor, 1000.00, investorDivOptionHoldingCid)]

  ------------------------------------------------
  -- Election: Choose which dividend to receive --
  ------------------------------------------------

  -- The investor can now choose what kind of dividend to receive by exercising the dividend option,
  -- either in parts or in whole.
  -- The example below shows how an investor chooses to receive the dividend in shares.
  -- It is also possible to receive part in shares and part in cash. For that, you would simply have
  -- to split the option holding and apply the workflow twice: once for shares and once for cash.

  let
    electAmount = 1000.0 -- Elect to receive shares for 1000 units of Dividend options
    expectedConsumed = []
    expectedProduced = [qty 0.0041 exEquityInstrument]
  (None, divOptionEffect) <- electAndVerifyDivOptionPaymentEffects @DividendOption.T
    @HolidayCalendar.T [publicParty] expiryDate electAmount longDivOptionInstrument issuer custodian
    Shares expectedConsumed expectedProduced

  -- Create a claim rule
  lifecycleClaimRuleCid <- toInterfaceContractId @Claim.I <$> submit custodian do
    createCmd Claim.Rule with
      providers = singleton custodian
      claimers = fromList [custodian]
      settlers
      routeProviderCid
      settlementFactoryCid
      netInstructions = False

  -- Cannot claim effect for a different amount than what was elected
  -- In particular, electing for more than the size of the holding does not work:
  investorDivOptionSmallHoldingCid <- Account.credit [publicParty] longDivOptionInstrument 3.0
    investorAccount
  submitMultiMustFail [custodian] [publicParty] do
    exerciseCmd lifecycleClaimRuleCid Claim.ClaimEffect with
      claimer = custodian
      holdingCids = [investorDivOptionSmallHoldingCid]
      effectCid = divOptionEffect
      batchId = Id "DivOptionExerciseSettlement"

  -- Electing for less than the size of the holding does not work either:
  -- (you would have to split the holding first)
  investorDivOptionBigHoldingCid <- Account.credit [publicParty] longDivOptionInstrument 30000.0
    investorAccount
  submitMultiMustFail [custodian] [publicParty] do
    exerciseCmd lifecycleClaimRuleCid Claim.ClaimEffect with
      claimer = custodian
      holdingCids = [investorDivOptionBigHoldingCid]
      effectCid = divOptionEffect
      batchId = Id "DivOptionExerciseSettlement"

  -- Electing for the same amount as the size of the holding works:
  submitMulti [custodian] [publicParty] do
    exerciseCmd lifecycleClaimRuleCid Claim.ClaimEffect with
      claimer = custodian
      holdingCids = [investorDivOptionHoldingCid]
      effectCid = divOptionEffect
      batchId = Id "DivOptionExerciseSettlement"

  pure ()
