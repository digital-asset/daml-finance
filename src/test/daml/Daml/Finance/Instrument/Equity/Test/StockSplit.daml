-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Equity.Test.StockSplit where

import DA.Date (toDateUTC)
import DA.Map qualified as M (empty, fromList)
import DA.Set (singleton)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Instrument.Equity.Test.Util (originateEquity)
import Daml.Finance.Interface.Instrument.Equity.Instrument qualified as Equity (DeclareStockSplit(..), I)
import Daml.Finance.Interface.Lifecycle.Lifecyclable qualified as Lifecyclable (Lifecycle(..))
import Daml.Finance.Interface.Lifecycle.SettlementRule qualified as SettlementRule (Claim(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Settleable qualified as Settleable (Settle(..))
import Daml.Finance.Lifecycle.Rule.Replacement qualified as Replacement (Rule(..))
import Daml.Finance.Lifecycle.Rule.Settlement qualified as Settlement (Rule(..))
import Daml.Finance.RefData.Time.DateClock (DateClock(..), Unit(..))
import Daml.Finance.Settlement.Batch (BatchFactory(..))
import Daml.Finance.Test.Util.Account qualified as Account (createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (submitExerciseInterfaceByKeyCmd)
import Daml.Script

-- Stock split lifecycling and settlement
run : Script ()
run = script do
  -- Create parties
  [issuer, investor, public] <- createParties ["Issuer", "Investor", "Public"]

  -- Create factories
  let pp = [("Public", singleton $ singleton public)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory issuer pp
  holdingFactoryCid <- toInterfaceContractId <$> submit issuer do createCmd Fungible.Factory with provider = issuer; observers = M.fromList pp
  instructableCid <- toInterfaceContractId <$> submit issuer do createCmd BatchFactory with provider = issuer; observers = singleton public

  -- Create accounts
  issuerOwnAccount <- Account.createAccount [public] accountFactoryCid holdingFactoryCid [] issuer issuer
  investorSecuritiesAccount <- Account.createAccount [public] accountFactoryCid holdingFactoryCid [] issuer investor

  -- Create lifecycle rules
  replacementRuleCid <- submit issuer do createCmd Replacement.Rule with provider = issuer; observers = M.fromList pp
  settlementRuleCid <- submitMulti [issuer, investor] [] do createCmd Settlement.Rule with custodian = issuer; owner = investor; claimers = singleton investor; settler = investor; instructableCid

  -- Create clock
  now <- getTime
  clockCid <- toInterfaceContractId <$> submit issuer do createCmd DateClock with u = Unit $ toDateUTC now; id = "Date clock"; provider = issuer; observers = M.empty

  -- Originate instruments
  preEquityInstrument <- originateEquity issuer issuer "AAPL" "0" pp now
  postEquityInstrument <- originateEquity issuer issuer "AAPL" "1" [] now

  -- Distribute holdings
  investorEquityCid <- Account.credit [public] preEquityInstrument 1_000.0 investorSecuritiesAccount
  issuerEquityCid <- Account.credit [public] postEquityInstrument 2_000.0 issuerOwnAccount

  -- Create stock split event
  replacementEventCid <- Instrument.submitExerciseInterfaceByKeyCmd @Equity.I [issuer] [public] preEquityInstrument Equity.DeclareStockSplit
    with
      id = "STOCKSPLIT"
      effectiveDate = toDateUTC now
      newInstrument = postEquityInstrument
      adjustmentFactor = 0.5

  -- Lifecycle stock split
  (_, [effectCid]) <- submit issuer do exerciseCmd replacementRuleCid Lifecyclable.Lifecycle with ruleName = "Dividend"; settler = investor; observableCids = []; eventCid = replacementEventCid; clockCid

  -- Claim effect
  result <- submitMulti [investor] [public] do exerciseCmd settlementRuleCid SettlementRule.Claim with claimer = investor; holdingCids = [investorEquityCid]; effectCid

  -- Allocate instructions
  let [instructionCid] = result.instructionCids
  instructionCid <- submit issuer do exerciseCmd instructionCid Instruction.Allocate with transferableCid = issuerEquityCid

  -- Approve instructions
  instructionCid <- submit investor do exerciseCmd instructionCid Instruction.Approve with receiverAccount = investorSecuritiesAccount

  -- Settle batch
  [investorEquityCid] <- submitMulti [investor] [public] do exerciseCmd result.containerCid Settleable.Settle

  -- Assert state
  Holding.verifyOwnerOfHolding [(investor, investorEquityCid)]

  pure ()
