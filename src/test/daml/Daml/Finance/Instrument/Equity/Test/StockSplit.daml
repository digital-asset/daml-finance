-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Equity.Test.StockSplit where

import DA.Date (toDateUTC)
import DA.Map qualified as M (fromList)
import DA.Set (fromList, singleton)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Instrument.Equity.Test.Util (originateEquity)
import Daml.Finance.Interface.Instrument.Equity.Instrument qualified as Equity (DeclareStockSplit(..), I)
import Daml.Finance.Interface.Lifecycle.Rule.Claim qualified as Claim (ClaimEffect(..), I)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (Evolve(..), I)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..))
import Daml.Finance.Interface.Types.Common (Id(..))
import Daml.Finance.Lifecycle.Rule.Claim qualified as Claim (Rule(..))
import Daml.Finance.Lifecycle.Rule.Replacement qualified as Replacement (Rule(..))
import Daml.Finance.Settlement.Factory (Factory(..))
import Daml.Finance.Test.Util.Account qualified as Account (ControlledBy(..), createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (submitExerciseInterfaceByKeyCmd)
import Daml.Finance.Test.Util.Lifecycle (createClockAndEvent)
import Daml.Script

-- Stock split lifecycling and settlement
run : Script ()
run = script do
  -- Create parties
  [issuer, investor, public] <- createParties ["Issuer", "Investor", "Public"]

  -- Create factories
  let pp = [("Public", singleton public)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory issuer pp
  holdingFactoryCid <- toInterfaceContractId <$> submit issuer do
    createCmd Fungible.Factory with provider = issuer; observers = M.fromList pp

  -- Create accounts
  investorSecuritiesAccount <- Account.createAccount "Securities Account" [] accountFactoryCid
    holdingFactoryCid [] Account.Owner issuer investor

  -- Create lifecycle rule
  replacementRuleCid <- toInterfaceContractId @Lifecycle.I <$> submit issuer do
    createCmd Replacement.Rule with
      providers = singleton issuer; lifecycler = issuer; observers = singleton public
  -- Create clock
  now <- getTime
  (clockCid, clockEventCid) <-
    createClockAndEvent (singleton issuer) (toDateUTC now) (singleton public)

  -- Originate instruments
  preEquityInstrument <- originateEquity issuer issuer "INST-1" "0" "AAPL" pp now
  postEquityInstrument <- originateEquity issuer issuer "INST-1" "1" "AAPL" [] now

  -- Distribute holdings
  investorEquityCid <- Account.credit [public] preEquityInstrument 1_000.0 investorSecuritiesAccount

  -- Create stock split event
  replacementEventCid <-
    Instrument.submitExerciseInterfaceByKeyCmd @Equity.I [issuer] [] preEquityInstrument
      Equity.DeclareStockSplit with
        id = Id $ "APPL - " <> show now
        description = "Stocksplit"
        effectiveDate = toDateUTC now
        newInstrument = postEquityInstrument
        adjustmentFactor = 0.5

  -- Lifecycle stock split
  (_, [effectCid]) <- submit issuer do
    exerciseCmd replacementRuleCid Lifecycle.Evolve with
      observableCids = []
      eventCid = replacementEventCid
      timeObservableCid = clockCid
      instrument = preEquityInstrument

  -- Claim effect
  settlementFactoryCid <- toInterfaceContractId <$> submit issuer do
    createCmd Factory with provider = issuer; observers = singleton public; custodian = issuer
  lifecycleClaimRuleCid <- toInterfaceContractId @Claim.I <$> submit issuer do
    createCmd Claim.Rule with
      providers = singleton issuer
      claimers = fromList [investor, issuer]
      settlers = fromList [investor, issuer]
      settlementFactoryCid
      netInstructions = False

  result <- submit issuer do
    exerciseCmd lifecycleClaimRuleCid Claim.ClaimEffect
      with
        claimer = issuer
        holdingCids = [investorEquityCid]
        effectCid
        batchId = Id "StockSplitSettlement"

  -- Allocate instructions
  let [consumeInstructionCid, produceInstructionCid] = result.instructionCids
  (consumeInstructionCid, _) <- submit investor do
    exerciseCmd consumeInstructionCid Instruction.Allocate with
      actors = singleton investor; allocation = Pledge $ coerceContractId investorEquityCid
  (produceInstructionCid, _) <- submit issuer do
    exerciseCmd produceInstructionCid Instruction.Allocate with
      actors = singleton issuer; allocation = CreditReceiver

  -- Approve instructions
  consumeInstructionCid <- submit issuer do
    exerciseCmd consumeInstructionCid Instruction.Approve with
      actors = singleton issuer; approval = DebitSender
  produceInstructionCid <- submit investor do
    exerciseCmd produceInstructionCid Instruction.Approve with
      actors = singleton investor; approval = TakeDelivery investorSecuritiesAccount

  -- Settle batch
  [investorEquityCid] <- submitMulti [investor] [public] do
    exerciseCmd result.batchCid Batch.Settle with actors = singleton investor

  -- Assert state
  Holding.verifyOwnerOfHolding [(investor, investorEquityCid)]

  pure ()
