-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Equity.Test.StockSplit where

import DA.Date (toDateUTC)
import DA.Map qualified as M (empty, fromList)
import DA.Set (singleton)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Instrument.Equity.Test.Util (originateEquity)
import Daml.Finance.Interface.Instrument.Equity.Instrument qualified as Equity (DeclareStockSplit(..), I)
import Daml.Finance.Interface.Lifecycle.Rule.Claim qualified as Claim (ClaimEffect(..))
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (Evolve(..))
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..))
import Daml.Finance.Interface.Types.Common (Id(..))
import Daml.Finance.Lifecycle.Rule.Claim qualified as Claim (Rule(..))
import Daml.Finance.Lifecycle.Rule.Replacement qualified as Replacement (Rule(..))
import Daml.Finance.RefData.Time.DateClock (DateClock(..), Unit(..))
import Daml.Finance.Settlement.Factory (Factory(..))
import Daml.Finance.Test.Util.Account qualified as Account (createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (submitExerciseInterfaceByKeyCmd)
import Daml.Script

-- Stock split lifecycling and settlement
run : Script ()
run = script do
  -- Create parties
  [issuer, investor, public] <- createParties ["Issuer", "Investor", "Public"]

  -- Create factories
  let pp = [("Public", singleton $ singleton public)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory issuer pp
  holdingFactoryCid <- toInterfaceContractId <$> submit issuer do createCmd Fungible.Factory with provider = issuer; observers = M.fromList pp
  settlementFactoryCid <- toInterfaceContractId <$> submit issuer do createCmd Factory with provider = issuer; observers = singleton public

  -- Create accounts
  issuerOwnAccount <- Account.createAccount "Internal Account" [public] accountFactoryCid holdingFactoryCid [] issuer issuer
  investorSecuritiesAccount <- Account.createAccount "Securities Account" [public] accountFactoryCid holdingFactoryCid [] issuer investor

  -- Create lifecycle rules
  replacementRuleCid <- submit issuer do createCmd Replacement.Rule with provider = issuer; observers = M.fromList pp
  lifecycleClaimRuleCid <- submitMulti [issuer, investor] [] do createCmd Claim.Rule with custodian = issuer; owner = investor; claimers = singleton investor; settler = investor; factoryCid = settlementFactoryCid

  -- Create clock
  now <- getTime
  clockCid <- toInterfaceContractId <$> submit issuer do createCmd DateClock with u = Unit $ toDateUTC now; id = Id (show now); provider = issuer; observers = M.empty

  -- Originate instruments
  preEquityInstrument <- originateEquity issuer issuer "INST-1" "0" "AAPL" pp now
  postEquityInstrument <- originateEquity issuer issuer "INST-1" "1" "AAPL" [] now

  -- Distribute holdings
  investorEquityCid <- Account.credit [public] preEquityInstrument 1_000.0 investorSecuritiesAccount
  issuerEquityCid <- Account.credit [public] postEquityInstrument 2_000.0 issuerOwnAccount

  -- Create stock split event
  replacementEventCid <- Instrument.submitExerciseInterfaceByKeyCmd @Equity.I [issuer] [public] preEquityInstrument Equity.DeclareStockSplit
    with
      id = Id $ "APPL - " <> show now
      description = "Stocksplit"
      effectiveDate = toDateUTC now
      newInstrument = postEquityInstrument
      adjustmentFactor = 0.5

  -- Lifecycle stock split
  (_, [effectCid]) <- submit issuer do exerciseCmd replacementRuleCid Lifecycle.Evolve with ruleName = "Dividend"; settler = investor; observableCids = []; eventCid = replacementEventCid; clockCid

  -- Claim effect
  result <- submitMulti [investor] [public] do exerciseCmd lifecycleClaimRuleCid Claim.ClaimEffect with claimer = investor; holdingCids = [investorEquityCid]; effectCid

  -- Allocate instructions
  let [instructionCid] = result.instructionCids
  instructionCid <- submit issuer do exerciseCmd instructionCid Instruction.Allocate with allocation = PLEDGE issuerEquityCid

  -- Approve instructions
  instructionCid <- submit investor do exerciseCmd instructionCid Instruction.Approve with approval = TAKE_DELIVERY investorSecuritiesAccount

  -- Settle batch
  [investorEquityCid] <- submitMulti [investor] [public] do exerciseCmd result.batchCid Batch.Settle

  -- Assert state
  Holding.verifyOwnerOfHolding [(investor, investorEquityCid)]

  pure ()
