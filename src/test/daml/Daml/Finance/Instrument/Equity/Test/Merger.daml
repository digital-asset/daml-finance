-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Equity.Test.Merger where

import DA.Date (toDateUTC)
import DA.Map qualified as M (fromList)
import DA.Set (singleton)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Instrument.Equity.Test.Util (originateEquity)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty)
import Daml.Finance.Interface.Instrument.Equity.Instrument qualified as Equity (I, DeclareReplacement(..))
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (Evolve(..))
import Daml.Finance.Interface.Lifecycle.Rule.Settlement qualified as Settlement (Claim(..))
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Types.Common (Id(..))
import Daml.Finance.Lifecycle.Rule.Replacement qualified as Replacement (Rule(..))
import Daml.Finance.Lifecycle.Rule.Settlement qualified as Settlement (Rule(..))
import Daml.Finance.RefData.Time.DateClock as Clock (DateClock(..), Unit(..))
import Daml.Finance.Settlement.Factory (Factory(..))
import Daml.Finance.Test.Util.Account qualified as Account (createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (submitExerciseInterfaceByKeyCmd)
import Daml.Script

-- Merger lifecycling and settlement
run : Script ()
run = script do
  -- Create parties
  [merging, merged, custodian, investor, public] <-
    createParties ["MergingIssuer", "MergedIssuer", "Custodian", "Investor", "Public"]

  -- Account and holding factory
  let pp = [("Public", singleton $ singleton public)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory custodian pp
  holdingFactoryCid <- toInterfaceContractId <$> submit custodian do createCmd Fungible.Factory with provider = custodian; observers = M.fromList pp
  settlementFactoryCid <- toInterfaceContractId <$> submitMulti [custodian] [] do createCmd Factory with provider = custodian; observers = singleton public

  -- Create accounts
  bankOwnAccount <- Account.createAccount "Internal Account" [public] accountFactoryCid holdingFactoryCid [] custodian custodian
  investorSecuritiesAccount <- Account.createAccount "Securities Account" [public] accountFactoryCid holdingFactoryCid [] custodian investor

  -- Create lifecycle rules
  replacementRuleCid <- submit merging do createCmd Replacement.Rule with provider = merging; observers = M.fromList pp
  lifecycleSettlementRuleCid <- submitMulti [custodian, investor] [] do createCmd Settlement.Rule with custodian; owner = investor; claimers = singleton investor; settler = investor; factoryCid = settlementFactoryCid

  -- Create clock
  now <- getTime
  clockCid <- toInterfaceContractId <$> submit custodian do createCmd DateClock with u = Unit $ toDateUTC now; id = Id (show now); provider = custodian; observers = M.fromList pp

  -- Originate instruments
  mergingInstrument <- originateEquity merging merging "INST-1" "0" "ABC" pp now
  mergedInstrument <- originateEquity merged merged "INST-2" "0" "XYZ" pp now

  -- Distribute holdings
  bankEquityCid <- Account.credit [public] mergedInstrument 1_000.0 bankOwnAccount
  investorEquityCid <- Account.credit [public] mergingInstrument 2_000.0 investorSecuritiesAccount

  -- Create replacement event
  replacementEventCid <- Instrument.submitExerciseInterfaceByKeyCmd @Equity.I [merging] [public] mergingInstrument Equity.DeclareReplacement
    with
      id = Id $ "ABC merge - " <> show now
      description = "Merge"
      effectiveDate = toDateUTC now
      perUnitReplacement = [Instrument.qty 0.5 mergedInstrument]

  -- Lifecycle replacement event
  (_, [effectCid]) <- submitMulti [merging] [public] do exerciseCmd replacementRuleCid Lifecycle.Evolve with ruleName = "Merger"; settler = investor; eventCid = replacementEventCid; observableCids = []; clockCid

  -- Claim effect
  result <- submitMulti [investor] [public] do exerciseCmd lifecycleSettlementRuleCid Settlement.Claim with claimer = investor; holdingCids = [investorEquityCid]; effectCid

  -- Allocate instructions
  let [instructionCid] = result.instructionCids
  instructionCid <- submit custodian do exerciseCmd instructionCid Instruction.Allocate with transferableCid = bankEquityCid

  -- Approve instructions
  instructionCid <- submit investor do exerciseCmd instructionCid Instruction.Approve with receiverAccount = investorSecuritiesAccount

  -- Settle batch
  [investorEquityCid] <- submitMulti [investor] [public] do exerciseCmd result.batchCid Batch.Settle

  -- Assert state
  Holding.verifyOwnerOfHolding [(investor, investorEquityCid)]

  pure ()
