-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Token.Test.Util where

import DA.Map (empty, fromList)
import Daml.Finance.Instrument.Token.Factory (Factory(..))
import Daml.Finance.Interface.Instrument.Token.Factory qualified as Token (Create(..), F)
import Daml.Finance.Interface.Instrument.Token.Types (Token(..))
import Daml.Finance.Interface.Types.Common.Types (HoldingStandard, Id(..), InstrumentKey(..), Parties)
import Daml.Script

-- | Originate token instrument.
originateToken : Party -> Party -> Text -> HoldingStandard -> Text -> Time -> [(Text, Parties)] ->
  Script InstrumentKey
originateToken depository issuer label holdingStandard description validAsOf observers = do

    -- Create a token instrument factory
    factoryCid <- toInterfaceContractId @Token.F <$> submit issuer do
      createCmd Factory with provider = issuer; observers = empty

    -- Create instrument
    let
      token = Token with
        instrument =
          InstrumentKey with issuer; depository; id = Id label; version = "0"; holdingStandard
        description
        validAsOf
    submitMulti [issuer, depository] [] do
      exerciseCmd factoryCid Token.Create with token; observers = fromList observers

    pure token.instrument
