-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Bond.Test.FloatingRate where

import DA.Date (DayOfWeek(..), Month(..), addDays, date, subtractDays)
import DA.Map qualified as M (empty, fromList)
import DA.Set qualified as S (singleton)
import Daml.Finance.Data.Numeric.Observation (Observation(..))
import Daml.Finance.Data.Reference.HolidayCalendar (HolidayCalendar(..))
import Daml.Finance.Data.Time.DateClock (dateToDateClockTime)
import Daml.Finance.Instrument.Bond.Test.Util (originateFloatingRateBond)
import Daml.Finance.Interface.Instrument.Bond.Types (DateRelativeToEnum(..), DayTypeEnum(..), FixingDates(..), FloatingRate(..), ReferenceRateTypeEnum(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..))
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayConventionEnum(..), HolidayCalendarData(..))
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum(..))
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum(..))
import Daml.Finance.Interface.Util.Common (qty)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Instrument (originate)
import Daml.Finance.Test.Util.Lifecycle (lifecycleAndVerifyPaymentEffects, verifyNoLifecycleEffects)
import Daml.Script

-- Penultimate coupon payment on a bond showing creation of new instrument version
run : Script ()
run = script do
  [depository, custodian, issuer, calendarDataProvider, settler, publicParty] <-
    createParties ["CSD", "Custodian", "Issuer", "Calendar Data Provider", "Settler", "PublicParty"]
  let settlers = S.singleton settler

  -- Distribute commercial-bank cash
  now <- getTime
  let pp = [("PublicParty", S.singleton publicParty)]
  cashInstrument <- originate depository issuer "EUR" "Euro" pp now

  -- Create and distribute bond
  -- Floating rate bond: Euribor 3M + 1.1% p.a. coupon every 3M
  -- CREATE_FLOATING_RATE_BOND_VARIABLES_BEGIN
  let
    issueDate = date 2019 Jan 16
    firstCouponDate = date 2019 Feb 15
    maturityDate = date 2019 May 15
    referenceRateId = "EUR/EURIBOR/3M"
    floatingRate = FloatingRate with
      referenceRateId
      referenceRateType = SingleFixing CalculationPeriodStartDate
      fixingDates = FixingDates with
        periodMultiplier = 0
        period = D
        dayType = Some Business
        businessDayConvention = NoAdjustment
        businessCenters = ["EUR"]
    notional = 1.0
    couponSpread = 0.011
    couponPeriod = M
    couponPeriodMultiplier = 3
    dayCountConvention = Act365Fixed
    businessDayConvention = Following
  -- CREATE_FLOATING_RATE_BOND_VARIABLES_END
    observations = M.fromList
      [ (dateToDateClockTime $ date 2019 Jan 16, -0.00311)
      , (dateToDateClockTime $ date 2019 Feb 15, -0.00266)
      ]
    calendar = HolidayCalendarData with
      id = "EUR"
      weekend = [Saturday, Sunday]
      holidays = [date 2019 Dec 19]
    holidayCalendarIds = [calendar.id]

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submit calendarDataProvider do
    createCmd HolidayCalendar with
      provider = calendarDataProvider
      calendar
      observers = M.fromList pp

  observableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id referenceRateId; observations; observers = M.empty

  bondInstrument <- originateFloatingRateBond issuer issuer "BONDTEST1" "Floating Rate Bond" pp
    now issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate
    dayCountConvention businessDayConvention couponSpread couponPeriod couponPeriodMultiplier
    cashInstrument notional floatingRate publicParty

  -- One day before the first coupon date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstCouponDate 1) bondInstrument issuer
    [observableCid]

  -- First coupon date: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumedQuantities = []
    expectedProducedQuantities = [qty 0.0006484932 cashInstrument]
  Some bondInstrumentAfterFirstCoupon <- lifecycleAndVerifyPaymentEffects [publicParty]
    firstCouponDate bondInstrument issuer [observableCid] expectedConsumedQuantities
    expectedProducedQuantities

  -- One day after the first coupon date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstCouponDate 1) bondInstrumentAfterFirstCoupon
    issuer [observableCid]

  -- One day before expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays maturityDate 1)
    bondInstrumentAfterFirstCoupon issuer [observableCid]

  -- Lifecycle on the expiry date. Verify the lifecycle effects for one coupon and the redemption
  -- amount
  let
    expectedConsumedQuantities = []
    expectedProducedQuantities = [qty 0.002033589 cashInstrument, qty 1.0 cashInstrument]
  Some _ <- lifecycleAndVerifyPaymentEffects [publicParty] maturityDate
    bondInstrumentAfterFirstCoupon issuer [observableCid] expectedConsumedQuantities
    expectedProducedQuantities

  pure ()

-- Create and lifecycle a floating coupon bond.
-- 2Y, compounded SOFR (calculated via SOFR Index) + 0.5% p.a.
runSofr : Script ()
runSofr = script do
  [custodian, issuer, investor, calendarDataProvider, publicParty] <-
    createParties ["Custodian", "Issuer", "Investor", "Calendar Data Provider", "PublicParty"]

  -- Account and holding factory
  let pp = [("FactoryProvider", S.singleton publicParty)]

  -- Originate commercial-bank cash
  now <- getTime
  cashInstrument <- originate custodian issuer "USD" "US Dollar" pp now

  -- Create and distribute bond
  -- SOFR + 0.5% coupon every 6M (with a 0% floor and a 6% cap)
  let
    rollDay = 15
    issueDate = date 2022 Jan rollDay
    firstCouponDate = date 2022 Jul rollDay
    maturityDate = date 2024 Jan rollDay
    notional = 1000.0
    couponSpread = 0.005
    couponPeriod = M
    couponPeriodMultiplier = 6
    dayCountConvention = Act360
    useAdjustedDatesForDcf = True
    businessDayConvention = Following
    -- CREATE_6M_SOFR_FLOATING_BOND_VARIABLES_BEGIN
    referenceRateId = "SOFR/INDEX"
    floatingRate = FloatingRate with
      referenceRateId
      referenceRateType = CompoundedIndex Act360
    -- CREATE_6M_SOFR_FLOATING_BOND_VARIABLES_END
      fixingDates = FixingDates with
        periodMultiplier = -2
        period = D
        dayType = Some Business
        businessDayConvention = NoAdjustment
        businessCenters = ["USD"]
    observations = M.fromList
      [ (dateToDateClockTime $ date 2022 Jan 13, 1.04240111)
      , (dateToDateClockTime $ date 2022 Jul 13, 1.04509941)
      , (dateToDateClockTime $ date 2023 Jan 12, 1.06145226)
      , (dateToDateClockTime $ date 2023 Jul 13, 1.08019012)
      ]
    holidayCalendarIds = ["USD"]
    calendar =
      HolidayCalendarData with
        id = "USD"
        weekend = [Saturday, Sunday]
        holidays = []

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submit calendarDataProvider do
    createCmd HolidayCalendar with
      provider = calendarDataProvider
      calendar
      observers = M.fromList pp

  observableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id $ referenceRateId; observations; observers = M.empty

  bondInstrument <- originateFloatingRateBond issuer issuer "BONDTEST1" "Floating Rate Bond" pp
    now issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate
    dayCountConvention businessDayConvention couponSpread couponPeriod couponPeriodMultiplier
    cashInstrument notional floatingRate publicParty

  -- Coupon date 1: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 7.5885429 cashInstrument]
  Some bondInstrumentAfterFirstCoupon <- lifecycleAndVerifyPaymentEffects [publicParty]
    firstCouponDate bondInstrument issuer [observableCid] expectedConsumed
    expectedProduced

  -- Coupon date 2: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 20.6471718 cashInstrument]
  Some _ <- lifecycleAndVerifyPaymentEffects [publicParty] (date 2023 Jan 16)
    bondInstrumentAfterFirstCoupon issuer [observableCid] expectedConsumed
    expectedProduced

  pure ()
