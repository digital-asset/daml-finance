-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Bond.Test.Callable where

import DA.Date (DayOfWeek(..), Month(..), date, subtractDays)
import DA.Map qualified as M (empty, fromList)
import DA.Set qualified as S (singleton)
import Daml.Finance.Data.Numeric.Observation (Observation(..))
import Daml.Finance.Data.Reference.HolidayCalendar (HolidayCalendar(..))
import Daml.Finance.Instrument.Bond.Test.Util (electAndVerifyPaymentEffects, originateCallableBond)
import Daml.Finance.Interface.Instrument.Bond.Callable.BondTypes (DateRelativeToEnum(..), DayTypeEnum(..), FixingDates(..), FloatingRate(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..))
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayConventionEnum(..), HolidayCalendarData(..))
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum(..))
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum(..))
import Daml.Finance.Interface.Util.Common (qty)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Instrument (originate, verifyNoLifecycleEffects)
import Daml.Finance.Test.Util.Time (dateToDateClockTime)
import Daml.Script

-- Create and lifecycle a fixed coupon callable bond.
run : Script ()
run = script do
  [custodian, issuer, investor, calendarDataProvider, publicParty] <-
    createParties ["Custodian", "Issuer", "Investor", "Calendar Data Provider", "PublicParty"]

  -- Account and holding factory
  let pp = [("FactoryProvider", S.singleton publicParty)]

  -- Originate commercial-bank cash
  now <- getTime
  cashInstrumentCid <- originate custodian issuer "EUR" "Euro" pp now

  -- Create and distribute bond
  -- 1.1% coupon every 12M
  -- CREATE_FIXED_CALLABLE_BOND_VARIABLES_BEGIN
  let
    issueDate = date 2019 Jan 16
    firstCouponDate = date 2019 May 15
    secondCouponDate = date 2020 May 15
    maturityDate = date 2021 May 15
    maturityDateAdj = date 2021 May 17
    notional = 1.0
    floatingRate = None
    couponRate = 0.011
    capRate = None
    floorRate = None
    couponPeriod = M
    couponPeriodMultiplier = 12
    dayCountConvention = Act365Fixed
    businessDayConvention = Following
    -- CREATE_FIXED_CALLABLE_BOND_VARIABLES_END
    holidayCalendarIds = ["EUR"]
    cal =
      HolidayCalendarData with
        id = "EUR"
        weekend = [Saturday, Sunday]
        holidays = [date 2019 Dec 19]

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submit calendarDataProvider do
    createCmd HolidayCalendar with
      provider = calendarDataProvider
      calendar = cal
      observers = M.fromList pp

  bondInstrument <- originateCallableBond issuer issuer "BONDTEST1" "Callable Bond" pp now
    issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate
    dayCountConvention businessDayConvention floatingRate couponRate capRate floorRate couponPeriod
    couponPeriodMultiplier cashInstrumentCid notional

  -- One day before the first coupon date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstCouponDate 1) bondInstrument issuer []

  let
    amount = 1.0
    electorIsOwner = False

  -- First coupon date: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0035863014 cashInstrumentCid]
  (Some bondInstrumentAfterFirstCoupon, effectCid) <- electAndVerifyPaymentEffects firstCouponDate
    amount bondInstrument electorIsOwner issuer investor [publicParty] "NOT CALLED" []
    expectedConsumed expectedProduced

  -- Second coupon date: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 0.011030137 cashInstrumentCid]
  (Some bondInstrumentAfterSecondCoupon, effectCid) <- electAndVerifyPaymentEffects
    secondCouponDate amount bondInstrumentAfterFirstCoupon electorIsOwner issuer investor
    [publicParty] "NOT CALLED" [] expectedConsumed expectedProduced

  -- lifecycle on the maturity date
  let
    expectedConsumed = []
    expectedProduced = [qty 0.011060274 cashInstrumentCid, qty 1.0 cashInstrumentCid]
  bondInstrumentAfterThirdCoupon <- electAndVerifyPaymentEffects maturityDateAdj amount
    bondInstrumentAfterSecondCoupon electorIsOwner issuer investor [publicParty] "NOT CALLED" []
    expectedConsumed expectedProduced

  pure ()

-- Create and lifecycle a floating coupon callable bond.
-- Issuer calls the bond before maturity.
runFloatingCall : Script ()
runFloatingCall = script do
  [custodian, issuer, investor, calendarDataProvider, publicParty] <-
    createParties ["Custodian", "Issuer", "Investor", "Calendar Data Provider", "PublicParty"]

  -- Account and holding factory
  let pp = [("FactoryProvider", S.singleton publicParty)]

  -- Originate commercial-bank cash
  now <- getTime
  cashInstrumentCid <- originate custodian issuer "EUR" "Euro" pp now

  -- Create and distribute bond
  -- Libor + 0.1% coupon every 12M
  -- CREATE_12M_FLOATING_CALLABLE_BOND_VARIABLES_BEGIN
  let
    issueDate = date 2019 Jan 16
    firstCouponDate = date 2019 May 15
    secondCouponDate = date 2020 May 15
    maturityDate = date 2021 May 15
    maturityDateAdj = date 2021 May 17
    notional = 1.0
    couponRate = 0.001
    capRate = None
    floorRate = None
    couponPeriod = M
    couponPeriodMultiplier = 12
    dayCountConvention = Act365Fixed
    businessDayConvention = Following
    referenceRateId = "EUR/EURIBOR/12M"
    floatingRate = Some FloatingRate with
      referenceRateId
      resetRelativeTo = CalculationPeriodStartDate
      fixingDates = FixingDates with
        periodMultiplier = 0
        period = D
        dayType = Some Business
        businessDayConvention = NoAdjustment
        businessCenters = ["EUR"]
    -- CREATE_12M_FLOATING_CALLABLE_BOND_VARIABLES_END
    observations = M.fromList
      [ (dateToDateClockTime $ date 2019 Jan 16, 0.010)
      , (dateToDateClockTime $ date 2019 May 15, 0.010)
      ]
    holidayCalendarIds = ["EUR"]
    cal =
      HolidayCalendarData with
        id = "EUR"
        weekend = [Saturday, Sunday]
        holidays = [date 2019 Dec 19]

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submit calendarDataProvider do
    createCmd HolidayCalendar with
      provider = calendarDataProvider
      calendar = cal
      observers = M.fromList pp

  observableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id $ referenceRateId; observations; observers = M.empty

  bondInstrument <- originateCallableBond issuer issuer "BONDTEST1" "Callable Bond" pp now
    issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate
    dayCountConvention businessDayConvention floatingRate couponRate capRate floorRate couponPeriod
    couponPeriodMultiplier cashInstrumentCid notional

  -- One day before the first coupon date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstCouponDate 1) bondInstrument issuer
    [observableCid]

  let
    amount = 1.0
    electorIsOwner = False

  -- First coupon date: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0035863014 cashInstrumentCid]
  (Some bondInstrumentAfterFirstCoupon, effectCid) <- electAndVerifyPaymentEffects firstCouponDate
    amount bondInstrument electorIsOwner issuer investor [publicParty] "NOT CALLED" [observableCid]
    expectedConsumed expectedProduced

  -- Second coupon date: Lifecycle and verify that there is an effect for one coupon.
  -- Issuer calls the bond
  let
    expectedConsumed = []
    expectedProduced = [qty 0.011030137 cashInstrumentCid, qty 1.0 cashInstrumentCid]
  (bondInstrumentAfterSecondCoupon, effectCid) <- electAndVerifyPaymentEffects
    secondCouponDate amount bondInstrumentAfterFirstCoupon electorIsOwner issuer investor
    [publicParty] "CALLED" [observableCid] expectedConsumed expectedProduced

  pure ()

-- Create and lifecycle a floating coupon callable bond.
-- 2Y, 3M Libor + 0.1% p.a.
-- Issuer does not call the bond before maturity.
runFloating : Script ()
runFloating = script do
  [custodian, issuer, investor, calendarDataProvider, publicParty] <-
    createParties ["Custodian", "Issuer", "Investor", "Calendar Data Provider", "PublicParty"]

  -- Account and holding factory
  let pp = [("FactoryProvider", S.singleton publicParty)]

  -- Originate commercial-bank cash
  now <- getTime
  cashInstrumentCid <- originate custodian issuer "USD" "US Dollar" pp now

  -- Create and distribute bond
  -- Libor + 0.1% coupon every 3M
  -- CREATE_3M_FLOATING_CALLABLE_BOND_VARIABLES_BEGIN
  let
    issueDate = date 2022 Jan 15
    firstCouponDate = date 2022 Apr 15
    maturityDate = date 2024 Jan 15
    notional = 1.0
    couponRate = 0.001
    capRate = None
    floorRate = None
    couponPeriod = M
    couponPeriodMultiplier = 3
    dayCountConvention = Act360
    businessDayConvention = Following
    referenceRateId = "USD/LIBOR/3M"
    floatingRate = Some FloatingRate with
      referenceRateId
      resetRelativeTo = CalculationPeriodStartDate
      fixingDates = FixingDates with
        periodMultiplier = 0
        period = D
        dayType = Some Business
        businessDayConvention = NoAdjustment
        businessCenters = ["USD"]
    -- CREATE_3M_FLOATING_CALLABLE_BOND_VARIABLES_END
    observations = M.fromList
      [ (dateToDateClockTime $ date 2022 Jan 17, 0.010)
      , (dateToDateClockTime $ date 2022 Apr 15, 0.010)
      , (dateToDateClockTime $ date 2022 Jul 15, 0.010)
      , (dateToDateClockTime $ date 2022 Oct 17, 0.010)
      , (dateToDateClockTime $ date 2023 Jan 16, 0.010)
      , (dateToDateClockTime $ date 2023 Apr 17, 0.010)
      , (dateToDateClockTime $ date 2023 Jul 17, 0.010)
      , (dateToDateClockTime $ date 2023 Oct 16, 0.010)
      ]
    holidayCalendarIds = ["USD"]
    cal =
      HolidayCalendarData with
        id = "USD"
        weekend = [Saturday, Sunday]
        holidays = []

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submit calendarDataProvider do
    createCmd HolidayCalendar with
      provider = calendarDataProvider
      calendar = cal
      observers = M.fromList pp

  observableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id $ referenceRateId; observations; observers = M.empty

  bondInstrument <- originateCallableBond issuer issuer "BONDTEST1" "Callable Bond" pp now
    issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate
    dayCountConvention businessDayConvention floatingRate couponRate capRate floorRate couponPeriod
    couponPeriodMultiplier cashInstrumentCid notional

  -- One day before the first coupon date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstCouponDate 1) bondInstrument issuer
    [observableCid]

  let
    amount = 1.0
    electorIsOwner = False

  -- Coupon date 1: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0026888889 cashInstrumentCid]
  (Some bondInstrumentAfterCoupon1, effectCid) <- electAndVerifyPaymentEffects (date 2022 Apr 15)
    amount bondInstrument electorIsOwner issuer investor [publicParty] "NOT CALLED" [observableCid]
    expectedConsumed expectedProduced

  -- Coupon date 2: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0027805556 cashInstrumentCid]
  (Some bondInstrumentAfterCoupon2, effectCid) <- electAndVerifyPaymentEffects (date 2022 Jul 15)
    amount bondInstrumentAfterCoupon1 electorIsOwner issuer investor [publicParty] "NOT CALLED"
    [observableCid] expectedConsumed expectedProduced

  -- Coupon date 3: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0028722222 cashInstrumentCid]
  (Some bondInstrumentAfterCoupon3, effectCid) <- electAndVerifyPaymentEffects (date 2022 Oct 17)
    amount bondInstrumentAfterCoupon2 electorIsOwner issuer investor [publicParty] "NOT CALLED"
    [observableCid] expectedConsumed expectedProduced

  -- Coupon date 4: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0027805556 cashInstrumentCid]
  (Some bondInstrumentAfterCoupon4, effectCid) <- electAndVerifyPaymentEffects (date 2023 Jan 16)
    amount bondInstrumentAfterCoupon3 electorIsOwner issuer investor [publicParty] "NOT CALLED"
    [observableCid] expectedConsumed expectedProduced

  -- Coupon date 5: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0027805556 cashInstrumentCid]
  (Some bondInstrumentAfterCoupon5, effectCid) <- electAndVerifyPaymentEffects (date 2023 Apr 17)
    amount bondInstrumentAfterCoupon4 electorIsOwner issuer investor [publicParty] "NOT CALLED"
    [observableCid] expectedConsumed expectedProduced

  -- Coupon date 6: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0027805556 cashInstrumentCid]
  (Some bondInstrumentAfterCoupon6, effectCid) <- electAndVerifyPaymentEffects (date 2023 Jul 17)
    amount bondInstrumentAfterCoupon5 electorIsOwner issuer investor [publicParty] "NOT CALLED"
    [observableCid] expectedConsumed expectedProduced

  -- Coupon date 7: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0027805556 cashInstrumentCid]
  (Some bondInstrumentAfterCoupon7, effectCid) <- electAndVerifyPaymentEffects (date 2023 Oct 16)
    amount bondInstrumentAfterCoupon6 electorIsOwner issuer investor [publicParty] "NOT CALLED"
    [observableCid] expectedConsumed expectedProduced

  -- lifecycle on the maturity date
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0027805556 cashInstrumentCid, qty 1.0 cashInstrumentCid]
  (Some _, effectCid) <- electAndVerifyPaymentEffects (date 2024 Jan 15)
    amount bondInstrumentAfterCoupon7 electorIsOwner issuer investor [publicParty] "NOT CALLED"
    [observableCid] expectedConsumed expectedProduced

  pure ()

-- Create and lifecycle a floating coupon callable bond.
-- 2Y, 3M Libor + 0.1% p.a.
-- cap: 1.5%, floor: 0%
-- Issuer does not call the bond before maturity.
runFloatingFloorCap : Script ()
runFloatingFloorCap = script do
  [custodian, issuer, investor, calendarDataProvider, publicParty] <-
    createParties ["Custodian", "Issuer", "Investor", "Calendar Data Provider", "PublicParty"]

  -- Account and holding factory
  let pp = [("FactoryProvider", S.singleton publicParty)]

  -- Originate commercial-bank cash
  now <- getTime
  cashInstrumentCid <- originate custodian issuer "USD" "US Dollar" pp now

  -- Create and distribute bond
  -- CREATE_3M_CAP_FLOOR_FLOATING_CALLABLE_BOND_VARIABLES_BEGIN
  -- Libor + 0.1% coupon every 3M (with a 0% floor and a 1.5% cap)
  let
    issueDate = date 2022 Jan 15
    firstCouponDate = date 2022 Apr 15
    maturityDate = date 2024 Jan 15
    notional = 1.0
    couponRate = 0.001
    capRate = Some 0.015
    floorRate = Some $ 0.0
    couponPeriod = M
    couponPeriodMultiplier = 3
    dayCountConvention = Act360
    businessDayConvention = Following
    referenceRateId = "USD/LIBOR/3M"
    floatingRate = Some FloatingRate with
      referenceRateId
      resetRelativeTo = CalculationPeriodStartDate
      fixingDates = FixingDates with
        periodMultiplier = 0
        period = D
        dayType = Some Business
        businessDayConvention = NoAdjustment
        businessCenters = ["USD"]
    -- CREATE_3M_CAP_FLOOR_FLOATING_CALLABLE_BOND_VARIABLES_END
    observations = M.fromList
      [ (dateToDateClockTime $ date 2022 Jan 17, 0.010)
      , (dateToDateClockTime $ date 2022 Apr 15, 0.020)
      , (dateToDateClockTime $ date 2022 Jul 15, -0.005)
      , (dateToDateClockTime $ date 2022 Oct 17, 0.010)
      , (dateToDateClockTime $ date 2023 Jan 16, 0.010)
      , (dateToDateClockTime $ date 2023 Apr 17, 0.010)
      , (dateToDateClockTime $ date 2023 Jul 17, 0.010)
      , (dateToDateClockTime $ date 2023 Oct 16, 0.010)
      ]
    holidayCalendarIds = ["USD"]
    cal =
      HolidayCalendarData with
        id = "USD"
        weekend = [Saturday, Sunday]
        holidays = []

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submit calendarDataProvider do
    createCmd HolidayCalendar with
      provider = calendarDataProvider
      calendar = cal
      observers = M.fromList pp

  observableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id $ referenceRateId; observations; observers = M.empty

  bondInstrument <- originateCallableBond issuer issuer "BONDTEST1" "Callable Bond" pp now
    issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate
    dayCountConvention businessDayConvention floatingRate couponRate capRate floorRate couponPeriod
    couponPeriodMultiplier cashInstrumentCid notional

  let
    amount = 1.0
    electorIsOwner = False

  -- Coupon date 1: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0026888889 cashInstrumentCid]
  (Some bondInstrumentAfterCoupon1, effectCid) <- electAndVerifyPaymentEffects (date 2022 Apr 15)
    amount bondInstrument electorIsOwner issuer investor [publicParty] "NOT CALLED" [observableCid]
    expectedConsumed expectedProduced

  -- Coupon date 2: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0037916667 cashInstrumentCid]
  (Some bondInstrumentAfterCoupon2, effectCid) <- electAndVerifyPaymentEffects (date 2022 Jul 15)
    amount bondInstrumentAfterCoupon1 electorIsOwner issuer investor [publicParty] "NOT CALLED"
    [observableCid] expectedConsumed expectedProduced

  -- Coupon date 3: Lifecycle and verify that there are no effects (0% coupon due to floor)
  let
    expectedConsumed = []
    expectedProduced = []
  (Some bondInstrumentAfterCoupon3, effectCid) <- electAndVerifyPaymentEffects (date 2022 Oct 17)
    amount bondInstrumentAfterCoupon2 electorIsOwner issuer investor [publicParty] "NOT CALLED"
    [observableCid] expectedConsumed expectedProduced

  -- Coupon date 4: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0027805556 cashInstrumentCid]
  (Some bondInstrumentAfterCoupon4, effectCid) <- electAndVerifyPaymentEffects (date 2023 Jan 16)
    amount bondInstrumentAfterCoupon3 electorIsOwner issuer investor [publicParty] "NOT CALLED"
    [observableCid] expectedConsumed expectedProduced

  -- Coupon date 5: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0027805556 cashInstrumentCid]
  (Some bondInstrumentAfterCoupon5, effectCid) <- electAndVerifyPaymentEffects (date 2023 Apr 17)
    amount bondInstrumentAfterCoupon4 electorIsOwner issuer investor [publicParty] "NOT CALLED"
    [observableCid] expectedConsumed expectedProduced

  -- Coupon date 6: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0027805556 cashInstrumentCid]
  (Some bondInstrumentAfterCoupon6, effectCid) <- electAndVerifyPaymentEffects (date 2023 Jul 17)
    amount bondInstrumentAfterCoupon5 electorIsOwner issuer investor [publicParty] "NOT CALLED"
    [observableCid] expectedConsumed expectedProduced

  -- Coupon date 7: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0027805556 cashInstrumentCid]
  (Some bondInstrumentAfterCoupon7, effectCid) <- electAndVerifyPaymentEffects (date 2023 Oct 16)
    amount bondInstrumentAfterCoupon6 electorIsOwner issuer investor [publicParty] "NOT CALLED"
    [observableCid] expectedConsumed expectedProduced

  -- lifecycle on the maturity date
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0027805556 cashInstrumentCid, qty 1.0 cashInstrumentCid]
  (Some _, effectCid) <- electAndVerifyPaymentEffects (date 2024 Jan 15)
    amount bondInstrumentAfterCoupon7 electorIsOwner issuer investor [publicParty] "NOT CALLED"
    [observableCid] expectedConsumed expectedProduced

  pure ()

-- Create and lifecycle a floating coupon callable bond.
-- 6M bond, two coupons: 3M Libor + 0.1% p.a.
-- Issuer does not call the bond.
runTwoCoupons : Script ()
runTwoCoupons = script do
  [custodian, issuer, investor, calendarDataProvider, publicParty] <-
    createParties ["Custodian", "Issuer", "Investor", "Calendar Data Provider", "PublicParty"]

  -- Account and holding factory
  let pp = [("FactoryProvider", S.singleton publicParty)]

  -- Originate commercial-bank cash
  now <- getTime
  cashInstrumentCid <- originate custodian issuer "USD" "US Dollar" pp now

  -- Create and distribute bond
  -- Libor + 0.1% coupon every 3M
  -- CREATE_3M_FLOATING_CALLABLE_BOND_VARIABLES_BEGIN
  let
    issueDate = date 2022 Jan 15
    firstCouponDate = date 2022 Apr 15
    maturityDate = date 2022 Jul 15
    notional = 1.0
    couponRate = 0.001
    capRate = None
    floorRate = None
    couponPeriod = M
    couponPeriodMultiplier = 3
    dayCountConvention = Act360
    businessDayConvention = Following
    referenceRateId = "USD/LIBOR/3M"
    floatingRate = Some FloatingRate with
      referenceRateId
      resetRelativeTo = CalculationPeriodStartDate
      fixingDates = FixingDates with
        periodMultiplier = 0
        period = D
        dayType = Some Business
        businessDayConvention = NoAdjustment
        businessCenters = ["USD"]
    -- CREATE_3M_FLOATING_CALLABLE_BOND_VARIABLES_END
    observations = M.fromList
      [ (dateToDateClockTime $ date 2022 Jan 17, 0.010)
      , (dateToDateClockTime $ date 2022 Apr 15, 0.010)
      ]
    holidayCalendarIds = ["USD"]
    cal =
      HolidayCalendarData with
        id = "USD"
        weekend = [Saturday, Sunday]
        holidays = []

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submit calendarDataProvider do
    createCmd HolidayCalendar with
      provider = calendarDataProvider
      calendar = cal
      observers = M.fromList pp

  observableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id $ referenceRateId; observations; observers = M.empty

  bondInstrument <- originateCallableBond issuer issuer "BONDTEST1" "Callable Bond" pp now
    issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate
    dayCountConvention businessDayConvention floatingRate couponRate capRate floorRate couponPeriod
    couponPeriodMultiplier cashInstrumentCid notional

  -- One day before the first coupon date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstCouponDate 1) bondInstrument issuer
    [observableCid]

  let
    amount = 1.0
    electorIsOwner = False

  -- Coupon date 1: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0026888889 cashInstrumentCid]
  (Some bondInstrumentAfterCoupon1, effectCid) <- electAndVerifyPaymentEffects (date 2022 Apr 15)
    amount bondInstrument electorIsOwner issuer investor [publicParty] "NOT CALLED" [observableCid]
    expectedConsumed expectedProduced

  -- Coupon date 2: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumed = []
    expectedProduced = [qty 0.0027805556 cashInstrumentCid, qty 1.0 cashInstrumentCid]
  (Some bondInstrumentAfterCoupon2, effectCid) <- electAndVerifyPaymentEffects (date 2022 Jul 15)
    amount bondInstrumentAfterCoupon1 electorIsOwner issuer investor [publicParty] "NOT CALLED"
    [observableCid] expectedConsumed expectedProduced

  pure ()
