-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Bond.Test.FixedRate where

import DA.Date (DayOfWeek(..), Month(..), addDays, date, subtractDays)
import DA.Map qualified as M (fromList)
import DA.Set qualified as S (singleton)
import Daml.Finance.Data.Reference.HolidayCalendar (HolidayCalendar(..))
import Daml.Finance.Instrument.Bond.Test.Util (originateFixedRateBond)
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayConventionEnum(..), HolidayCalendarData(..))
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum(..))
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum(..))
import Daml.Finance.Interface.Util.Common (qty)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Instrument (originate)
import Daml.Finance.Test.Util.Lifecycle (lifecycleAndVerifyPaymentEffects, verifyNoLifecycleEffects)
import Daml.Script

-- Penultimate coupon payment on a bond showing creation of new instrument version
run : Script ()
run = script do
  [depository, custodian, issuer, investor, calendarDataProvider, publicParty] <-
    createParties ["CSD", "Custodian", "Issuer", "Investor", "Calendar Data Provider",
      "PublicParty"]

  -- Account and holding factory
  let pp = [("FactoryProvider", S.singleton publicParty)]

  -- Originate commercial-bank cash
  now <- getTime
  cashInstrument <- originate depository issuer "EUR" "Euro" pp now

  -- Create and distribute bond
  -- Ireland 1.1% coupon every 12M
  -- todo: change dayCountConvention to ActAct (implement this first)
  -- CREATE_FIXED_RATE_BOND_VARIABLES_BEGIN
  let
    issueDate = date 2019 Jan 16
    firstCouponDate = date 2019 May 15
    maturityDate = date 2020 May 15
    notional = 1.0
    couponRate = 0.011
    couponPeriod = M
    couponPeriodMultiplier = 12
    dayCountConvention = Act365Fixed
    businessDayConvention = Following
    -- CREATE_FIXED_RATE_BOND_VARIABLES_END
    -- Test specifying 2 calendars (the union of the two will be used)
    holidayCalendarIds = ["EUR", "EUR2"]
    cal =
      HolidayCalendarData with
        id = "EUR"
        weekend = [Saturday, Sunday]
        holidays = [date 2019 Dec 19]
    cal2 =
      HolidayCalendarData with
        id = "EUR2"
        weekend = [Saturday, Sunday]
        holidays = [date 2020 Dec 19]

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submit calendarDataProvider do
    createCmd HolidayCalendar with
      provider = calendarDataProvider
      calendar = cal
      observers = M.fromList pp

  calendarCid2 <- submit calendarDataProvider do
    createCmd HolidayCalendar with
      provider = calendarDataProvider
      calendar = cal2
      observers = M.fromList pp

  bondInstrument <- originateFixedRateBond issuer issuer "BONDTEST1" "Fixed Rate Bond" pp now
    issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate
    dayCountConvention businessDayConvention couponRate couponPeriod couponPeriodMultiplier
    cashInstrument notional

  -- One day before the first coupon date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstCouponDate 1) bondInstrument issuer []

  -- First coupon date: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumedQuantities = []
    expectedProducedQuantities = [qty 0.0035863014 cashInstrument]
  Some bondInstrumentAfterFirstCoupon <- lifecycleAndVerifyPaymentEffects [publicParty]
    firstCouponDate bondInstrument issuer [] expectedConsumedQuantities expectedProducedQuantities

  -- One day after the first coupon date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstCouponDate 1) bondInstrumentAfterFirstCoupon
    issuer []

  -- One day before expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays maturityDate 1)
    bondInstrumentAfterFirstCoupon issuer []

  -- Lifecycle on the expiry date. Verify the lifecycle effects for one coupon and the redemption
  -- amount
  let
    expectedConsumedQuantities = []
    expectedProducedQuantities = [qty 0.011030137 cashInstrument, qty 1.0 cashInstrument]
  Some _ <- lifecycleAndVerifyPaymentEffects [publicParty] maturityDate
    bondInstrumentAfterFirstCoupon issuer [] expectedConsumedQuantities expectedProducedQuantities

  pure ()
