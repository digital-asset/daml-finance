-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Bond.Test.ZeroCoupon where

import DA.Date
import DA.Map qualified as M (fromList)
import DA.Set (Set, empty, singleton)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Instrument.Bond.Test.Util (lifecycleBond, originateZeroCouponBond, verifyNoLifecycleEffects)
import Daml.Finance.Instrument.Bond.ZeroCoupon qualified as ZeroCoupon (Instrument)
import Daml.Finance.Interface.Common.Types (AccountKey, Parties)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (K, getKey)
import Daml.Finance.Interface.Lifecycle.SettlementRule qualified as SettlementRule (Claim(..))
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Lifecycle.Rule.Settlement (Rule(..))
import Daml.Finance.Settlement.Factory (Factory(..))
import Daml.Finance.Test.Util.Account qualified as Account (createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Holding qualified as Holding (verifyOwnerOfHolding)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate)
import Daml.Script

lifecycleAndVerifyRedemptionEffectsAndSettlement : [Party] -> Date -> Instrument.K -> Party -> Party -> Party -> ContractId Transferable.I -> ContractId Transferable.I -> AccountKey -> AccountKey -> [(Text, Set Parties)] -> Party -> Script Instrument.K
lifecycleAndVerifyRedemptionEffectsAndSettlement readAs today bondInstrument settler issuer investor investorBondTransferableCid custodianCashRedemptionTransferableCid custodianAccount investorAccount obs custodian = do
  (bondLifecyclableCid2, [effectCid]) <- lifecycleBond readAs today bondInstrument settler issuer []

  Some newBondInstrument <- queryContractId @ZeroCoupon.Instrument issuer $ coerceContractId bondLifecyclableCid2
  let newBondInstrumentKey = Instrument.getKey newBondInstrument

  -- Create settlement factory
  settlementFactoryCid <- submitMulti [investor] [] do createCmd Factory with provider = investor; observers = empty

  -- Claim effect
  settlementRuleCid <- submitMulti [custodian, investor] [] do
    createCmd Rule
      with
        custodian
        owner = investor
        claimers = singleton investor
        settler
        factoryCid = toInterfaceContractId settlementFactoryCid

  result <- submitMulti [investor] readAs do
    exerciseCmd settlementRuleCid SettlementRule.Claim with
      claimer = investor
      holdingCids = [toInterfaceContractId investorBondTransferableCid]
      effectCid

  let
    [custodianRedemptionInstructionCid] = result.instructionCids

  -- Allocate instructions
  custodianRedemptionInstructionCid <- submitMulti [custodian] [] do exerciseCmd custodianRedemptionInstructionCid Instruction.Allocate with transferableCid = custodianCashRedemptionTransferableCid

  -- Approve instructions
  custodianCashInstructionCid <- submitMulti [investor] [] do
    exerciseCmd custodianRedemptionInstructionCid Instruction.Approve with receiverAccount = investorAccount

  -- Settle container
  [investorRedemptionTransferableCid] <-
    submitMulti [settler] readAs do exerciseCmd result.containerCid Batch.Settle

  -- Assert state
  Holding.verifyOwnerOfHolding [(investor, investorRedemptionTransferableCid)]

  pure newBondInstrumentKey

-- Test creation and lifecycling of a zero coupon bond
run : Script ()
run = script do
  [depository, custodian, issuer, investor, settler, provider, publicParty] <-
    createParties ["CSD", "Custodian", "Issuer", "Investor", "Settler", "Provider", "PublicParty"]

  -- Account and holding factory
  let pp = [("factoryProvider", singleton $ singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory provider pp
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [custodian] [] do
    createCmd Fungible.Factory with provider = custodian; observers = M.fromList pp

  -- Create accounts
  [custodianAccount, investorAccount] <- mapA (Account.createAccount [publicParty] accountFactoryCid holdingFactoryCid [] custodian) [custodian, investor]

  -- Distribute commercial-bank cash
  now <- getTime
  let obs = [("public party", singleton $ singleton publicParty)]
  cashInstrumentCid <- Instrument.originate depository issuer "USD" obs now

  -- Create and distribute bond
  -- Zero coupon bond example
  -- CREATE_ZERO_COUPON_BOND_VARIABLES_BEGIN
  let
    issueDate = date 2019 Jan 16
    maturityDate = date 2020 May 15
  -- CREATE_ZERO_COUPON_BOND_VARIABLES_END
    redemptionAmount = 1_000_000.0

  bondInstrument <- originateZeroCouponBond custodian issuer "BOND" obs now issueDate maturityDate cashInstrumentCid
  investorBondTransferableCid <- Account.credit [publicParty] bondInstrument redemptionAmount investorAccount

  -- One day before expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays maturityDate 1) bondInstrument settler issuer []

  -- Lifecycle on the expriy date. Verify that there is a lifecycle effect for the redemption amount
  custodianCashForRedemptionTransferableCid <- Account.credit [publicParty] cashInstrumentCid redemptionAmount custodianAccount
  bondInstrumentAfterRedemption <- lifecycleAndVerifyRedemptionEffectsAndSettlement [publicParty] maturityDate bondInstrument settler issuer investor investorBondTransferableCid custodianCashForRedemptionTransferableCid custodianAccount investorAccount obs custodian

  -- One day after expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (addDays maturityDate 1) bondInstrumentAfterRedemption settler issuer []

  pure ()
