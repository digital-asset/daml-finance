-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Bond.Test.InterestRateSwap where

import DA.Date
import DA.Map qualified as M (empty, fromList)
import DA.Set (singleton)
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Instrument.Bond.Test.Util
import Daml.Finance.Instrument.Bond.Util
import Daml.Finance.Interface.Types.Date.Calendar
import Daml.Finance.Interface.Types.Date.DayCount
import Daml.Finance.Interface.Types.Date.RollConvention
import Daml.Finance.RefData.HolidayCalendar
import Daml.Finance.RefData.Observation (Observation(..))
import Daml.Finance.Test.Util.Account qualified as Account (createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate)
import Daml.Script

-- Calculate interest rate payment on an interest rate swap, including lifecycling and creation of new instrument version
run : Script ()
run = script do
  [custodian, issuer, investor, calendarDataProvider, publicParty] <-
    createParties ["Custodian", "Issuer", "Investor", "Calendar Data Provider", "PublicParty"]

  -- Account and holding factory
  let pp = [("FactoryProvider", singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory custodian pp
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [custodian] [] do
    createCmd Fungible.Factory with provider = custodian; observers = M.fromList pp

  -- Create accounts
  [custodianAccount, investorAccount] <- mapA (Account.createAccount "Default Account" [publicParty] accountFactoryCid holdingFactoryCid [] custodian) [custodian, investor]

  -- Distribute commercial-bank cash
  now <- getTime
  let pp = [("PublicParty", singleton publicParty)]
  cashInstrumentCid <- Instrument.originate custodian issuer "USD" "US Dollars" pp now

  -- Create and distribute swap
  -- Fix vs floating interest rate swap: Libor 3M vs 2.01% p.a. payment every 3M
  let
    issueDate = date 2019 Jan 16
    firstPaymentDate = date 2019 Feb 15
    maturityDate = date 2019 May 15
    referenceRateId = "USD/LIBOR/3M"
    issuerPaysFix = False
    fixRate = 0.0201
    paymentPeriod = M
    paymentPeriodMultiplier = 3
    dayCountConvention = Act360
    businessDayConvention = ModifiedFollowing
    firstPaymentAmount : Decimal = 1446.6167 -- The first payment is smaller than a regularly because the first period is shorter (only 1 month)
    firstFixPaymentAmount : Decimal = 1675.0
    firstFloatingPaymentAmount : Decimal = 228.3833
    secondPaymentAmount : Decimal = 4466.0694 -- The second payment corresponds to a regular (3 month) period
    secondFixPaymentAmount : Decimal = 4969.1667
    secondFloatingPaymentAmount : Decimal = 503.0972
    principalAmount = 1_000_000.0
    observations = M.fromList [(dateToDateClockTime (date 2019 Jan 16), 0.0027406), (dateToDateClockTime (date 2019 Feb 15), 0.002035)]
    holidayCalendarId = ["USD"]
    cal =
      HolidayCalendarData with
        id = "USD"
        weekend = [Saturday, Sunday]
        holidays = [date 2019 Dec 19]

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submitMulti [calendarDataProvider] [] do
    createCmd HolidayCalendar with
      agency = calendarDataProvider
      entity = cal.id
      calendar = cal
      observers = M.fromList pp

  observableCid <- coerceContractId <$> submitMulti [issuer] [] do createCmd Observation with provider = issuer; obsKey = referenceRateId; observations; observers = M.empty

  swapInstrument <- originateInterestRateSwap custodian issuer "SwapTest1" "Interest rate swap" pp now issueDate holidayCalendarId calendarDataProvider firstPaymentDate maturityDate dayCountConvention businessDayConvention fixRate paymentPeriod paymentPeriodMultiplier cashInstrumentCid referenceRateId issuerPaysFix
  investorSwapTransferableCid <- Account.credit [publicParty] swapInstrument principalAmount investorAccount

  -- One day before the first payment date: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstPaymentDate 1) swapInstrument custodian issuer [observableCid]

  -- First payment date: Lifecycle and verify that there are lifecycle effects for fix and floating payments.
  investorCashForFixPaymentTransferableCid <- Account.credit [publicParty] cashInstrumentCid firstFixPaymentAmount investorAccount
  custodianCashForFloatingPaymentTransferableCid <- Account.credit [publicParty] cashInstrumentCid firstFloatingPaymentAmount custodianAccount
  (swapInstrumentAfterFirstPayment, investorSwapTransferableCid) <- lifecycleAndVerifySwapPaymentEffectsAndSettlement [publicParty] firstPaymentDate swapInstrument custodian issuer investor investorSwapTransferableCid investorCashForFixPaymentTransferableCid custodianCashForFloatingPaymentTransferableCid custodianAccount investorAccount pp custodian [observableCid]

  -- One day after the first payment date: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstPaymentDate 1) swapInstrumentAfterFirstPayment custodian issuer [observableCid]

  -- One day before expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays maturityDate 1) swapInstrumentAfterFirstPayment custodian issuer [observableCid]

  -- Lifecycle on the second payment date, which is also the expiry date. Verify that there are lifecycle effects for fix and floating payments.
  investorCashForFixPaymentTransferableCid <- Account.credit [publicParty] cashInstrumentCid secondFixPaymentAmount investorAccount
  custodianCashForFloatingPaymentTransferableCid <- Account.credit [publicParty] cashInstrumentCid secondFloatingPaymentAmount custodianAccount
  lifecycleAndVerifyFinalSwapPaymentEffects [publicParty] maturityDate swapInstrumentAfterFirstPayment custodian issuer investor investorSwapTransferableCid investorCashForFixPaymentTransferableCid custodianCashForFloatingPaymentTransferableCid custodianAccount investorAccount pp custodian [observableCid]

  pure ()
