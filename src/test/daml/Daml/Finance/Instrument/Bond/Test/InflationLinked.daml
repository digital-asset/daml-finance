-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Bond.Test.InflationLinked where

import DA.Date
import DA.Map qualified as M (empty, fromList)
import DA.Set (singleton)
import Daml.Finance.Common.Date.Calendar
import Daml.Finance.Common.Date.DayCount
import Daml.Finance.Common.Date.RollConvention
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Instrument.Bond.Test.Util
import Daml.Finance.Instrument.Bond.Util
import Daml.Finance.RefData.HolidayCalendar
import Daml.Finance.RefData.Observation(Observation(..))
import Daml.Finance.Test.Util.Account qualified as Account (createAccount, createFactory, credit)
import Daml.Finance.Test.Util.Instrument qualified as Instrument (originate)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Script

-- Penultimate coupon payment on a bond showing creation of new instrument version
run : Script ()
run = script do
  [depository, custodian, issuer, investor, calendarDataProvider, settler, provider, publicParty] <-
    createParties ["CSD", "Custodian", "Issuer", "Investor", "Calendar Data Provider", "Settler", "Provider", "PublicParty"]

  -- Account and holding factory
  let pp = [("factoryProvider", singleton $ singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory provider pp
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [custodian] [] do
    createCmd Fungible.Factory with provider = custodian; observers = M.fromList pp

  -- Create accounts
  [custodianAccount, investorAccount] <- mapA (Account.createAccount [publicParty] accountFactoryCid holdingFactoryCid [] custodian) [custodian, investor]

  -- Distribute commercial-bank cash
  now <- getTime
  let obs = [("public party", singleton $ singleton publicParty)]
  cashInstrumentCid <- Instrument.originate depository issuer "EUR" obs now

  -- Create and distribute bond
  -- Sample inflation linked bond
  -- CREATE_INFLATION_LINKED_BOND_VARIABLES_BEGIN
  let
    issueDate = date 2019 Jan 16
    firstCouponDate = date 2019 Feb 15
    maturityDate = date 2019 May 15
    inflationIndexId = "CPI"
    couponRate = 0.011
    couponPeriod = M
    couponPeriodMultiplier = 3
    dayCountConvention = Act365_Fixed
    businessDayConvention = FOLLOWING
  -- CREATE_INFLATION_LINKED_BOND_VARIABLES_END
    firstCouponAmount = 949.3151  -- The first coupon is smaller than a regular coupon because the first coupon period is shorter (only 1 month)
    secondCouponAmount = 2950.411 -- The second coupon is a regular coupon
    inflationIndexBaseValue = 200.0
    inflationIndexAtMaturity = 220.0
    observations = M.fromList [(dateToDateClockTime (date 2019 Feb 15), 210.0), (dateToDateClockTime (date 2019 May 15), inflationIndexAtMaturity)]
    redemptionAmount = 1_000_000.0
    redemptionAmountInflationAdjusted = max redemptionAmount (inflationIndexAtMaturity / inflationIndexBaseValue * redemptionAmount)
    holidayCalendarId = ["EUR"]
    cal =
      HolidayCalendarData with
        id = "EUR"
        weekend = [Saturday, Sunday]
        holidays = [date 2019 Dec 19]

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submitMulti [calendarDataProvider] [] do
    createCmd HolidayCalendar with
      agency = calendarDataProvider
      entity = cal.id
      calendar = cal
      observers = M.fromList obs

  observableCid <- coerceContractId <$> submitMulti [issuer] [] do createCmd Observation with provider = issuer; obsKey = inflationIndexId; observations; observers = M.empty

  bondInstrument <- originateInflationLinkedBond custodian issuer "BOND" obs now issueDate holidayCalendarId calendarDataProvider firstCouponDate maturityDate dayCountConvention businessDayConvention couponRate couponPeriod couponPeriodMultiplier cashInstrumentCid inflationIndexId inflationIndexBaseValue
  investorBondTransferableCid <- Account.credit [publicParty] bondInstrument redemptionAmount investorAccount

  -- One day before the first coupon date: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstCouponDate 1) bondInstrument settler issuer [observableCid]

  -- First coupon date: Lifecycle and verify that there is an effect for one coupon.
  issuerCashForCouponTransferableCid <- Account.credit [publicParty] cashInstrumentCid firstCouponAmount custodianAccount
  (bondInstrumentAfterFirstCoupon, investorBondTransferableCid) <- lifecycleAndVerifyCouponEffectsAndSettlement [publicParty] firstCouponDate bondInstrument settler issuer investor investorBondTransferableCid issuerCashForCouponTransferableCid custodianAccount investorAccount obs custodian [observableCid]

  -- One day after the first coupon date: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstCouponDate 1) bondInstrumentAfterFirstCoupon settler issuer [observableCid]

  -- One day before expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays maturityDate 1) bondInstrumentAfterFirstCoupon settler issuer [observableCid]

  -- Lifecycle on the expriy date. Verify that there are lifecycle effects for one coupon and the redemption amount
  custodianCashForCouponTransferableCid <- Account.credit [publicParty] cashInstrumentCid secondCouponAmount custodianAccount
  custodianCashForRedemptionTransferableCid <- Account.credit [publicParty] cashInstrumentCid redemptionAmountInflationAdjusted custodianAccount
  bondInstrumentAfterRedemption <- lifecycleAndVerifyRedemptionEffectsAndSettlement [publicParty] maturityDate bondInstrumentAfterFirstCoupon settler issuer investor investorBondTransferableCid custodianCashForCouponTransferableCid custodianCashForRedemptionTransferableCid custodianAccount investorAccount obs custodian [observableCid]

  -- One day after expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (addDays maturityDate 1) bondInstrumentAfterRedemption settler issuer [observableCid]

  pure ()
