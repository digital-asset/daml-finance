-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Bond.Test.InflationLinked where

import DA.Date (DayOfWeek(..), Month(..), addDays, date, subtractDays)
import DA.Map qualified as M (empty, fromList)
import DA.Set qualified as S (singleton)
import Daml.Finance.Data.Numeric.Observation(Observation(..))
import Daml.Finance.Data.Reference.HolidayCalendar (HolidayCalendar(..))
import Daml.Finance.Instrument.Bond.Test.Util (originateInflationLinkedBond)
import Daml.Finance.Interface.Types.Common.Types (Id(..))
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayConventionEnum(..), HolidayCalendarData(..))
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum(..))
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum(..))
import Daml.Finance.Interface.Util.Common (qty)
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Finance.Test.Util.Instrument (originate)
import Daml.Finance.Test.Util.Lifecycle (lifecycleAndVerifyPaymentEffects, verifyNoLifecycleEffects)
import Daml.Finance.Test.Util.Time (dateToDateClockTime)
import Daml.Script

-- Penultimate coupon payment on a bond showing creation of new instrument version
run : Script ()
run = script do
  [depository, custodian, issuer, calendarDataProvider, publicParty] <-
    createParties ["CSD", "Custodian", "Issuer", "Calendar Data Provider", "PublicParty"]

  -- Distribute commercial-bank cash
  now <- getTime
  let pp = [("PublicParty", S.singleton publicParty)]
  cashInstrument <- originate depository issuer "EUR" "Euro" pp now

  -- Create and distribute bond
  -- Sample inflation linked bond
  -- CREATE_INFLATION_LINKED_BOND_VARIABLES_BEGIN
  let
    issueDate = date 2019 Jan 16
    firstCouponDate = date 2019 Feb 15
    maturityDate = date 2019 May 15
    inflationIndexId = "CPI"
    notional = 1.0
    couponRate = 0.011
    couponPeriod = M
    couponPeriodMultiplier = 3
    dayCountConvention = Act365Fixed
    businessDayConvention = Following
  -- CREATE_INFLATION_LINKED_BOND_VARIABLES_END
    inflationIndexBaseValue = 200.0
    inflationIndexAtMaturity = 220.0
    observations = M.fromList
      [ (dateToDateClockTime $ date 2019 Feb 15, 210.0)
      , (dateToDateClockTime $ date 2019 May 15, inflationIndexAtMaturity)
      ]
    cal = HolidayCalendarData with
      id = "EUR"
      weekend = [Saturday, Sunday]
      holidays = [date 2019 Dec 19]
    holidayCalendarIds = [cal.id]

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submit calendarDataProvider do
    createCmd HolidayCalendar with
      provider = calendarDataProvider
      calendar = cal
      observers = M.fromList pp

  observableCid <- toInterfaceContractId <$> submit issuer do
    createCmd Observation with
      provider = issuer; id = Id inflationIndexId; observations; observers = M.empty

  bondInstrument <- originateInflationLinkedBond issuer issuer "BONDTEST1"
    "Inflation Linked Bond" pp now issueDate holidayCalendarIds calendarDataProvider firstCouponDate
    maturityDate dayCountConvention businessDayConvention couponRate couponPeriod
    couponPeriodMultiplier cashInstrument notional inflationIndexId inflationIndexBaseValue

  -- One day before the first coupon date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstCouponDate 1) bondInstrument issuer
    [observableCid]

  -- First coupon date: Lifecycle and verify that there is an effect for one coupon.
  let
    expectedConsumedQuantities = []
    expectedProducedQuantities = [qty 0.0009493151 cashInstrument]
  Some bondInstrumentAfterFirstCoupon <- lifecycleAndVerifyPaymentEffects [publicParty]
    firstCouponDate bondInstrument issuer [observableCid] expectedConsumedQuantities
    expectedProducedQuantities

  -- One day after the first coupon date: try to lifecycle and verify that there are no lifecycle
  -- effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstCouponDate 1) bondInstrumentAfterFirstCoupon
    issuer [observableCid]

  -- One day before expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays maturityDate 1)
    bondInstrumentAfterFirstCoupon issuer [observableCid]

  -- Lifecycle on the expiry date. Verify the lifecycle effects for one coupon and the
  -- inflation-adjusted redemption amount
  let
    expectedConsumedQuantities = []
    expectedProducedQuantities = [qty 0.002950411 cashInstrument, qty 1.1 cashInstrument]
  Some bondInstrumentAfterMaturity <- lifecycleAndVerifyPaymentEffects [publicParty] maturityDate
    bondInstrumentAfterFirstCoupon issuer [observableCid] expectedConsumedQuantities
    expectedProducedQuantities

  pure ()
