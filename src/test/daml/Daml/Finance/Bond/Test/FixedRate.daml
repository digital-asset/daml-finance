-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Bond.Test.FixedRate where

import DA.Date
import DA.Map qualified as M (fromList)
import DA.Set (singleton)
import Daml.Finance.Asset.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Asset.Test.Util.Account qualified as Account (createAccount, createFactory, credit)
import Daml.Finance.Asset.Test.Util.Instrument qualified as Instrument (originate)
import Daml.Finance.Bond.Test.Util
import Daml.Finance.Common.Date.Calendar
import Daml.Finance.Common.Date.DayCount
import Daml.Finance.Common.Date.RollConvention
import Daml.Finance.RefData.HolidayCalendar
import Daml.Finance.Test.Util.Common (createParties)
import Daml.Script

-- Penultimate coupon payment on a bond showing creation of new instrument version
run : Script ()
run = script do
  [depository, custodian, issuer, investor, calendarDataProvider, settler, provider, publicParty] <-
    createParties ["CSD", "Custodian", "Issuer", "Investor", "Calendar Data Provider", "Settler", "Provider", "PublicParty"]

  -- Account and holding factory
  let pp = [("factoryProvider", singleton $ singleton publicParty)]
  accountFactoryCid <- toInterfaceContractId <$> Account.createFactory provider pp
  holdingFactoryCid <- toInterfaceContractId <$> submitMulti [custodian] [] do
    createCmd Fungible.Factory with provider = custodian; observers = M.fromList pp

  -- Create accounts
  [custodianAccount, investorAccount] <- mapA (Account.createAccount [publicParty] accountFactoryCid holdingFactoryCid [] custodian) [custodian, investor]

  -- Distribute commercial-bank cash
  let obs = [("public party", singleton $ singleton publicParty)]
  cashInstrumentCid <- Instrument.originate depository issuer "EUR" obs

  -- Create and distribute bond
  now <- getTime
  let
    -- Ireland 1.1% coupon every 12M
    issueDate = date 2019 Jan 16
    firstCouponDate = date 2019 May 15
    maturityDate = date 2020 May 15
    couponRate = 0.011
    couponPeriod = M
    couponPeriodMultiplier = 12
    dayCountConvention = Act365_Fixed -- todo: change to ActAct (implement this first)
    businessDayConvention = FOLLOWING
    firstCouponAmount = 3586.3014  -- The first coupon is smaller than a regular coupon because the first coupon period is shorter (only 4 months)
    secondCouponAmount = 11030.137 -- The second coupon is a regular coupon
    redemptionAmount = 1_000_000.0
    holidayCalendarIds = ["EUR", "EUR2"] -- Test specifying 2 calendars (the union of the two will be used)
    cal =
      HolidayCalendarData with
        id = "EUR"
        weekend = [Saturday, Sunday]
        holidays = [date 2019 Dec 19]
    cal2 =
      HolidayCalendarData with
        id = "EUR2"
        weekend = [Saturday, Sunday]
        holidays = [date 2020 Dec 19]

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submitMulti [calendarDataProvider] [] do
    createCmd HolidayCalendar with
      agency = calendarDataProvider
      entity = cal.id
      calendar = cal
      observers = M.fromList obs

  calendarCid2 <- submitMulti [calendarDataProvider] [] do
    createCmd HolidayCalendar with
      agency = calendarDataProvider
      entity = cal2.id
      calendar = cal2
      observers = M.fromList obs

  bondInstrument <- originateFixedRateBond custodian issuer "BOND" obs now issueDate holidayCalendarIds calendarDataProvider firstCouponDate maturityDate dayCountConvention businessDayConvention couponRate couponPeriod couponPeriodMultiplier cashInstrumentCid
  investorBondTransferableCid <- Account.credit [publicParty] bondInstrument redemptionAmount investorAccount

  -- One day before the first coupon date: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays firstCouponDate 1) bondInstrument settler issuer []

  -- First coupon date: Lifecycle and verify that there is an effect for one coupon.
  custodianCashForCouponTransferableCid <- Account.credit [publicParty] cashInstrumentCid firstCouponAmount custodianAccount
  (bondInstrumentAfterFirstCoupon, investorBondTransferableCid) <- lifecycleAndVerifyCouponEffectsAndSettlement [publicParty] firstCouponDate bondInstrument settler issuer investor investorBondTransferableCid custodianCashForCouponTransferableCid custodianAccount investorAccount obs custodian []

  -- One day after the first coupon date: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (addDays firstCouponDate 1) bondInstrumentAfterFirstCoupon settler issuer []

  -- One day before expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (subtractDays maturityDate 1) bondInstrumentAfterFirstCoupon settler issuer []

  -- Lifecycle on the expiry date. Verify that there are lifecycle effects for one coupon and the redemption amount
  custodianCashForCouponTransferableCid <- Account.credit [publicParty] cashInstrumentCid secondCouponAmount custodianAccount
  custodianCashForRedemptionTransferableCid <- Account.credit [publicParty] cashInstrumentCid redemptionAmount custodianAccount

  bondInstrumentAfterRedemption <- lifecycleAndVerifyRedemptionEffectsAndSettlement [publicParty] maturityDate bondInstrumentAfterFirstCoupon settler issuer investor investorBondTransferableCid custodianCashForCouponTransferableCid custodianCashForRedemptionTransferableCid custodianAccount investorAccount obs custodian []

  -- One day after expiry: try to lifecycle and verify that there are no lifecycle effects.
  verifyNoLifecycleEffects [publicParty] (addDays maturityDate 1) bondInstrumentAfterRedemption settler issuer []

  pure ()
