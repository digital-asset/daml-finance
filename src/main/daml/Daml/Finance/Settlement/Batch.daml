-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.Batch
  ( Batch(..)
  , T
  ) where

import DA.Foldable (forA_)
import DA.List (groupOn)
import DA.Optional (catOptionals, fromOptional)
import DA.Set (fromList, singleton, size)
import DA.Traversable qualified as T
import Daml.Finance.Interface.Holding.Account qualified as Account (undisclose)
import Daml.Finance.Interface.Holding.Base qualified as Base (I)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I)
import Daml.Finance.Interface.Holding.Util (fetchAccount, getAccount, undisclose)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (HasImplementation, I, View(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Execute(..), I)
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..), Step(..))
import Daml.Finance.Interface.Types.Common (Id(..), Parties)
import Daml.Finance.Settlement.Instruction (Instruction(..))

-- | Type synonym for `Batch`.
type T = Batch

instance Batch.HasImplementation T

-- | Allows you to atomically settle a set of settlement `Step`\s.
template Batch
  with
    requestors : Parties
      -- ^ Parties requesting the settlement.
    settler : Party
      -- ^ Party triggering the settlement.
    id : Id
      -- ^ Batch identifier.
    description : Text
      -- ^ Batch description.
    stepsWithInstructionId : [(Step, Id)]
      -- ^ The settlement `Step`\s and the identifiers of the corresponding `Instruction`\s.
  where
    signatory requestors
    observer settler

    let
      (steps, instructionIds) = unzip stepsWithInstructionId
      undiscloseA = Account.undisclose (show id, singleton settler) settler (singleton settler)
      undiscloseT = undisclose @Transferable.I (show id, singleton settler) (singleton settler)

    interface instance Batch.I for Batch where
      view = Batch.View with id; description; settler; steps
      settle = do
        -- collect accounts and check that sender accounts are still active
        accounts <- fromList . mconcat <$> forA stepsWithInstructionId
          \(step, instructionId) -> do
            (instructionCid, instruction) <- fetchByKey @Instruction (requestors, id, instructionId)
            s <- case instruction.allocation of
              Pledge senderTransferableCid -> do
                holding <- fetch $ toInterfaceContractId @Base.I senderTransferableCid
                account <- fetchAccount holding
                pure . Some $ getAccount holding
              _ -> pure None
            let
              r = case instruction.approval of
                TakeDelivery receiverAccount -> Some receiverAccount
                _ -> None
            pure $ catOptionals [s, r]
        -- settle
        let
          settleInstruction instructionId = do
            -- NOTE: ideally we should exerciseByKey (but currently doesn't work for interface choices).
            -- (as a workaround we could proxy the choice in the same contract)
            (instructionCid, instruction) <- fetchByKey @Instruction (requestors, id, instructionId)
            allocatedTransferable <- case instruction.allocation of
              Pledge cid -> Some <$> fetch cid
              _ -> pure None
            transferableCidOpt <- exercise (toInterfaceContractId @Instruction.I instructionCid) Instruction.Execute
            settledTransferable <- T.mapA fetch transferableCidOpt
            -- undisclose transferable
            transferableCidOpt <- T.mapA (\tCid -> fromOptional tCid <$> undiscloseT tCid) transferableCidOpt
            let usedTypeRepOpts = fmap (\t -> (instruction.step.quantity.unit, interfaceTypeRep t)) <$> [allocatedTransferable, settledTransferable]
            pure (transferableCidOpt, usedTypeRepOpts)
        -- execute instructions
        (transferableCidOpts, usedTypeRepOpts) <- unzip <$> mapA settleInstruction instructionIds
        -- consistency check
        forA_ (groupOn fst $ catOptionals . concat $ usedTypeRepOpts) \ts ->
          assertMsg "The template type rep of allocated transferables must be the same for all instructions for the same instrument." $ size (fromList ts) == 1
        -- undisclose accounts
        forA_ accounts undiscloseA
        pure $ catOptionals transferableCidOpts
