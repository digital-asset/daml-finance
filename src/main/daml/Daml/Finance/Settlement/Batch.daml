-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.Batch where

import DA.Action (foldlA)
import DA.Foldable (forA_)
import DA.List (groupOn)
import DA.Optional (catOptionals, fromOptional)
import DA.Set (Set)
import DA.Set qualified as S (empty, member, fromList, insert, intersection, null, size, union)
import DA.Traversable qualified as T
import Daml.Finance.Interface.Holding.Util (undisclose)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Cancel(..), I, Settle(..), View(..))
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Cancel(..), Execute(..), I)
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..), InstructionKey(..), RoutedStep(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..), Parties)
import Daml.Finance.Settlement.Instruction (Instruction(..), mustAuthorizeHelper)

-- | Type synonym for `Batch`.
type T = Batch

-- | Allows you to atomically settle a set of settlement `Step`.
template Batch
  with
    requestors : Parties
      -- ^ Parties requesting the settlement.
    settlers : Parties
      -- ^ Any of the parties can trigger the settlement.
    id : Id
      -- ^ Batch identifier.
    description : Text
      -- ^ Batch description.
    contextId : Optional Id
      -- ^ Identifier to link a batch to a context (e.g. the `Effect` it originated from).
    routedStepsWithInstructionId : [(RoutedStep, Id)]
      -- ^ The settlement `RoutedStep`\s and the identifiers of the corresponding `Instruction`\s.
    settlementTime : Optional Time
      -- ^ Settlement time (if any).
  where
    signatory requestors
    observer settlers

    let
      (routedSteps, instructionIds) = unzip routedStepsWithInstructionId
      buildKey instructionId = InstructionKey with requestors; batchId = id; id = instructionId

    interface instance Batch.I for Batch where
      view = Batch.View with
        requestors; settlers; id; description; contextId; routedSteps; settlementTime
      settle Batch.Settle{actors} = do
        assertMsg "actors must intersect with settlers" $
          not $ S.null $ actors `S.intersection` settlers
        -- order instructions (such that they can be executed with passthroughs)
        orderedInstructions <-
          orderPassThroughChains . fmap (fmap buildKey) $ routedStepsWithInstructionId
        assertMsg "ordering must be complete" $
          length orderedInstructions == length routedStepsWithInstructionId
        -- settle
        let
          settleInstruction instructionKey = do
            let context = show instructionKey
            (instructionCid, instruction) <- fetchByKey @Instruction instructionKey
            pledged <- case instruction.allocation of
              Pledge cid -> Some <$> fetch cid
              _ -> pure None
            settledCid <- exercise (toInterfaceContractId @Instruction.I instructionCid)
              Instruction.Execute with actors = actors `S.union` requestors
            settled <- T.mapA fetch settledCid
            let
              usedInterfaceTypeReps =
                fmap ((instruction.routedStep.quantity.unit, ) . interfaceTypeRep) <$>
                [pledged, settled]
            settledCid <-
              T.mapA
                (\cid -> fromOptional cid <$> undisclose (context, settlers) actors cid)
                settledCid
            pure (settledCid, usedInterfaceTypeReps)
        -- execute instructions
        (settledCids, usedInterfaceTypeReps) <- unzip <$> mapA settleInstruction orderedInstructions
        -- consistency check
        forA_ (groupOn fst . catOptionals . concat $ usedInterfaceTypeReps) \ts ->
          assertMsg "Allocated holdings of the same instrument must have the same template type rep"
            $ S.size (S.fromList ts) == 1
        pure $ catOptionals settledCids
      cancel Batch.Cancel{actors} = do
        let
          mustAuthorize = mustAuthorizeHelper actors
          cancelInstruction instruction = do
            instructionCid <- fst <$> fetchByKey @Instruction instruction
            exercise (toInterfaceContractId @Instruction.I instructionCid)
              Instruction.Cancel with actors
        mustAuthorize requestors
        -- cancel instructions
        catOptionals <$> mapA (cancelInstruction . buildKey . snd) routedStepsWithInstructionId

-- | HIDE
-- Partially order instructions, so that pass-through chains can be executed in order.
orderPassThroughChains : [(RoutedStep, InstructionKey)] -> Update [InstructionKey]
orderPassThroughChains routedStepsWithInstructions =
  reverse . fst <$> foldlA
    (\(ordered, used) (routedStep, current) ->
      if S.member current used
      then
        -- instruction has already been visited, do not re-insert in list
        pure (ordered, used)
      else do
        currentInstruction <- snd <$> fetchByKey @Instruction current
        assertMsg "routed step must match" $ routedStep == currentInstruction.routedStep
        let
          ordered' = current :: ordered
          used' = S.insert current used
        case currentInstruction.allocation of
          -- a Pledge might be the start of a pass-through chain, try to follow the chain
          Pledge _ -> collectPassThroughChain ordered' used' currentInstruction
          -- A PassThroughFrom will be visited as part of a chain, do not insert in list
          PassThroughFrom _ -> pure (ordered, used)
          _ -> pure (ordered', used')
    ) ([], S.empty) routedStepsWithInstructions

-- | HIDE
-- Follows the pass-through chain and collects the corresponding instructions in an ordered list.
collectPassThroughChain : [InstructionKey] -> Set InstructionKey -> Instruction ->
    Update ([InstructionKey], Set InstructionKey)
collectPassThroughChain
  ordered              -- i.e., previously-ordered instructions
  used                 -- i.e., instructions that have already been visited
  currentInstruction = -- i.e., first instruction of the chain
    case currentInstruction.approval of
      PassThroughTo (_, next) -> do
        nextInstruction <- snd <$> fetchByKey @Instruction next
        assertMsg "next instruction must not have been used before" . not $ S.member next used
        collectPassThroughChain (next :: ordered) (S.insert next used) nextInstruction
      _ -> pure (ordered, used)
