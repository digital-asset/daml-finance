-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.Instruction where

import DA.Assert ((===))
import DA.List qualified as L (head)
import DA.Set qualified as S (empty, fromList, intersection, isSubsetOf, null, singleton, toList)
import Daml.Finance.Interface.Account.Account qualified as Account (Credit(..), Debit(..), I, R, disclose, exerciseInterfaceByKey, undisclose)
import Daml.Finance.Interface.Account.Util (getAccount)
import Daml.Finance.Interface.Holding.Base qualified as Base (Acquire(..), I, LockType(..), Release(..))
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Interface.Holding.Util (disclose, getAmount, getInstrument, undisclose)
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..), Cancel(..), Execute(..), HasImplementation, I, View(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..), InstructionKey(..), RoutedStep)
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id(..), Parties, PartiesMap)
import Daml.Finance.Interface.Util.Common (fetchInterfaceByKey)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Type synonym for `Instruction`.
type T = Instruction

instance Instruction.HasImplementation T

-- | Instruction is used to settle a single settlement `Step`. In order to settle the instruction,
-- - the sender must allocate a suitable holding
-- - the receiver must define the receiving account
template Instruction
  with
    requestors : Parties
      -- ^ Parties requesting the settlement.
    settlers : Parties
      -- ^ Any of the parties can trigger the settlement.
    batchId : Id
      -- ^ Trade identifier.
    id : Id
      -- ^ Instruction identifier.
    routedStep : RoutedStep
      -- ^ Routed settlement step.
    settlementTime : Optional Time
      -- ^ Settlement time (if any).
    allocation : Allocation
      -- ^ Allocation from the sender.
    approval : Approval
      -- ^ Approval from the receiver.
    signedSenders : Parties
      -- ^ Additional signatories, used to collect authorization.
    signedReceivers : Parties
      -- ^ Additional signatories, used to collect authorization.
    observers : PartiesMap
      -- ^ Observers.
  where
    signatory requestors, signedSenders, signedReceivers
    observer routedStep.sender, routedStep.receiver, settlers, Disclosure.flattenObservers observers

    key instruction : InstructionKey
    maintainer key.requestors

    let
      instruction = InstructionKey with requestors; batchId; id
      context = show instruction
      mustBe : Role -> Party -> Update ()
      mustBe role party = do
        let
          roleParty = case role of
            Custodian -> routedStep.custodian
            Sender -> routedStep.sender
            Receiver -> routedStep.receiver
        assertMsg (show party <> " must match " <> show roleParty <> "(" <> show role <> ")") $
          party == roleParty
      -- utilitise for disclose / undisclose
      discloseAccount = discloseAccountHelper Account.disclose (context, settlers)
      undiscloseAccount = discloseAccountHelper Account.undisclose (context, settlers)
      disclosePledge settlers disclosers cid = do
        let viewer = L.head $ S.toList disclosers
        disclose @Base.I (context, settlers) viewer disclosers cid
      undisclosePledge settlers = undisclose @Base.I (context, settlers)
      releasePreviousAllocation =
        case allocation of
          Pledge lockedCid -> do
            baseCid <- exercise lockedCid Base.Release with context
            base <- fetch baseCid
            let senderAccount = getAccount base
            undiscloseAccount senderAccount True
            viewA <- view <$> fetchInterfaceByKey @Account.R @Account.I senderAccount
            undisclosePledge settlers viewA.controllers.outgoing baseCid
          PassThroughFrom (passthroughAccount, _) -> do
            undiscloseAccount passthroughAccount True
            pure None
          _ ->
            pure None
      releasePreviousApproval =
        case approval of
          TakeDelivery receiverAccount ->
            undiscloseAccount receiverAccount False
          PassThroughTo (passthroughAccount, _) ->
            undiscloseAccount passthroughAccount False
          _ -> pure None

    interface instance Disclosure.I for Instruction where
      view = Disclosure.View with
        disclosureControllers = S.fromList [routedStep.sender, routedStep.receiver]; observers
      setObservers = setObserversImpl @Instruction @Disclosure.I this None
      addObservers = addObserversImpl @Instruction @Disclosure.I this None
      removeObservers = removeObserversImpl @Instruction @Disclosure.I this None

    interface instance Instruction.I for Instruction where
      asDisclosure = toInterface @Disclosure.I this
      view = Instruction.View with
        requestors
        settlers
        batchId
        id
        routedStep
        settlementTime
        signedSenders
        signedReceivers
        allocation
        approval
      allocate Instruction.Allocate{actors; allocation} = do
        let mustAuthorize = mustAuthorizeHelper actors
        assertMsg ("allocation must be new " <> context) $ allocation /= this.allocation
        -- release previous allocation
        obCid <- releasePreviousAllocation
        -- allocate
        allocationDisclosed <- case allocation of
          Pledge baseCid -> do
            base <- fetch baseCid
            let senderAccount = getAccount base
            vSenderAccount <- view <$> fetchInterfaceByKey @Account.R @Account.I senderAccount
            discloseAccount senderAccount True
            baseCid <- disclosePledge settlers vSenderAccount.controllers.outgoing baseCid
            mustAuthorize vSenderAccount.controllers.outgoing
            mustBe Custodian senderAccount.custodian
            mustBe Sender senderAccount.owner
            getAmount base === routedStep.quantity.amount
            getInstrument base === routedStep.quantity.unit
            lockedCid <- exercise baseCid Base.Acquire with
              newLockers = requestors <> vSenderAccount.controllers.outgoing
              context
              lockType = Base.Semaphore
            pure $ Pledge lockedCid
          PassThroughFrom (passthroughAccount, fromInstructionKey) -> do
            discloseAccount passthroughAccount True
            vSenderAccount <- view <$> fetchInterfaceByKey @Account.R @Account.I passthroughAccount
            mustAuthorize vSenderAccount.controllers.outgoing
            mustBe Custodian passthroughAccount.custodian
            mustBe Sender passthroughAccount.owner
            (_, fromInstruction) <- fetchByKey @Instruction fromInstructionKey
            mustBe Custodian fromInstruction.routedStep.custodian
            mustBe Sender fromInstruction.routedStep.receiver
            pure $ PassThroughFrom (passthroughAccount, fromInstructionKey)
          CreditReceiver -> do
            mustAuthorize $ S.singleton routedStep.custodian
            pure CreditReceiver
          SettleOffledger -> do
            mustAuthorize $ S.singleton routedStep.custodian
            mustAuthorize $ S.singleton routedStep.sender
            pure SettleOffledger
          Unallocated -> do
            mustAuthorize signedSenders
            pure Unallocated
        cid <- toInterfaceContractId <$> create this with
          allocation = allocationDisclosed
          signedSenders = if allocationDisclosed == Unallocated then S.empty else actors
        pure (cid, obCid)
      approve Instruction.Approve{actors; approval} = do
        let mustAuthorize = mustAuthorizeHelper actors
        assertMsg ("approval must be new " <> context) $ approval /= this.approval
        -- release previous approval
        releasePreviousApproval
        -- approve
        case approval of
          TakeDelivery receiverAccount -> do
            discloseAccount receiverAccount False
            vReceiverAccount <- view <$> fetchInterfaceByKey @Account.R @Account.I receiverAccount
            mustAuthorize vReceiverAccount.controllers.incoming
            mustBe Custodian receiverAccount.custodian
            mustBe Receiver receiverAccount.owner
          PassThroughTo (passthroughAccount, toInstructionKey) -> do
            discloseAccount passthroughAccount False
            vReceiverAccount <- view <$>
              fetchInterfaceByKey @Account.R @Account.I passthroughAccount
            mustAuthorize vReceiverAccount.controllers.incoming
            mustAuthorize vReceiverAccount.controllers.outgoing
            mustBe Custodian passthroughAccount.custodian
            mustBe Receiver passthroughAccount.owner
            (_, toInstruction) <- fetchByKey @Instruction toInstructionKey
            mustBe Custodian toInstruction.routedStep.custodian
            mustBe Receiver toInstruction.routedStep.sender
          DebitSender -> do
            mustAuthorize $ S.singleton routedStep.custodian
            mustBe Custodian routedStep.receiver
          SettleOffledgerAcknowledge -> do
            mustAuthorize $ S.singleton routedStep.custodian
            mustAuthorize $ S.singleton routedStep.receiver
          Unapproved ->
            mustAuthorize signedReceivers
        toInterfaceContractId <$> create this with
          approval
          signedReceivers = if approval == Unapproved then S.empty else actors
      execute Instruction.Execute{actors} = do
        let mustAuthorize = mustAuthorizeHelper actors
        mustAuthorize requestors
        assertMsg "actors must intersect with settlers" $
          not $ S.null $ actors `S.intersection` settlers
        let
          abortUnapproved = abort $ "instruction must be approved " <> context
          abortOnOffledgerMix =
            abort $ "mix of on- and off-ledger settlement is not supported " <> context
        -- execute instruction
        case (allocation, approval) of
          (Unallocated, Unapproved) ->
            abort $ "instruction must be allocated and approved " <> context
          (Unallocated, _) -> abort $ "instruction must be allocated " <> context
          (_, Unapproved) -> abortUnapproved
          (PassThroughFrom _, _) -> do
            -- Pass-throughs are consumed by the routedStep (*) below
            abort $ "holding has not been passed through " <> context
          (Pledge lockedCid, a) -> do
            baseCid <- exercise lockedCid Base.Release with context
            base <- fetch baseCid
            let senderAccount = getAccount base
            case a of
              TakeDelivery receiverAccount -> do
                let transferableCid = coerceInterfaceContractId @Transferable.I baseCid
                baseCid <- toInterfaceContractId <$>
                  exercise transferableCid Transferable.Transfer with
                    actors = signedSenders <> signedReceivers; newOwnerAccount = receiverAccount
                viewA <- view <$> fetchInterfaceByKey @Account.R @Account.I receiverAccount
                -- undiclose accounts
                undiscloseAccount senderAccount True
                undiscloseAccount receiverAccount False
                -- disclose to settlers (such that they can get the TemplateTypeRep in the Batch)
                Some <$> disclosePledge settlers viewA.controllers.incoming baseCid
              DebitSender -> do
                accountCid <- Account.exerciseInterfaceByKey @Account.I senderAccount
                  routedStep.custodian Account.Debit with holdingCid = baseCid
                undiscloseAccount senderAccount True
                pure None
              PassThroughTo (passthroughAccount, toInstructionKey) -> do
                let transferableCid = coerceInterfaceContractId @Transferable.I baseCid
                baseCid <- toInterfaceContractId <$>
                  exercise transferableCid Transferable.Transfer with
                    actors = signedSenders <> signedReceivers; newOwnerAccount = passthroughAccount
                (toInstructionCid, toInstruction) <- fetchByKey @Instruction toInstructionKey
                assertMsg "passthroughs must match" $
                  toInstruction.allocation == PassThroughFrom (passthroughAccount, key this)
                -- (*) in case of a pass-through, the newly created holding is immediately allocated
                -- to the next routedStep
                exercise (toInterfaceContractId @Instruction.I toInstructionCid)
                  Instruction.Allocate with
                    actors = signedSenders <> signedReceivers; allocation = Pledge baseCid
                undiscloseAccount senderAccount True
                undiscloseAccount passthroughAccount False
                pure None
              SettleOffledgerAcknowledge -> abortOnOffledgerMix
              Unapproved -> abortUnapproved
          (CreditReceiver, a) ->
            case a of
              TakeDelivery receiverAccount -> do
                mustBe Custodian routedStep.sender
                baseCid <- Account.exerciseInterfaceByKey @Account.I receiverAccount
                  routedStep.custodian Account.Credit with quantity = routedStep.quantity
                viewA <- view <$> fetchInterfaceByKey @Account.R @Account.I receiverAccount
                -- undisclose
                undiscloseAccount receiverAccount False
                -- disclose to actors (such that they can get the TemplateTypeRep in the Batch)
                Some <$> disclosePledge actors signedReceivers baseCid
              DebitSender -> do
                assertMsg ("sender must be the same party as receiver " <> context) $
                  routedStep.sender == routedStep.receiver
                pure None
              PassThroughTo _ ->
                abort $ "passthroughs for credits are not supported " <> context
              SettleOffledgerAcknowledge -> abortOnOffledgerMix
              Unapproved -> abortUnapproved
          (SettleOffledger, a) ->
            case a of
              SettleOffledgerAcknowledge -> pure None
              _ -> abortOnOffledgerMix
      cancel Instruction.Cancel{actors} = do
        let mustAuthorize = mustAuthorizeHelper actors
        mustAuthorize requestors
        releasePreviousApproval
        releasePreviousAllocation

-- | HIDE
data Role
  = Custodian
  | Sender
  | Receiver
  deriving (Eq, Show)

-- | HIDE
mustAuthorizeHelper : Parties -> Parties -> Update ()
mustAuthorizeHelper authorizers parties =
  assertMsg (show parties <> " must be a subset of authorizers (" <> show authorizers <> ")") $
    parties `S.isSubsetOf` authorizers

-- | HIDE
discloseAccountHelper : ((Text, Parties) -> Party -> Parties -> AccountKey -> Update a) ->
  (Text, Parties) -> AccountKey -> Bool -> Update a
discloseAccountHelper f (context, settlers) account isInstructor = do
  viewA <- view <$> fetchInterfaceByKey @Account.R @Account.I account
  let
    disclosers = if isInstructor
                 then viewA.controllers.outgoing
                 else viewA.controllers.incoming
    viewer = L.head $ S.toList disclosers
  f (context, settlers) viewer disclosers account
