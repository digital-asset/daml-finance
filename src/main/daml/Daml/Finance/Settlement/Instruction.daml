-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.Instruction where

import DA.List qualified as L (head)
import DA.Set qualified as S (empty, fromList, intersection, isSubsetOf, null, singleton, toList, union)
import Daml.Finance.Interface.Account.Account qualified as Account (Credit(..), Debit(..), I, R, disclose, exerciseInterfaceByKey, undisclose)
import Daml.Finance.Interface.Account.Util (getAccount)
import Daml.Finance.Interface.Holding.Base qualified as Base (Acquire(..), I, LockType(..), Release(..))
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Interface.Holding.Util qualified as Holding (disclose, getAmount, getInstrument, undisclose)
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..), Cancel(..), Execute(..), I, View(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..), InstructionKey(..), RoutedStep)
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id(..), Parties, PartiesMap)
import Daml.Finance.Interface.Util.Common (fetchInterfaceByKey)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Type synonym for `Instruction`.
type T = Instruction

-- | Instruction is used to settle a single settlement `Step`. In order to settle the instruction,
-- - the sender must allocate a suitable holding
-- - the receiver must define the receiving account
template Instruction
  with
    requestors : Parties
      -- ^ Parties requesting the settlement.
    settlers : Parties
      -- ^ Any of the parties can trigger the settlement.
    batchId : Id
      -- ^ Trade identifier.
    id : Id
      -- ^ Instruction identifier.
    routedStep : RoutedStep
      -- ^ Routed settlement step.
    settlementTime : Optional Time
      -- ^ Settlement time (if any).
    allocation : Allocation
      -- ^ Allocation from the sender.
    approval : Approval
      -- ^ Approval from the receiver.
    signedSenders : Parties
      -- ^ Additional signatories, used to collect authorization.
    signedReceivers : Parties
      -- ^ Additional signatories, used to collect authorization.
    observers : PartiesMap
      -- ^ Observers.
  where
    signatory requestors, signedSenders, signedReceivers
    observer routedStep.sender, routedStep.receiver, settlers, Disclosure.flattenObservers observers

    key instructionKey : InstructionKey
    maintainer key.requestors

    let
      instructionKey = InstructionKey with requestors; batchId; id
      context = show instructionKey
      mustBe role party = do
        let
          roleParty = case role of
            Custodian -> routedStep.custodian
            Sender -> routedStep.sender
            Receiver -> routedStep.receiver
        assertMsg @Update
          (show party <> " must match " <> show roleParty <> "(" <> show role <> ")") $
          party == roleParty
      addSignatories parties = parties `S.union` S.fromList (signatory this)
      discloseAccount accountKey actors = discloseAccountHelper Account.disclose (context, settlers)
        accountKey $ addSignatories actors
      undiscloseAccount accountKey actors = discloseAccountHelper Account.undisclose (context,
        settlers) accountKey $ addSignatories actors
      disclosePledge baseCid actors = Holding.disclose @Base.I (context, settlers) (addSignatories
        actors) baseCid
      undisclosePledge baseCid actors = Holding.undisclose @Base.I (context, settlers)
        (addSignatories actors) baseCid
      releasePreviousAllocation actors =
        case allocation of
          Pledge lockedCid -> do
            baseCid <- exercise lockedCid Base.Release with context
            base <- fetch baseCid
            let senderAccountKey = getAccount base
            undiscloseAccount senderAccountKey actors
            undisclosePledge baseCid actors
          PassThroughFrom (passThroughAccountKey, _) -> do
            undiscloseAccount passThroughAccountKey actors
            pure None
          _ -> pure None
      releasePreviousApproval actors =
        case approval of
          TakeDelivery receiverAccountKey -> undiscloseAccount receiverAccountKey actors
          PassThroughTo (passThroughAccountKey, _) -> undiscloseAccount passThroughAccountKey actors
          _ -> pure None

    interface instance Disclosure.I for Instruction where
      view = Disclosure.View with
        disclosureControllers = S.fromList [routedStep.sender, routedStep.receiver]; observers
      setObservers = setObserversImpl @Instruction @Disclosure.I this None
      addObservers = addObserversImpl @Instruction @Disclosure.I this None
      removeObservers = removeObserversImpl @Instruction @Disclosure.I this None

    interface instance Instruction.I for Instruction where
      view = Instruction.View with
        requestors; settlers; batchId; id; routedStep; settlementTime; signedSenders
        signedReceivers; allocation; approval
      allocate Instruction.Allocate{actors; allocation} = do
        let mustAuthorize = mustAuthorizeHelper actors
        assertMsg ("Allocation must be new. " <> context) $ allocation /= this.allocation
        releasedCid <- releasePreviousAllocation actors
        -- allocate
        newAllocation <- case allocation of
          Pledge baseCid -> do
            baseCid <- disclosePledge baseCid actors
            base <- fetch baseCid
            let senderAccountKey = getAccount base
            senderAccount <- view <$> fetchInterfaceByKey @Account.R @Account.I senderAccountKey
            discloseAccount senderAccountKey actors
            mustAuthorize senderAccount.controllers.outgoing
            mustBe Custodian senderAccount.custodian
            mustBe Sender senderAccount.owner
            assertMsg ("Pledged amount must match. " <> context) $
              Holding.getAmount base == routedStep.quantity.amount
            assertMsg ("Pledged instrument must match. " <> context) $
              Holding.getInstrument base == routedStep.quantity.unit
            lockedCid <- exercise baseCid Base.Acquire with
              newLockers = requestors <> senderAccount.controllers.outgoing
              context
              lockType = Base.Semaphore
            pure $ Pledge lockedCid
          PassThroughFrom (passThroughAccountKey, fromInstructionKey) -> do
            discloseAccount passThroughAccountKey actors
            passThroughAccount <- view <$>
              fetchInterfaceByKey @Account.R @Account.I passThroughAccountKey
            mustAuthorize passThroughAccount.controllers.incoming
            mustAuthorize passThroughAccount.controllers.outgoing
            mustBe Custodian passThroughAccount.custodian
            mustBe Sender passThroughAccount.owner
            fromInstruction <- snd <$> fetchByKey @Instruction fromInstructionKey
            assertMsg ("Pass-through-from instruction must be part of the batch. " <> context) $
              fromInstruction.batchId == batchId && fromInstruction.requestors == requestors
            mustBe Custodian fromInstruction.routedStep.custodian
            mustBe Sender fromInstruction.routedStep.receiver
            pure allocation
          CreditReceiver -> do
            mustAuthorize $ S.singleton routedStep.custodian
            pure allocation
          SettleOffledger -> do
            mustAuthorize $ S.fromList [routedStep.custodian, routedStep.sender]
            pure allocation
          Unallocated -> do
            mustAuthorize signedSenders
            pure allocation
        newInstructionCid <- toInterfaceContractId <$> create this with
          allocation = newAllocation
          signedSenders = if newAllocation == Unallocated then S.empty else actors
        pure (newInstructionCid, releasedCid)
      approve Instruction.Approve{actors; approval} = do
        let mustAuthorize = mustAuthorizeHelper actors
        assertMsg ("Approval must be new. " <> context) $ approval /= this.approval
        releasePreviousApproval actors
        -- approve
        case approval of
          TakeDelivery receiverAccountKey -> do
            discloseAccount receiverAccountKey actors
            receiverAccount <- view <$> fetchInterfaceByKey @Account.R @Account.I receiverAccountKey
            mustAuthorize receiverAccount.controllers.incoming
            mustBe Custodian receiverAccount.custodian
            mustBe Receiver receiverAccount.owner
          PassThroughTo (passThroughAccountKey, toInstructionKey) -> do
            discloseAccount passThroughAccountKey actors
            passThroughAccount <- view <$> fetchInterfaceByKey @Account.R @Account.I
              passThroughAccountKey
            mustAuthorize passThroughAccount.controllers.incoming
            mustAuthorize passThroughAccount.controllers.outgoing
            mustBe Custodian passThroughAccount.custodian
            mustBe Receiver passThroughAccount.owner
            toInstruction <- snd <$> fetchByKey @Instruction toInstructionKey
            assertMsg ("Pass-through-to instruction must be part of the batch. " <> context) $
              toInstruction.batchId == batchId && toInstruction.requestors == requestors
            mustBe Custodian toInstruction.routedStep.custodian
            mustBe Receiver toInstruction.routedStep.sender
          DebitSender -> do
            mustAuthorize $ S.singleton routedStep.custodian
            mustBe Custodian routedStep.receiver
          SettleOffledgerAcknowledge ->
            mustAuthorize $ S.fromList [routedStep.custodian, routedStep.receiver]
          Unapproved -> mustAuthorize signedReceivers
        toInterfaceContractId <$> create this with
          approval
          signedReceivers = if approval == Unapproved then S.empty else actors
      execute Instruction.Execute{actors} = do
        let mustAuthorize = mustAuthorizeHelper actors
        mustAuthorize requestors
        assertMsg ("Actors must intersect with settlers. " <> context) $
          not $ S.null $ actors `S.intersection` settlers
        let
          abortUnapproved = abort $ "Instruction must be approved. " <> context
          abortOnOffledgerMix =
            abort $ "Mix of on- and off-ledger settlement is not supported. " <> context
        -- execute instruction
        case (allocation, approval) of
          (Unallocated, Unapproved) ->
            abort $ "Instruction must be allocated and approved. " <> context
          (Unallocated, _) -> abort $ "instruction must be allocated " <> context
          (_, Unapproved) -> abortUnapproved
          (PassThroughFrom _, _) -> do
            -- Pass-throughs are consumed by the routedStep (*) below
            abort $ "Holding has not been passed through. " <> context
          (Pledge lockedCid, a) -> do
            baseCid <- exercise lockedCid Base.Release with context
            base <- fetch baseCid
            let senderAccountKey = getAccount base
            case a of
              TakeDelivery receiverAccountKey -> do
                let transferableCid = coerceInterfaceContractId @Transferable.I baseCid
                newBaseCid <- toInterfaceContractId <$>
                  exercise transferableCid Transferable.Transfer with
                    actors = signedSenders <> signedReceivers; newOwnerAccount = receiverAccountKey
                -- undisclose accounts
                undiscloseAccount senderAccountKey actors
                undiscloseAccount receiverAccountKey actors
                -- disclose to settlers (such that they can get the TemplateTypeRep in the Batch)
                Some <$> disclosePledge newBaseCid actors
              DebitSender -> do
                Account.exerciseInterfaceByKey @Account.I senderAccountKey routedStep.custodian
                  Account.Debit with holdingCid = baseCid
                undiscloseAccount senderAccountKey actors
                pure None
              PassThroughTo (passThroughAccountKey, toInstructionKey) -> do
                let transferableCid = coerceInterfaceContractId @Transferable.I baseCid
                baseCid <- toInterfaceContractId <$>
                  exercise transferableCid Transferable.Transfer with
                    actors = signedSenders <> signedReceivers
                    newOwnerAccount = passThroughAccountKey
                (toInstructionCid, toInstruction) <- fetchByKey @Instruction toInstructionKey
                assertMsg ("The pass-through process must be compatible between the origin and " <>
                  "destination endpoints. " <> context) $
                  toInstruction.allocation == PassThroughFrom (passThroughAccountKey, key this)
                -- (*) in case of a pass-through, the newly created holding is immediately allocated
                -- to the next routedStep
                exercise (toInterfaceContractId @Instruction.I toInstructionCid)
                  Instruction.Allocate with
                    actors = signedSenders <> signedReceivers; allocation = Pledge baseCid
                undiscloseAccount senderAccountKey actors
                undiscloseAccount passThroughAccountKey actors
                pure None
              SettleOffledgerAcknowledge -> abortOnOffledgerMix
              Unapproved -> abortUnapproved
          (CreditReceiver, a) ->
            case a of
              TakeDelivery receiverAccountKey -> do
                mustBe Custodian routedStep.sender
                baseCid <- Account.exerciseInterfaceByKey @Account.I receiverAccountKey
                  routedStep.custodian Account.Credit with quantity = routedStep.quantity
                undiscloseAccount receiverAccountKey actors
                -- disclose to actors (such that they can get the TemplateTypeRep in the Batch)
                Some <$> disclosePledge baseCid actors
              DebitSender -> do
                assertMsg ("Sender must be the same party as receiver. " <> context) $
                  routedStep.sender == routedStep.receiver
                pure None
              PassThroughTo _ -> abort $
                "Credit-receiver and pass-through-to combination is not supported. " <> context
              SettleOffledgerAcknowledge -> abortOnOffledgerMix
              Unapproved -> abortUnapproved
          (SettleOffledger, a) ->
            case a of
              SettleOffledgerAcknowledge -> pure None
              _ -> abortOnOffledgerMix
      cancel Instruction.Cancel{actors} = do
        let mustAuthorize = mustAuthorizeHelper actors
        mustAuthorize requestors
        releasePreviousApproval actors
        releasePreviousAllocation actors

-- | HIDE
data Role
  = Custodian
  | Sender
  | Receiver
  deriving (Eq, Show)

-- | HIDE
mustAuthorizeHelper : Parties -> Parties -> Update ()
mustAuthorizeHelper authorizers parties =
  assertMsg (show parties <> " must be a subset of authorizers (" <> show authorizers <> ")") $
    parties `S.isSubsetOf` authorizers

-- | HIDE
discloseAccountHelper : ((Text, Parties) -> Party -> Parties -> AccountKey -> Update a) ->
  (Text, Parties) -> AccountKey -> Parties -> Update a
discloseAccountHelper discloseAction (context, settlers) accountKey actors = do
  account <- fetchInterfaceByKey @Account.R @Account.I accountKey
  discloseAction (context, settlers) (L.head . S.toList $ actors) actors accountKey
