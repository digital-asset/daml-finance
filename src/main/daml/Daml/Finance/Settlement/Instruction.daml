-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.Instruction where

import DA.Set qualified as S (empty, fromList, intersection, isSubsetOf, null, singleton)
import Daml.Finance.Interface.Account.Account qualified as Account (Credit(..), Debit(..), I, discloseByKey, undiscloseByKey)
import Daml.Finance.Interface.Account.Util (getAccount)
import Daml.Finance.Interface.Holding.Base qualified as Base (I, getLockers)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Interface.Holding.Util (getAmount, getInstrument)
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..), Cancel(..), Execute(..), I, View(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..), InstructionKey(..), RoutedStep)
import Daml.Finance.Interface.Types.Common.Types (Id(..), Parties, PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers, disclose, undisclose)
import Daml.Finance.Interface.Util.KeyTable (UpdateWithKey, createWithKey, exercise, fetch, deleteWithState, exercise, fetchByKey, withKeyTable)
import Daml.Finance.Interface.Util.KeyTable qualified as SyntheticallyKeyed (I, View(..))
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)
import Prelude hiding (archive, create, exercise, exerciseByKey, fetch, fetchByKey, fetchFromInterface, lookup, lookupByKey)

-- | Type synonym for `Instruction`.
type T = Instruction

-- | Instruction is used to settle a single settlement `Step`. In order to settle the instruction,
-- - the sender must allocate a suitable holding
-- - the receiver must define the receiving account
template Instruction
  with
    requestors : Parties
      -- ^ Parties requesting the settlement.
    settlers : Parties
      -- ^ Any of the parties can trigger the settlement.
    batchId : Id
      -- ^ Trade identifier.
    id : Id
      -- ^ Instruction identifier.
    routedStep : RoutedStep
      -- ^ Routed settlement step.
    settlementTime : Optional Time
      -- ^ Settlement time (if any).
    allocation : Allocation
      -- ^ Allocation from the sender.
    approval : Approval
      -- ^ Approval from the receiver.
    signedSenders : Parties
      -- ^ Additional signatories, used to collect authorization.
    signedReceivers : Parties
      -- ^ Additional signatories, used to collect authorization.
    observers : PartiesMap
      -- ^ Observers.
  where
    signatory requestors, signedSenders, signedReceivers
    observer routedStep.sender, routedStep.receiver, settlers, Disclosure.flattenObservers observers

    let
      instruction = InstructionKey with requestors; batchId; id
      messageSuffix = " / instruction id = " <> show id
      context = show batchId <> "(" <> show id <> ")"
      mustBe role party : UpdateWithKey () = do
        let
          roleParty = case role of
            Custodian -> routedStep.custodian
            Sender -> routedStep.sender
            Receiver -> routedStep.receiver
        assertMsg (show party <> " must match " <> show roleParty <> "(" <>
          show role <> ")") $ party == roleParty
      discloseA = Account.discloseByKey (context, settlers)
      undiscloseA = Account.undiscloseByKey (context, settlers)
      discloseB disclosers settlers cid =
        Disclosure.disclose @Base.I @UpdateWithKey (show batchId, settlers) disclosers cid
      undiscloseB disclosers settlers cid =
        Disclosure.undisclose @Base.I (show batchId, settlers) disclosers cid
      undisclosePreviousAllocation  =
        case allocation of
          Pledge previousBaseCid -> do
            previousBase <- fetch previousBaseCid
            let previousSenderAccount = getAccount previousBase
            undiscloseA previousSenderAccount True
            viewA <- view . snd <$>
              fetchByKey @Account.I @Account.I previousSenderAccount
            undiscloseB viewA.controllers.outgoing settlers previousBaseCid
          PassThroughFrom (previousPassthroughAccount, _) ->
            undiscloseA previousPassthroughAccount True >> pure None
          _ ->
            pure None
      undisclosePreviousApproval =
        case approval of
          TakeDelivery previousReceiverAccount ->
            undiscloseA previousReceiverAccount False >> pure ()
          PassThroughTo (previousPassthroughAccount, _) ->
            undiscloseA previousPassthroughAccount False >> pure ()
          _ -> pure ()

    interface instance SyntheticallyKeyed.I for Instruction where
      view = SyntheticallyKeyed.View {}

    interface instance Disclosure.I for Instruction where
      view = Disclosure.View with
        disclosureControllers = S.fromList [routedStep.sender, routedStep.receiver]; observers
      setObservers = setObserversImpl @Instruction this
      addObservers = addObserversImpl @Instruction this
      removeObservers = removeObserversImpl @Instruction this

    interface instance Instruction.I for Instruction where
      view = Instruction.View with
        requestors
        settlers
        batchId
        id
        routedStep
        settlementTime
        signedSenders
        signedReceivers
        allocation
        approval
      getKey = instruction
      allocate Instruction.Allocate{actors; allocation; keyTable} = withKeyTable keyTable do
        let mustAuthorize = mustAuthorizeHelper actors
        -- undisclose previous allocation
        assertMsg ("allocation must be new" <> messageSuffix) $
          allocation /= this.allocation
        obCid <- undisclosePreviousAllocation
        -- allocate
        newAllocation <- case allocation of
          Pledge baseCid -> do
            base <- fetch baseCid
            let senderAccount = getAccount base
            vSenderAccount <- view . snd <$>
              fetchByKey @Account.I @Account.I senderAccount
            discloseA senderAccount True
            baseCid <- discloseB vSenderAccount.controllers.outgoing settlers baseCid
            mustAuthorize vSenderAccount.controllers.outgoing
            mustAuthorize $ Base.getLockers base
            mustBe Custodian senderAccount.custodian
            mustBe Sender senderAccount.owner
            assertMsg "amount must match" $ getAmount base == routedStep.quantity.amount
            assertMsg "instrument must match" $
              getInstrument base == routedStep.quantity.unit
            pure $ Pledge baseCid
          PassThroughFrom (passthroughAccount, fromInstruction) -> do
            (fromInstructionCid, vFromInstruction) <- fmap view <$>
              fetchByKey @Instruction.I @Instruction.I fromInstruction
            discloseA passthroughAccount True
            (passthroughAccountCid, vPassthroughAccount) <- fmap view <$>
              fetchByKey @Account.I @Account.I passthroughAccount
            mustAuthorize vPassthroughAccount.controllers.outgoing
            mustBe Custodian passthroughAccount.custodian
            mustBe Sender passthroughAccount.owner
            assertMsg "must be part of the batch" $ vFromInstruction.batchId == batchId
            mustBe Custodian vFromInstruction.routedStep.custodian
            pure allocation
          CreditReceiver -> do
            mustAuthorize $ S.singleton routedStep.custodian
            pure allocation
          SettleOffledger -> do
            mustAuthorize $ S.singleton routedStep.custodian
            mustAuthorize $ S.singleton routedStep.sender
            pure allocation
          Unallocated -> do
            mustAuthorize signedSenders
            pure allocation
        cid <- toInterfaceContractId @Instruction.I <$>
          createWithKey @Instruction.I @InstructionKey this with
            allocation = newAllocation
            signedSenders = if newAllocation == Unallocated then S.empty else actors
        pure (cid, obCid)
      approve Instruction.Approve{actors; approval; keyTable} = withKeyTable keyTable do
        let mustAuthorize = mustAuthorizeHelper actors
        -- approval
        assertMsg ("approval must be new" <> messageSuffix) $ approval /= this.approval
        -- undisclose previous approval
        undisclosePreviousApproval
        -- approve
        case approval of
          TakeDelivery receiverAccount -> do
            discloseA receiverAccount False
            (receiverAccountCid, vReceiverAccount) <- fmap view <$>
              fetchByKey @Account.I @Account.I receiverAccount
            mustAuthorize vReceiverAccount.controllers.incoming
            mustBe Custodian vReceiverAccount.custodian
            mustBe Receiver vReceiverAccount.owner
          PassThroughTo (passthroughAccount, toInstruction) -> do
            (toInstructionCid, vToInstruction) <- fmap view <$>
              fetchByKey @Instruction.I @Instruction.I toInstruction
            discloseA passthroughAccount False
            (passThroughAccountCid, vPassThroughAccount) <- fmap view <$>
              fetchByKey @Account.I @Account.I passthroughAccount
            mustAuthorize vPassThroughAccount.controllers.incoming
            mustAuthorize vPassThroughAccount.controllers.outgoing
            mustBe Custodian vPassThroughAccount.custodian
            mustBe Receiver vPassThroughAccount.owner
            assertMsg "must be part of the batch" $ toInstruction.batchId == batchId
            mustBe Custodian vToInstruction.routedStep.custodian
          DebitSender -> do
            mustAuthorize $ S.singleton routedStep.custodian
            mustBe Custodian routedStep.receiver
          SettleOffledgerAcknowledge ->
            mustAuthorize $ S.fromList [routedStep.custodian, routedStep.receiver]
          Unapproved ->
            mustAuthorize signedReceivers
        instructionCid <- toInterfaceContractId <$>
          createWithKey @Instruction.I @InstructionKey this with
            approval
            signedReceivers = if approval == Unapproved then S.empty else actors
        pure instructionCid
      execute Instruction.Execute{actors; keyTable} = withKeyTable keyTable do
        let mustAuthorize = mustAuthorizeHelper actors
        mustAuthorize requestors
        assertMsg "actors must intersect with settlers" $
          not $ S.null $ actors `S.intersection` settlers
        let
          abortUnapproved = abort $ "instruction must be approved" <> messageSuffix
          abortOnOffledgerMix =
            abort $ "mix of on- and off-ledger settlement is not supported" <> messageSuffix
        -- execute instruction
        oCid <- case (allocation, approval) of
          (Unallocated, Unapproved) -> do
            abort $ "instruction must be allocated and approved" <> messageSuffix
          (Unallocated, _) -> abort $ "instruction must be allocated" <> messageSuffix
          (_, Unapproved) -> abortUnapproved
          (PassThroughFrom _, _) -> do
            -- Pass-throughs are consumed by the routedStep (*) below
            abort $ "holding has not been passed through" <> messageSuffix
          (Pledge baseCid, a) -> do
            case a of
              TakeDelivery receiverAccount -> do
                base <- fetch baseCid
                let
                  senderAccount = getAccount base
                  transferableCid = coerceInterfaceContractId @Transferable.I baseCid
                baseCid <- toInterfaceContractId <$> exercise transferableCid
                  (Transferable.Transfer (signedSenders <> signedReceivers) receiverAccount)
                viewA <- view . snd <$>
                  fetchByKey @Account.I @Account.I receiverAccount
                -- undiclose accounts
                undiscloseA senderAccount True
                undiscloseA receiverAccount False
                -- disclose to settlers (such that they can get the TemplateTypeRep in the Batch)
                Some <$> discloseB viewA.controllers.incoming settlers baseCid
              DebitSender -> do
                base <- fetch baseCid
                let senderAccount = getAccount base
                senderAccountCid <- fst <$>
                  fetchByKey @Account.I @Account.I senderAccount
                exercise senderAccountCid Account.Debit with holdingCid = baseCid
                undiscloseA senderAccount True
                pure None
              PassThroughTo (passthroughAccount, toInstruction) -> do
                (toInstructionCid, iToInstruction) <-
                  fetchByKey @Instruction.I @Instruction.I toInstruction
                holding <- fetch baseCid
                let
                  senderAccount = getAccount holding
                  transferableCid = coerceInterfaceContractId @Transferable.I baseCid
                tCid <- toInterfaceContractId <$> exercise transferableCid
                  (Transferable.Transfer (signedSenders <> signedReceivers) passthroughAccount)
                let vToInstruction = view iToInstruction
                assertMsg "passthroughs must match" $
                  vToInstruction.allocation ==
                    PassThroughFrom (passthroughAccount, instruction)
                -- (*) in case of a pass-through, the newly created holding is immediately
                -- allocated to the next routedStep
                (toInstructionCid, toAllocation) <-
                  exercise (toInterfaceContractId @Instruction.I toInstructionCid)
                    (Instruction.Allocate (signedSenders <> signedReceivers) (Pledge tCid))
                toInstruction <- view <$> fetch toInstructionCid
                let newAllocation = toAllocation
                undiscloseA senderAccount True
                undiscloseA passthroughAccount False
                pure None
              SettleOffledgerAcknowledge ->
                abortOnOffledgerMix
              Unapproved ->
                abortUnapproved
          (CreditReceiver, a) ->
            case a of
              TakeDelivery receiverAccount -> do
                mustBe Custodian routedStep.sender
                (receiverAccountCid, vReceiverAccount) <- fmap view <$>
                  fetchByKey @Account.I @Account.I receiverAccount
                baseCid <- exercise receiverAccountCid Account.Credit with
                  quantity = routedStep.quantity
                -- undisclose
                undiscloseA receiverAccount False
                -- disclose to actors (such that they can get the TemplateTypeRep in the Batch)
                Some <$> discloseB signedReceivers actors baseCid
              DebitSender -> do
                mustBe Custodian routedStep.sender
                assertMsg ("sender must be the same party as receiver" <> messageSuffix) $
                  routedStep.sender == routedStep.receiver
                pure None
              PassThroughTo _ ->
                abort $ "passthroughs for credits are not supported" <> messageSuffix
              SettleOffledgerAcknowledge -> abortOnOffledgerMix
              Unapproved -> abortUnapproved
          (SettleOffledger, a) ->
            case a of
              SettleOffledgerAcknowledge -> pure None
              _ -> abortOnOffledgerMix
        deleteWithState @Instruction.I instruction
        pure oCid
      cancel Instruction.Cancel{actors; keyTable} = withKeyTable keyTable do
        let mustAuthorize = mustAuthorizeHelper actors
        mustAuthorize requestors
        deleteWithState @Instruction.I instruction
        undisclosePreviousApproval
        undisclosePreviousAllocation

-- | HIDE
data Role
  = Custodian
  | Sender
  | Receiver
  deriving (Eq, Show)

-- | HIDE
mustAuthorizeHelper : Parties -> Parties -> UpdateWithKey ()
mustAuthorizeHelper authorizers parties =
  assertMsg (show parties <> " must be a subset of authorizers (" <> show authorizers <> ")")
    $ parties `S.isSubsetOf` authorizers
