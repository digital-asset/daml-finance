-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.Factory where

import DA.Map qualified as M (fromList)
import DA.Set (empty)
import Daml.Finance.Interface.Settlement.Factory qualified as Factory (I, Instruct(..), View(..))
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..))
import Daml.Finance.Interface.Types.Common (Id(..), Parties)
import Daml.Finance.Settlement.Batch (Batch(..))
import Daml.Finance.Settlement.Instruction (Instruction(..))
import Daml.Finance.Util.Common (mapWithIndex)

-- | Factory template that implements the `Factory` interface.
-- It is used to create a set of settlement `Instruction`\s, and a `Batch` to atomically settle
-- them.
template Factory
  with
    provider : Party
      -- ^ Party providing the facility.
    observers : Parties
      -- ^ Observers.
  where
    signatory provider
    observer observers

    interface instance Factory.I for Factory where
      view = Factory.View with provider; observers
      instruct Factory.Instruct{instructors; settlers; id; description; contextId; routedSteps} = do
        let
          createInstruction routedStep index = Instruction with
            requestors = instructors
            settlers
            signedSenders = empty
            signedReceivers = empty
            batchId = id
            id = Id (show index)
            routedStep
            allocation = Unallocated
            approval = Unapproved
            observers = M.fromList [(show id, settlers)]
          instructions = mapWithIndex createInstruction routedSteps
          instructionIds = map (.id) instructions
        instructionCids <- mapA (fmap toInterfaceContractId . create) instructions
        batchCid <- toInterfaceContractId <$>
          create Batch with
            requestors = instructors
            settlers
            id
            description
            contextId
            routedStepsWithInstructionId = zip routedSteps instructionIds
        pure (batchCid, instructionCids)
