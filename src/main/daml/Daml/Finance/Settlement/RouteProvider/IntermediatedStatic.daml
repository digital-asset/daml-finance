-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Settlement.RouteProvider.IntermediatedStatic where

import DA.List (groupOn, head)
import DA.Map qualified as M (Map, lookup)
import DA.Optional (fromSomeNote)
import Daml.Finance.Interface.Settlement.RouteProvider qualified as RouteProvider (Discover(..), I, View(..))
import Daml.Finance.Interface.Types.Common.Types (Parties)
import Daml.Finance.Settlement.Hierarchy (Hierarchy(..), unfoldStep)

-- | Template which implements the `RouteProvider` interface.
-- It is used to discover the settlement route for each settlement `Step`, i.e., `RoutedSteps`\s.
-- For each instrument to settle as part of the batch, a hierarchy of intermediaries is specified
-- in `paths`. This hierarchy is used to generate the `RoutedStep`\s.
template IntermediatedStatic
  with
    provider : Party
      -- ^ Party providing the facility.
    observers : Parties
      -- ^ Observers.
    paths : M.Map Text Hierarchy
      -- ^ Hierarchical paths used to settle holding transfers. A path is specified for each
      --   instrument label.
  where
    signatory provider
    observer observers

    interface instance RouteProvider.I for IntermediatedStatic where
      view = RouteProvider.View with provider; observers
      discover RouteProvider.Discover{discoverors; contextId; steps} =
        let
          -- Group steps by instrument. For each group, lookup corresponding paths and expand steps
          -- according to the corresponding settlement route.
          routedSteps = mconcat $ fromSomeNote "Could not find path or route." $ mapA (\steps -> do
            let k = show (head steps).quantity.unit.id
            route <- M.lookup k paths
            mconcat <$> mapA (unfoldStep route) steps
            ) $ groupOn (.quantity.unit) steps
        in
          pure routedSteps
