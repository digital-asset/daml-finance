-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Standard.Instrument where

import DA.Set (singleton)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (GetCid(..), I, R, View(..), createReference, disclosureUpdateReference)
import Daml.Finance.Interface.Instrument.Standard.Factory qualified as Factory (Create(..), F, HasImplementation, Remove(..), View(..))
import Daml.Finance.Interface.Instrument.Standard.Instrument qualified as StandardInstrument (HasImplementation, I, View(..))
import Daml.Finance.Interface.Types.Common (Id, InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, SetObservers(..), View(..), flattenObservers)

-- | Type synonym for `Instrument`.
type T = Instrument

instance StandardInstrument.HasImplementation T
-- | Standard implementation of an Instrument which does not define any lifecycling logic.
template Instrument
  with
    depository : Party
      -- ^ The instrument's depository.
    issuer : Party
      -- ^ The instrument's issuer.
    id : Id
      -- ^ The intrument's versioned identifier.
    version : Text
      -- ^ A textual instrument version.
    description : Text
      -- ^ A description of the instrument.
    validAsOf : Time
      -- ^ Timestamp as of which the instrument is valid. This usually coincides with the timestamp of the event that creates the instrument. It usually does not coincide with ledger time.
    observers : PartiesMap
      -- ^ Observers.
  where
    signatory depository, issuer
    observer Disclosure.flattenObservers observers

    let instrumentKey = InstrumentKey with depository; issuer; id; version

    interface instance BaseInstrument.I for Instrument where
      asDisclosure = toInterface @Disclosure.I this
      view = BaseInstrument.View with depository; issuer; id; validAsOf; description; version
      getKey = instrumentKey

    interface instance StandardInstrument.I for Instrument where
      asBaseInstrument = toInterface @BaseInstrument.I this
      view = StandardInstrument.View with {}

    interface instance Disclosure.I for Instrument where
      view = Disclosure.View with disclosureControllers = singleton issuer; observers
      setObservers Disclosure.SetObservers{newObservers} = do
        cid <- toInterfaceContractId <$> create this with observers = newObservers
        BaseInstrument.disclosureUpdateReference newObservers instrumentKey cid
      archive' self = archive (coerceContractId self : ContractId Instrument)

instance Factory.HasImplementation Factory
-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance Factory.F for Factory where
      asDisclosure = toInterface @Disclosure.I this
      view = Factory.View with provider
      create' Factory.Create{instrument; validAsOf; observers; description} = do
        cid <- toInterfaceContractId <$>
          create Instrument with depository = instrument.depository; issuer = instrument.issuer; id = instrument.id; version = instrument.version; description; validAsOf; observers
        BaseInstrument.createReference instrument.depository cid
        pure cid
      remove Factory.Remove{instrument} = do
        (refCid, ref) <- fetchByKey @BaseInstrument.R instrument
        instrumentCid <- exercise refCid BaseInstrument.GetCid with viewer = instrument.depository
        archive $ fromInterfaceContractId @Instrument instrumentCid
        archive refCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers Disclosure.SetObservers{newObservers} = toInterfaceContractId <$> create this with observers = newObservers
      archive' self = archive (coerceContractId self : ContractId Instrument)
