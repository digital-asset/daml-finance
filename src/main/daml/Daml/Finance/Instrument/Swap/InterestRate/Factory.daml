-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.InterestRate.Factory where

import DA.Set (singleton)
import Daml.Finance.Instrument.Swap.InterestRate.Instrument qualified as InterestRateSwap (Instrument(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I)
import Daml.Finance.Interface.Instrument.Swap.InterestRate.Factory qualified as InterestRateSwap (Create(..), Factory, Remove(..), View(..))
import Daml.Finance.Interface.Instrument.Swap.InterestRate.Types (InterestRate(..))
import Daml.Finance.Interface.Types.Common.Types (InstrumentKey, PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Interface.Util.SyntheticKey (archiveByKey, create, withKeyTable)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)
import Prelude hiding (archive, create, exercise, exerciseByKey, fetch, fetchByKey, fetchFromInterface, lookup, lookupByKey)

-- | Type synonym for `Factory`.
type F = Factory

-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance InterestRateSwap.Factory for Factory where
      view = InterestRateSwap.View with provider
      create' InterestRateSwap.Create{interestRate = InterestRate{instrument; description;
        referenceRateId; ownerReceivesFix; fixRate; periodicSchedule; holidayCalendarIds;
        calendarDataProvider; dayCountConvention; currency; lastEventTimestamp}; observers} =
          toInterfaceContractId <$>
            create InterestRateSwap.Instrument with
              depository = instrument.depository
              issuer = instrument.issuer
              ownerReceivesFix
              id = instrument.id
              version = instrument.version
              description
              referenceRateId
              fixRate
              periodicSchedule
              holidayCalendarIds
              calendarDataProvider
              dayCountConvention
              currency
              lastEventTimestamp
              observers
      remove InterestRateSwap.Remove{instrument; keyTable} = withKeyTable keyTable do
        archiveByKey @BaseInstrument.I @InstrumentKey provider instrument

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory this
      addObservers = addObserversImpl @Factory this
      removeObservers = removeObserversImpl @Factory this
