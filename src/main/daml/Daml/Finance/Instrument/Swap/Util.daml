-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.Util where

import Daml.Finance.Data.Reference.HolidayCalendar (GetCalendar(..), HolidayCalendar)
import Daml.Finance.Data.Time.DateClock.Types (Unit(..))
import Daml.Finance.Interface.Data.Reference.HolidayCalendar (HolidayCalendarKey(..))
import Daml.Finance.Interface.Data.Reference.HolidayCalendar qualified as HolidayCalendar (I)
import Daml.Finance.Interface.Types.Date.Calendar (HolidayCalendarData)
import Daml.Finance.Interface.Types.Date.Classes (toUTCTime)
import Daml.Finance.Interface.Types.Date.Schedule (PeriodicSchedule(..), Schedule)
import Daml.Finance.Interface.Util.KeyTable (UpdateWithKey, exerciseByKey)
import Daml.Finance.Util.Date.Schedule (createSchedule)
import Prelude hiding (archive, create, exercise, exerciseByKey, fetch, fetchByKey, fetchFromInterface, lookup, lookupByKey)

-- | Maps a `Date` to `Time` using the rule in the `DateClock`.
dateToDateClockTime : Date -> Time
dateToDateClockTime = toUTCTime . Unit

-- | Retrieve holiday calendar(s) from the ledger.
getHolidayCalendars : Party -> Party -> [Text] -> UpdateWithKey [HolidayCalendarData]
getHolidayCalendars viewer provider holidayCalendarIds = forA holidayCalendarIds
  \id -> do
    let holidayCalendar = HolidayCalendarKey with provider; id
    exerciseByKey @HolidayCalendar.I @HolidayCalendar viewer holidayCalendar GetCalendar with viewer

-- | Retrieve holiday calendar(s) from the ledger and roll out a schedule.
rollSchedule : ([Text] -> UpdateWithKey [HolidayCalendarData]) -> PeriodicSchedule ->
  [Text] -> UpdateWithKey (Schedule, [HolidayCalendarData])
rollSchedule getHolidayCalendars periodicSchedule holidayCalendarIds = do
  cals <- getHolidayCalendars holidayCalendarIds
  pure (createSchedule cals periodicSchedule, cals)
