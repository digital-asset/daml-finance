-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.Asset.Instrument where

import DA.Date (daysSinceEpochToDate)
import DA.List (head)
import DA.Set (singleton)
import Daml.Finance.Claims.Util.Builders (createAssetPerformancePaymentClaims, createRatePaymentClaims)
import Daml.Finance.Data.Reference.HolidayCalendar (getHolidayCalendars, rollSchedule)
import Daml.Finance.Data.Time.DateClock (dateToDateClockTime)
import Daml.Finance.Interface.Claims.Claim qualified as Claim (GetClaims(..), I, View(..))
import Daml.Finance.Interface.Claims.Dynamic.Instrument qualified as DynamicInstrument (CreateNewVersion(..), I, View(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I, View(..), createReference, disclosureUpdateReference, instrumentKey)
import Daml.Finance.Interface.Instrument.Swap.Asset.Instrument qualified as Asset (I, View(..))
import Daml.Finance.Interface.Instrument.Swap.Asset.Types (Asset(..), Underlying)
import Daml.Finance.Interface.Instrument.Types.FloatingRate (FloatingRate)
import Daml.Finance.Interface.Types.Common.Types (HoldingStandard(..), Id(..), InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum)
import Daml.Finance.Interface.Types.Date.Schedule (PeriodicSchedule(..))
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Date.Calendar (merge)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Type synonym for `Instrument`.
type T = Instrument

-- | This template models an asset swap.
-- It pays an asset performance vs a fix interest rate at the end of every payment period.
-- It can be used to model equity swaps, some types of commodity swaps (of the form performance vs
-- rate) and swaps with the same payoff on other asset types.
-- The asset leg is described by an observable containing either unadjusted or adjusted fixings (for
-- a price return or a total return swap, respectively).
-- The template calculates the performance for each payment period using this observable.
-- For example: AAPL total return vs 2.5% fix.
template Instrument
  with
    depository : Party
      -- ^ The depository of the instrument.
    issuer : Party
      -- ^ The issuer of the instrument.
    id : Id
      -- ^ An identifier of the instrument.
    version : Text
      -- ^ The instrument's version.
    holdingStandard : HoldingStandard
      -- ^ The holding standard for holdings referencing this instrument.
    description : Text
      -- ^ A description of the instrument.
    underlyings : [Underlying]
      -- ^ The list of underlyings (the basket of reference assets for the asset swap).
    ownerReceivesRate : Bool
      -- ^ Indicate whether a holding owner of this instrument receives the rate or the asset leg of
      --   the swap.
    floatingRate : Optional FloatingRate
      -- ^ A description of the floating rate to be used (if applicable). This supports both Libor
      --   and SOFR style reference rates (using a compounded index, e.g. the SOFR Index).
    fixRate : Decimal
      -- ^ The interest rate of the fix leg. For example, in case of "AAPL total return vs 2.5% fix"
      --   this should be 0.025. This can also be used as a floating rate spread. For example, in
      --   case of "3M Libor + 0.5%" this should be 0.005.
    periodicSchedule : PeriodicSchedule
      -- ^ The schedule for the periodic swap payments.
    holidayCalendarIds : [Text]
      -- ^ The identifiers of the holiday calendars to be used for the swap payment schedule.
    calendarDataProvider : Party
      -- ^ The reference data provider to use for the holiday calendar.
    dayCountConvention : DayCountConventionEnum
      -- ^ The day count convention used to calculate day count fractions. For example: Act360.
    currency : InstrumentKey
      -- ^ The currency of the swap. For example, if the swap pays in USD this should be a USD cash
      --   instrument.
    observers : PartiesMap
      -- ^ The observers of the instrument.
    lastEventTimestamp : Time
      -- ^ (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
      --   time of creation should be used.
  where
    signatory depository, issuer
    observer Disclosure.flattenObservers observers

    interface instance Claim.I for Instrument where
      view = Claim.View with acquisitionTime = dateToDateClockTime $ daysSinceEpochToDate 0
      getClaims Claim.GetClaims{actor} = do
        -- get the initial claims tree (as of the swap's acquisition time)
        assertMsg "only one underlying currently supported" $ length underlyings == 1
        let underlying = head underlyings
        assertMsg "the total weight must be 1" $ underlying.weight == 1.0

        let
          getCalendars = getHolidayCalendars actor calendarDataProvider
          businessCenters = case floatingRate of
            Some fr -> fr.fixingDates.businessCenters
            None -> []
        fixingCals <- getHolidayCalendars issuer calendarDataProvider businessCenters
        schedule <- fst <$> rollSchedule getCalendars periodicSchedule holidayCalendarIds
        let
          useAdjustedDatesForDcf = True
          notional = 1.0
          ownerReceivesAssetLeg = not ownerReceivesRate
          rateClaims = createRatePaymentClaims dateToDateClockTime schedule periodicSchedule
            useAdjustedDatesForDcf fixRate ownerReceivesRate dayCountConvention notional currency
            floatingRate $ merge fixingCals
          assetClaims = createAssetPerformancePaymentClaims dateToDateClockTime schedule
            periodicSchedule useAdjustedDatesForDcf ownerReceivesAssetLeg dayCountConvention
            notional currency underlying.referenceAssetId
        pure [rateClaims, assetClaims]

    interface instance BaseInstrument.I for Instrument where
      view = BaseInstrument.View with
        depository; issuer; id; version; holdingStandard; description
        validAsOf = lastEventTimestamp
      getKey = BaseInstrument.instrumentKey this

    interface instance Asset.I for Instrument where
      view = Asset.View with
        asset = Asset with
          instrument = BaseInstrument.instrumentKey this
          description
          underlyings
          ownerReceivesRate
          floatingRate
          fixRate
          periodicSchedule
          holidayCalendarIds
          calendarDataProvider
          dayCountConvention
          currency
          lastEventTimestamp

    interface instance DynamicInstrument.I for Instrument where
      view = DynamicInstrument.View with lifecycler = issuer; lastEventTimestamp; prevEvents = []
      createNewVersion DynamicInstrument.CreateNewVersion{version; lastEventTimestamp} = do
        cid <- create this with version; lastEventTimestamp
        BaseInstrument.createReference issuer $ toInterfaceContractId cid
        pure $ toInterfaceContractId cid

    interface instance Disclosure.I for Instrument where
      view = Disclosure.View with disclosureControllers = singleton issuer; observers
      setObservers = setObserversImpl @Instrument this $
        Some . BaseInstrument.disclosureUpdateReference $ BaseInstrument.instrumentKey this
      addObservers = addObserversImpl @Instrument this $
        Some . BaseInstrument.disclosureUpdateReference $ BaseInstrument.instrumentKey this
      removeObservers = removeObserversImpl this .
        Some . BaseInstrument.disclosureUpdateReference $ BaseInstrument.instrumentKey this
