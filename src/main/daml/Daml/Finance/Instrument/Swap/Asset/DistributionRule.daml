-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.Asset.DistributionRule where

import DA.List (dedup, head)
import DA.Map(fromList)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (exerciseInterfaceByKey)
import Daml.Finance.Interface.Instrument.Swap.Asset.Factory qualified as AssetSwapFactory (Create(..), I(..))
import Daml.Finance.Interface.Instrument.Swap.Asset.Instrument qualified as Asset (GetView(..), I)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (Evolve(..), I, View(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..), Parties)
import Daml.Finance.Interface.Util.Common (scale)
import Daml.Finance.Lifecycle.Effect (Effect(..))
import Daml.Finance.Lifecycle.Event.Distribution qualified as Distribution (Event(..))

-- | Rule contract that defines the distribution of units of an instrument for each unit of a target
-- instrument (e.g. share or cash dividends).
-- The target instrument refers to the underlyings of an asset swap.
template DistributionRule
  with
    providers : Parties
      -- ^ Providers of the distribution rule.
    lifecycler : Party
      -- ^ Party performing the lifecycling.
    observers : Parties
      -- ^ Observers of the distribution rule.
    id : Id
      -- ^ Identifier for the rule contract.
    description : Text
      -- ^ Textual description.
    assetSwapFactoryCid : ContractId AssetSwapFactory.I
      -- ^ Factory used to create an updated version of the asset swap.
    newInstrumentObservers : [(Text, Parties)]
      -- ^ Observers used for the updated version of the asset swap.
  where
    signatory providers
    observer observers, lifecycler

    interface instance Lifecycle.I for DistributionRule where
      view = Lifecycle.View with lifecycler; id; description
      evolve Lifecycle.Evolve{eventCid; instrument} = do
        distribution <- fetch $ fromInterfaceContractId @Distribution.Event eventCid

        -- Get the instrument view
        v <- BaseInstrument.exerciseInterfaceByKey @Asset.I
          instrument
          lifecycler
          Asset.GetView with viewer = lifecycler

        assertMsg "only one dividend per event supported" $
          length distribution.perUnitDistribution == 1

        assertMsg "duplicate underlyings are not supported" $
          length v.asset.underlyings == length (dedup (map (.referenceAsset) v.asset.underlyings))

        -- Create a new asset swap instrument with an updated instrument key for the underlying that
        -- paid a dividend.
        let divUnderlyingFound = find (\u -> u.referenceAsset == distribution.targetInstrument)
              v.asset.underlyings
        case divUnderlyingFound of
          None -> pure (None, [])
          Some divUnderlying -> do
            let
              swapInstrumentAfterDiv = instrument with version = "exDiv"
              newUnderlying = divUnderlying with referenceAsset = distribution.newInstrument
              newUnderlyings = map (\u -> if u == divUnderlying then newUnderlying else u)
                v.asset.underlyings

            exercise assetSwapFactoryCid AssetSwapFactory.Create with
              asset = v.asset with
                instrument = swapInstrumentAfterDiv
                underlyings = newUnderlyings
              observers = fromList newInstrumentObservers

            -- Calculate dividend amount (divide by initial fixing)
            let
              stockDistr = head distribution.perUnitDistribution
              stockDistrAdj = scale (divUnderlying.weight / divUnderlying.initialPrice) stockDistr

            -- Create lifecycle effect
            effectCid <- toInterfaceContractId <$>
              create Effect with
                providers
                id = distribution.id
                description = distribution.description
                targetInstrument = instrument
                producedInstrument = Some swapInstrumentAfterDiv
                otherConsumed = []
                otherProduced = [stockDistrAdj]
                settlementTime = Some distribution.effectiveTime
                observers = fromList [("RuleObservers", observers)]
            pure (Some swapInstrumentAfterDiv, [effectCid])
