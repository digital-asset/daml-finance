-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.Fpml.Instrument where

import DA.Date
import DA.List (head, last)
import DA.Optional (fromSome)
import DA.Set (singleton)
import Daml.Finance.Instrument.Generic.Util
import Daml.Finance.Instrument.Swap.Fpml.Util
import Daml.Finance.Interface.Claims.Claim qualified as Claim (I, GetClaims(..), View(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I, K, View(..), disclosureUpdateReference)
import Daml.Finance.Interface.Instrument.Swap.Fpml.FpmlTypes
import Daml.Finance.Interface.Instrument.Swap.Fpml.Instrument qualified as Fpml (HasImplementation, I, View(..))
import Daml.Finance.Interface.Instrument.Swap.Fpml.Types (Fpml(..))
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (I, Evolve(..), View(..))
import Daml.Finance.Interface.Types.Common (Id(..), InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, SetObservers(..), View(..), flattenObservers)
import Prelude hiding (key)

-- | Type synonym for `Instrument`.
type T = Instrument

instance Fpml.HasImplementation T

-- | This template models a swap specified by FpML swapStream modules.
-- It can contain one or several legs of different types: fix or floating rates
template Instrument
  with
    depository : Party
      -- ^ The depository of the instrument.
    issuer : Party
      -- ^ The issuer of the instrument.
    id : Id
      -- ^ An identifier of the instrument.
    version : Text
      -- ^ The instrument's version.
    description : Text
      -- ^ A description of the instrument.
    swapStreams : [SwapStream]
      -- ^ Each element describes a stream of swap payments, for example a regular fixed or floating rate.
    issuerPartyRef : Text
      -- ^ Used to the identify which counterparty is the issuer in the swapStream.
    calendarDataProvider : Party
      -- ^ The reference data provider to use for the holiday calendar.
    currencies : [BaseInstrument.K]
      -- ^ The currencies of the different swap legs, one for each swapStream. For example, if one leg pays in USD this should be a USD cash instrument.
    observers : PartiesMap
      -- ^ The observers of the instrument.
    lastEventTimestamp : Time
      -- ^ (Market) time of the last recorded lifecycle event. If no event has occurred yet, the time of creation should be used.
  where
    signatory depository, issuer
    observer Disclosure.flattenObservers observers

    let instrumentKey = InstrumentKey with depository; issuer; id; version

    interface instance Claim.I for Instrument where
      view = Claim.View with instrument = instrumentKey; acquisitionTime = dateToDateClockTime (daysSinceEpochToDate 0) -- sufficiently early to guarantee that any time-shifted fixings are observed on the correct date
      asBaseInstrument = toInterface @BaseInstrument.I this

      getClaims Claim.GetClaims{actor} = do
        -- get the initial claims tree (as of the swap's acquisition time)
        let
          getNotionalFromOtherSwapStream ref =
            sOther.calculationPeriodAmount.calculation.notionalSchedule
              where
                s2 = find (\e -> case e.calculationPeriodAmount.calculation.notionalSchedule of
                    None -> False
                    Some notionalSchedule -> notionalSchedule.id == ref)
                  swapStreams
                sOther = fromSome s2


          calculateClaimsFromSwapStream (s, ccy) = do
            let
              c = s.calculationPeriodAmount.calculation
              calculationPeriodicSchedule = createCalculationPeriodicSchedule s.calculationPeriodDates
              paymentPeriodicSchedule = createPaymentPeriodicSchedule s
              useAdjustedDatesForDcf = True
              issuerPaysLeg = if s.payerPartyReference == s.receiverPartyReference then error "payer and receiver must be different counterparties" else (s.payerPartyReference == issuerPartyRef)

              e = s.calculationPeriodDates.effectiveDate
              t = s.calculationPeriodDates.terminationDate

            -- Verify the payment schedule
            assertMsg "The payment schedule must refer to the calculationPeriodDates of the current swapStream" $ s.paymentDates.calculationPeriodDatesReference == s.calculationPeriodDates.id
            assertMsg "Only payment schedules relative to CalculationPeriodEndDate supported" $ s.paymentDates.payRelativeTo == CalculationPeriodEndDate
            calculationSchedule <- rollPaymentSchedule calculationPeriodicSchedule s.calculationPeriodDates.calculationPeriodDatesAdjustments.businessCenters issuer calendarDataProvider
            paymentSchedule <- rollPaymentSchedule paymentPeriodicSchedule (fromSome s.paymentDates.paymentDatesAdjustments.businessCenters) issuer calendarDataProvider

            -- Verify the effectiveDate and the terminationDate
            effectiveDateAdjusted <- adjustDateAccordingToBusinessDayAdjustments e.unadjustedDate e.dateAdjustments issuer calendarDataProvider
            terminationDateAdjusted <- adjustDateAccordingToBusinessDayAdjustments t.unadjustedDate t.dateAdjustments issuer calendarDataProvider
            let h = head calculationSchedule
            assertMsg "The adjusted effectiveDate must match the adjusted start date of the first period" $ h.adjustedStartDate == effectiveDateAdjusted
            let l = last calculationSchedule
            assertMsg "The adjusted terminationDate must match the adjusted end date of the last period" $ l.adjustedEndDate == terminationDateAdjusted

            -- If there is an fxLinkedNotionalSchedule, look up the base notional from a different swap leg
            let
              constantNotionalScheduleReference = case c.fxLinkedNotionalSchedule of
                None -> None
                Some fxl -> getNotionalFromOtherSwapStream fxl.constantNotionalScheduleReference

            -- Calculate the claims from the current leg (either fix or float)
            case (c.fixedRateSchedule, c.floatingRateCalculation) of
              (Some _, None) -> calculateClaimsFromFixSwapStream s calculationPeriodicSchedule calculationSchedule paymentSchedule useAdjustedDatesForDcf issuerPaysLeg ccy
              (None, Some _) -> calculateClaimsFromFloatingSwapStream s calculationPeriodicSchedule calculationSchedule paymentSchedule constantNotionalScheduleReference useAdjustedDatesForDcf issuerPaysLeg ccy issuer calendarDataProvider
              _ -> error "leg type not supported"

        allClaims <- mapA calculateClaimsFromSwapStream $ zip swapStreams currencies
        pure $ concat allClaims

    interface instance BaseInstrument.I for Instrument where
      asDisclosure = toInterface @Disclosure.I this
      view = BaseInstrument.View with depository; issuer; id; version; description; validAsOf = lastEventTimestamp
      getKey = instrumentKey

    interface instance Fpml.I for Instrument where
      asBaseInstrument = toInterface @BaseInstrument.I this
      view = Fpml.View with fpml = Fpml with instrument = instrumentKey; description; swapStreams; issuerPartyRef; calendarDataProvider; currencies; lastEventTimestamp

    interface instance Lifecycle.I for Instrument where
      view = Lifecycle.View with lifecycler = issuer
      evolve Lifecycle.Evolve{ruleName; eventCid; timeObservableCid; observableCids} self =
        case ruleName of
          "Time" -> processClockUpdate issuer eventCid timeObservableCid self this observableCids
          other -> abort $ "Unknown lifecycle rule " <> other

    interface instance Disclosure.I for Instrument where
      view = Disclosure.View with disclosureControllers = singleton issuer; observers
      setObservers Disclosure.SetObservers{newObservers} = do
        cid <- toInterfaceContractId <$> create this with observers = newObservers
        BaseInstrument.disclosureUpdateReference newObservers instrumentKey cid
      archive' self = archive (coerceContractId self : ContractId Instrument)
