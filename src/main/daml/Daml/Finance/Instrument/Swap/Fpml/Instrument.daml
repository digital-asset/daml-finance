-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.Fpml.Instrument where

import DA.Optional (fromSome, isNone, isSome)
import DA.Set (singleton)
import Daml.Finance.Instrument.Generic.Util
import Daml.Finance.Interface.Claims.Claim qualified as Claim (I, View(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I, K, View(..), disclosureUpdateReference)
import Daml.Finance.Interface.Instrument.Swap.Fpml.Instrument qualified as Fpml (HasImplementation, I, View(..))
import Daml.Finance.Interface.Instrument.Swap.Fpml.Types (Fpml(..), SwapStream)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (I, Evolve(..), View(..))
import Daml.Finance.Interface.Types.Common (Id(..), InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayAdjustment(..))
import Daml.Finance.Interface.Types.Date.Schedule (Frequency(..), PeriodicSchedule(..))
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, SetObservers(..), View(..), flattenObservers)
import Prelude hiding (key)

-- | Type synonym for `Instrument`.
type T = Instrument

instance Fpml.HasImplementation T

-- | This template models a swap specified by FpML swapStream modules.
-- It can contain one or several legs of different types: fix or floating rates
template Instrument
  with
    depository : Party
      -- ^ The depository of the instrument.
    issuer : Party
      -- ^ The issuer of the instrument.
    id : Id
      -- ^ An identifier of the instrument.
    version : Text
      -- ^ The instrument's version.
    description : Text
      -- ^ A description of the instrument.
    swapStreams : [SwapStream]
      -- ^ Each element describes a stream of swap payments, for example a regular fixed or floating rate.
    issueDate : Date
      -- ^ The issue date of the instrument.
    issuerPartyRef : Text
      -- ^ Used to the identify which counterparty is the issuer in the swapStream.
    calendarDataProvider : Party
      -- ^ The reference data provider to use for the holiday calendar.
    currency : BaseInstrument.K
      -- ^ The currency of the swap. For example, if the swap pays in USD this should be a USD cash instrument.
    observers : PartiesMap
      -- ^ The observers of the instrument.
    lastEventTimestamp : Time
      -- ^ (Market) time of the last recorded lifecycle event. If no event has occurred yet, the time of creation should be used.
  where
    signatory depository, issuer
    observer Disclosure.flattenObservers observers

    let instrumentKey = InstrumentKey with depository; issuer; id; version

    interface instance Claim.I for Instrument where
      view = Claim.View with instrument = instrumentKey; acquisitionTime = dateToDateClockTime issueDate
      asBaseInstrument = toInterface @BaseInstrument.I this

      getClaims = do
        -- get the initial claims tree (as of the swap's acquisition time)
        let
          -- | Create a schedule for periodic payments.
          createPaymentPeriodicSchedule : SwapStream-> PeriodicSchedule
          createPaymentPeriodicSchedule s = do
            let
              periodicSchedule = PeriodicSchedule with
                businessDayAdjustment =
                  BusinessDayAdjustment with
                    calendarIds = s.calculationPeriodDates.calculationPeriodDatesAdjustments.businessCenters
                    convention = s.calculationPeriodDates.calculationPeriodDatesAdjustments.businessDayConvention
                effectiveDateBusinessDayAdjustment = None
                terminationDateBusinessDayAdjustment = None
                frequency =
                  Frequency with
                    rollConvention = s.calculationPeriodDates.calculationPeriodFrequency.rollConvention
                    period = s.calculationPeriodDates.calculationPeriodFrequency.period
                    periodMultiplier = s.calculationPeriodDates.calculationPeriodFrequency.periodMultiplier
                effectiveDate = s.calculationPeriodDates.effectiveDate
                firstRegularPeriodStartDate = s.calculationPeriodDates.firstRegularPeriodStartDate
                lastRegularPeriodEndDate = s.calculationPeriodDates.lastRegularPeriodEndDate
                stubPeriodType = None
                terminationDate = s.calculationPeriodDates.terminationDate
            periodicSchedule

          calculateClaimsFromFixSwapStream s periodicSchedule streamSchedule useAdjustedDatesForDcf issuerPaysLeg = do
            let f = fromSome s.calculationPeriodAmount.calculation.fixedRateSchedule
            pure $ createFixRatePaymentClaims streamSchedule periodicSchedule useAdjustedDatesForDcf f.initialValue issuerPaysLeg s.calculationPeriodAmount.calculation.dayCountFraction currency

          calculateClaimsFromFloatingSwapStream s periodicSchedule streamSchedule useAdjustedDatesForDcf issuerPaysLeg = do
            let f = fromSome s.calculationPeriodAmount.calculation.floatingRateCalculation
            pure $ createFloatingRatePaymentClaims streamSchedule periodicSchedule useAdjustedDatesForDcf f.spreadSchedule.initialValue issuerPaysLeg s.calculationPeriodAmount.calculation.dayCountFraction currency f.floatingRateIndex

          calculateClaimsFromSwapStream s = do
            let
              c = s.calculationPeriodAmount.calculation
              periodicSchedule = createPaymentPeriodicSchedule s
              useAdjustedDatesForDcf = True
              issuerPaysLeg = (s.payerPartyReference == issuerPartyRef)
            streamSchedule <- rollPaymentSchedule periodicSchedule s.calculationPeriodDates.calculationPeriodDatesAdjustments.businessCenters issuer calendarDataProvider
            if isSome c.fixedRateSchedule && isNone c.floatingRateCalculation then calculateClaimsFromFixSwapStream s periodicSchedule streamSchedule useAdjustedDatesForDcf issuerPaysLeg
            else if isNone c.fixedRateSchedule && isSome c.floatingRateCalculation then calculateClaimsFromFloatingSwapStream s periodicSchedule streamSchedule useAdjustedDatesForDcf issuerPaysLeg
            else error "leg type not supported"

        mapA calculateClaimsFromSwapStream swapStreams

    interface instance BaseInstrument.I for Instrument where
      asDisclosure = toInterface @Disclosure.I this
      view = BaseInstrument.View with depository; issuer; id; version; description; validAsOf = lastEventTimestamp
      getKey = instrumentKey

    interface instance Fpml.I for Instrument where
      asBaseInstrument = toInterface @BaseInstrument.I this
      view = Fpml.View with fpml = Fpml with instrument = instrumentKey; description; swapStreams; issueDate; issuerPartyRef; calendarDataProvider; currency; lastEventTimestamp

    interface instance Lifecycle.I for Instrument where
      view = Lifecycle.View with lifecycler = issuer
      evolve Lifecycle.Evolve{ruleName; settlers; eventCid; clockCid; observableCids} self =
        case ruleName of
          "Time" -> processClockUpdate settlers eventCid clockCid self this observableCids
          other -> abort $ "Unknown lifecycle rule " <> other

    interface instance Disclosure.I for Instrument where
      view = Disclosure.View with disclosureControllers = singleton issuer; observers
      setObservers Disclosure.SetObservers{newObservers} = do
        cid <- toInterfaceContractId <$> create this with observers = newObservers
        BaseInstrument.disclosureUpdateReference newObservers instrumentKey cid
      archive' self = archive (coerceContractId self : ContractId Instrument)
