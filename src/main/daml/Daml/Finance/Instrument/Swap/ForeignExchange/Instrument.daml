-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.ForeignExchange.Instrument where

import DA.Date (daysSinceEpochToDate)
import DA.Set (singleton)
import Daml.Finance.Instrument.Generic.Util
import Daml.Finance.Interface.Claims.Claim qualified as Claim (I, View(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I, K, View(..), disclosureUpdateReference)
import Daml.Finance.Interface.Instrument.Swap.ForeignExchange.Instrument qualified as ForeignExchange (HasImplementation, I, View(..))
import Daml.Finance.Interface.Instrument.Swap.ForeignExchange.Types (ForeignExchange(..))
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (I, Evolve(..), View(..))
import Daml.Finance.Interface.Types.Common (Id(..), InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, SetObservers(..), View(..), flattenObservers)
import Prelude hiding (key)

-- | Type synonym for `Instrument`.
type T = Instrument

instance ForeignExchange.HasImplementation T

-- | This template models a foreign exchange swap (FX Swap).
-- It has two legs: an initial FX transaction and a final FX transaction.
-- The instrument has a base currency and a foreign currency.
-- The convention is that the issuer pays the foreign currency in the initial transaction (and receives it in the final transaction).
-- Both FX rates and transaction dates are predetermined between the counterparties.
-- For example: USD 1000k vs EUR 1100k (fx rate: 1.10) today
--              USD 1000k vs EUR 1200k (fx rate: 1.20) in 6 months
template Instrument
  with
    depository : Party
      -- ^ The depository of the instrument.
    issuer : Party
      -- ^ The issuer of the instrument.
    id : Id
      -- ^ An identifier of the instrument.
    version : Text
      -- ^ The instrument's version.
    description : Text
      -- ^ A description of the instrument.
    firstFxRate : Decimal
      -- ^ The fx rate used for the first swap payment.
    finalFxRate : Decimal
      -- ^ The fx rate used for the final swap payment.
    issueDate : Date
      -- ^ The date when the swap was issued.
    firstPaymentDate : Date
      -- ^ The first payment date of the swap.
    maturityDate : Date
      -- ^ The final payment date of the swap.
    baseCurrency : BaseInstrument.K
      -- ^ The base currency of the swap, which will be exchanged to another (foreign) currency on the first payment date. For example, in case of USD this should be a USD cash instrument.
    foreignCurrency : BaseInstrument.K
      -- ^ The foreign currency of the swap. For example, in case of EUR this should be a EUR cash instrument.
    observers : PartiesMap
      -- ^ The observers of the instrument.
    lastEventTimestamp : Time
      -- ^ (Market) time of the last recorded lifecycle event. If no event has occurred yet, the time of creation should be used.
  where
    signatory depository, issuer
    observer Disclosure.flattenObservers observers

    let instrumentKey = InstrumentKey with depository; issuer; id; version

    interface instance Claim.I for Instrument where
      view = Claim.View with acquisitionTime = dateToDateClockTime (daysSinceEpochToDate 0)
      asBaseInstrument = toInterface @BaseInstrument.I this
      getClaims _ = do
        -- get the initial claims tree (as of the swap's acquisition time)
        let
          notional = 1.0
          baseCurrencyFirstPayment = createFxAdjustedPrincipalClaim False 1.0 notional baseCurrency firstPaymentDate
          foreignCurrencyFirstPayment = createFxAdjustedPrincipalClaim True firstFxRate notional foreignCurrency firstPaymentDate
          baseCurrencyFinalPayment = createFxAdjustedPrincipalClaim True 1.0 notional baseCurrency maturityDate
          foreignCurrencyFinalPayment = createFxAdjustedPrincipalClaim False finalFxRate notional foreignCurrency maturityDate
        pure $ [baseCurrencyFirstPayment, foreignCurrencyFirstPayment, baseCurrencyFinalPayment, foreignCurrencyFinalPayment]

    interface instance BaseInstrument.I for Instrument where
      asDisclosure = toInterface @Disclosure.I this
      view = BaseInstrument.View with depository; issuer; id; version; description; validAsOf = lastEventTimestamp
      getKey = instrumentKey

    interface instance ForeignExchange.I for Instrument where
      asBaseInstrument = toInterface @BaseInstrument.I this
      view = ForeignExchange.View with foreignExchange = ForeignExchange with instrument = instrumentKey; description; firstFxRate; finalFxRate; issueDate; firstPaymentDate; maturityDate; baseCurrency; foreignCurrency; lastEventTimestamp

    interface instance Lifecycle.I for Instrument where
      view = Lifecycle.View with lifecycler = issuer
      evolve Lifecycle.Evolve{ruleName; eventCid; timeObservableCid; observableCids} self =
        case ruleName of
          "Time" -> processClockUpdate issuer eventCid timeObservableCid self this observableCids
          other -> abort $ "Unknown lifecycle rule " <> other

    interface instance Disclosure.I for Instrument where
      view = Disclosure.View with disclosureControllers = singleton issuer; observers
      setObservers Disclosure.SetObservers{newObservers} = do
        cid <- toInterfaceContractId <$> create this with observers = newObservers
        BaseInstrument.disclosureUpdateReference newObservers instrumentKey cid
      archive' self = archive (coerceContractId self : ContractId Instrument)
