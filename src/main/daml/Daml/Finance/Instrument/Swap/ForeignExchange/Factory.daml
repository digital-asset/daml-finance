-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.ForeignExchange.Factory where

import DA.Set (singleton)
import Daml.Finance.Instrument.Swap.ForeignExchange.Instrument qualified as ForeignExchange (Instrument(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (GetCid(..), R, createReference)
import Daml.Finance.Interface.Instrument.Swap.ForeignExchange.Factory qualified as ForeignExchange (Create(..), Factory, HasImplementation, Remove(..), View(..))
import Daml.Finance.Interface.Instrument.Swap.ForeignExchange.Types (ForeignExchange(..))
import Daml.Finance.Interface.Types.Common (PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, SetObservers(..), View(..), flattenObservers)
import Prelude hiding (key)

-- | Type synonym for `Factory`.
type F = Factory

instance ForeignExchange.HasImplementation Factory
-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance ForeignExchange.Factory for Factory where
      asDisclosure = toInterface @Disclosure.I this
      view = ForeignExchange.View with provider
      create' ForeignExchange.Create
        { foreignExchange = ForeignExchange
            { instrument; description; firstFxRate; finalFxRate; issueDate; firstPaymentDate
            ; maturityDate; baseCurrency; foreignCurrency; lastEventTimestamp
            }
        ; observers
        } = do
              cid <- toInterfaceContractId <$> create ForeignExchange.Instrument
                with
                  depository = instrument.depository
                  issuer = instrument.issuer
                  id = instrument.id
                  version = instrument.version
                  description
                  firstFxRate
                  finalFxRate
                  issueDate
                  firstPaymentDate
                  maturityDate
                  baseCurrency
                  foreignCurrency
                  lastEventTimestamp
                  observers
              BaseInstrument.createReference instrument.depository cid
              pure cid
      remove ForeignExchange.Remove{instrument} = do
        (refCid, ref) <- fetchByKey @BaseInstrument.R instrument
        instrumentCid <- exercise refCid BaseInstrument.GetCid with viewer = instrument.depository
        archive $ fromInterfaceContractId @ForeignExchange.Instrument instrumentCid
        archive refCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers Disclosure.SetObservers{newObservers} =
        toInterfaceContractId <$> create this with observers = newObservers
      archive' self = archive (coerceContractId self : ContractId ForeignExchange.Instrument)
