-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.ForeignExchange.Factory where

import DA.Set (singleton)
import Daml.Finance.Instrument.Swap.ForeignExchange.Instrument qualified as ForeignExchange (Instrument(..))
import Daml.Finance.Interface.Claims.Claim qualified as Claim (GetClaims(..), I, getClaims)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (createReference)
import Daml.Finance.Interface.Instrument.Swap.ForeignExchange.Factory qualified as ForeignExchange (Create(..), Factory, View(..))
import Daml.Finance.Interface.Instrument.Swap.ForeignExchange.Types (ForeignExchange(..))
import Daml.Finance.Interface.Types.Common.Types (PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Type synonym for `Factory`.
type F = Factory

-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance ForeignExchange.Factory for Factory where
      view = ForeignExchange.View with provider
      create' ForeignExchange.Create{foreignExchange = ForeignExchange{instrument; description;
        firstFxRate; finalFxRate; issueDate; firstPaymentDate; maturityDate; baseCurrency;
        foreignCurrency; lastEventTimestamp}; observers} = do
          let
            fxSwapInstrument = ForeignExchange.Instrument with
              depository = instrument.depository
              issuer = instrument.issuer
              id = instrument.id
              version = instrument.version
              holdingStandard = instrument.holdingStandard
              description
              firstFxRate
              finalFxRate
              issueDate
              firstPaymentDate
              maturityDate
              baseCurrency
              foreignCurrency
              lastEventTimestamp
              observers
          cid <- toInterfaceContractId <$> create fxSwapInstrument
          BaseInstrument.createReference instrument.depository $ toInterfaceContractId cid
          -- Get the claims in order to run the associated checks.
          Claim.getClaims (toInterface @Claim.I fxSwapInstrument) $
            Claim.GetClaims with actor = instrument.issuer
          pure cid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None
