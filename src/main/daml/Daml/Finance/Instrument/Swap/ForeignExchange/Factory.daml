-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.ForeignExchange.Factory where

import DA.Set (singleton)
import Daml.Finance.Instrument.Swap.ForeignExchange.Instrument qualified as ForeignExchange (Instrument(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I)
import Daml.Finance.Interface.Instrument.Swap.ForeignExchange.Factory qualified as ForeignExchange (Create(..), Factory, Remove(..), View(..))
import Daml.Finance.Interface.Instrument.Swap.ForeignExchange.Types (ForeignExchange(..))
import Daml.Finance.Interface.Types.Common.Types (InstrumentKey, PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Interface.Util.SyntheticKey (archiveByKey, create, withIndexTable)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)
import Prelude hiding (archive, create, exercise, exerciseByKey, fetch, fetchByKey, fetchFromInterface, lookup, lookupByKey)

-- | Type synonym for `Factory`.
type F = Factory

-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance ForeignExchange.Factory for Factory where
      view = ForeignExchange.View with provider
      create' ForeignExchange.Create{foreignExchange = ForeignExchange{instrument; description;
        firstFxRate; finalFxRate; issueDate; firstPaymentDate; maturityDate; baseCurrency;
        foreignCurrency; lastEventTimestamp}; observers} =
          toInterfaceContractId <$>
            create ForeignExchange.Instrument with
              depository = instrument.depository
              issuer = instrument.issuer
              id = instrument.id
              version = instrument.version
              description
              firstFxRate
              finalFxRate
              issueDate
              firstPaymentDate
              maturityDate
              baseCurrency
              foreignCurrency
              lastEventTimestamp
              observers
      remove ForeignExchange.Remove{instrument; idx} = withIndexTable idx do
        archiveByKey @BaseInstrument.I @InstrumentKey provider instrument

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory this
      addObservers = addObserversImpl @Factory this
      removeObservers = removeObserversImpl @Factory this
