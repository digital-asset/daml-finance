-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.V1.CreditDefault.Factory where

import DA.Set (singleton)
import Daml.Finance.Instrument.Swap.V1.CreditDefault.Instrument qualified as CreditDefaultSwap (Instrument(..))
import Daml.Finance.Interface.Claims.V4.Claim qualified as Claim (GetClaims(..), I, getClaims)
import Daml.Finance.Interface.Instrument.Base.V4.Instrument qualified as BaseInstrument (createReference)
import Daml.Finance.Interface.Instrument.Swap.V1.CreditDefault.Factory qualified as CreditDefaultSwapFactory (Create(..), I, View(..))
import Daml.Finance.Interface.Instrument.Swap.V1.CreditDefault.Types (CreditDefault(..))
import Daml.Finance.Interface.Types.Common.V3.Types (PartiesMap)
import Daml.Finance.Interface.Util.V3.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.V4.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance CreditDefaultSwapFactory.I for Factory where
      view = CreditDefaultSwapFactory.View with provider
      create' CreditDefaultSwapFactory.Create{
        creditDefault = CreditDefault{instrument; description; defaultProbabilityReferenceId;
          recoveryRateReferenceId; ownerReceivesFix; fixRate; periodicSchedule; holidayCalendarIds;
          calendarDataProvider; dayCountConvention; currency; lastEventTimestamp};
        observers} = do
          let
            creditDefaultSwapInstrument = CreditDefaultSwap.Instrument with
              depository = instrument.depository
              issuer = instrument.issuer
              ownerReceivesFix
              id = instrument.id
              version = instrument.version
              holdingStandard = instrument.holdingStandard
              description
              defaultProbabilityReferenceId
              recoveryRateReferenceId
              fixRate
              periodicSchedule
              holidayCalendarIds
              calendarDataProvider
              dayCountConvention
              currency
              lastEventTimestamp
              observers
          cid <- toInterfaceContractId <$> create creditDefaultSwapInstrument
          BaseInstrument.createReference instrument.depository $ toInterfaceContractId cid
          -- Get the claims in order to run the associated checks (e.g. verify that the schedules
          -- are valid).
          Claim.getClaims (toInterface @Claim.I creditDefaultSwapInstrument) $
            Claim.GetClaims with actor = instrument.issuer
          pure cid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None
