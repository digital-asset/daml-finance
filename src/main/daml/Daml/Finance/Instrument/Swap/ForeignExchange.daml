-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Swap.ForeignExchange where

import DA.Set (singleton)
import Daml.Finance.Instrument.Generic.Util
import Daml.Finance.Interface.Claims.Claim qualified as Claim (I, View(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (GetCid(..), I, K, R, View(..), createReference, disclosureUpdateReference)
import Daml.Finance.Interface.Instrument.Swap.Factory.ForeignExchange qualified as ForeignExchange (Create(..), Factory, HasImplementation, Remove(..), View(..))
import Daml.Finance.Interface.Instrument.Swap.Instrument qualified as SwapInstrument (HasImplementation, I, View(..))
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (I, Evolve(..), View(..))
import Daml.Finance.Interface.Types.Common (Id(..), InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, SetObservers(..), View(..), flattenObservers)
import Prelude hiding (key)

-- | Type synonym for `Instrument`.
type T = Instrument

instance SwapInstrument.HasImplementation T

-- | This template models a foreign exchange swap (FX Swap).
-- It has two legs: an initial FX transaction and a final FX transaction.
-- Both FX rates and transaction dates are predetermined between the counterparties.
-- For example: 1000k USD vs 1100k EUR (fx rate: 1.10) today
--              1000k USD vs 1200k EUR (fx rate: 1.20) in 6 months
template Instrument
  with
    depository : Party
      -- ^ The depository of the instrument.
    issuer : Party
      -- ^ The issuer of the instrument.
    id : Id
      -- ^ An identifier of the instrument.
    version : Text
      -- ^ The instrument's version.
    description : Text
      -- ^ A description of the instrument.
    firstFxRate : Decimal
      -- ^ The fx rate used for the first swap payment.
    finalFxRate : Decimal
      -- ^ The fx rate used for the final swap payment.
    issueDate : Date
      -- ^ The date when the swap was issued.
    firstPaymentDate : Date
      -- ^ The first payment date of the swap.
    maturityDate : Date
      -- ^ The final payment date of the swap.
    baseCurrency : BaseInstrument.K
      -- ^ The base currency of the swap, which will be exchanged to another (foreign) currency on the first payment date. For example, in case of USD this should be a USD cash instrument.
    foreignCurrency : BaseInstrument.K
      -- ^ The foreign currency of the swap. For example, in case of EUR this should be a EUR cash instrument.
    observers : PartiesMap
      -- ^ The observers of the instrument.
    lastEventTimestamp : Time
      -- ^ (Market) time of the last recorded lifecycle event. If no event has occurred yet, the time of creation should be used.
  where
    signatory depository, issuer
    observer Disclosure.flattenObservers observers

    let instrumentKey = InstrumentKey with depository; issuer; id; version

    interface instance Claim.I for Instrument where
      view = Claim.View with acquisitionTime = dateToDateClockTime issueDate
      getClaims = do
        -- get the initial claims tree (as of the swap's acquisition time)
        baseCurrencyFirstPayment <- createFxLegPrincipalClaim (-1.0) 1.0 baseCurrency firstPaymentDate
        foreignCurrencyFirstPayment <- createFxLegPrincipalClaim 1.0 firstFxRate foreignCurrency firstPaymentDate
        baseCurrencyFinalPayment <- createFxLegPrincipalClaim 1.0 1.0 baseCurrency maturityDate
        foreignCurrencyFinalPayment <- createFxLegPrincipalClaim (-1.0) finalFxRate foreignCurrency maturityDate
        pure $ mconcat [baseCurrencyFirstPayment, foreignCurrencyFirstPayment, baseCurrencyFinalPayment, foreignCurrencyFinalPayment]

    interface instance BaseInstrument.I for Instrument where
      asDisclosure = toInterface @Disclosure.I this
      view = BaseInstrument.View with depository; issuer; id; version; description; validAsOf = lastEventTimestamp
      getKey = instrumentKey

    interface instance SwapInstrument.I for Instrument where
      asBaseInstrument = toInterface @BaseInstrument.I this
      view = SwapInstrument.View with {}

    interface instance Lifecycle.I for Instrument where
      view = Lifecycle.View with lifecycler = issuer
      evolve Lifecycle.Evolve{ruleName; settlers; eventCid; clockCid; observableCids} self =
        case ruleName of
          "Time" -> processClockUpdate settlers eventCid clockCid self this observableCids
          other -> abort $ "Unknown lifecycle rule " <> other

    interface instance Disclosure.I for Instrument where
      view = Disclosure.View with disclosureControllers = singleton issuer; observers
      setObservers Disclosure.SetObservers{newObservers} = do
        cid <- toInterfaceContractId <$> create this with observers = newObservers
        BaseInstrument.disclosureUpdateReference newObservers instrumentKey cid
      archive' self = archive (coerceContractId self : ContractId Instrument)

instance ForeignExchange.HasImplementation Factory
-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance ForeignExchange.Factory for Factory where
      asDisclosure = toInterface @Disclosure.I this
      view = ForeignExchange.View with provider
      create' ForeignExchange.Create{instrument; description; firstFxRate; finalFxRate; issueDate; firstPaymentDate; maturityDate; baseCurrency; foreignCurrency; lastEventTimestamp; observers} = do
        cid <- toInterfaceContractId <$> create Instrument
          with
            depository = instrument.depository
            issuer = instrument.issuer
            id = instrument.id
            version = instrument.version
            description
            firstFxRate
            finalFxRate
            issueDate
            firstPaymentDate
            maturityDate
            baseCurrency
            foreignCurrency
            lastEventTimestamp
            observers
        BaseInstrument.createReference instrument.depository cid
        pure cid
      remove ForeignExchange.Remove{instrument} = do
        (refCid, ref) <- fetchByKey @BaseInstrument.R instrument
        instrumentCid <- exercise refCid BaseInstrument.GetCid with viewer = instrument.depository
        archive $ fromInterfaceContractId @Instrument instrumentCid
        archive refCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers Disclosure.SetObservers{newObservers} = toInterfaceContractId <$> create this with observers = newObservers
      archive' self = archive (coerceContractId self : ContractId Instrument)
