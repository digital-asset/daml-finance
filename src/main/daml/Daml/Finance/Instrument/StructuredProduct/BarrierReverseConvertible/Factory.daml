-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.StructuredProduct.BarrierReverseConvertible.Factory where

import DA.Set (singleton)
import Daml.Finance.Instrument.StructuredProduct.BarrierReverseConvertible.Instrument qualified as BarrierReverseConvertible (Instrument(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I)
import Daml.Finance.Interface.Instrument.StructuredProduct.BarrierReverseConvertible.Factory qualified as BarrierReverseConvertible (Create(..), Factory, Remove(..), View(..))
import Daml.Finance.Interface.Instrument.StructuredProduct.BarrierReverseConvertible.Types (BarrierReverseConvertible(..))
import Daml.Finance.Interface.Types.Common.Types (InstrumentKey, PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Interface.Util.KeyTable (archiveByKey, create, withKeyTable)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)
import Prelude hiding (archive, create, exercise, exerciseByKey, fetch, fetchByKey, fetchFromInterface, lookup, lookupByKey)

-- | Type synonym for `Factory`.
type F = Factory

-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance BarrierReverseConvertible.Factory for Factory where
      view = BarrierReverseConvertible.View with provider
      create' BarrierReverseConvertible.Create{
        barrierReverseConvertible = BarrierReverseConvertible{instrument; description;
          referenceAssetId; strike; barrier; barrierStartDate; expiryDate; currency;
          lastEventTimestamp; couponRate; periodicSchedule; holidayCalendarIds;
          calendarDataProvider; dayCountConvention; notional; prevEvents};
        observers} = toInterfaceContractId <$>
          create BarrierReverseConvertible.Instrument with
            depository = instrument.depository
            issuer = instrument.issuer
            id = instrument.id
            version = instrument.version
            description
            referenceAssetId
            strike
            barrier
            barrierStartDate
            expiryDate
            couponRate
            periodicSchedule
            holidayCalendarIds
            calendarDataProvider
            dayCountConvention
            currency
            notional
            lastEventTimestamp
            observers
            prevEvents
      remove BarrierReverseConvertible.Remove{instrument; keyTable} = withKeyTable keyTable do
        archiveByKey @BaseInstrument.I @InstrumentKey provider instrument

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory this
      addObservers = addObserversImpl @Factory this
      removeObservers = removeObserversImpl @Factory this
