-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.StructuredProduct.BarrierReverseConvertible.Factory where

import DA.Set (singleton)
import Daml.Finance.Instrument.StructuredProduct.BarrierReverseConvertible.Instrument qualified as BarrierReverseConvertible (Instrument(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (GetCid(..), R, createReference)
import Daml.Finance.Interface.Instrument.StructuredProduct.BarrierReverseConvertible.Factory qualified as BarrierReverseConvertible (Create(..), Factory, Remove(..), View(..))
import Daml.Finance.Interface.Instrument.StructuredProduct.BarrierReverseConvertible.Types (BarrierReverseConvertible(..))
import Daml.Finance.Interface.Types.Common.Types (PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Type synonym for `Factory`.
type F = Factory

-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance BarrierReverseConvertible.Factory for Factory where
      view = BarrierReverseConvertible.View with provider
      create' BarrierReverseConvertible.Create{
        barrierReverseConvertible = BarrierReverseConvertible{instrument; description;
          referenceAssetId; strike; barrier; barrierStartDate; expiryDate; currency;
          lastEventTimestamp; couponRate; periodicSchedule; holidayCalendarIds;
          calendarDataProvider; dayCountConvention; notional; prevEvents};
        observers} = do
          cid <- toInterfaceContractId <$>
            create BarrierReverseConvertible.Instrument with
              depository = instrument.depository
              issuer = instrument.issuer
              id = instrument.id
              version = instrument.version
              description
              referenceAssetId
              strike
              barrier
              barrierStartDate
              expiryDate
              couponRate
              periodicSchedule
              holidayCalendarIds
              calendarDataProvider
              dayCountConvention
              currency
              notional
              lastEventTimestamp
              observers
              prevEvents
          BaseInstrument.createReference instrument.depository $ toInterfaceContractId cid
          pure cid
      remove BarrierReverseConvertible.Remove{instrument} = do
        (refCid, ref) <- fetchByKey @BaseInstrument.R instrument
        instrumentCid <- exercise refCid BaseInstrument.GetCid with viewer = instrument.depository
        archive $ fromInterfaceContractId @BarrierReverseConvertible.Instrument instrumentCid
        archive refCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None
