-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.StructuredProduct.BarrierReverseConvertible.Instrument where

import DA.Date (daysSinceEpochToDate)
import DA.Set (singleton)
import Daml.Finance.Claims.Util.Builders (createBarrierEuropeanCashClaim, createFixRatePaymentClaims, createFxAdjustedPrincipalClaim)
import Daml.Finance.Data.Reference.HolidayCalendar (getHolidayCalendars, rollSchedule)
import Daml.Finance.Data.Time.DateClock (dateToDateClockTime)
import Daml.Finance.Interface.Claims.Claim qualified as Claim (GetClaims(..), I, View(..))
import Daml.Finance.Interface.Claims.Dynamic.Instrument qualified as DynamicInstrument (CreateNewVersion(..), I, View(..))
import Daml.Finance.Interface.Claims.Types (EventData)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I, View(..), createReference, disclosureUpdateReference)
import Daml.Finance.Interface.Instrument.Option.Types (BarrierTypeEnum(..), OptionTypeEnum(..))
import Daml.Finance.Interface.Instrument.StructuredProduct.BarrierReverseConvertible.Instrument qualified as BarrierReverseConvertible (I, View(..))
import Daml.Finance.Interface.Instrument.StructuredProduct.BarrierReverseConvertible.Types (BarrierReverseConvertible(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum)
import Daml.Finance.Interface.Types.Date.Schedule (PeriodicSchedule(..))
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Type synonym for `Instrument`.
type T = Instrument

-- | This template models a Barrier Reverse Convertible (BRC) instrument.
-- It can be seen as a long fixed coupon bond and a short Down-And-In put option.
template Instrument
  with
    depository : Party
      -- ^ The depository of the instrument.
    issuer : Party
      -- ^ The issuer of the instrument.
    id : Id
      -- ^ An identifier of the instrument.
    version : Text
      -- ^ The instrument's version.
    description : Text
      -- ^ A description of the instrument.
    referenceAssetId : Text
      -- ^ The reference asset ID. For example, in case of an option on AAPL this should be a valid
      --   reference to the AAPL fixings to be used for the payoff calculation.
    strike : Decimal
      -- ^ The strike price of the option.
    barrier : Decimal
      -- ^ The barrier level of the option.
    barrierStartDate : Date
      -- ^ The start date for barrier observations.
    expiryDate : Date
      -- ^ The expiry date of the instrument.
    couponRate : Decimal
      -- ^ The fixed coupon rate, per annum. For example, in case of a "3.5% p.a coupon" this should
      --   be 0.035.
    periodicSchedule : PeriodicSchedule
      -- ^ The schedule for the periodic coupon payments.
    holidayCalendarIds : [Text]
      -- ^ The identifiers of the holiday calendars to be used for the coupon schedule.
    calendarDataProvider : Party
      -- ^ The reference data provider to use for the holiday calendar.
    dayCountConvention : DayCountConventionEnum
      -- ^ The day count convention used to calculate day count fractions. For example: Act360.
    currency : InstrumentKey
      -- ^ The currency of the product. For example, if the product pays in USD this should be a USD
      --   cash instrument.
    notional : Decimal
      -- ^ The notional of the product. This is the face value corresponding to one unit of the
      --   product. For example, if one product unit corresponds to 1000 USD, this should be 1000.0.
    observers : PartiesMap
      -- ^ The observers of the instrument.
    lastEventTimestamp : Time
      -- ^ (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
      --   time of creation should be used.
    prevEvents : [EventData]
      -- ^ A list of previous events that have been lifecycled on this instrument so far.
  where
    signatory depository, issuer
    observer Disclosure.flattenObservers observers

    interface instance Claim.I for Instrument where
      view = Claim.View with acquisitionTime = dateToDateClockTime $ daysSinceEpochToDate 0
      getClaims Claim.GetClaims{actor} = do
        -- get the initial claims tree (as of the instrument's acquisition time)

        assertMsg "option expiry date must match last coupon date" $
          expiryDate == periodicSchedule.terminationDate

        -- Calculate option claim
        let
          ownerReceives = False
          optionType = Put
          barrierType = DownAndIn
          referenceLevel = Some strike
          call = optionType == Call
          (down, out) = case barrierType of
            UpAndOut -> (False, True)
            DownAndOut -> (True, True)
            UpAndIn -> (False, False)
            DownAndIn -> (True, False)
          optionsClaim = createBarrierEuropeanCashClaim dateToDateClockTime ownerReceives strike
            referenceAssetId currency expiryDate call barrier barrierStartDate down out
            referenceLevel notional
          getCalendars = getHolidayCalendars actor calendarDataProvider

        -- Calculate bond claim
        (schedule, _) <- rollSchedule getCalendars periodicSchedule holidayCalendarIds
        let
          useAdjustedDatesForDcf = True
          ownerReceives = True
          fxAdjustment = 1.0
          couponClaims = createFixRatePaymentClaims dateToDateClockTime schedule periodicSchedule
            useAdjustedDatesForDcf couponRate ownerReceives dayCountConvention notional currency
          redemptionClaim = createFxAdjustedPrincipalClaim dateToDateClockTime ownerReceives
            fxAdjustment notional currency periodicSchedule.terminationDate

        -- Return BRC claim as option + bond claim
        pure [optionsClaim, couponClaims, redemptionClaim]

    interface instance BaseInstrument.I for Instrument where
      view = BaseInstrument.View with
        depository; issuer; id; version; description; validAsOf = lastEventTimestamp
      getKey = instrumentKey this

    interface instance BarrierReverseConvertible.I for Instrument where
      view = BarrierReverseConvertible.View with
        barrierReverseConvertible = BarrierReverseConvertible with
          instrument = instrumentKey this
          description
          referenceAssetId
          strike
          barrier
          barrierStartDate
          expiryDate
          couponRate
          periodicSchedule
          holidayCalendarIds
          calendarDataProvider
          dayCountConvention
          currency
          notional
          lastEventTimestamp
          prevEvents

    interface instance DynamicInstrument.I for Instrument where
      view = DynamicInstrument.View with lifecycler = issuer; lastEventTimestamp; prevEvents
      createNewVersion DynamicInstrument.CreateNewVersion{version; lastEventTimestamp;
        prevEvents} = do
          cid <- create this with version; lastEventTimestamp; prevEvents
          BaseInstrument.createReference issuer $ toInterfaceContractId cid
          pure $ toInterfaceContractId cid

    interface instance Disclosure.I for Instrument where
      view = Disclosure.View with disclosureControllers = singleton issuer; observers
      setObservers = setObserversImpl @Instrument this $
        Some (BaseInstrument.disclosureUpdateReference (instrumentKey this))
      addObservers = addObserversImpl @Instrument this $
        Some (BaseInstrument.disclosureUpdateReference (instrumentKey this))
      removeObservers = removeObserversImpl this $
        Some (BaseInstrument.disclosureUpdateReference (instrumentKey this))

-- | HIDE
instrumentKey : Instrument -> InstrumentKey
instrumentKey Instrument {depository; issuer; id; version} =
  InstrumentKey with depository; issuer; id; version
