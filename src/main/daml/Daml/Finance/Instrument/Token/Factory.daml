-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Token.Factory where

import DA.Set (singleton)
import Daml.Finance.Instrument.Token.Instrument qualified as Token (Instrument(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (I)
import Daml.Finance.Interface.Instrument.Token.Factory qualified as Token (Create(..), Factory, HasImplementation, Remove(..), View(..))
import Daml.Finance.Interface.Instrument.Token.Types (Token(..))
import Daml.Finance.Interface.Types.Common.Types (InstrumentKey, PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Interface.Util.Index qualified as Index (HasIndexTable(..), fetchInterfaceByKey)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Type synonym for `Factory`.
type F = Factory

instance Token.HasImplementation Factory
-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance Token.Factory for Factory where
      asDisclosure = toInterface @Disclosure.I this
      view = Token.View with provider
      create' Token.Create{token = Token{instrument; validAsOf; description}; observers} =
        toInterfaceContractId <$>
          create Token.Instrument with
            depository = instrument.depository
            issuer = instrument.issuer
            id = instrument.id
            version = instrument.version
            description
            validAsOf
            observers
      remove Token.Remove{instrument; idx} = do
        instrumentCid <- fst <$> Index.fetchInterfaceByKey @Instrument.I @InstrumentKey
          @Instrument.I idx instrument
        archive $ fromInterfaceContractId @Token.Instrument instrumentCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory this
      addObservers = addObserversImpl @Factory this
      removeObservers = removeObserversImpl @Factory this
