-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Token.Instrument where

import DA.Set (singleton)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I, View(..), disclosureUpdateReference)
import Daml.Finance.Interface.Instrument.Token.Instrument qualified as Token (HasImplementation, I, View(..))
import Daml.Finance.Interface.Instrument.Token.Types (Token(..))
import Daml.Finance.Interface.Types.Common.Types (Id, InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Type synonym for `Instrument`.
type T = Instrument

instance Token.HasImplementation T
-- | Implementation of an Instrument which does not define any lifecycling logic.
template Instrument
  with
    depository : Party
      -- ^ The instrument's depository.
    issuer : Party
      -- ^ The instrument's issuer.
    id : Id
      -- ^ The intrument's versioned identifier.
    version : Text
      -- ^ A textual instrument version.
    description : Text
      -- ^ A description of the instrument.
    validAsOf : Time
      -- ^ Timestamp as of which the instrument is valid. This usually coincides with the timestamp
      --   of the event that creates the instrument. It usually does not coincide with ledger time.
    observers : PartiesMap
      -- ^ Observers.
  where
    signatory depository, issuer
    observer Disclosure.flattenObservers observers

    let instrument = InstrumentKey with depository; issuer; id; version

    interface instance BaseInstrument.I for Instrument where
      asDisclosure = toInterface @Disclosure.I this
      view = BaseInstrument.View with depository; issuer; id; validAsOf; description; version
      getKey = instrument

    interface instance Token.I for Instrument where
      asBaseInstrument = toInterface @BaseInstrument.I this
      view = Token.View with token = Token with instrument; description; validAsOf

    interface instance Disclosure.I for Instrument where
      view = Disclosure.View with disclosureControllers = singleton issuer; observers
      setObservers = setObserversImpl this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
      addObservers = addObserversImpl @Instrument this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
      removeObservers = removeObserversImpl this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
