-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Generic.Util where

import ContingentClaims.Core.Claim (Claim(..), Inequality(..), give, one, scale, upTo, when, until)
import ContingentClaims.Core.Observation (Observation(..))
import DA.Date
import DA.Record (HasField)
import DA.Set (fromList)
import DA.Text (sha256)
import Daml.Finance.Data.Reference.HolidayCalendar (GetCalendar(..), HolidayCalendar, HolidayCalendarKey(..))
import Daml.Finance.Interface.Claims.Claim qualified as Claim (I, getAcquisitionTime)
import Daml.Finance.Interface.Claims.Types (C, Deliverable, Observable, TaggedClaim(..))
import Daml.Finance.Claims.Util (isZero', toTime')
import Daml.Finance.Claims.Util.Lifecycle (lifecycle, lifecycleClaims, netOnTag, splitPending, timeEvent)
import Daml.Finance.Interface.Data.NumericObservable qualified as NumericObservable (I)
import Daml.Finance.Interface.Data.TimeObservable qualified as TimeObservable (I)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (I, createReference, getKey)
import Daml.Finance.Interface.Lifecycle.Effect qualified as Effect (I)
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (I)
import Daml.Finance.Interface.Types.Common (Id)
import Daml.Finance.Interface.Types.Date.Calendar
import Daml.Finance.Interface.Types.Date.Classes (toUTCTime)
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum)
import Daml.Finance.Interface.Types.Date.Schedule (PeriodicSchedule(..), Schedule, SchedulePeriod)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, flattenObservers)
import Daml.Finance.Lifecycle.Effect (Effect(..))
import Daml.Finance.Lifecycle.Types (Unit(..))
import Daml.Finance.Util.Date.DayCount (calcPeriodDcf)
import Daml.Finance.Util.Date.Schedule (createSchedule)
import Prelude hiding (key)

-- | Retrieve holiday calendar(s) from the ledger.
getHolidayCalendars : [Text] -> Party -> Party -> Update [HolidayCalendarData]
getHolidayCalendars holidayCalendarIds actor calendarDataAgency = do
  let
    -- get a holiday calendar from the ledger
    getCalendar holidayCalendarId = do
      exerciseByKey @HolidayCalendar holCalKey GetCalendar with viewer = actor where
        holCalKey = HolidayCalendarKey with
          agency = calendarDataAgency
          entity = holidayCalendarId
  -- Get the holiday calendars
  mapA getCalendar holidayCalendarIds

-- | Retrieve holiday calendar(s) from the ledger and roll out the payment schedule.
rollPaymentSchedule : PeriodicSchedule -> [Text] -> Party -> Party -> Update Schedule
rollPaymentSchedule periodicSchedule holidayCalendarIds actor calendarDataAgency = do
  cals <- getHolidayCalendars holidayCalendarIds actor calendarDataAgency
  pure $ createSchedule cals periodicSchedule

-- | Convert the claims to UTCTime and tag them.
prepareAndTagClaims : [Claim Date Decimal Deliverable Observable] -> Text -> TaggedClaim
prepareAndTagClaims cs tag = do
  let claim = mapClaimToUTCTime $ mconcat cs
  TaggedClaim with tag; claim

-- FIXED_RATE_BOND_COUPON_CLAIMS_BEGIN
createFixRatePaymentClaimsList : [SchedulePeriod] -> PeriodicSchedule -> Bool -> Decimal -> Bool -> DayCountConventionEnum -> Decimal -> Deliverable -> [Claim Date Decimal Deliverable Observable]
createFixRatePaymentClaimsList schedule periodicSchedule useAdjustedDatesForDcf couponRate issuerPays dayCountConvention notional cashInstrumentCid = do
  let
    couponDatesAdjusted = map (.adjustedEndDate) schedule
    couponAmounts = map (\p -> couponRate * (calcPeriodDcf dayCountConvention p useAdjustedDatesForDcf periodicSchedule.terminationDate periodicSchedule.frequency)) schedule
    couponClaimAmounts = mconcat $ zipWith (\d a -> when (TimeGte d) $ scale (Const a) $ scale (Const notional) $ one cashInstrumentCid) couponDatesAdjusted couponAmounts
    couponClaims = if issuerPays then couponClaimAmounts else give couponClaimAmounts
  pure couponClaims
-- FIXED_RATE_BOND_COUPON_CLAIMS_END

-- | Calculate a fix rate amount for each payment date and create claims.
createFixRatePaymentClaims : [SchedulePeriod] -> PeriodicSchedule -> Bool -> Decimal -> Bool -> DayCountConventionEnum -> Decimal -> Deliverable -> TaggedClaim
createFixRatePaymentClaims schedule periodicSchedule useAdjustedDatesForDcf couponRate issuerPays dayCountConvention notional cashInstrumentCid = do
  let couponClaims = createFixRatePaymentClaimsList schedule periodicSchedule useAdjustedDatesForDcf couponRate issuerPays dayCountConvention notional cashInstrumentCid
  prepareAndTagClaims couponClaims "Fix rate payment"

-- | Calculate a fix rate amount (if a credit event has not yet happened) for each payment date and create claims.
createConditionalCreditFixRatePaymentClaims : [SchedulePeriod] -> PeriodicSchedule -> Bool -> Decimal -> Bool -> DayCountConventionEnum -> Decimal -> Deliverable -> Observable -> TaggedClaim
createConditionalCreditFixRatePaymentClaims schedule periodicSchedule useAdjustedDatesForDcf couponRate issuerPays dayCountConvention notional cashInstrumentCid defaultProbabilityReferenceId = do
  let
    couponClaims = createFixRatePaymentClaimsList schedule periodicSchedule useAdjustedDatesForDcf couponRate issuerPays dayCountConvention notional cashInstrumentCid
    creditEvent = Lte (Const 1.0, Observe defaultProbabilityReferenceId)
    couponClaimUntilCreditEvent = until creditEvent $ mconcat couponClaims
  prepareAndTagClaims [couponClaimUntilCreditEvent] "Fix rate payment (unless credit event has occurred)"

-- | Calculate a (1-recoveryRate) payment if a credit event just happened and create claims.
createCreditEventPaymentClaims : Bool -> Decimal -> Deliverable -> Observable -> Observable -> PeriodicSchedule -> TaggedClaim
createCreditEventPaymentClaims issuerPays notional cashInstrumentCid defaultProbabilityReferenceId recoveryRateReferenceId periodicSchedule = do
  let
    creditEvent = Lte (Const 1.0, Observe defaultProbabilityReferenceId)
    payoffAmount = scale (Const 1.0 - Observe recoveryRateReferenceId) $ scale (Const notional) $ one cashInstrumentCid
    payoff = if issuerPays then payoffAmount else give payoffAmount
    creditEventClaim =
      when (TimeGte periodicSchedule.effectiveDate)
        $ when creditEvent
        $ when (upTo periodicSchedule.terminationDate)
        payoff
  prepareAndTagClaims [creditEventClaim] "Credit event payment"

-- FLOATING_RATE_BOND_COUPON_CLAIMS_BEGIN
-- | Calculate a floating rate amount for each payment date and create claims.
-- The floating rate is always observed on the first day of each payment period and used for the corresponding payment on the last day of that payment period.
-- This means that the calculation agent needs to provide such an Observable, irrespective of
-- the kind of reference rate used (e.g. a forward looking LIBOR or a backward looking SOFR-COMPOUND).
createFloatingRatePaymentClaims : [SchedulePeriod] -> PeriodicSchedule -> Bool -> Decimal -> Bool -> DayCountConventionEnum -> Decimal -> Deliverable -> Observable -> TaggedClaim
createFloatingRatePaymentClaims schedule periodicSchedule useAdjustedDatesForDcf floatingRateSpread issuerPays dayCountConvention notional cashInstrumentCid referenceRateId = do
  let
    couponClaimAmounts = mconcat $ map (\p ->
      when (TimeGte p.adjustedStartDate) $ scale ((Observe referenceRateId + Const floatingRateSpread) * (Const (calcPeriodDcf dayCountConvention p useAdjustedDatesForDcf periodicSchedule.terminationDate periodicSchedule.frequency))) $
      when (TimeGte p.adjustedEndDate) $ scale (Const notional) $ one cashInstrumentCid) schedule
    couponClaims = if issuerPays then couponClaimAmounts else give couponClaimAmounts
  prepareAndTagClaims [couponClaims] "Floating rate payment"
-- FLOATING_RATE_BOND_COUPON_CLAIMS_END

-- ASSET_PERFORMANCE_CLAIMS_BEGIN
-- | Calculate the asset performance for each payment date and create claims.
-- The performance is calculated using the reference asset from the start date to the end date of each payment period.
-- The reference asset Observable needs to contain the appropriate type of fixings:
--   unadjusted fixings in case of a price return asset swap
--   adjusted fixings in case of a total return asset swap
createAssetPerformancePaymentClaims : [SchedulePeriod] -> PeriodicSchedule -> Bool -> Bool -> DayCountConventionEnum -> Decimal -> Deliverable -> Observable -> TaggedClaim
createAssetPerformancePaymentClaims schedule periodicSchedule useAdjustedDatesForDcf issuerPays dayCountConvention notional cashInstrumentCid referenceAssetId = do
  let
    assetClaimAmounts = mconcat $ map (\p ->
      when (TimeGte p.adjustedStartDate) $ scale (Const 1.0 / Observe referenceAssetId) $
      when (TimeGte p.adjustedEndDate) $ scale (Observe referenceAssetId) $ scale (Const notional) $ one cashInstrumentCid) schedule
    correctionClaimAmounts = mconcat $ map (\p ->
      when (TimeGte p.adjustedEndDate) $ scale (Const notional) $ one cashInstrumentCid) schedule
    assetClaims = if issuerPays then assetClaimAmounts else give assetClaimAmounts
    correctionAssetClaims = if issuerPays then give correctionClaimAmounts else correctionClaimAmounts
  prepareAndTagClaims [assetClaims, correctionAssetClaims] "Asset performance payment"
-- ASSET_PERFORMANCE_CLAIMS_END

-- FIXED_RATE_BOND_REDEMPTION_CLAIM_BEGIN
-- | Create an FX adjusted principal claim.
-- This can be used for both FX swaps (using the appropriate FX rate) and single currency bonds (setting the FX rate to 1.0).
createFxAdjustedPrincipalClaim : Bool -> Decimal -> Decimal -> Deliverable -> Date -> TaggedClaim
createFxAdjustedPrincipalClaim issuerPays fxRateMultiplier notional cashInstrumentCid valueDate = do
  let
    fxLegClaimAmount = when (TimeGte valueDate) $ scale (Const fxRateMultiplier) $ scale (Const notional) $ one cashInstrumentCid
    fxLegClaim = if issuerPays then fxLegClaimAmount else give fxLegClaimAmount
  prepareAndTagClaims [fxLegClaim] "Principal payment"
-- FIXED_RATE_BOND_REDEMPTION_CLAIM_END

-- | HIDE
-- Type-class constraint verified by the bond templates.
type IsBond t =
  ( HasToInterface t Disclosure.I
  , HasToInterface t Instrument.I
  , HasToInterface t Claim.I
  , HasToInterface t Lifecycle.I
  , HasField "id" t Id
  , HasField "version" t Text
  , HasField "issuer" t Party
  , HasField "lastEventTimestamp" t Time
  , HasCreate t
  )

-- | Maps a `Date` to `Time` using the rule in the `DateClock`.
-- From the Daml.Finance.Instrument.Generics.Test file, but could not import here (duplicated for now).
-- In the termsheet only date is mentioned, but lifecycle logic is based on time.
dateToDateClockTime : Date -> Time
dateToDateClockTime = toUTCTime . Unit

-- | Maps a `Date` claim to a `Time` claim using the rule in the `DateClock`.
-- From the Daml.Finance.Instrument.Generics.Test file, but could not import here (duplicated for now).
-- In the termsheet only date is mentioned, but lifecycle logic is based on time.
mapClaimToUTCTime : Claim Date Decimal Deliverable Observable -> C
mapClaimToUTCTime =
  let dateToTime = toUTCTime . Unit
  in toTime' dateToTime

-- BOND_PROCESS_CLOCK_UPDATE_INITAL_CLAIMS_BEGIN
-- | Rule to process a clock update event.
processClockUpdate : IsBond t => Party -> ContractId Event.I -> ContractId TimeObservable.I -> ContractId Lifecycle.I -> t -> [ContractId NumericObservable.I] -> Update (ContractId Lifecycle.I, [ContractId Effect.I])
processClockUpdate actor eventCid _ self instrument observableCids = do
  v <- view <$> fetch eventCid
  let
    claimInstrument = toInterface @Claim.I instrument
    acquisitionTime = Claim.getAcquisitionTime claimInstrument
  -- BOND_PROCESS_CLOCK_UPDATE_INITAL_CLAIMS_END
  -- BOND_PROCESS_CLOCK_UPDATE_LIFECYCLE_FASTFORWARD_BEGIN
  -- Recover claims tree as of the lastEventTimestamp. For a bond, this just requires lifecycling as of the lastEventTimestamp.
  claims <- Prelude.fst <$> lifecycle actor observableCids claimInstrument [timeEvent instrument.lastEventTimestamp]
  -- BOND_PROCESS_CLOCK_UPDATE_LIFECYCLE_FASTFORWARD_END

  -- BOND_PROCESS_CLOCK_UPDATE_LIFECYCLE_BEGIN
  -- Lifecycle
  (remaining, pending) <- lifecycleClaims observableCids acquisitionTime claims [timeEvent v.eventTime]

  let
    pendingAfterNetting = netOnTag pending
    (otherConsumed, otherProduced) = splitPending pendingAfterNetting
  if remaining == claims && null pendingAfterNetting then
    pure (self, [])
  else do
    let
      currentKey = Instrument.getKey $ toInterface @Instrument.I instrument
      settlementDate = toDateUTC v.eventTime -- TODO remove this dependency
      newKey = currentKey with version = sha256 $ show remaining
    newInstrumentCid <- create instrument with lastEventTimestamp = v.eventTime; version = newKey.version
    Instrument.createReference instrument.issuer $ toInterfaceContractId newInstrumentCid
    effectCid <- toInterfaceContractId <$> create Effect with
      providers = fromList [currentKey.issuer, currentKey.depository]
      id = v.id
      description = v.description
      targetInstrument = currentKey
      producedInstrument = if isZero' remaining then None else Some newKey
      otherConsumed
      otherProduced
      settlementDate
      observers = Disclosure.flattenObservers . (.observers) . view $ toInterface @Disclosure.I instrument
    pure (toInterfaceContractId newInstrumentCid, [effectCid])
  -- BOND_PROCESS_CLOCK_UPDATE_LIFECYCLE_END
