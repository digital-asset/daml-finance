-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Generic.Election where

import DA.Map qualified as M (fromList)
import DA.Set qualified as S (fromList, singleton)
import DA.Text (sha256)
import Daml.Finance.Interface.Account.Util (getCustodian, getOwner)
import Daml.Finance.Interface.Claims.Types (C)
import Daml.Finance.Interface.Holding.Base qualified as Base (I)
import Daml.Finance.Interface.Holding.Util (getAmount, getInstrument)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (K)
import Daml.Finance.Interface.Instrument.Generic.Election qualified as Election (HasImplementation, I, View(..))
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I, View(..))
import Daml.Finance.Interface.Types.Common (Id(..), Parties, PartiesMap)
import Daml.Finance.Interface.Util.Common (verify)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, SetObservers(..), View(..), flattenObservers)

-- | Type synonym for `Election`.
type T = Election

instance Election.HasImplementation T
-- | An election, such as the exercise of an option.
template Election
  with
    elector : Party
      -- ^ Entity making the election.
    counterparty : Party
      -- ^ Faces the `elector` in the `Holding`.
    provider : Party
      -- ^ The provider of the election is an entity that has the authority to process the election
      --   and create a new instrument version.
    id : Id
      -- ^ Election identifier.
    description : Text
      -- ^ A human readable description of the election.
    instrument : Instrument.K
      -- ^ The instrument to which the election applies.
    amount : Decimal
      -- ^ Number of units of instrument to which the election applies.
    claim : C
      -- ^ the elected sub-tree.
    electorIsOwner : Bool
      -- ^ `True` if the elector is the owner of a claim, `False` otherwise.
    electionTime : Time
      -- ^ Time at which the election is put forward.
    observers : PartiesMap
      -- ^ A set of observers.
  where
    signatory elector, provider
    observer Disclosure.flattenObservers observers

    interface instance Election.I for Election where
      asEvent = toInterface @Event.I this
      view = Election.View with
        id; description; amount; elector; counterparty; electorIsOwner; observers; provider
        instrument; claim
      archive' = archive . fromInterfaceContractId @Election

    interface instance Disclosure.I for Election where
      view = Disclosure.View with disclosureControllers = S.singleton elector; observers
      setObservers Disclosure.SetObservers{newObservers} =
        toInterfaceContractId <$> create this with observers = newObservers
      archive' = archive . fromInterfaceContractId @Election

    interface instance Event.I for Election where
      view = Event.View with
        providers = S.singleton provider
        id
        description
        eventTime = electionTime

-- | Helper contract to delegate the right to create `Election`\s referencing a specific
-- `Instrument`. The provider delegates the ability to create `Election`\s to any party that has
-- visibility on the `ElectionFactory` contract. In order to create the `Election`, a valid
-- `Holding` must be presented which identifies the choice controller as either the owner or the
-- custodian to the `Holding`.
template ElectionFactory
  with
    provider : Party
      -- ^ The provider.
    id : Id
      -- ^ Election identifier
    description : Text
      -- ^ A human readable description of the election claim.
    claim : C
      -- ^ the elected sub-tree
    observers : Parties
      -- ^ observers of the contract
    instrument : Instrument.K
      -- ^ key of the instrument to which the election applies
  where
    signatory provider
    observer observers

    nonconsuming choice CreateElection : ContractId Election
      -- ^ Creates an `Election` on an instrument. This choice must be exercised by the `elector`.
      with
        elector : Party
          -- ^ Entity making the election.
        electionTime : Time
          -- ^ Time at which the election is put forward.
        holdingCid : ContractId Base.I
          -- ^ A holding used to verify that the elector is entitled to make the election.
        amount : Decimal
          -- ^ Number of units of instrument to which the election applies.
      controller elector
      do
        holding <- fetch holdingCid
        verify (getInstrument holding == instrument)
          "Invalid holding presented : reference instrument"
        verify (getAmount holding >= amount) $
          "Invalid holding presented : amount is " <> show (getAmount holding) <>
          " but elected amount is " <> show amount
        let
          custodian = getCustodian holding
          owner = getOwner holding
          electorIsOwner
            | elector == owner = True
            | elector == custodian = False
            | otherwise = error "Election can be made only on behalf of the owner or the custodian"
        create Election with
          id = Id . sha256 $ show id <> show claim <> show elector <> show electionTime
          description
          claim
          electionTime
          electorIsOwner
          elector
          counterparty = if electorIsOwner then custodian else owner
          instrument
          amount
          observers = M.fromList [("Holders", S.fromList [ custodian, owner, provider] )]
          provider
