-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Generic.Election where

import DA.Set qualified as S (singleton)
import Daml.Finance.Interface.Claims.Types (C)
import Daml.Finance.Interface.Instrument.Generic.Election qualified as Election (HasImplementation, I, View(..))
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I, View(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey, PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, SetObservers(..), View(..), flattenObservers)

-- | Type synonym for `Election`.
type T = Election

instance Election.HasImplementation T
-- | An election, such as the exercise of an option.
template Election
  with
    elector : Party
      -- ^ Entity making the election.
    counterparty : Party
      -- ^ Faces the `elector` in the `Holding`.
    provider : Party
      -- ^ The provider of the election is an entity that has the authority to process the election
      --   and create a new instrument version.
    id : Id
      -- ^ Election identifier.
    description : Text
      -- ^ A human readable description of the election.
    instrument : InstrumentKey
      -- ^ The instrument to which the election applies.
    amount : Decimal
      -- ^ Number of units of instrument to which the election applies.
    claim : C
      -- ^ the elected sub-tree.
    electorIsOwner : Bool
      -- ^ `True` if the elector is the owner of a claim, `False` otherwise.
    electionTime : Time
      -- ^ Time at which the election is put forward.
    observers : PartiesMap
      -- ^ A set of observers.
  where
    signatory elector, provider
    observer Disclosure.flattenObservers observers

    interface instance Election.I for Election where
      asEvent = toInterface @Event.I this
      view = Election.View with
        id; description; amount; elector; counterparty; electorIsOwner; observers; provider
        instrument; claim
      archive' = archive . fromInterfaceContractId @Election

    interface instance Disclosure.I for Election where
      view = Disclosure.View with disclosureControllers = S.singleton elector; observers
      setObservers Disclosure.SetObservers{newObservers} =
        toInterfaceContractId <$> create this with observers = newObservers
      archive' = archive . fromInterfaceContractId @Election

    interface instance Event.I for Election where
      view = Event.View with
        providers = S.singleton provider
        id
        description
        eventTime = electionTime
