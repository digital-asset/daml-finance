-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Generic.Factory where

import DA.Set (singleton)
import Daml.Finance.Instrument.Generic.Instrument (Instrument(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (GetCid(..), R, createReference)
import Daml.Finance.Interface.Instrument.Generic.Factory qualified as GenericFactory (Create(..), F, HasImplementation, Remove(..), View(..))
import Daml.Finance.Interface.Types.Common.Types (PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Type synonym for `Factory`.
type F = Factory

instance GenericFactory.HasImplementation Factory
-- | Factory template for generic instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance GenericFactory.F for Factory where
      asDisclosure = toInterface @Disclosure.I this
      view = GenericFactory.View with provider
      create' GenericFactory.Create
        {instrument; description; claims, acquisitionTime, lastEventTimestamp; observers} = do
          cid <- toInterfaceContractId <$>
            create Instrument with
              depository = instrument.depository; issuer = instrument.issuer; id = instrument.id
              version = instrument.version; description; claims; acquisitionTime; lastEventTimestamp
              observers
          Instrument.createReference instrument.depository cid
          pure cid
      remove GenericFactory.Remove{instrument} = do
        (refCid, ref) <- fetchByKey @Instrument.R instrument
        instrumentCid <- exercise refCid Instrument.GetCid with viewer = instrument.depository
        archive $ fromInterfaceContractId @Instrument instrumentCid
        archive refCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None
