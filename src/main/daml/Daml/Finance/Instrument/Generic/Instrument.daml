-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Generic.Instrument where

import DA.Date (toDateUTC)
import DA.Set (fromList, singleton)
import DA.Text (sha256)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (HasImplementation, I, R, View(..), createReference, disclosureUpdateReference, getKey)
import Daml.Finance.Interface.Instrument.Generic.Election qualified as Election (ApplyElection(..), Exercisable(..), ExercisableHasImplementation, ExercisableView(..), getElectionTime)
import Daml.Finance.Interface.Instrument.Generic.HasClaims qualified as HasClaims (I, View(..), getClaims)
import Daml.Finance.Interface.Instrument.Generic.Types (C, taggedClaim)
import Daml.Finance.Interface.Instrument.Generic.Util.Claims (isZero')
import Daml.Finance.Interface.Instrument.Generic.Util.Claims.Lifecycle (electionEvent, lifecycle, splitPending, timeEvent)
import Daml.Finance.Interface.Lifecycle.Clock qualified as Clock (I)
import Daml.Finance.Interface.Lifecycle.Effect qualified as Effect (I)
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I)
import Daml.Finance.Interface.Data.Observable qualified as Observable (I)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (I, Evolve(..), View(..))
import Daml.Finance.Interface.Types.Common (Id, InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Types.Date.Classes (toUTCTime)
import Daml.Finance.Interface.Util.Common (verify)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, SetObservers(..), View(..), flattenObservers)
import Daml.Finance.Lifecycle.Effect (Effect(..))
import Daml.Finance.Lifecycle.ElectionEffect (ElectionEffect(..))
import Prelude hiding (exercise, key)

-- | Type synonym for `Instrument`.
type T = Instrument

instance Instrument.HasImplementation T
instance Election.ExercisableHasImplementation T

-- | An instrument representing a generic payoff, modelled using the Contingent Claims library.
-- The responsibility for processing lifecycle events as well as elections is delegated to the issuer, who is hence responsible for providing the correct `Observable`\s.
template Instrument
  with
    depository : Party
      -- ^ The instrument depository.
    issuer : Party
      -- ^ The instrument issuer.
    id : Id
      -- ^ The identifier with corresponding version.
    version : Text
      -- ^ The instrument's version.
    description : Text
      -- ^ A human readable description of the instrument.
    claims : C
      -- ^ The claim tree.
    acquisitionTime : Time
      -- ^ The claim's acquisition time. This usually corresponds to the start date of the contract.
    observers : PartiesMap
      -- ^ Observers.
    lastEventTimestamp : Time
      -- ^ (Market) time of the last recorded lifecycle event. If no event has occurred yet, the time of creation should be used.
  where
    signatory depository, issuer
    observer Disclosure.flattenObservers observers

    let instrumentKey = InstrumentKey with depository; issuer; id; version

    interface instance HasClaims.I for Instrument where
      view = HasClaims.View with acquisitionTime
      getClaims = pure [taggedClaim "Generic" this.claims]

    interface instance Instrument.I for Instrument where
      asDisclosure = toInterface @Disclosure.I this
      view = Instrument.View with depository; issuer; id; version; description; validAsOf = lastEventTimestamp
      getKey = instrumentKey

    interface instance Lifecycle.I for Instrument where
      view = Lifecycle.View with lifecycler = issuer
      evolve Lifecycle.Evolve{ruleName; settler; eventCid; clockCid; observableCids} self =
        case ruleName of
          "Time" -> processClockUpdate settler eventCid clockCid self this observableCids
          other -> abort $ "Unknown lifecycle rule " <> other

    interface instance Disclosure.I for Instrument where
      view = Disclosure.View with disclosureControllers = singleton issuer; observers
      setObservers Disclosure.SetObservers{newObservers} = do
        cid <- toInterfaceContractId <$> create this with observers = newObservers
        Instrument.disclosureUpdateReference newObservers instrumentKey cid
      archive' self = archive (coerceContractId self : ContractId Instrument)

    interface instance Election.Exercisable for Instrument where
      asLifecycle = toInterface @Lifecycle.I this
      view = Election.ExercisableView with lifecycler = issuer
      applyElection Election.ApplyElection{clockCid; electionCid; observableCids; settler} self = do
        currentTime <- toUTCTime <$> fetch clockCid
        election <- fetch electionCid
        instrumentClaim <- HasClaims.getClaims $ toInterface @HasClaims.I this
        let
          v = view election
          electionTime = Election.getElectionTime election
          election = electionEvent electionTime v.electorIsOwner v.claim
        verify (currentTime == electionTime) $ "Election time " <> show electionTime <> " is different than Current time " <> show currentTime
        (remaining, pending) <- lifecycle observableCids (toInterface this) [election]
        if remaining == instrumentClaim && null pending then
          pure (coerceContractId self, [])
        else do
          let
            settlementDate = toDateUTC electionTime
            currentKey = Instrument.getKey $ toInterface this
            newKey = currentKey with version = sha256 $ show remaining
            [claim] = fmap (.claim) remaining
          existingRefCidOpt <- lookupByKey @Instrument.R newKey
          newInstrumentCid <-
            case existingRefCidOpt of
              Some existingRefCid -> do
                ref <- fetch existingRefCid
                pure ref.cid
              None -> do
                instCid <- create this with claims = claim; lastEventTimestamp = electionTime; version = newKey.version
                Instrument.createReference issuer $ toInterfaceContractId instCid
                pure $ toInterfaceContractId instCid
          let (consumed, produced) = splitPending pending
          effectCid <- toInterfaceContractId <$> create ElectionEffect with
            provider = fromList [ this.issuer, this.depository ]
            settler
            custodian = if v.electorIsOwner then v.counterparty else v.elector
            owner = if v.electorIsOwner then v.elector else v.counterparty
            id = v.id
            description = v.description
            targetInstrument = currentKey
            producedInstrument = if isZero' remaining then None else Some newKey
            amount = v.amount
            consumed
            produced
            settlementDate
            observers = v.observers
          pure (coerceContractId newInstrumentCid, [effectCid])

-- | HIDE
-- | Rule to process a clock update event.
processClockUpdate : Party -> ContractId Event.I -> ContractId Clock.I -> ContractId Lifecycle.I -> Instrument -> [ContractId Observable.I] -> Update (ContractId Lifecycle.I, [ContractId Effect.I])
processClockUpdate settler eventCid _ self instrument observableCids = do
  v <- view <$> fetch eventCid
  claims <- HasClaims.getClaims $ toInterface @HasClaims.I instrument
  (remaining, pending) <- lifecycle observableCids (toInterface instrument) [timeEvent v.eventTime]
  if remaining == claims && null pending then
    pure (self, [])
  else do
    let
      settlementDate = toDateUTC v.eventTime
      currentKey = Instrument.getKey $ toInterface instrument
      [claim] = fmap (.claim) remaining
      newKey = currentKey with version = sha256 $ show remaining
    existingRefCidOpt <- lookupByKey @Instrument.R newKey
    newInstrumentCid <-
      case existingRefCidOpt of
        Some existingRefCid -> do
          ref <- fetch existingRefCid
          pure ref.cid
        None -> do
          instCid <- create instrument with claims = claim; lastEventTimestamp = v.eventTime; version = newKey.version
          Instrument.createReference instrument.issuer $ toInterfaceContractId instCid
          pure $ toInterfaceContractId instCid
    let (consumed, produced) = splitPending pending
    effectCid <- toInterfaceContractId <$> create Effect with
      provider = fromList [ instrument.issuer, instrument.depository ]
      settler
      id = v.id
      description = v.description
      targetInstrument = currentKey
      producedInstrument = if isZero' remaining then None else Some newKey
      consumed
      produced
      settlementDate
      observers = Disclosure.flattenObservers instrument.observers
    pure (coerceContractId newInstrumentCid, [effectCid])
