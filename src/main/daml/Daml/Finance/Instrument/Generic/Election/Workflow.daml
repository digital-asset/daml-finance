module Daml.Finance.Instrument.Generic.Election.Workflow where

import DA.Map qualified as M (fromList)
import DA.Set qualified as S (fromList)
import DA.Text (sha256)
import Daml.Finance.Interface.Claims.Types (C)
import Daml.Finance.Interface.Holding.Base qualified as Base (I)
import Daml.Finance.Interface.Instrument.Generic.Election qualified as Election (I)
import Daml.Finance.Interface.Instrument.Generic.Election.Factory qualified as Election (Create(..), F)
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey, Parties)
import Daml.Finance.Interface.Util.Common (verify)

-- | Helper contract to delegate the right to create `Election`\s referencing a specific
-- `Instrument`. The provider delegates the ability to create `Election`\s to any party that has
-- visibility on the `ElectionOffer` contract. In order to create the `Election`, a valid
-- `Holding` must be presented which identifies the choice controller as either the owner or the
-- custodian to the `Holding`.
template ElectionOffer
  with
    provider : Party
      -- ^ The provider.
    id : Id
      -- ^ Election identifier.
    description : Text
      -- ^ A human readable description of the election claim.
    claim : C
      -- ^ The elected sub-tree.
    observers : Parties
      -- ^ Observers of the contract.
    instrument : InstrumentKey
      -- ^ Key of the instrument to which the election applies.
    factoryCid : ContractId Election.F
      -- ^ Election factory contract.
  where
    signatory provider
    observer observers

    nonconsuming choice CreateElection : ContractId Election.I
      -- ^ Creates an `Election` on an instrument. This choice must be exercised by the `elector`.
      with
        elector : Party
          -- ^ Entity making the election.
        electionTime : Time
          -- ^ Time at which the election is put forward.
        holdingCid : ContractId Base.I
          -- ^ A holding used to verify that the elector is entitled to make the election.
        amount : Decimal
          -- ^ Number of units of instrument to which the election applies.
      controller elector
      do
        holding <- view <$> fetch holdingCid
        verify (holding.instrument == instrument)
          "Invalid holding presented : reference instrument"
        verify (holding.amount >= amount) $
          "Invalid holding presented : amount is " <> show holding.amount <>
          " but elected amount is " <> show amount
        let
          custodian = holding.account.custodian
          owner = holding.account.owner
          electorIsOwner
            | elector == owner = True
            | elector == custodian = False
            | otherwise = error "Election can be made only on behalf of the owner or the custodian"
        exercise factoryCid Election.Create with
          actors = S.fromList [elector, provider]
          id = Id . sha256 $ show id <> show claim <> show elector <> show electionTime
          description
          claim
          electionTime
          electorIsOwner
          elector
          counterparty = if electorIsOwner then custodian else owner
          instrument
          amount
          observers = M.fromList [("Holders", S.fromList [ custodian, owner, provider] )]
          lifecycler = provider
