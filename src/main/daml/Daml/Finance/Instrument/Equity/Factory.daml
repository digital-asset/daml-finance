-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Equity.Factory where

import DA.Set (singleton)
import Daml.Finance.Instrument.Equity.Instrument (Instrument(..))
import Daml.Finance.Interface.Common.Disclosure qualified as Disclosure (I, SetObservers(..), View(..))
import Daml.Finance.Interface.Common.Types (Observers)
import Daml.Finance.Interface.Common.Util (flattenObservers)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (GetCid(..), R, createReference)
import Daml.Finance.Interface.Instrument.Equity.Factory qualified as EquityFactory (Create(..), F, HasImplementation, Remove(..), View(..))

-- | Type synonym for `Facotory`.
type F = Factory

instance EquityFactory.HasImplementation Factory

-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : Observers
      -- ^ The factory's observers.
  where
    signatory provider
    observer flattenObservers observers

    implements EquityFactory.F where
      asDisclosure = toInterface @Disclosure.I this
      view = EquityFactory.View with provider
      create' EquityFactory.Create{instrument; validAsOf; observers} = do
        cid <- toInterfaceContractId <$> create Instrument with depository = instrument.depository; issuer = instrument.issuer; id = instrument.id; validAsOf; observers
        Instrument.createReference instrument.depository cid
        pure cid
      remove EquityFactory.Remove{instrument}  = do
        (refCid, ref) <- fetchByKey @Instrument.R instrument
        instrumentCid <- exercise refCid Instrument.GetCid with viewer = instrument.depository
        archive $ fromInterfaceContractId @Instrument instrumentCid
        archive refCid

    implements Disclosure.I where
      view = Disclosure.View with disclosureControllers = singleton $ singleton provider; observers
      setObservers Disclosure.SetObservers{newObservers} = toInterfaceContractId <$> create this with observers = newObservers
      archive' self = archive (coerceContractId self : ContractId Instrument)
