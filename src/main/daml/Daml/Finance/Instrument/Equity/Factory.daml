-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Equity.Factory where

import DA.Set (singleton)
import Daml.Finance.Instrument.Equity.Instrument qualified as Equity (Instrument(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I)
import Daml.Finance.Interface.Instrument.Equity.Factory qualified as Equity (Create(..), F, Remove(..), View(..))
import Daml.Finance.Interface.Types.Common.Types (InstrumentKey, PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Interface.Util.KeyTable (archiveByKey, create, withKeyTable)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)
import Prelude hiding (archive, create, exercise, exerciseByKey, fetch, fetchByKey, fetchFromInterface, lookup, lookupByKey)

-- | Type synonym for `Factory`.
type F = Factory

-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance Equity.F for Factory where
      view = Equity.View with provider
      create' Equity.Create{instrument; description; validAsOf; observers} =
        toInterfaceContractId <$>
          create Equity.Instrument with
            depository = instrument.depository
            issuer = instrument.issuer
            id = instrument.id
            version = instrument.version
            description
            validAsOf
            observers
      remove Equity.Remove{instrument; keyTable} = withKeyTable keyTable do
        archiveByKey @BaseInstrument.I @InstrumentKey provider instrument

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory this
      addObservers = addObserversImpl @Factory this
      removeObservers = removeObserversImpl @Factory this
