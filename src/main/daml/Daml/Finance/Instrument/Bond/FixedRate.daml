-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Bond.FixedRate where

import DA.Set (singleton)
import Daml.Finance.Instrument.Bond.Util
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (GetCid(..), HasImplementation, I, K, R, View(..), createReference, disclosureUpdateReference)
import Daml.Finance.Interface.Instrument.Bond.FixedRate qualified as FixedRate (Create(..), Factory, HasImplementation, Remove(..), View(..))
import Daml.Finance.Interface.Instrument.Generic.HasClaims qualified as HasClaims (I, View(..))
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (I, Evolve(..), View(..))
import Daml.Finance.Interface.Types.Common (Id(..), InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum)
import Daml.Finance.Interface.Types.Date.Schedule (PeriodicSchedule(..))
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, SetObservers(..), View(..), flattenObservers)
import Prelude hiding (key)

-- | Type synonym for `Instrument`.
type T = Instrument

instance Instrument.HasImplementation T

-- FIXED_RATE_BOND_TEMPLATE_BEGIN
-- | This template models a fixed rate bond.
-- It pays a fixed coupon rate at the end of every coupon period.
template Instrument
  with
    depository : Party
      -- ^ The depository of the instrument.
    issuer : Party
      -- ^ The issuer of the instrument.
    id : Id
      -- ^ The identifier of the instrument.
    version : Text
      -- ^ The instrument's version.
    description : Text
      -- ^ A description of the instrument.
    couponRate : Decimal
      -- ^ The fixed coupon rate, per annum. For example, in case of a "3.5% p.a coupon" this should be 0.035.
    periodicSchedule : PeriodicSchedule
      -- ^ The schedule for the periodic coupon payments.
    holidayCalendarIds : [Text]
      -- ^ The identifier of the holiday calendar to be used for the coupon schedule.
    calendarDataProvider : Party
      -- ^ The reference data provider to use for the holiday calendar.
    dayCountConvention : DayCountConventionEnum
      -- ^ The day count convention used to calculate day count fractions. For example: Act360.
    currency : Instrument.K
      -- ^ The currency of the bond. For example, if the bond pays in USD this should be a USD cash instrument.
    observers : PartiesMap
      -- ^ The observers of the instrument.
    lastEventTimestamp : Time
      -- ^ (Market) time of the last recorded lifecycle event. If no event has occurred yet, the time of creation should be used.
      -- FIXED_RATE_BOND_TEMPLATE_END
  where
    signatory depository, issuer
    observer Disclosure.flattenObservers observers

    let instrumentKey = InstrumentKey with depository; issuer; id; version

    -- FIXED_RATE_BOND_HASCLAIMS_BEGIN
    interface instance HasClaims.I for Instrument where
      view = HasClaims.View with acquisitionTime = dateToDateClockTime periodicSchedule.effectiveDate
      getClaims = do
        -- get the initial claims tree (as of the bond's acquisition time)
        schedule <- rollPaymentSchedule periodicSchedule holidayCalendarIds issuer calendarDataProvider
        let
          useAdjustedDatesForDcf = True
          weightMultiplier = 1.0
        couponClaims <- createFixRatePaymentClaims schedule periodicSchedule useAdjustedDatesForDcf couponRate weightMultiplier dayCountConvention currency
        redemptionClaim <- createRedemptionClaim currency periodicSchedule.terminationDate
        pure $ mconcat [couponClaims, redemptionClaim]
    -- FIXED_RATE_BOND_HASCLAIMS_END

    interface instance Instrument.I for Instrument where
      asDisclosure = toInterface @Disclosure.I this
      view = Instrument.View with depository; issuer; id; version; description; validAsOf = lastEventTimestamp
      getKey = instrumentKey

    interface instance Lifecycle.I for Instrument where
      view = Lifecycle.View with lifecycler = issuer
      evolve Lifecycle.Evolve{ruleName; settler; eventCid; clockCid; observableCids} self =
        case ruleName of
          "Time" -> processClockUpdate settler eventCid clockCid self this observableCids
          other -> abort $ "Unknown lifecycle rule " <> other

    interface instance Disclosure.I for Instrument where
      view = Disclosure.View with disclosureControllers = singleton issuer; observers
      setObservers Disclosure.SetObservers{newObservers} = do
        cid <- toInterfaceContractId <$> create this with observers = newObservers
        Instrument.disclosureUpdateReference newObservers instrumentKey cid
      archive' self = archive (coerceContractId self : ContractId Instrument)

instance FixedRate.HasImplementation Factory
-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance FixedRate.Factory for Factory where
      asDisclosure = toInterface @Disclosure.I this
      view = FixedRate.View with provider
      create' FixedRate.Create{instrument; description; couponRate; periodicSchedule; holidayCalendarIds; calendarDataProvider; dayCountConvention; currency; lastEventTimestamp; observers} = do
        cid <- toInterfaceContractId <$> create Instrument
          with
            depository = instrument.depository
            issuer = instrument.issuer
            id = instrument.id
            version = instrument.version
            description
            couponRate
            periodicSchedule
            holidayCalendarIds
            calendarDataProvider
            dayCountConvention
            currency
            lastEventTimestamp
            observers
        Instrument.createReference instrument.depository cid
        pure cid
      remove FixedRate.Remove{instrument} = do
        (refCid, ref) <- fetchByKey @Instrument.R instrument
        instrumentCid <- exercise refCid Instrument.GetCid with viewer = instrument.depository
        archive $ fromInterfaceContractId @Instrument instrumentCid
        archive refCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers Disclosure.SetObservers{newObservers} = toInterfaceContractId <$> create this with observers = newObservers
      archive' self = archive (coerceContractId self : ContractId Instrument)
