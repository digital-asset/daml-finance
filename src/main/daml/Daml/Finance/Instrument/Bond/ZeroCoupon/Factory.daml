-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Bond.ZeroCoupon.Factory where

import DA.Set (singleton)
import Daml.Finance.Instrument.Bond.ZeroCoupon.Instrument qualified as ZeroCoupon (Instrument(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (GetCid(..), R, createReference)
import Daml.Finance.Interface.Instrument.Bond.ZeroCoupon.Factory qualified as ZeroCoupon (Create(..), Factory, HasImplementation, Remove(..), View(..))
import Daml.Finance.Interface.Instrument.Bond.ZeroCoupon.Types (ZeroCoupon(..))
import Daml.Finance.Interface.Types.Common (PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, SetObservers(..), View(..), flattenObservers)
import Prelude hiding (key)

-- | Type synonym for `Factory`.
type F = Factory

instance ZeroCoupon.HasImplementation Factory
-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance ZeroCoupon.Factory for Factory where
      asDisclosure = toInterface @Disclosure.I this
      view = ZeroCoupon.View with provider
      create' ZeroCoupon.Create{zeroCoupon = ZeroCoupon{instrument; description; issueDate; maturityDate; currency; lastEventTimestamp}; observers} = do
        cid <- toInterfaceContractId <$> create ZeroCoupon.Instrument
          with
            depository = instrument.depository
            issuer = instrument.issuer
            id = instrument.id
            version = instrument.version
            description
            issueDate
            maturityDate
            currency
            lastEventTimestamp
            observers
        BaseInstrument.createReference instrument.depository cid
        pure cid
      remove ZeroCoupon.Remove{instrument} = do
        (refCid, ref) <- fetchByKey @BaseInstrument.R instrument
        instrumentCid <- exercise refCid BaseInstrument.GetCid with viewer = instrument.depository
        archive $ fromInterfaceContractId @ZeroCoupon.Instrument instrumentCid
        archive refCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers Disclosure.SetObservers{newObservers} = toInterfaceContractId <$> create this with observers = newObservers
      archive' self = archive (coerceContractId self : ContractId ZeroCoupon.Instrument)
