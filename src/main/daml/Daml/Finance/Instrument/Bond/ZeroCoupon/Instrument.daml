-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Bond.ZeroCoupon.Instrument where

import DA.Date (daysSinceEpochToDate)
import DA.Set (singleton)
import Daml.Finance.Claims.Util.Builders
import Daml.Finance.Instrument.Bond.Util
import Daml.Finance.Interface.Claims.Claim qualified as Claim (I, GetClaims(..), View(..))
import Daml.Finance.Interface.Claims.Dynamic.Instrument qualified as DynamicInstrument (I, CreateNewVersion(..), View(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I, K, View(..), createReference, disclosureUpdateReference)
import Daml.Finance.Interface.Instrument.Bond.ZeroCoupon.Instrument qualified as ZeroCoupon (HasImplementation, I, View(..))
import Daml.Finance.Interface.Instrument.Bond.ZeroCoupon.Types (ZeroCoupon(..))
import Daml.Finance.Interface.Types.Common.Types (Id, InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, SetObservers(..), View(..), flattenObservers)
import Prelude hiding (key)

-- | Type synonym for `Instrument`.
type T = Instrument

instance ZeroCoupon.HasImplementation T

-- | This template models a zero coupon bond.
-- It does not pay any coupons, only the redemption amount at maturity.
template Instrument
  with
    depository : Party
      -- ^ The depository of the instrument.
    issuer : Party
      -- ^ The issuer of the instrument.
    id : Id
      -- ^ An identifier of the instrument.
    version : Text
      -- ^ The instrument's version.
    description : Text
      -- ^ A description of the instrument.
    issueDate : Date
      -- ^ The date when the bond was issued.
    maturityDate : Date
      -- ^ The redemption date of the bond.
    currency : BaseInstrument.K
      -- ^ The currency of the bond. For example, if the bond pays in USD this should be a USD cash
      -- instrument.
    observers : PartiesMap
      -- ^ The observers of the instrument.
    lastEventTimestamp : Time
      -- ^ (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
      -- time of creation should be used.
  where
    signatory depository, issuer
    observer Disclosure.flattenObservers observers

    let instrument = InstrumentKey with depository; issuer; id; version

    interface instance Claim.I for Instrument where
      view = Claim.View with acquisitionTime = dateToDateClockTime (daysSinceEpochToDate 0)
      asBaseInstrument = toInterface @BaseInstrument.I this
      getClaims Claim.GetClaims{} =
        -- get the initial claims tree (as of the bond's acquisition time)
        let
          notional = 1.0
          ownerReceives = True
          fxAdjustment = 1.0
          redemptionClaim =
            createFxAdjustedPrincipalClaim dateToDateClockTime ownerReceives fxAdjustment notional currency maturityDate
        in
          pure $ [redemptionClaim]

    interface instance BaseInstrument.I for Instrument where
      asDisclosure = toInterface @Disclosure.I this
      view = BaseInstrument.View with
        depository; issuer; id; version; description; validAsOf = lastEventTimestamp
      getKey = instrument

    interface instance ZeroCoupon.I for Instrument where
      asBaseInstrument = toInterface @BaseInstrument.I this
      view = ZeroCoupon.View with
        zeroCoupon = ZeroCoupon with
          instrument; description; issueDate; maturityDate; currency; lastEventTimestamp

    interface instance DynamicInstrument.I for Instrument where
      view = DynamicInstrument.View with lifecycler = issuer; lastEventTimestamp
      createNewVersion DynamicInstrument.CreateNewVersion{version, lastEventTimestamp} = do
        cid <- create this with version, lastEventTimestamp
        BaseInstrument.createReference issuer $ toInterfaceContractId cid
        pure $ toInterfaceContractId cid

    interface instance Disclosure.I for Instrument where
      view = Disclosure.View with disclosureControllers = singleton issuer; observers
      setObservers Disclosure.SetObservers{newObservers} = do
        cid <- toInterfaceContractId <$> create this with observers = newObservers
        BaseInstrument.disclosureUpdateReference newObservers instrument cid
      archive' = archive . fromInterfaceContractId @Instrument
