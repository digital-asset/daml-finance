-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Bond.Callable.Instrument where

import DA.Date (daysSinceEpochToDate)
import DA.Set (singleton)
import Daml.Finance.Claims.Util.Builders
import Daml.Finance.Instrument.Bond.Util
import Daml.Finance.Interface.Claims.Claim qualified as Claim (I, GetClaims(..), View(..))
import Daml.Finance.Interface.Claims.Dynamic.Instrument qualified as DynamicInstrument (I, CreateNewVersion(..), View(..))
import Daml.Finance.Interface.Claims.Types (EventData)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I, View(..), createReference, disclosureUpdateReference)
import Daml.Finance.Interface.Instrument.Bond.Callable.Instrument qualified as Callable (I, View(..))
import Daml.Finance.Interface.Instrument.Bond.Callable.Types (Callable(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum)
import Daml.Finance.Interface.Types.Date.Schedule (PeriodicSchedule(..))
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)
import Prelude hiding (key)

-- | Type synonym for `Instrument`.
type T = Instrument

-- CALLABLE_BOND_TEMPLATE_BEGIN
-- | This template models a callable bond.
-- It pays a fixed coupon rate at the end of every coupon period (unless the bond has been called).
template Instrument
  with
    depository : Party
      -- ^ The depository of the instrument.
    issuer : Party
      -- ^ The issuer of the instrument.
    id : Id
      -- ^ The identifier of the instrument.
    version : Text
      -- ^ The instrument's version.
    description : Text
      -- ^ A description of the instrument.
    couponRate : Decimal
      -- ^ The fixed coupon rate, per annum. For example, in case of a "3.5% p.a coupon" this should
      --   be 0.035.
    periodicSchedule : PeriodicSchedule
      -- ^ The schedule for the periodic coupon payments.
    holidayCalendarIds : [Text]
      -- ^ The identifiers of the holiday calendars to be used for the coupon schedule.
    calendarDataProvider : Party
      -- ^ The reference data provider to use for the holiday calendar.
    dayCountConvention : DayCountConventionEnum
      -- ^ The day count convention used to calculate day count fractions. For example: Act360.
    currency : InstrumentKey
      -- ^ The currency of the bond. For example, if the bond pays in USD this should be a USD cash
      --   instrument.
    notional : Decimal
      -- ^ The notional of the bond. This is the face value corresponding to one unit of the bond
      --   instrument. For example, if one bond unit corresponds to 1000 USD, this should be 1000.0.
    observers : PartiesMap
      -- ^ The observers of the instrument.
    lastEventTimestamp : Time
      -- ^ (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
      --   time of creation should be used.
    prevElections : [EventData]
      -- ^ A list of previous elections that have been lifecycled on this instrument so far.
  -- CALLABLE_BOND_TEMPLATE_END
  where
    signatory depository, issuer
    observer Disclosure.flattenObservers observers

    let instrument = InstrumentKey with depository; issuer; id; version

    -- CALLABLE_BOND_CLAIMS_BEGIN
    interface instance Claim.I for Instrument where
      view = Claim.View with acquisitionTime = dateToDateClockTime $ daysSinceEpochToDate 0
      getClaims Claim.GetClaims{actor} = do
        -- get the initial claims tree (as of the bond's acquisition time)
        let getCalendars = getHolidayCalendars actor calendarDataProvider
        schedule <- rollSchedule getCalendars periodicSchedule holidayCalendarIds
        let
          useAdjustedDatesForDcf = True
          couponClaims = createCallableFixRateBondClaims dateToDateClockTime schedule
            periodicSchedule useAdjustedDatesForDcf couponRate dayCountConvention notional currency
        pure [couponClaims]
    -- CALLABLE_BOND_CLAIMS_END

    interface instance BaseInstrument.I for Instrument where
      view = BaseInstrument.View with
        depository; issuer; id; version; description; validAsOf = lastEventTimestamp
      getKey = instrument

    interface instance Callable.I for Instrument where
      asBaseInstrument = toInterface @BaseInstrument.I this
      view = Callable.View with
        callable = Callable with
          instrument
          description
          couponRate
          periodicSchedule
          holidayCalendarIds
          calendarDataProvider
          dayCountConvention
          currency
          notional
          lastEventTimestamp
          prevElections

    interface instance DynamicInstrument.I for Instrument where
      view = DynamicInstrument.View with lifecycler = issuer; lastEventTimestamp; prevElections
      createNewVersion DynamicInstrument.CreateNewVersion{version; lastEventTimestamp} = do
        cid <- create this with version; lastEventTimestamp
        BaseInstrument.createReference issuer $ toInterfaceContractId cid
        pure $ toInterfaceContractId cid

    interface instance Disclosure.I for Instrument where
      view = Disclosure.View with disclosureControllers = singleton issuer; observers
      setObservers = setObserversImpl this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
      addObservers = addObserversImpl this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
      removeObservers = removeObserversImpl this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
