-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Bond.FloatingRate.Instrument where

import DA.Date (daysSinceEpochToDate)
import DA.Set (singleton)
import Daml.Finance.Claims.Util.Builders
import Daml.Finance.Instrument.Bond.Util
import Daml.Finance.Interface.Claims.Claim qualified as Claim (I, GetClaims(..), View(..))
import Daml.Finance.Interface.Claims.Dynamic.Instrument qualified as DynamicInstrument (I, CreateNewVersion(..), View(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I, K, View(..), createReference, disclosureUpdateReference)
import Daml.Finance.Interface.Instrument.Bond.FloatingRate.Instrument qualified as FloatingRate (HasImplementation, I, View(..))
import Daml.Finance.Interface.Instrument.Bond.FloatingRate.Types (FloatingRate(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum)
import Daml.Finance.Interface.Types.Date.Schedule (PeriodicSchedule(..))
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, SetObservers(..), View(..), flattenObservers)
import Prelude hiding (key)

-- | Type synonym for `Instrument`.
type T = Instrument

instance FloatingRate.HasImplementation T

-- FLOATING_RATE_BOND_TEMPLATE_UNTIL_REFRATE_BEGIN
-- | This template models a floating rate bond.
-- It pays a floating coupon rate at the end of every coupon period.
-- This consists of a reference rate (observed at the beginning of the coupon period) plus a coupon
-- spread. For example, 3M Euribor + 0.5%.
template Instrument
  with
    depository : Party
      -- ^ The depository of the instrument.
    issuer : Party
      -- ^ The issuer of the instrument.
    id : Id
      -- ^ An identifier of the instrument.
    version : Text
      -- ^ The instrument's version.
    description : Text
      -- ^ A description of the instrument.
    referenceRateId : Text
      -- ^ The floating rate reference ID. For example, in case of "3M Euribor + 0.5%" this should
      --   be a valid reference to the "3M Euribor" reference rate.
-- FLOATING_RATE_BOND_TEMPLATE_UNTIL_REFRATE_END
    couponSpread : Decimal
      -- ^ The floating rate coupon spread. For example, in case of "3M Euribor + 0.5%" this should
      --   be 0.005.
    periodicSchedule : PeriodicSchedule
      -- ^ The schedule for the periodic coupon payments.
    holidayCalendarIds : [Text]
      -- ^ The identifiers of the holiday calendars to be used for the coupon schedule.
    calendarDataProvider : Party
      -- ^ The reference data provider to use for the holiday calendar.
    dayCountConvention : DayCountConventionEnum
      -- ^ The day count convention used to calculate day count fractions. For example: Act360.
    currency : BaseInstrument.K
      -- ^ The currency of the bond. For example, if the bond pays in USD this should be a USD cash
      --   instrument.
    observers : PartiesMap
      -- ^ The observers of the instrument.
    lastEventTimestamp : Time
      -- ^ (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
      --   time of creation should be used.
  where
    signatory depository, issuer
    observer Disclosure.flattenObservers observers

    let instrumentKey = InstrumentKey with depository; issuer; id; version

    interface instance Claim.I for Instrument where
      view = Claim.View with acquisitionTime = dateToDateClockTime (daysSinceEpochToDate 0)
      asBaseInstrument = toInterface @BaseInstrument.I this
      getClaims Claim.GetClaims{actor} = do
        -- get the initial claims tree (as of the bond's acquisition time)
        let getCalendars = getHolidayCalendars actor calendarDataProvider
        schedule <- rollSchedule getCalendars periodicSchedule holidayCalendarIds
        let
          useAdjustedDatesForDcf = True
          notional = 1.0
          ownerReceives = True
          fxAdjustment = 1.0
          couponClaims =
            createFloatingRatePaymentClaims dateToDateClockTime schedule periodicSchedule
              useAdjustedDatesForDcf couponSpread ownerReceives dayCountConvention notional
              currency referenceRateId
          redemptionClaim =
            createFxAdjustedPrincipalClaim dateToDateClockTime ownerReceives fxAdjustment notional
              currency periodicSchedule.terminationDate
        pure $ [couponClaims, redemptionClaim]

    interface instance BaseInstrument.I for Instrument where
      asDisclosure = toInterface @Disclosure.I this
      view = BaseInstrument.View with
        depository; issuer; id; version; description; validAsOf = lastEventTimestamp
      getKey = instrumentKey

    interface instance FloatingRate.I for Instrument where
      asBaseInstrument = toInterface @BaseInstrument.I this
      view = FloatingRate.View with
        floatingRate = FloatingRate with
          instrument = instrumentKey
          description
          referenceRateId
          couponSpread
          periodicSchedule
          holidayCalendarIds
          calendarDataProvider
          dayCountConvention
          currency
          lastEventTimestamp

    interface instance DynamicInstrument.I for Instrument where
      view = DynamicInstrument.View with lifecycler = issuer; lastEventTimestamp
      createNewVersion DynamicInstrument.CreateNewVersion{version, lastEventTimestamp} = do
        cid <- create this with version, lastEventTimestamp
        BaseInstrument.createReference issuer $ toInterfaceContractId cid
        pure $ toInterfaceContractId cid

    interface instance Disclosure.I for Instrument where
      view = Disclosure.View with disclosureControllers = singleton issuer; observers
      setObservers Disclosure.SetObservers{newObservers} = do
        cid <- toInterfaceContractId <$> create this with observers = newObservers
        BaseInstrument.disclosureUpdateReference newObservers instrumentKey cid
      archive' = archive . fromInterfaceContractId @Instrument
