-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Bond.InflationLinked.Instrument where

import ContingentClaims.Core.Claim (Inequality(..), (<=), cond, one, scale, when)
import ContingentClaims.Core.Observation (Observation(..))
import DA.Date (daysSinceEpochToDate)
import DA.Set (singleton)
import Daml.Finance.Claims.Util.Builders
import Daml.Finance.Instrument.Bond.Util
import Daml.Finance.Interface.Claims.Claim qualified as Claim (I, GetClaims(..), View(..))
import Daml.Finance.Interface.Claims.Dynamic.Instrument qualified as DynamicInstrument (I, CreateNewVersion(..), View(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I, View(..), createReference, disclosureUpdateReference)
import Daml.Finance.Interface.Instrument.Bond.InflationLinked.Instrument qualified as InflationLinked (HasImplementation, I, View(..))
import Daml.Finance.Interface.Instrument.Bond.InflationLinked.Types (InflationLinked(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum)
import Daml.Finance.Interface.Types.Date.Schedule (PeriodicSchedule(..))
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Date.DayCount (calcPeriodDcf)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)
import Prelude hiding ((<=), key, or)

-- | Type synonym for `Instrument`.
type T = Instrument

instance InflationLinked.HasImplementation T

-- | This template models an inflation linked bond.
-- It pays an inflation adjusted coupon at the end of every coupon period.
-- The coupon is based on a fixed rate, which is applied to a principal that is adjusted according
-- to an inflation index, for example the Consumer Price Index (CPI) in the U.S.
-- For example: 0.5% p.a. coupon, CPI adjusted principal:
-- At maturity, the greater of the adjusted principal and the original principal is redeemed.
-- For clarity, this only applies to the redemption amount. The coupons are always calculated based
-- on the adjusted principal.
template Instrument
  with
    depository : Party
      -- ^ The depository of the instrument.
    issuer : Party
      -- ^ The issuer of the instrument.
    id : Id
      -- ^ An identifier of the instrument.
    version : Text
      -- ^ The instrument's version.
    description : Text
      -- ^ A description of the instrument.
    inflationIndexId : Text
      -- ^ The inflation index reference ID. For example, in case of "0.5% p.a. coupon, CPI adjusted
      --   principal" this should be a valid reference to the "CPI" index.
    inflationIndexBaseValue : Decimal
      -- ^ The value of the inflation index on the first reference date of this bond (called "dated
      --   date" on US TIPS). This is used as the base value for the principal adjustment.
    couponRate : Decimal
      -- ^ The fixed coupon rate, per annum. For example, in case of a "0.5% p.a. coupon, CPI
      --   adjusted principal" this should be 0.005.
    periodicSchedule : PeriodicSchedule
      -- ^ The schedule for the periodic coupon payments.
    holidayCalendarIds : [Text]
      -- ^ The identifiers of the holiday calendars to be used for the coupon schedule.
    calendarDataProvider : Party
      -- ^ The reference data provider to use for the holiday calendar.
    dayCountConvention : DayCountConventionEnum
      -- ^ The day count convention used to calculate day count fractions. For example: Act360.
    currency : InstrumentKey
      -- ^ The currency of the bond. For example, if the bond pays in USD this should be a USD cash
      --   instrument.
    observers : PartiesMap
      -- ^ The observers of the instrument.
    lastEventTimestamp : Time
      -- ^ (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
      --   time of creation should be used.
  where
    signatory depository, issuer
    observer Disclosure.flattenObservers observers

    let instrument = InstrumentKey with depository; issuer; id; version

    interface instance Claim.I for Instrument where
      view = Claim.View with acquisitionTime = dateToDateClockTime (daysSinceEpochToDate 0)
      asBaseInstrument = toInterface @BaseInstrument.I this
      getClaims Claim.GetClaims{actor} = do
        -- get the initial claims tree (as of the bond's acquisition time)
        let getCalendars = getHolidayCalendars actor calendarDataProvider
        schedule <- rollSchedule getCalendars periodicSchedule holidayCalendarIds
        let
          -- calculate the current inflation factor (how inflation has developed from the first
          -- reference date until now)
          inflationFactor = Observe inflationIndexId / Const inflationIndexBaseValue

          -- calculate the fixed rate coupons (based on an inflation adjusted principal)
          useAdjustedDatesForDcf = True
          couponClaims =
            map (\p ->
              when (TimeGte $ p.adjustedEndDate) $
              scale (
                (Const couponRate) * inflationFactor *
                (Const (calcPeriodDcf
                  dayCountConvention p useAdjustedDatesForDcf periodicSchedule.terminationDate
                  periodicSchedule.frequency)
                )
              ) $ one currency
            ) schedule

          -- check whether there has been deflation or inflation during the lifetime of the bond
          deflation = Observe inflationIndexId <= Const inflationIndexBaseValue

          -- in case of deflation: return the original principal
          deflationClaim = one currency

          -- in case of inflation: return the inflation adjusted principal
          inflationClaim = scale inflationFactor (one currency)

          -- add the redemption claim
          redemptionClaim = when (TimeGte $ periodicSchedule.terminationDate) $
            cond deflation deflationClaim inflationClaim

          couponClaimsTagged = prepareAndTagClaims dateToDateClockTime couponClaims "Coupon"
          redemptionClaimTagged = prepareAndTagClaims dateToDateClockTime [redemptionClaim] "Redemption"
        pure $ [couponClaimsTagged, redemptionClaimTagged]

    interface instance BaseInstrument.I for Instrument where
      asDisclosure = toInterface @Disclosure.I this
      view = BaseInstrument.View with
        depository; issuer; id; version; description; validAsOf = lastEventTimestamp
      getKey = instrument

    interface instance InflationLinked.I for Instrument where
      asBaseInstrument = toInterface @BaseInstrument.I this
      view = InflationLinked.View with
        inflationLinked = InflationLinked with
          instrument
          description
          inflationIndexId
          inflationIndexBaseValue
          couponRate
          periodicSchedule
          holidayCalendarIds
          calendarDataProvider
          dayCountConvention
          currency
          lastEventTimestamp

    interface instance DynamicInstrument.I for Instrument where
      view = DynamicInstrument.View with lifecycler = issuer; lastEventTimestamp
      createNewVersion DynamicInstrument.CreateNewVersion{version; lastEventTimestamp} = do
        cid <- create this with version, lastEventTimestamp
        BaseInstrument.createReference issuer $ toInterfaceContractId cid
        pure $ toInterfaceContractId cid

    interface instance Disclosure.I for Instrument where
      view = Disclosure.View with disclosureControllers = singleton issuer; observers
      setObservers = setObserversImpl this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
      addObservers = addObserversImpl @Instrument this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
      removeObservers = removeObserversImpl this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
