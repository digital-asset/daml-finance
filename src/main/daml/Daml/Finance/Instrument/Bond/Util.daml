-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Bond.Util where

import ContingentClaims.Core.Claim (Claim, (<=), and, at, cond, give, one, or, scale, when)
import ContingentClaims.Core.Observation (Observation(..))
import DA.Date (addDays)
import DA.List (last)
import DA.Optional (isSome)
import Daml.Finance.Claims.Util.Builders (prepareAndTagClaims)
import Daml.Finance.Data.Reference.HolidayCalendar (GetCalendar(..), HolidayCalendar, HolidayCalendarKey(..))
import Daml.Finance.Data.Time.DateClock.Types (Unit(..))
import Daml.Finance.Interface.Claims.Types (Deliverable, Observable, TaggedClaim(..))
import Daml.Finance.Interface.Instrument.Bond.Callable.BondTypes
import Daml.Finance.Interface.Types.Date.Calendar (HolidayCalendarData)
import Daml.Finance.Interface.Types.Date.Classes (toUTCTime)
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum)
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum(..))
import Daml.Finance.Interface.Types.Date.Schedule (PeriodicSchedule(..), Schedule)
import Daml.Finance.Util.Date.Calendar (addBusinessDays, adjustDate)
import Daml.Finance.Util.Date.DayCount (calcPeriodDcf)
import Daml.Finance.Util.Date.Schedule (createSchedule)
import Prelude hiding ((<=), and, or)
import Prelude qualified as P (and)

type O = Observation Date Decimal Observable
type C = Claim Date Decimal Deliverable Observable

-- | Maps a `Date` to `Time` using the rule in the `DateClock`.
dateToDateClockTime : Date -> Time
dateToDateClockTime = toUTCTime . Unit

-- | Retrieve holiday calendar(s) from the ledger.
getHolidayCalendars : Party -> Party -> [Text] -> Update [HolidayCalendarData]
getHolidayCalendars actor provider holidayCalendarIds =
  let
    -- get a holiday calendar from the ledger
    getCalendar id = exerciseByKey @HolidayCalendar (HolidayCalendarKey with provider; id)
      GetCalendar with viewer = actor
  in
    -- get the holiday calendars
    mapA getCalendar holidayCalendarIds

-- | Retrieve holiday calendar(s) from the ledger and roll out a schedule.
rollSchedule : ([Text] -> Update [HolidayCalendarData]) -> PeriodicSchedule -> [Text] ->
  Update Schedule
rollSchedule getHolidayCalendars periodicSchedule holidayCalendarIds = do
  cals <- getHolidayCalendars holidayCalendarIds
  pure $ createSchedule cals periodicSchedule

-- | Find out which schedule periods of scheduleA exist in scheduleB.
includes : Schedule -> Schedule -> [Bool]
includes scheduleA scheduleB =
  map (\a -> isSome $ find (\b -> b.adjustedEndDate == a.adjustedEndDate) scheduleB) scheduleA

-- | HIDE Calculate the fixing date by using a day shift (if applicable) and then adjusting the date.
calculateFixingDate : Date -> FixingDates -> HolidayCalendarData -> Int -> Date
calculateFixingDate baseDate fixingDates fixingCalendars dayShift =
  let
    resetDateUnadjStart = case fixingDates.dayType of
      None -> baseDate
      Some Business -> addBusinessDays fixingCalendars dayShift baseDate
      Some Calendar -> addDays baseDate dayShift
  in
    adjustDate fixingCalendars fixingDates.businessDayConvention resetDateUnadjStart

-- | HIDE Apply a cap and a floor to a floating rate claim.
capAndFloorRate : O -> Optional Decimal -> Optional Decimal -> O -> C -> Decimal -> C
capAndFloorRate observedFloatingRate capRate floorRate dcf notionalAmount couponRate =
  let
    regularRate = observedFloatingRate + Const couponRate
    regularRateClaim = scale (regularRate * dcf) notionalAmount
    rateAfterCap = case capRate of
      None -> regularRateClaim
      Some cap -> cond capCondition capRateClaim regularRateClaim
        where
          capCondition = Const cap <= regularRate
          capRateClaim = scale (Const cap * dcf) notionalAmount
    rateAfterCapAndFloor = case floorRate of
      None -> rateAfterCap
      Some floor -> cond floorCondition floorRateClaim rateAfterCap
        where
          floorCondition = regularRate <= Const floor
          floorRateClaim = scale (Const floor * dcf) notionalAmount
  in rateAfterCapAndFloor

-- | Calculate the claims for a callable bond with a fixed and/or floating coupon on each payment
--   date and a redemption amount at the end (unless called by the issuer).
createCallableBondClaims : (Date -> Time) -> Schedule -> Schedule -> PeriodicSchedule
  -> Bool -> Decimal -> DayCountConventionEnum -> Decimal -> Deliverable -> Optional FloatingRate
  -> Optional Decimal -> Optional Decimal -> Int -> HolidayCalendarData
  -> TaggedClaim
createCallableBondClaims dateToTime schedule callableSchedule periodicSchedule
  useAdjustedDatesForDcf couponRate dayCountConvention notional cashInstrument floatingRate
  capRate floorRate noticeDays fixingCalendars =
  let
    notionalAmount = scale (Const notional) $ one cashInstrument

    -- Coupons and principal have a give node in front, to undo the give required in the main
    -- claim (in front of the or node, see explanation below).
    principal = give notionalAmount

    -- Find out on which coupon dates it is possible to call the bond.
    callPossibleInit = includes schedule callableSchedule

    -- Also search in the other direction, to ensure that no intended call dates are ignored.
    potentialCallDatesFound = includes callableSchedule schedule

    callPossible = if P.and potentialCallDatesFound then callPossibleInit
      else error "All dates in the call schedule must exist in the coupon schedule"

    combineTagClaim (p, callingIsPossible) notCalledClaim =
      let
        dcf = Const $ calcPeriodDcf dayCountConvention p useAdjustedDatesForDcf
          periodicSchedule.terminationDate periodicSchedule.frequency
        cpn = case floatingRate of
          None -> scale ((Const couponRate) * dcf) notionalAmount
          Some fr -> case fr.referenceRateType of
            SingleFixing resetRelativeTo -> rateAfterCapAndFloor
              where
                baseDate = case (useAdjustedDatesForDcf, resetRelativeTo) of
                  (True, CalculationPeriodStartDate) -> p.adjustedStartDate
                  (True, CalculationPeriodEndDate) -> p.adjustedEndDate
                  (False, CalculationPeriodStartDate) -> p.unadjustedStartDate
                  (False, CalculationPeriodEndDate) -> p.unadjustedEndDate
                resetDate = calculateFixingDate baseDate fr.fixingDates fixingCalendars dayShift
                observedFloatingRate = ObserveAt fr.referenceRateId resetDate
                rateAfterCapAndFloor = capAndFloorRate observedFloatingRate capRate floorRate dcf
                  notionalAmount couponRate
            CompoundedIndex dcfConventionImpl -> rateAfterCapAndFloor
              where
                baseStartDate = if useAdjustedDatesForDcf then p.adjustedStartDate
                  else p.unadjustedStartDate
                resetDateStart = calculateFixingDate baseStartDate fr.fixingDates fixingCalendars
                  dayShift
                baseEndDate = if useAdjustedDatesForDcf then p.adjustedEndDate
                  else p.unadjustedEndDate
                resetDateEnd = calculateFixingDate baseEndDate fr.fixingDates fixingCalendars
                  dayShift
                compoundedFloatingRate = ObserveAt fr.referenceRateId resetDateEnd /
                  ObserveAt fr.referenceRateId resetDateStart - Const 1.0
                -- Calculate dcf using the method implicitly used for the rate Index,
                -- for example Act360 in the case of SOFR Index, see page 35 here:
                -- https://www.newyorkfed.org/medialibrary/Microsites/arrc/files/2021/users-guide-to-sofr2021-update.pdf
                dcfImpl = Const $ calcPeriodDcf dcfConventionImpl p useAdjustedDatesForDcf
                  periodicSchedule.terminationDate periodicSchedule.frequency
                -- The implicit dcf used for index calculation does not necessarily match the actual
                -- dcf of the current swap -> calculate an annualized rate and apply the actual dcf:
                convertImplicitDcfToActualDcf = dcf / dcfImpl
                rateAfterCapAndFloor = capAndFloorRate compoundedFloatingRate capRate floorRate
                  convertImplicitDcfToActualDcf notionalAmount couponRate
            where
              dayShift = if fr.fixingDates.period == D then fr.fixingDates.periodMultiplier
                else error "Only daily periods supported"

        coupon = give cpn
        principalIncludingCoupon = when (at p.adjustedEndDate) $ and coupon principal
        notCalledClaimIncludingCoupon = when (at p.adjustedEndDate) $ and coupon notCalledClaim
        called = ("CALLED", principalIncludingCoupon)
        notCalled = ("NOT CALLED", notCalledClaimIncludingCoupon)
        callDate = addBusinessDays fixingCalendars (-noticeDays) p.adjustedEndDate
        tailClaim = if callingIsPossible then when (at callDate) $ or called notCalled
          else notCalledClaimIncludingCoupon
      in
        tailClaim

    finalCouponDate = (.adjustedEndDate) $ last schedule
    notCalledFinal = when (at finalCouponDate) principal
    claimAmount = foldr (\p acc -> combineTagClaim p acc) notCalledFinal $ zip schedule callPossible

    -- For a callable bond, it is the holding custodian that has the right to call. This is
    -- indicated by a give node, which applies to all sub-nodes of the claims branch. However, the
    -- coupons and the principal belong to the holding owner, which is why another give node is
    -- required to undo the first give.
    claims = give claimAmount

  in
    prepareAndTagClaims dateToTime [claims] "Callable bond payment"
