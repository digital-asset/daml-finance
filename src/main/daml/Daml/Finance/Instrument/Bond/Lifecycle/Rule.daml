-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Bond.Lifecycle.Rule
  ( Rule(..)
  ) where

import DA.Optional (fromSome)
import DA.Set (fromList)
import DA.Text (sha256)
import Daml.Finance.Claims.Util (isZero')
import Daml.Finance.Claims.Util.Lifecycle (electionEvent, lifecycle, lifecycleClaims, splitPending)
import Daml.Finance.Instrument.Bond.Callable.Instrument (Instrument(..))
import Daml.Finance.Interface.Claims.Dynamic.Instrument qualified as DynamicInstrument (GetView(..), I)
import Daml.Finance.Interface.Claims.Types (EventData(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (R, createReference, exerciseInterfaceByKey, getKey)
import Daml.Finance.Interface.Lifecycle.Election qualified as Election (ApplyElection(..), Exercisable(..), ExercisableView(..), getElectionTime)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (Evolve(..), I, View(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey, Parties, PartiesMap)
import Daml.Finance.Interface.Util.Common (fetchInterfaceByKey)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Lifecycle.ElectionEffect (ElectionEffect(..))
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)
import Prelude hiding (exercise, key)

-- | Rule to process an election event for options.
template Rule
  with
    providers : Parties
      -- ^ Providers of the distribution rule.
    lifecycler : Party
      -- ^ Party performing the lifecycling.
    observers : PartiesMap
      -- ^ Observers of the distribution rule.
    id : Id
      -- ^ Identifier for the rule contract.
    description : Text
      -- ^ Textual description.
  where
    signatory providers
    observer Disclosure.flattenObservers observers, lifecycler

    interface instance Lifecycle.I for Rule where
      view = Lifecycle.View with lifecycler; id; description
      evolve Lifecycle.Evolve{eventCid; observableCids; instrument} = do
        error "Lifecycle.Evolve not implemented as part of this Rule."
        pure (None, [])

    interface instance Election.Exercisable for Rule where
      view = Election.ExercisableView with lifecycler
      applyElection Election.ApplyElection{electionCid; observableCids} = do

        -- fetch election
        election <- fetch electionCid
        let
          v = view election
          electionTime = Election.getElectionTime election
          election = electionEvent electionTime v.electorIsOwner v.claim

        -- retrieve election data for previous elections and re-create election events
        nv <- BaseInstrument.exerciseInterfaceByKey @DynamicInstrument.I v.instrument lifecycler
          DynamicInstrument.GetView with viewer = lifecycler
        let
          prevElections = map (\e ->
            case e.election of
              None -> error "election missing"
              Some (electorIsOwner, tag) -> electionEvent e.t electorIsOwner tag)
            nv.prevElections

        -- fetch claim tree as of instrument inception
        claimInstrument <- fetchInterfaceByKey @BaseInstrument.R v.instrument

        -- fast-forward the claims tree to the current version by replaying the previous elections
        claims <- fst <$>
          lifecycle lifecycler observableCids claimInstrument prevElections

        -- lifecycle as of the time given by the event, by applying the corresponding election
        (remaining, pending) <- lifecycleClaims observableCids electionTime claims [election]

        -- create new instrument and return effect
        if remaining == claims && null pending then
          pure (None, [])
        else do
          let
            instrumentT = fromSome $ fromInterface @Instrument claimInstrument
            currentKey = BaseInstrument.getKey $ toInterface claimInstrument
            newKey = currentKey with version = sha256 $ show remaining
            producedInstrument = if isZero' remaining then None else Some newKey
            (otherConsumed, otherProduced) = splitPending pending
          tryCreateNewInstrument lifecycler nv.prevElections electionTime v.electorIsOwner v.claim
            instrumentT newKey
          effectCid <- toInterfaceContractId <$>
            create ElectionEffect with
              providers = fromList [instrumentT.issuer, instrumentT.depository]
              custodian = if v.electorIsOwner then v.counterparty else v.elector
              owner = if v.electorIsOwner then v.elector else v.counterparty
              id = v.id
              description = v.description
              targetInstrument = currentKey
              producedInstrument
              amount = v.amount
              otherConsumed
              otherProduced
              settlementTime = Some electionTime
              observers = v.observers
          pure (Some newKey, [effectCid])

    interface instance Disclosure.I for Rule where
      view = Disclosure.View with disclosureControllers = providers; observers
      setObservers = setObserversImpl @Rule @Disclosure.I this None
      addObservers = addObserversImpl @Rule @Disclosure.I this None
      removeObservers = removeObserversImpl @Rule @Disclosure.I this None

-- | HIDE
-- Check if an instrument for the new key already exists, otherwise create it.
tryCreateNewInstrument : Party -> [EventData] -> Time -> Bool -> Text -> Instrument
  -> InstrumentKey -> Update ()
tryCreateNewInstrument actor prevElections eventTime electorIsOwner claimTag oldInstrument
  newKey = do
    existingRefCidOpt <- lookupByKey @BaseInstrument.R newKey
    case existingRefCidOpt of
      Some existingRefCid -> pure ()
      None -> do
        let
          newElection = EventData with
            t = eventTime
            election = Some (electorIsOwner, claimTag)
        instCid <- create oldInstrument with
          lastEventTimestamp = eventTime
          prevElections = prevElections ++ [newElection]
          version = newKey.version
        BaseInstrument.createReference actor $ toInterfaceContractId instCid
        pure ()
