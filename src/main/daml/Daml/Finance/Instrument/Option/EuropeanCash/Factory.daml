-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Option.EuropeanCash.Factory where

import DA.Set (singleton)
import Daml.Finance.Instrument.Option.EuropeanCash.Instrument qualified as European (Instrument(..))
import Daml.Finance.Interface.Claims.Claim qualified as Claim (GetClaims(..), I, getClaims)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (GetCid(..), R, createReference)
import Daml.Finance.Interface.Instrument.Option.EuropeanCash.Factory qualified as EuropeanOption (Create(..), Factory, Remove(..), View(..))
import Daml.Finance.Interface.Instrument.Option.EuropeanCash.Types (European(..))
import Daml.Finance.Interface.Types.Common.Types (PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Type synonym for `Factory`.
type F = Factory

-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance EuropeanOption.Factory for Factory where
      view = EuropeanOption.View with provider
      create' EuropeanOption.Create{
        european = European{instrument; description; referenceAssetId; ownerReceives; optionType;
          strike; expiryDate; currency; lastEventTimestamp};
        observers} = do
          let
            europeanInstrument = European.Instrument with
              depository = instrument.depository
              issuer = instrument.issuer
              ownerReceives
              id = instrument.id
              version = instrument.version
              description
              referenceAssetId
              optionType
              strike
              expiryDate
              currency
              lastEventTimestamp
              observers
          cid <- toInterfaceContractId <$> create europeanInstrument
          BaseInstrument.createReference instrument.depository $ toInterfaceContractId cid
          -- Get the claims in order to run the associated checks.
          Claim.getClaims (toInterface @Claim.I europeanInstrument) $
            Claim.GetClaims with actor = instrument.issuer
          pure cid
      remove EuropeanOption.Remove{instrument} = do
        (refCid, ref) <- fetchByKey @BaseInstrument.R instrument
        instrumentCid <- exercise refCid BaseInstrument.GetCid with viewer = instrument.depository
        archive instrumentCid
        archive refCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None
