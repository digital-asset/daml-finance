-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Option.Dividend.Instrument where

import DA.Date (daysSinceEpochToDate)
import DA.Set (singleton)
import Daml.Finance.Claims.Util.Builders
import Daml.Finance.Instrument.Option.Util
import Daml.Finance.Interface.Claims.Claim qualified as Claim (I, GetClaims(..), View(..))
import Daml.Finance.Interface.Claims.Dynamic.Instrument qualified as DynamicInstrument (I, CreateNewVersion(..), View(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I, View(..), createReference, disclosureUpdateReference)
import Daml.Finance.Interface.Instrument.Option.Dividend.Instrument qualified as DividendOption (HasImplementation, I, View(..))
import Daml.Finance.Interface.Instrument.Option.Dividend.Types (Dividend(..))
import Daml.Finance.Interface.Types.Common.Types (Id, InstrumentKey(..), InstrumentQuantity, PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)
import Prelude hiding (key)

-- | Type synonym for `Instrument`.
type T = Instrument

instance DividendOption.HasImplementation T
-- | This template models a physically settled Dividend option.
-- The holder gets to choose to receive the dividend in cash or in a different form (in shares
-- and/or in a foreign currency).
template Instrument
  with
    depository : Party
      -- ^ The depository of the instrument.
    issuer : Party
      -- ^ The issuer of the instrument.
    id : Id
      -- ^ An identifier of the instrument.
    version : Text
      -- ^ The instrument's version.
    description : Text
      -- ^ A description of the instrument.
    expiryDate : Date
      -- ^ The expiry date of the option.
    cashQuantity : InstrumentQuantity
      -- ^ Dividend paid in cash
    sharesQuantity : Optional InstrumentQuantity
      -- ^ Dividend paid in shares (if applicable)
    fxQuantity : Optional InstrumentQuantity
      -- ^ Dividend paid in a foreign currency (if applicable)
    observers : PartiesMap
      -- ^ The observers of the instrument.
    lastEventTimestamp : Time
      -- ^ (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
      --   time of creation should be used.
  where
    signatory depository, issuer
    observer Disclosure.flattenObservers observers

    let instrument = InstrumentKey with depository; issuer; id; version

    interface instance Claim.I for Instrument where
      view = Claim.View with acquisitionTime = dateToDateClockTime $ daysSinceEpochToDate 0
      asBaseInstrument = toInterface @BaseInstrument.I this
      getClaims Claim.GetClaims{actor} = do
        -- get the initial claims tree (as of the instrument's acquisition time)
        let
          optionsClaim = createDividendOptionClaim dateToDateClockTime expiryDate cashQuantity
            sharesQuantity fxQuantity
        pure [optionsClaim]

    interface instance BaseInstrument.I for Instrument where
      asDisclosure = toInterface @Disclosure.I this
      view = BaseInstrument.View with
        depository; issuer; id; version; description; validAsOf = lastEventTimestamp
      getKey = instrument

    interface instance DividendOption.I for Instrument where
      view = DividendOption.View with
        dividend = Dividend with
          instrument
          description
          expiryDate
          cashQuantity
          sharesQuantity
          fxQuantity
          lastEventTimestamp
      asBaseInstrument = toInterface @BaseInstrument.I this

    interface instance DynamicInstrument.I for Instrument where
      view = DynamicInstrument.View with lifecycler = issuer; lastEventTimestamp
      createNewVersion DynamicInstrument.CreateNewVersion{version; lastEventTimestamp} = do
        cid <- create this with version; lastEventTimestamp
        BaseInstrument.createReference issuer $ toInterfaceContractId cid
        pure $ toInterfaceContractId cid

    interface instance Disclosure.I for Instrument where
      view = Disclosure.View with disclosureControllers = singleton issuer; observers
      setObservers = setObserversImpl @Instrument this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
      addObservers = addObserversImpl @Instrument this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
      removeObservers = removeObserversImpl this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
