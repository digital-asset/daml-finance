-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Option.Dividend.Factory where

import DA.Set (singleton)
import Daml.Finance.Instrument.Option.Dividend.Instrument qualified as DividendOption (Instrument(..))
import Daml.Finance.Interface.Claims.Claim qualified as Claim (GetClaims(..), I, getClaims)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (createReference)
import Daml.Finance.Interface.Instrument.Option.Dividend.Factory qualified as DividendOptionFactory (Create(..), I, View(..))
import Daml.Finance.Interface.Instrument.Option.Dividend.Types (Dividend(..))
import Daml.Finance.Interface.Types.Common.Types (PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Type synonyms for `Factory`.
type T = Factory
type F = Factory -- to be deprecated

-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance DividendOptionFactory.I for Factory where
      view = DividendOptionFactory.View with provider
      create' DividendOptionFactory.Create{
        dividend = Dividend{instrument; description; expiryDate; cashQuantity; sharesQuantity;
          fxQuantity; lastEventTimestamp; prevEvents};
        observers} = do
          let
            dividendOptionInstrument = DividendOption.Instrument with
              depository = instrument.depository
              issuer = instrument.issuer
              id = instrument.id
              version = instrument.version
              holdingStandard = instrument.holdingStandard
              description
              expiryDate
              cashQuantity
              sharesQuantity
              fxQuantity
              lastEventTimestamp
              prevEvents
              observers
          cid <- toInterfaceContractId <$> create dividendOptionInstrument
          BaseInstrument.createReference instrument.depository $ toInterfaceContractId cid
          -- Get the claims in order to run the associated checks.
          Claim.getClaims (toInterface @Claim.I dividendOptionInstrument) $
            Claim.GetClaims with actor = instrument.issuer
          pure cid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None
