-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Option.Dividend.Factory where

import DA.Set (singleton)
import Daml.Finance.Instrument.Option.Dividend.Instrument qualified as Dividend (Instrument(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (GetCid(..), R, createReference)
import Daml.Finance.Interface.Instrument.Option.Dividend.Factory qualified as DividendOption (Create(..), Factory, Remove(..), View(..))
import Daml.Finance.Interface.Instrument.Option.Dividend.Types (Dividend(..))
import Daml.Finance.Interface.Types.Common.Types (PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Type synonym for `Factory`.
type F = Factory

-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance DividendOption.Factory for Factory where
      view = DividendOption.View with provider
      create' DividendOption.Create{dividend = Dividend{instrument; description; expiryDate;
        cashQuantity; sharesQuantity; fxQuantity; lastEventTimestamp}; observers} = do
          cid <- toInterfaceContractId <$>
            create Dividend.Instrument with
              depository = instrument.depository
              issuer = instrument.issuer
              id = instrument.id
              version = instrument.version
              description
              expiryDate
              cashQuantity
              sharesQuantity
              fxQuantity
              lastEventTimestamp
              observers
          BaseInstrument.createReference instrument.depository cid
          pure cid
      remove DividendOption.Remove{instrument} = do
        (refCid, ref) <- fetchByKey @BaseInstrument.R instrument
        instrumentCid <- exercise refCid BaseInstrument.GetCid with viewer = instrument.depository
        archive $ fromInterfaceContractId @Dividend.Instrument instrumentCid
        archive refCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None
