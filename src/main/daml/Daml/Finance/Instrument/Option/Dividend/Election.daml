-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Option.Dividend.Election where

import DA.Set qualified as S (singleton)
import Daml.Finance.Interface.Instrument.Option.Dividend.Election.Factory qualified as Factory (Create(..), F, HasImplementation, View(..))
import Daml.Finance.Interface.Instrument.Option.Dividend.Types (ElectionTypeEnum(..))
import Daml.Finance.Interface.Lifecycle.Election qualified as Election (Apply(..), ApplyElection(..), HasImplementation, I, View(..))
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I, View(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey, PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Type synonym for `Election`.
type T = Election

instance Election.HasImplementation T
-- | An election, such as the exercise of an option.
template Election
  with
    elector : Party
      -- ^ Entity making the election.
    counterparty : Party
      -- ^ Faces the `elector` in the `Holding`.
    provider : Party
      -- ^ The provider of the election is an entity that has the authority to process the election
      --   and create a new instrument version.
    id : Id
      -- ^ Election identifier.
    description : Text
      -- ^ A human readable description of the election.
    instrument : InstrumentKey
      -- ^ The instrument to which the election applies.
    amount : Decimal
      -- ^ Number of units of instrument to which the election applies.
    claim : Text
      -- ^ The tag corresponding to the elected sub-tree.
    electorIsOwner : Bool
      -- ^ `True` if the elector is the owner of a claim, `False` otherwise.
    electionTime : Time
      -- ^ Time at which the election is put forward.
    observers : PartiesMap
      -- ^ A set of observers.
  where
    signatory elector, provider
    observer Disclosure.flattenObservers observers

    interface instance Election.I for Election where
      asEvent = toInterface @Event.I this
      view = Election.View with
        id; description; amount; elector; counterparty; electorIsOwner; observers; provider
        instrument; claim
      apply self Election.Apply{observableCids; exercisableCid} = do
        let v = view $ toInterface @Election.I this
        (newInstrumentCid, effects) <- exercise exercisableCid Election.ApplyElection with
          observableCids
          electionCid = toInterfaceContractId self
        archive self -- this is needed as we can't write postconsuming choices on interfaces
        pure (newInstrumentCid, effects)

    interface instance Disclosure.I for Election where
      view = Disclosure.View with disclosureControllers = S.singleton elector; observers
      setObservers = setObserversImpl @Election @Disclosure.I this None
      addObservers = addObserversImpl @Election @Disclosure.I this None
      removeObservers = removeObserversImpl @Election @Disclosure.I this None

    interface instance Event.I for Election where
      view = Event.View with
        providers = S.singleton provider
        id
        description
        eventTime = electionTime

instance Factory.HasImplementation Factory
-- | Factory template to create an `Election`.
template Factory
  with
    provider : Party
      -- ^ The provider of the `Factory`.
    observers : PartiesMap
      -- ^ A set of observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance Factory.F for Factory where
      view = Factory.View with provider
      create' Factory.Create{id; description; claimType; elector; counterparty; electorIsOwner;
        electionTime; observers; amount; provider; instrument} =
        toInterfaceContractId <$> create Election with
          id; description; elector; counterparty; electorIsOwner; electionTime
          observers; amount; provider; instrument
          claim = case claimType of
            Shares -> "SHARES"
            Cash -> "CASH"
            CashFx -> "CASHFX"
      remove arg = archive arg.electionCid
      asDisclosure = toInterface @Disclosure.I this

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = S.singleton provider; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None
