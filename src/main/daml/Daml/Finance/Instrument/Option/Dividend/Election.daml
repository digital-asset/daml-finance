-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Option.Dividend.Election where

import DA.Set (singleton)
import Daml.Finance.Interface.Instrument.Option.Dividend.Election.Factory qualified as Factory (Create(..), F, View(..))
import Daml.Finance.Interface.Instrument.Option.Dividend.Types (ElectionTypeEnum(..))
import Daml.Finance.Interface.Types.Common.Types (PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Lifecycle.Election (Election(..))
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Factory template to create an `Election`.
template Factory
  with
    provider : Party
      -- ^ The provider of the `Factory`.
    observers : PartiesMap
      -- ^ A set of observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance Factory.F for Factory where
      view = Factory.View with provider
      create' Factory.Create{id; description; claimType; elector; counterparty; electorIsOwner;
        electionTime; observers; amount; provider; instrument} =
        toInterfaceContractId <$> create Election with
          id; description; elector; counterparty; electorIsOwner; electionTime
          observers; amount; provider; instrument
          claim = case claimType of
            Shares -> "SHARES"
            Cash -> "CASH"
            CashFx -> "CASHFX"
      remove arg = archive arg.electionCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None
