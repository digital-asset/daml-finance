-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Instrument.Option.European.Factory where

import DA.Set (singleton)
import Daml.Finance.Instrument.Option.European.Instrument qualified as European (Instrument(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I)
import Daml.Finance.Interface.Instrument.Option.European.Factory qualified as EuropeanOption (Create(..), Factory, Remove(..), View(..))
import Daml.Finance.Interface.Instrument.Option.European.Types (European(..))
import Daml.Finance.Interface.Types.Common.Types (InstrumentKey, PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Interface.Util.KeyTable (archiveByKey, create, withKeyTable)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)
import Prelude hiding (archive, create, exercise, exerciseByKey, fetch, fetchByKey, fetchFromInterface, lookup, lookupByKey)

-- | Type synonym for `Factory`.
type F = Factory

-- | Factory template for instrument creation.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance EuropeanOption.Factory for Factory where
      view = EuropeanOption.View with provider
      create' EuropeanOption.Create{
        european = European{instrument; description; referenceAssetId; ownerReceives; optionType;
          strike; expiryDate; currency; lastEventTimestamp};
        observers} =
          toInterfaceContractId <$>
            create European.Instrument with
              depository = instrument.depository
              issuer = instrument.issuer
              ownerReceives
              id = instrument.id
              version = instrument.version
              description
              referenceAssetId
              optionType
              strike
              expiryDate
              currency
              lastEventTimestamp
              observers
      remove EuropeanOption.Remove{instrument; keyTable} = withKeyTable keyTable do
        archiveByKey @BaseInstrument.I @InstrumentKey provider instrument

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory this
      addObservers = addObserversImpl @Factory this
      removeObservers = removeObserversImpl @Factory this