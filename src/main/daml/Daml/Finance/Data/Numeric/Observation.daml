-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Data.Numeric.Observation where

import DA.Map as M (Map, lookup)
import DA.Optional (fromSomeNote)
import DA.Set (singleton)
import Daml.Finance.Interface.Data.Numeric.Observation qualified as Observation (I, View(..))
import Daml.Finance.Interface.Data.Numeric.Observation.Factory qualified as ObservationFactory
import Daml.Finance.Interface.Lifecycle.Observable.NumericObservable qualified as NumericObservable (I, View(..))
import Daml.Finance.Interface.Types.Common.Types (Id, PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Type synonym for `Observation`.
type T = Observation

-- | An implementation of `NumericObservable` that explicitly stores time-dependent numerical
-- values. For example, it can be used for equity or rate fixings.
template Observation
  with
    provider : Party
      -- ^ The reference data provider.
    id : Id
      -- ^ A textual identifier.
    observations : Map Time Decimal
      -- ^ The time-dependent values.
    observers : PartiesMap
      -- ^ Observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance NumericObservable.I for Observation where
      view = NumericObservable.View with provider; id
      observe t = pure . fromSomeNote
        ("Missing observation for " <> show id <>" at t = " <> show t)
        $ M.lookup t observations

    interface instance Observation.I for Observation where
      view = Observation.View with provider; id; observations; observers

    interface instance Disclosure.I for Observation where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Observation this
      addObservers = addObserversImpl @Observation this
      removeObservers = removeObserversImpl @Observation this

-- | Implementation of the corresponding Observation Factory.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance ObservationFactory.F for Factory
      where
        view = ObservationFactory.View with provider; observers
        create' ObservationFactory.Create{id; observations; observers; provider} =
          toInterfaceContractId <$> create Observation with id; observations; observers; provider
        remove ObservationFactory.Remove{observationCid} =
          archive $ fromInterfaceContractId @Observation observationCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory this
      addObservers = addObserversImpl @Factory this
      removeObservers = removeObserversImpl @Factory this
