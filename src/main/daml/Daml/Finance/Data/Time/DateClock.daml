-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Data.Time.DateClock where

import DA.Date (addDays)
import Daml.Finance.Interface.Data.TimeObservable qualified as TimeObservable (HasImplementation, I, View(..))
import Daml.Finance.Interface.Types.Common (Id, Parties)
import Daml.Finance.Interface.Types.Date.Classes (HasUTCTimeConversion(..))
import Daml.Finance.Lifecycle.Event.DateClock qualified as DateClock (Event(..))
import Daml.Finance.Lifecycle.Types (Unit(..))

-- | Type synonym for `DateClock`.
type T = DateClock

instance TimeObservable.HasImplementation DateClock

-- | A `DateClock` is a subdivision of the Time continuum into dates.
-- Each date is mapped to UTC noon.
-- Updating the clock spawns a `ClockUpdateEvent`.
template DateClock
  with
    providers : Parties
      -- ^ The clock's providers.
    date : Unit
      -- ^ The clock's date.
    id : Id
      -- ^ The clock's identifier.
    description : Text
      -- ^ The clock's description.
    observers : Parties
      -- ^ Observers of the events created from this clock.
  where
    signatory providers

    key (providers, id) : (Parties, Id)
    maintainer key._1

    interface instance TimeObservable.I for DateClock where
      view = TimeObservable.View with providers; id; time = toUTCTime this

    choice ToNext : (ContractId DateClock, ContractId DateClock.Event)
      -- ^ Moves the clock to the next date and spawns an update event.
      with
        eventId : Id
          -- ^ Event identifier
        eventDescription : Text
          -- ^ Event description
      controller providers
      do
        let
          Unit currentDate = date
          clock = this with date = Unit $ addDays currentDate 1
        clockCid <- create clock
        eventCid <- create DateClock.Event with providers; date; id = eventId; description = eventDescription; observers
        pure (clockCid, eventCid)

instance HasUTCTimeConversion DateClock where
  toUTCTime clock = toUTCTime clock.date

instance Ord DateClock where
  compare x y = compare (toInterface x : TimeObservable.I) (toInterface y)
