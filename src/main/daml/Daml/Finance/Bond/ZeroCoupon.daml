-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Bond.ZeroCoupon where

import DA.Set (singleton)
import Daml.Finance.Bond.Util
import Daml.Finance.Interface.Asset.Instrument qualified as Instrument (HasImplementation, I, K, View(..), disclosureUpdateReference)
import Daml.Finance.Interface.Asset.Types (Id(..), InstrumentKey(..))
import Daml.Finance.Interface.Common.Disclosure qualified as Disclosure (I, SetObservers(..), View(..))
import Daml.Finance.Interface.Common.Types (Observers)
import Daml.Finance.Interface.Common.Util (flattenObservers)
import Daml.Finance.Interface.Derivative.HasClaims qualified as HasClaims (I, View(..))
import Daml.Finance.Interface.Lifecycle.Lifecyclable qualified as Lifecyclable (I, Lifecycle(..), View(..))
import Prelude hiding (key)

type T = ZeroCouponBond

instance Instrument.HasImplementation T
-- | This template models a zero coupon bond.
-- It does not pay any coupons, only the redemption amount at maturity.
template ZeroCouponBond
  with
    depository : Party
      -- ^ The depository of the instrument.
    issuer : Party
      -- ^ The issuer of the instrument.
    id : Id
      -- ^ An identifier of the instrument.
    issueDate : Date
      -- ^ The date when the bond was issued.
    maturityDate : Date
      -- ^ The last coupon date (and the redemption date) of the bond.
    currency : Instrument.K
      -- ^ The currency of the bond. For example, if the bond pays in USD this should be a USD cash instrument.
    observers : Observers
      -- ^ The observers of the instrument.
    lastEventTimestamp : Time
      -- ^ (market) time of the last recorded lifecycle event. If no event has occurred yet, the time of creation should be used.
  where
    signatory depository, issuer
    observer flattenObservers observers

    let instrumentKey = InstrumentKey with depository; issuer; id

    implements HasClaims.I where
      view = HasClaims.View
        with
          acquisitionTime = dateToDateClockTime issueDate
      getClaims = do
        -- get the initial claims tree (as of the bond's acquisition time)
        createRedemptionClaim currency maturityDate

    implements Instrument.I where
      asDisclosure = toInterface @Disclosure.I this
      view = Instrument.View with depository; issuer; id; validAsOf = lastEventTimestamp
      getKey = instrumentKey

    implements Lifecyclable.I where
      view = Lifecyclable.View with lifecycler = issuer
      lifecycleImpl Lifecyclable.Lifecycle{ruleName; settler; eventCid; clockCid; observableCids} self =
        case ruleName of
          "Time" -> processClockUpdate settler eventCid clockCid self this observableCids
          other -> abort $ "Unknown lifecycle rule " <> other

    implements Disclosure.I where
      view = Disclosure.View with disclosureControllers = singleton $ singleton issuer; observers
      setObserversImpl Disclosure.SetObservers{newObservers} = do
        cid <- toInterfaceContractId <$> create this with observers = newObservers
        Instrument.disclosureUpdateReference newObservers instrumentKey cid
      archiveImpl self = archive (coerceContractId self : ContractId ZeroCouponBond)
