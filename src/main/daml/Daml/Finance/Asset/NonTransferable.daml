-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Asset.NonTransferable where

import DA.Set (delete, insert, null, singleton)
import Daml.Finance.Interface.Asset.Factory.Holding qualified as HoldingFactory (Create(..), F, HasImplementation(..), Remove(..), View(..))
import Daml.Finance.Interface.Asset.Holding qualified as Holding (I, HasImplementation, View(..))
import Daml.Finance.Interface.Asset.Instrument qualified as Instrument (K)
import Daml.Finance.Interface.Asset.Lockable qualified as Lockable (Acquire(..), I, Lock(..), LockType(..), Release(..), View(..))
import Daml.Finance.Interface.Asset.Types (AccountKey(..))
import Daml.Finance.Interface.Asset.Util (getLocker)
import Daml.Finance.Interface.Common.Disclosure qualified as Disclosure (I, SetObservers(..), View(..))
import Daml.Finance.Interface.Common.Types (Observers)
import Daml.Finance.Interface.Common.Util (flattenObservers)
import Prelude hiding (null)

type F = Factory
type T = NonTransferable

instance Holding.HasImplementation T
-- | Implementation of a non-transferable holding.
-- `NonTransferable` implements the interface `Lockable.I` (which requires Holding.I`, and
-- `Disclosure.I` to be implemented as well).
template NonTransferable
  with
    instrument : Instrument.K
      -- ^ The instrument of which units are held.
    account : AccountKey
      -- ^ The account at which the holding is held. Defines the holding's owner and custodian.
    amount : Decimal
      -- ^ Number of units.
    lock : Optional Lockable.Lock
      -- ^ An optional lock of a holding.
    observers : Observers
      -- ^ Observers.
  where
    signatory account.custodian, account.owner, getLocker this
    observer flattenObservers observers

    ensure amount > 0.0

    implements Disclosure.I where
      view = Disclosure.View with disclosureControllers = singleton $ singleton account.owner; observers
      setObserversImpl Disclosure.SetObservers{newObservers} = toInterfaceContractId <$> create this with observers = newObservers
      archiveImpl self = archive $ fromInterfaceContractId @NonTransferable self

    implements Holding.I where
      asDisclosure = toInterface @Disclosure.I this
      view = Holding.View with
        instrument
        account = AccountKey with custodian = account.custodian; owner = account.owner; id = account.id
        amount

    implements Lockable.I where
      asHolding = toInterface @Holding.I this
      view = Lockable.View with lock
      acquireImpl Lockable.Acquire{newLocker; context; lockType} = do
        newLock <- case (lock, lockType) of
          (Some existingLock, Lockable.Reentrant) -> pure existingLock with context = context `insert` existingLock.context
          (None, _) -> pure Lockable.Lock with locker = newLocker; context = singleton context; lockType
          _ -> abort "Contract is already locked."
        toInterfaceContractId <$> create this with lock = Some newLock
      releaseImpl Lockable.Release{context} = do
        let
          f currentLock = do
            let newContext = context `delete` currentLock.context
            case (currentLock.lockType, null newContext) of
              (Lockable.Reentrant, False) -> Some currentLock with context = newContext
              _ -> None
          releasedLock = lock >>= f
        toInterfaceContractId <$> create this with lock = releasedLock

instance HoldingFactory.HasImplementation Factory
-- | Implementation of the corresponding Holding Factory.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : Observers
      -- ^ The factory's observers.
  where
    signatory provider
    observer flattenObservers observers

    implements HoldingFactory.F
      where
        asDisclosure = toInterface @Disclosure.I this
        view = HoldingFactory.View with provider
        createImpl HoldingFactory.Create{instrument; account; amount; observers} =
          toInterfaceContractId <$> create NonTransferable with instrument; account; amount; observers; lock = None
        removeImpl HoldingFactory.Remove{actors; holdingCid} = archive $ fromInterfaceContractId @NonTransferable holdingCid

    implements Disclosure.I where
      view = Disclosure.View with disclosureControllers = singleton $ singleton provider; observers
      setObserversImpl Disclosure.SetObservers{newObservers} = toInterfaceContractId <$> create this with observers = newObservers
      archiveImpl self = archive (coerceContractId self : ContractId NonTransferable)
