-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Lifecycle.Rule.Replacement where

import DA.Optional (isSome)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (R)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (Evolve(..), I, View(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..), Parties)
import Daml.Finance.Lifecycle.Effect (Effect(..))
import Daml.Finance.Lifecycle.Event.Replacement qualified as Replacement (Event)

-- | Type synonym for `Rule`.
type T = Rule

-- | Rule contract that defines the replacement of units of an instrument with a basket of other
-- instruments (e.g. stock merger).
template Rule
  with
    providers : Parties
      -- ^ Providers of the replacement rule.
    lifecycler : Party
      -- ^ Party performing the lifecycling.
    observers : Parties
      -- ^ Observers.
    id : Id
      -- ^ Identifier for the rule contract.
    description : Text
      -- ^ Textual description.
  where
    signatory providers
    observer observers, lifecycler

    interface instance Lifecycle.I for Rule where
      view = Lifecycle.View with lifecycler; id; description
      evolve Lifecycle.Evolve{eventCid; instrument} = do
        replacement <- fetch $ fromInterfaceContractId @Replacement.Event eventCid
        assertMsg "The input instrument must match the replacement's target instrument"
          $ instrument == replacement.targetInstrument

        -- Check that the targetInstrument is active
        targetInstrumentCid <- lookupByKey @BaseInstrument.R replacement.targetInstrument
        assertMsg "The target instrument must be active" $ isSome targetInstrumentCid

        effectCid <- toInterfaceContractId <$>
          create Effect with
            providers = replacement.providers
            id = replacement.id
            description = replacement.description
            targetInstrument = replacement.targetInstrument
            producedInstrument = None
            otherConsumed = []
            otherProduced = replacement.perUnitReplacement
            settlementTime = Some replacement.effectiveTime
            observers
        pure (None, [effectCid])
