-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Lifecycle.Rule.Replacement where

import DA.Date (toDateUTC)
import Daml.Finance.Interface.Lifecycle.Clock qualified as Clock (GetView(..))
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (HasImplementation, Evolve(..), I, View(..))
import Daml.Finance.Interface.Types.Common (Observers)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (flattenObservers)
import Daml.Finance.Lifecycle.Effect (Effect(..))
import Daml.Finance.Lifecycle.Event.Replacement qualified as Replacement (Event)

-- | Type synonym for `Rule`.
type T = Rule

instance Lifecycle.HasImplementation Rule

-- | Replacement of units of an instrument with a basket of other instruments.
template Rule
  with
    provider : Party
      -- ^ Provider of the replacement rule.
    observers : Observers
      -- ^ Observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance Lifecycle.I for Rule where
      view = Lifecycle.View with lifecycler = provider
      evolve Lifecycle.Evolve{settler; eventCid; clockCid} self = do
        replacement <- fetch $ fromInterfaceContractId @Replacement.Event eventCid
        clockTime <- toDateUTC . (.clockTime) <$> exercise clockCid Clock.GetView with viewer = provider
        if clockTime >= replacement.effectiveDate
        then do
          effectCid <- toInterfaceContractId <$> create Effect
            with
              provider = replacement.provider
              settler
              id = replacement.id
              description = replacement.description
              targetInstrument = replacement.targetInstrument
              producedInstrument = None
              consumed = []
              produced = replacement.perUnitReplacement
              settlementDate = replacement.effectiveDate
              observers
          pure (self, [effectCid])
        else do
          pure (self, [])
