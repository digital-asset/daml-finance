-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Lifecycle.Rule.Distribution where

import DA.Date (toDateUTC)
import Daml.Finance.Interface.Lifecycle.Clock qualified as Clock (GetView(..))
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (HasImplementation, I, Evolve(..), View(..))
import Daml.Finance.Interface.Types.Common (Observers)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (flattenObservers)
import Daml.Finance.Lifecycle.Effect (Effect(..))
import Daml.Finance.Lifecycle.Event.Distribution qualified as Distribution (Event)

-- | Type synonym for `Rule`.
type T = Rule

instance Lifecycle.HasImplementation Rule

-- | Rule contract that defines the distribution of units of an instrument for each unit of a target instrument (e.g., share or cash dividends).
template Rule
  with
    provider : Party
      -- ^ Provider of the distribution rule.
    observers : Observers
      -- ^ Observers of the distributin rule.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance Lifecycle.I for Rule where
      view = Lifecycle.View with lifecycler = provider
      evolve Lifecycle.Evolve{settler; eventCid; clockCid} self = do
        distribution <- fetch $ fromInterfaceContractId @Distribution.Event eventCid
        clockTime <- toDateUTC . (.clockTime) <$> exercise clockCid Clock.GetView with viewer = provider
        if clockTime >= distribution.effectiveDate
        then do
          effectCid <- toInterfaceContractId <$> create Effect
            with
              provider
              settler
              id = distribution.id
              description = distribution.description
              targetInstrument = distribution.targetInstrument
              producedInstrument = Some distribution.newInstrument
              consumed = []
              produced = distribution.perUnitDistribution
              settlementDate = distribution.effectiveDate
              observers
          pure (self, [effectCid])
        else do
          pure (self, [])
