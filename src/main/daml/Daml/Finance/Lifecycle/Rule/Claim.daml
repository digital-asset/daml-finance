-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Lifecycle.Rule.Claim where

import DA.Foldable (forA_)
import DA.Set (member)
import Daml.Finance.Interface.Account.Util (getCustodian, getOwner)
import Daml.Finance.Interface.Holding.Util (getInstrument)
import Daml.Finance.Interface.Lifecycle.Effect qualified as Effect (Calculate(..), CalculationResult(..), GetView(..))
import Daml.Finance.Interface.Lifecycle.Rule.Claim qualified as Claim (ClaimEffect(..), ClaimResult(..), HasImplementation(..), I, View(..))
import Daml.Finance.Interface.Settlement.Factory qualified as Factory (I, Instruct(..))
import Daml.Finance.Interface.Settlement.RouteProvider qualified as RouteProvider (I, Discover(..))
import Daml.Finance.Interface.Settlement.Types (Step(..))
import Daml.Finance.Interface.Types.Common (Parties)
import Daml.Finance.Lifecycle.Rule.Util

-- | Type synonym for `Rule`.
type T = Rule

instance Claim.HasImplementation Rule

-- | Rule contract that allows an actor to claim effects, returning settlement instructions.
template Rule
  with
    providers : Parties
      -- ^ Providers of the claim rule. Together with the actors of the `ClaimEffect` choice the
      --   authorization requirements to upgrade the holdings being claimed have to be met.
    claimers : Parties
      -- ^ Any of the parties can claim an effect.
    settlers : Parties
      -- ^ Any of the parties can trigger settlement of the resulting batch.
    routeProviderCid : ContractId RouteProvider.I
      -- ^ RouteProvider used to discover settlement routes.
    settlementFactoryCid : ContractId Factory.I
      -- ^ Settlement factory contract used to create a `Batch` of `Instruction`\s.
    netInstructions : Bool
      -- ^ Configure whether netting should be enabled for quantities having the same (instrument,
      --   sender, receiver).
  where
    signatory providers
    observer claimers

    interface instance Claim.I for Rule where
      view = Claim.View with providers; claimers; settlers; routeProviderCid; settlementFactoryCid
      claimEffect Claim.ClaimEffect{claimer; holdingCids; effectCid; batchId} = do
        assertMsg "Effect can only be claimed by authorized parties." $
          claimer `member` this.claimers
        effectView <- exercise effectCid Effect.GetView with viewer = claimer
        holdings <- mapA fetch holdingCids
        forA_ holdings \h ->
          assertMsg "The provided holding does not reference the expected instrument." $
            getInstrument h == effectView.targetInstrument

        -- Calculate settlement steps
        let
          createSteps consume quantities holding =
            let
              owner = getOwner holding
              custodian = getCustodian holding
              sender = if consume then owner else custodian
              receiver = if consume then custodian else owner
            in map (\quantity -> Step with sender; receiver; quantity) quantities

          calculateSteps holding holdingCid = do
            Effect.CalculationResult with consumed; produced <- exercise effectCid Effect.Calculate
              with actor = claimer; holdingCid
            let
              (consumedNetted, producedNetted) =
                if netInstructions
                then splitPending . net $ mergeConsumedAndProduced consumed produced
                else (consumed, produced)
              consumedSteps = createSteps True consumedNetted holding
              producedSteps = createSteps False producedNetted holding
            pure $ consumedSteps <> producedSteps

        -- Settlement steps
        steps <- mconcat <$> sequence (zipWith calculateSteps holdings holdingCids)

        -- Discover settlement routes
        routedSteps <- exercise routeProviderCid RouteProvider.Discover with
          discoverors = providers; contextId = None; steps

        -- Generate settlement instructions for other instruments
        (batchCid, instructionCids) <- exercise settlementFactoryCid Factory.Instruct
          with
            instructors = providers
            settlers
            id = batchId
            description = effectView.description
            contextId = Some effectView.id
            routedSteps
        pure Claim.ClaimResult with batchCid; instructionCids
