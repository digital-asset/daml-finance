-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Lifecycle.Event.Distribution where

import DA.Time (time)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (K, Q)
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (HasImplementation, I, View(..))
import Daml.Finance.Interface.Types.Common (Id, Observers)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (flattenObservers)

-- | Type synonym for `Event`.
type T = Event

instance Event.HasImplementation Event

-- | Event contract for the distribution of units of an instrument for each unit of a target instrument (e.g., share or cash dividends).
template Event
  with
    provider : Party
      -- ^ Providers of the distribution event.
    id : Id
      -- ^ Event Identifier.
    description : Text
      -- ^ Event description.
    effectiveDate : Date
      -- ^ Date on which the distribution is effectuated.
    targetInstrument : Instrument.K
      -- ^ Instrument the distribution event applies to.
    newInstrument : Instrument.K
      -- ^ Instrument after the distribution has been claimed.
    perUnitDistribution : [Instrument.Q]
      -- ^ Distributed quantities per unit held.
    observers : Observers
      -- ^ Observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    ensure targetInstrument.depository == newInstrument.depository
      && targetInstrument.issuer == newInstrument.issuer
      && targetInstrument.id == newInstrument.id

    interface instance Event.I for Event where
      view = Event.View with id; description; eventTime = time effectiveDate 0 0 0
