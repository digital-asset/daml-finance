-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Lifecycle.Event.Distribution where

import DA.Time (time)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (K, Q)
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I, View(..))
import Daml.Finance.Interface.Lifecycle.Event.Distribution qualified as Distribution (HasImplementation, I, View(..))
import Daml.Finance.Interface.Types.Common (Id, Parties)

-- | Type synonym for `Event`.
type T = Event

instance Distribution.HasImplementation Event

-- | Event contract for the distribution of units of an instrument for each unit of a target instrument (e.g., share or cash dividends).
template Event
  with
    providers : Parties
      -- ^ Providers of the distribution event.
    id : Id
      -- ^ Event Identifier.
    description : Text
      -- ^ Event description.
    effectiveDate : Date
      -- ^ Date on which the distribution is effectuated.
    targetInstrumentKey : Instrument.K
      -- ^ Instrument the distribution event applies to.
    newInstrumentKey : Instrument.K
      -- ^ Instrument after the distribution has been claimed.
    perUnitDistribution : [Instrument.Q]
      -- ^ Distributed quantities per unit held.
    observers : Parties
      -- ^ Observers.
  where
    signatory providers
    observer observers

    ensure targetInstrumentKey.depository == newInstrumentKey.depository
      && targetInstrumentKey.issuer == newInstrumentKey.issuer
      && targetInstrumentKey.id == newInstrumentKey.id

    interface instance Event.I for Event where
      view = Event.View with providers; id; description; eventTime = time effectiveDate 0 0 0

    interface instance Distribution.I for Event where
      view = Distribution.View with effectiveDate; targetInstrumentKey; newInstrumentKey; perUnitDistribution
      asEvent = toInterface @Event.I this
