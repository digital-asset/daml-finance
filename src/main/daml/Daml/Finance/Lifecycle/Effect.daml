-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Lifecycle.Effect where

import DA.Assert ((===))
import Daml.Finance.Interface.Holding.Util (getAmount, getInstrument)
import Daml.Finance.Interface.Lifecycle.Effect qualified as Effect (Calculate(..), CalculationResult(..), I, SetProviders(..), View(..))
import Daml.Finance.Interface.Types.Common.Types (Id, InstrumentKey, InstrumentQuantity, Parties, PartiesMap)
import Daml.Finance.Interface.Util.Common (qty, scale)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

-- | Type synonym for `Effect`.
type T = Effect

-- | A contract encoding the consequences of a lifecycle event for one unit of the target
-- instrument.
template Effect
  with
    providers : Parties
      -- ^ The effect provider.
    id : Id
      -- ^ The effect's identifier.
    description : Text
      -- ^ The effect's description.
    targetInstrument : InstrumentKey
      -- ^ The target instrument.
    producedInstrument : Optional InstrumentKey
      -- ^ The produced instrument, when it exists.
    otherConsumed : [InstrumentQuantity]
      -- ^ Consumed quantities (in addition to the target instrument).
    otherProduced : [InstrumentQuantity]
      -- ^ Produced quantities (in additon to the produced instrument).
    settlementTime : Optional Time
      -- ^ The effect's settlement time (if any).
    observers : PartiesMap
      -- ^ Observers.
  where
    signatory providers
    observer Disclosure.flattenObservers observers

    interface instance Effect.I for Effect where
      view = Effect.View with
        providers; id; description; targetInstrument; producedInstrument; otherConsumed
        otherProduced; settlementTime

      calculate Effect.Calculate{holdingCid} _ = do
        holding <- fetch holdingCid
        getInstrument holding === targetInstrument
        let scaleAll = fmap . scale $ getAmount holding
        pure Effect.CalculationResult with
          consumed = scaleAll $ qty 1.0 targetInstrument :: otherConsumed
          produced = scaleAll $ case producedInstrument of
            Some pi -> qty 1.0 pi :: otherProduced
            None -> otherProduced

      setProviders Effect.SetProviders{newProviders} =
        toInterfaceContractId <$> create this with providers = newProviders

    interface instance Disclosure.I for Effect where
      view = Disclosure.View with disclosureControllers = providers; observers
      setObservers = setObserversImpl @Effect @Disclosure.I this None
      addObservers = addObserversImpl @Effect @Disclosure.I this None
      removeObservers = removeObserversImpl @Effect @Disclosure.I this None
