-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Lifecycle.Effect where

import DA.Assert ((===))
import Daml.Finance.Interface.Common.Types (Observers)
import Daml.Finance.Interface.Common.Util (flattenObservers)
import Daml.Finance.Interface.Holding.Util (getAmount, getInstrument)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (K, Q, scale)
import Daml.Finance.Interface.Lifecycle.Effect qualified as Effect (Calculate(..), CalculationResult(..), HasImplementation, I, SetProvider(..), View(..))

-- | Type synonym for `Effect`.
type T = Effect

instance Effect.HasImplementation T

-- | A contract encoding the consequences of a lifecycle event for a unit of the target instrument.
template Effect
  with
    provider : Party
      -- ^ The effect provider.
    settler : Party
      -- ^ The party settling the effect's consequences.
    targetInstrument : Instrument.K
      -- ^ The target instrument.
    producedInstrument : Optional Instrument.K
      -- ^ The produced instrument, when it exists.
    consumed : [Instrument.Q]
      -- ^ Consumed quantities (not including the target instrument).
    produced : [Instrument.Q]
      -- ^ Produced quantities (not including the produced instrument).
    settlementDate : Date
      -- ^ The effect's settlement date.
    id : Text
      -- ^ A textual identifier.
    observers : Observers
      -- ^ Observers.
  where
    signatory provider
    observer flattenObservers observers

    implements Effect.I where
      view = Effect.View with provider; targetInstrument; id; producedInstrument

      calculate Effect.Calculate{holdingCid} _ = do
        holding <- fetch holdingCid
        getInstrument holding === targetInstrument
        let scaleAll = fmap $ Instrument.scale $ getAmount holding
        pure Effect.CalculationResult with
          consumed = scaleAll consumed
          produced = scaleAll produced

      setProvider Effect.SetProvider{newProvider} = do toInterfaceContractId <$> create this with provider = newProvider
