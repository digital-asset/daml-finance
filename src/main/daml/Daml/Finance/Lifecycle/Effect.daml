-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Lifecycle.Effect where

import DA.Assert ((===))
import Daml.Finance.Interface.Holding.Util (getAmount, getInstrument)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (K, Q, scale)
import Daml.Finance.Interface.Lifecycle.Effect qualified as Effect (Calculate(..), CalculationResult(..), HasImplementation, I, SetProvider(..), View(..))
import Daml.Finance.Interface.Types.Common (Id, Observers)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (flattenObservers)

-- | Type synonym for `Effect`.
type T = Effect

instance Effect.HasImplementation T

-- | A contract encoding the consequences of a lifecycle event for one unit of the target instrument.
template Effect
  with
    provider : Party
      -- ^ The effect provider.
    settler : Party
      -- ^ The party settling the effect's consequences.
    id : Id
      -- ^ The effect's identifier.
    description : Text
      -- ^ The effect's description.
    targetInstrument : Instrument.K
      -- ^ The target instrument.
    producedInstrument : Optional Instrument.K
      -- ^ The produced instrument, when it exists.
    consumed : [Instrument.Q]
      -- ^ Consumed quantities (not including the target instrument).
    produced : [Instrument.Q]
      -- ^ Produced quantities (not including the produced instrument).
    settlementDate : Date
      -- ^ The effect's settlement date.
    observers : Observers
      -- ^ Observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance Effect.I for Effect where
      view = Effect.View with provider; id; description; targetInstrument; producedInstrument

      calculate Effect.Calculate{holdingCid} _ = do
        holding <- fetch holdingCid
        getInstrument holding === targetInstrument
        let scaleAll = fmap . Instrument.scale $ getAmount holding
        pure Effect.CalculationResult with
          consumed = scaleAll consumed
          produced = scaleAll produced

      setProvider Effect.SetProvider{newProvider} = toInterfaceContractId <$> create this with provider = newProvider
