-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Lifecycle.ElectionEffect where

import DA.Assert ((===))
import Daml.Finance.Interface.Holding.Util (getAmount, getInstrument)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (K, Q, scale)
import Daml.Finance.Interface.Lifecycle.Effect qualified as Effect (Calculate(..), CalculationResult(..), HasImplementation, I, SetProvider(..), View(..))
import Daml.Finance.Interface.Types.Common (Id, Observers)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (flattenObservers)

-- | Type synonym for `ElectionEffect`.
type T = ElectionEffect

instance Effect.HasImplementation T

-- | A contract encoding the consequences of an election for one unit of the target instrument.
-- It needs to be claimed with a holding of the right amount and is consumed after claiming.
template ElectionEffect
  with
    provider : Party
      -- ^ The effect provider.
    settler : Party
      -- ^ The party settling the effect's consequences.
    custodian : Party
      -- ^ The custodian of the holding put forward for election.
    owner : Party
      -- ^ The owner of the holding put forward for election.
    id : Id
      -- ^ The effect's identifier.
    description : Text
      -- ^ The effect's description.
    targetInstrument : Instrument.K
      -- ^ The target instrument.
    producedInstrument : Optional Instrument.K
      -- ^ The produced instrument, when it exists.
    amount : Decimal
      -- ^ The elected amount.
    consumed : [Instrument.Q]
      -- ^ Consumed quantities (not including the target instrument).
    produced : [Instrument.Q]
      -- ^ Produced quantities (not including the produced instrument).
    settlementDate : Date
      -- ^ The effect's settlement date.
    observers : Observers
      -- ^ Observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance Effect.I for ElectionEffect where
      view = Effect.View with provider; id; description; targetInstrument; producedInstrument

      calculate Effect.Calculate{actor; holdingCid} self = do
        holding <- fetch holdingCid
        getInstrument holding === targetInstrument
        getAmount holding === amount
        assertMsg "Election effects can only be calculated by the elector or their counterparty" $ actor == owner || actor == custodian
        archive $ fromInterfaceContractId @ElectionEffect self
        let scaleAll = fmap $ Instrument.scale $ getAmount holding
        pure Effect.CalculationResult
          with
            consumed = scaleAll consumed
            produced = scaleAll produced

      setProvider Effect.SetProvider{newProvider} = toInterfaceContractId <$> create this with provider = newProvider
