-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Holding.Fungible where

import DA.Action (foldlA)
import DA.Foldable qualified as F (all)
import DA.Set (fromList, singleton)
import DA.Traversable qualified as T (forA)
import Daml.Finance.Holding.Util (acquireImpl, releaseImpl, transferImpl)
import Daml.Finance.Interface.Holding.Base (getLockers)
import Daml.Finance.Interface.Holding.Base qualified as Base (I, Lock(..), View(..))
import Daml.Finance.Interface.Holding.Factory qualified as HoldingFactory (Create(..), F, HasImplementation(..), Remove(..), View(..))
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (HasImplementation, I, Merge(..), Split(..), SplitResult(..), View(..))
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, View(..))
import Daml.Finance.Interface.Types.Common.Types (AccountKey(..), InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Util.Common (verify)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)
import Prelude hiding (null)

-- | Type synonym for `Factory`.
type F = Factory

-- | Type synonym for `Fungible`.
type T = Fungible

instance Fungible.HasImplementation T
-- | Implementation of a fungible holding.
-- The `Fungible` template implements the interface `Fungible.I` (which requires `Transferable.I`,
-- `Base.I` and `Disclosure.I` to be implemented).
template Fungible
  with
    instrument : InstrumentKey
      -- ^ The instrument of which units are held.
    account : AccountKey
      -- ^ The account at which the holding is held. Defines the holding's owner and custodian.
    amount : Decimal
      -- ^ Number of units.
    lock : Optional Base.Lock
      -- ^ An optional lock of a holding.
    observers : PartiesMap
      -- ^ Observers.
  where
    signatory account.custodian, account.owner, getLockers this
    observer Disclosure.flattenObservers observers

    ensure amount > 0.0

    interface instance Disclosure.I for Fungible where
      view = Disclosure.View with
        disclosureControllers = fromList [account.owner, account.custodian]; observers
      setObservers = setObserversImpl @Fungible @Disclosure.I this None
      addObservers = addObserversImpl @Fungible @Disclosure.I this None
      removeObservers = removeObserversImpl @Fungible @Disclosure.I this None

    interface instance Base.I for Fungible where
      asDisclosure = toInterface @Disclosure.I this
      view = Base.View with instrument; account; amount; lock
      acquire = acquireImpl @Fungible this
      release = releaseImpl @Fungible this

    interface instance Transferable.I for Fungible where
      asBase = toInterface @Base.I this
      view = Transferable.View {}
      transfer = transferImpl $ toInterface @Transferable.I this

    interface instance Fungible.I for Fungible where
      asTransferable = toInterface @Transferable.I this
      view = Fungible.View with modifiers = singleton account.owner
      split Fungible.Split{amounts} = do
        splitCids <- forA amounts \a -> toInterfaceContractId <$> create this with amount = a
        restAmount <- getRestAmount amounts amount
        rest <- T.forA restAmount \r -> toInterfaceContractId <$> create this with amount = r
        pure Fungible.SplitResult with splitCids; rest
      merge Fungible.Merge{fungibleCids} = do
        let
          f a cid = do
            Some (fungibleCid, fungible) <- fetchFromInterface @Fungible cid
            assertMsg "instrument must match" $ instrument == fungible.instrument
            archive fungibleCid
            pure $ a + fungible.amount
        tot <- foldlA f amount fungibleCids
        toInterfaceContractId <$> create this with amount = tot

instance HoldingFactory.HasImplementation Factory
-- | Implementation of the corresponding Holding Factory.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance HoldingFactory.F for Factory
      where
        asDisclosure = toInterface @Disclosure.I this
        view = HoldingFactory.View with provider
        create' HoldingFactory.Create{instrument; account; amount; observers} = do
          assertMsg "amount must be positive" $ amount > 0.0
          toInterfaceContractId <$>
            create Fungible with instrument; account; amount; observers; lock = None
        remove HoldingFactory.Remove{holdingCid} =
          archive $ fromInterfaceContractId @Fungible holdingCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None

-- | HIDE Gets the rest amount of a split (if any) and verifies that split amounts are strictly
-- positive and don't exceed the current amount.
getRestAmount : CanAssert m => [Decimal] -> Decimal -> m (Optional Decimal)
getRestAmount amounts currentAmount = do
  let splitAmountSum = sum amounts
  verify (splitAmountSum <= currentAmount && F.all (> 0.0) amounts && amounts /= []) $ "Fungible::"
    <> "verifySplit - Amounts must be non-empty, strictly positive, and not exceed current amount. "
    <> "amounts=" <> show amounts
    <> ", splitAmountSum=" <> show splitAmountSum
    <> ", currentAmount=" <> show currentAmount
  let rest = currentAmount - splitAmountSum
  pure $ if rest == 0.0 then None else Some rest
