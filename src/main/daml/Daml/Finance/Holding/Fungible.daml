-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Holding.Fungible where

import DA.Action (foldlA)
import DA.Set (singleton)
import Daml.Finance.Holding.Util (acquireImpl, releaseImpl, transferImpl)
import Daml.Finance.Interface.Holding.Base (getLockers)
import Daml.Finance.Interface.Holding.Base qualified as Base (I, Lock(..), View(..))
import Daml.Finance.Interface.Holding.Factory qualified as HoldingFactory (Create(..), F, HasImplementation(..), Remove(..), View(..))
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (HasImplementation, I, Merge(..), Split(..), SplitResult(..), View(..))
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, View(..))
import Daml.Finance.Interface.Types.Common (AccountKey(..), InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, SetObservers(..), View(..), flattenObservers)
import Prelude hiding (null)

-- | Type synonym for `Factory`.
type F = Factory

-- | Type synonym for `Fungible`.
type T = Fungible

instance Fungible.HasImplementation T
-- | Implementation of a fungible holding.
-- `Fungible` implements the interface `Fungible.I` (which requires
-- `Transferable.I`, `Base.I`, and `Disclosure.I` to be implemented as well).
template Fungible
  with
    instrument : InstrumentKey
      -- ^ The instrument of which units are held.
    account : AccountKey
      -- ^ The account at which the holding is held. Defines the holding's owner and custodian.
    amount : Decimal
      -- ^ Number of units.
    lock : Optional Base.Lock
      -- ^ An optional lock of a holding.
    observers : PartiesMap
      -- ^ Observers.
  where
    signatory account.custodian, account.owner, getLockers this
    observer Disclosure.flattenObservers observers

    ensure amount > 0.0

    interface instance Disclosure.I for Fungible where
      view = Disclosure.View with disclosureControllers = singleton account.owner; observers
      setObservers Disclosure.SetObservers{newObservers} = toInterfaceContractId <$> create this with observers = newObservers
      archive' self = archive $ fromInterfaceContractId @Fungible self

    interface instance Base.I for Fungible where
      asDisclosure = toInterface @Disclosure.I this
      view = Base.View with instrument; account; amount; lock
      acquire = acquireImpl @Fungible this
      release = releaseImpl @Fungible this

    interface instance Transferable.I for Fungible where
      asBase = toInterface @Base.I this
      view = Transferable.View {}
      transfer = transferImpl

    interface instance Fungible.I for Fungible where
      asTransferable = toInterface @Transferable.I this
      view = Fungible.View with modifiers = singleton account.owner
      split Fungible.Split{amounts} = do
        let rest = amount - sum amounts
        assertMsg "split quantities are not more than the available amount" $ rest >= 0.0
        splitCids <- forA amounts $ \q -> toInterfaceContractId <$> create this with amount = q
        rest <- if rest == 0.0 then pure None else Some . toInterfaceContractId <$> create this with amount = rest
        pure $ Fungible.SplitResult with splitCids; rest
      merge Fungible.Merge{fungibleCids} = do
        let
          f qty cid = do
            Some (fungibleCid, fungible) <- fetchFromInterface @Fungible cid
            archive fungibleCid
            assertMsg "instrument must match" $ instrument == fungible.instrument
            pure $ qty + fungible.amount
        tot <- foldlA f amount fungibleCids
        toInterfaceContractId <$> create this with amount = tot

instance HoldingFactory.HasImplementation Factory
-- | Implementation of the corresponding Holding Factory.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance HoldingFactory.F for Factory
      where
        asDisclosure = toInterface @Disclosure.I this
        view = HoldingFactory.View with provider
        create' HoldingFactory.Create{instrument; account; amount; observers} =
          toInterfaceContractId <$> create Fungible with instrument; account; amount; observers; lock = None
        remove HoldingFactory.Remove{actors; holdingCid} = archive $ fromInterfaceContractId @Fungible holdingCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers Disclosure.SetObservers{newObservers} = toInterfaceContractId <$> create this with observers = newObservers
      archive' self = archive (coerceContractId self : ContractId Fungible)
