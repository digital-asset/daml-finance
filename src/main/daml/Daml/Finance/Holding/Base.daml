-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Holding.Base where

import DA.Set (fromList, singleton)
import Daml.Finance.Interface.Holding.Base qualified as Base (I, View(..))
import Daml.Finance.Interface.Types.Common.Types (AccountKey(..), InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Types.Common.Types qualified as Types (HoldingStandard(..))
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Interface.Util.Lockable qualified as Lockable (I, Lock(..), View(..), getLockers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)
import Daml.Finance.Util.Lockable (acquireImpl, isValidLock, releaseImpl)

-- | Type synonym for `Base`.
type T = Base

-- | Implementation of a base holding, i.e., a non-fungible and non-transferable holding.
-- `Base` implements the interface `Base.I` (which requires `Lockable.I` and
-- `Disclosure.I` to be implemented), but neither `Fungible.I` nor `Transferable.I`.
template Base
  with
    instrument : InstrumentKey
      -- ^ The instrument of which units are held.
    account : AccountKey
      -- ^ The account at which the holding is held. Defines the holding's owner and custodian.
    amount : Decimal
      -- ^ Number of units.
    lock : Optional Lockable.Lock
      -- ^ An optional lock for the holding.
    observers : PartiesMap
      -- ^ Observers.
  where
    signatory account.custodian, account.owner, Lockable.getLockers this
    observer Disclosure.flattenObservers observers

    ensure amount > 0.0 && isValidLock lock && instrument.holdingStandard == Types.Base

    interface instance Disclosure.I for Base where
      view = Disclosure.View with
        disclosureControllers = fromList [account.owner, account.custodian]; observers
      setObservers = setObserversImpl @_ @Disclosure.I this None
      addObservers = addObserversImpl @_ @Disclosure.I this None
      removeObservers = removeObserversImpl @_ @Disclosure.I this None

    interface instance Lockable.I for Base where
      view = Lockable.View with lock; controllers = singleton account.owner
      acquire = acquireImpl this.lock (\lock -> this with lock)
      release = releaseImpl this.lock (\lock -> this with lock)

    interface instance Base.I for Base where
      view = Base.View with instrument; account; amount
