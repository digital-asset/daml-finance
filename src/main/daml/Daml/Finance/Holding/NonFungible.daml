-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Holding.NonFungible where

import DA.Assert ((===))
import DA.Set (delete, insert, null, singleton)
import Daml.Finance.Interface.Holding.Account qualified as Account (Credit(..), I, R, exerciseInterfaceByKey)
import Daml.Finance.Interface.Holding.Base qualified as Base (I, View(..))
import Daml.Finance.Interface.Holding.Factory.Holding qualified as HoldingFactory (Create(..), F, HasImplementation(..), Remove(..), View(..))
import Daml.Finance.Interface.Holding.Lockable qualified as Lockable (Acquire(..), I, Lock(..), LockType(..), Release(..), View(..))
import Daml.Finance.Interface.Holding.Transferable qualified as NonFungible (HasImplementation)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..), View(..))
import Daml.Finance.Interface.Holding.Util (getLocker)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty)
import Daml.Finance.Interface.Types.Common (AccountKey(..), InstrumentKey(..), Observers)
import Daml.Finance.Interface.Util.Common (fetchInterfaceByKey)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, SetObservers(..), View(..), flattenObservers)
import Prelude hiding (null)

-- | Type synonym for `Factory`.
type F = Factory

-- | Type synonym for `NonFungible`.
type T = NonFungible

instance NonFungible.HasImplementation T
-- | Implementation of a non-fungible holding.
-- `NonFungible` implements the interface `Transferable.I` (which requires `Lockable.I`,
-- `Base.I`, and `Disclosure.I` to be implemented as well).
template NonFungible
  with
    instrument : InstrumentKey
      -- ^ The instrument of which units are held.
    account : AccountKey
      -- ^ The account at which the holding is held. Defines the holding's owner and custodian.
    amount : Decimal
      -- ^ Number of units.
    lock : Optional Lockable.Lock
      -- ^ An optional lock of a holding.
    observers : Observers
      -- ^ Observers.
  where
    signatory account.custodian, account.owner, getLocker this
    observer Disclosure.flattenObservers observers

    ensure amount > 0.0

    interface instance Disclosure.I for NonFungible where
      view = Disclosure.View with disclosureControllers = singleton $ singleton account.owner; observers
      setObservers Disclosure.SetObservers{newObservers} = toInterfaceContractId <$> create this with observers = newObservers
      archive' self = archive $ fromInterfaceContractId @NonFungible self

    interface instance Base.I for NonFungible where
      asDisclosure = toInterface @Disclosure.I this
      view = Base.View with
        instrument
        account = AccountKey with custodian = account.custodian; owner = account.owner; id = account.id
        amount

    interface instance Lockable.I for NonFungible where
      asHolding = toInterface @Base.I this
      view = Lockable.View with lock
      acquire Lockable.Acquire{newLocker; context; lockType} = do
        newLock <- case (lock, lockType) of
          (Some existingLock, Lockable.Reentrant) -> pure existingLock with context = context `insert` existingLock.context
          (None, _) -> pure Lockable.Lock with locker = newLocker; context = singleton context; lockType
          _ -> abort "Contract is already locked."
        toInterfaceContractId <$> create this with lock = Some newLock
      release Lockable.Release{context} = do
        let
          f currentLock = do
            let newContext = context `delete` currentLock.context
            case (currentLock.lockType, null newContext) of
              (Lockable.Reentrant, False) -> Some currentLock with context = newContext
              _ -> None
          releasedLock = lock >>= f
        toInterfaceContractId <$> create this with lock = releasedLock

    interface instance Transferable.I for NonFungible where
      asLockable = toInterface @Lockable.I this
      view = Transferable.View ()
      transfer Transferable.Transfer{newOwnerAccount} = do
        -- Account sanity checks
        newAccount <- fetchInterfaceByKey @Account.R newOwnerAccount
        let v = _view newAccount
        v.owner === newOwnerAccount.owner
        v.custodian === account.custodian
        -- Create new holding via Credit
        newHoldingCid <- coerceContractId <$> Account.exerciseInterfaceByKey @Account.I newOwnerAccount newOwnerAccount.owner Account.Credit
          with
            quantity = Instrument.qty amount instrument
        -- Holding sanity checks. This prevents a holding from changing type during a `Transfer` (from e.g., `NonFungible` to `Fungible`)
        newHolding <- fetch newHoldingCid
        assertMsg "Sent holding type does not correspond to receiving account holding type" $ interfaceTypeRep newHolding == templateTypeRep @NonFungible
        pure newHoldingCid

instance HoldingFactory.HasImplementation Factory
-- | Implementation of the corresponding Holding Factory.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : Observers
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance HoldingFactory.F for Factory
      where
        asDisclosure = toInterface @Disclosure.I this
        view = HoldingFactory.View with provider
        create' HoldingFactory.Create{instrument; account; amount; observers} =
          toInterfaceContractId <$> create NonFungible with instrument; account; amount; observers; lock = None
        remove HoldingFactory.Remove{actors; holdingCid} = archive $ fromInterfaceContractId @NonFungible holdingCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton $ singleton provider; observers
      setObservers Disclosure.SetObservers{newObservers} = toInterfaceContractId <$> create this with observers = newObservers
      archive' self = archive (coerceContractId self : ContractId NonFungible)
