-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Holding.NonFungible where

import DA.Set (fromList, singleton)
import Daml.Finance.Holding.Util (acquireImpl, releaseImpl, transferImpl)
import Daml.Finance.Interface.Holding.Base (getLockers)
import Daml.Finance.Interface.Holding.Base qualified as Base (I, Lock(..), View(..))
import Daml.Finance.Interface.Holding.Factory qualified as HoldingFactory (Create(..), F, HasImplementation(..), Remove(..), View(..))
import Daml.Finance.Interface.Holding.Transferable qualified as NonFungible (HasImplementation)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, View(..))
import Daml.Finance.Interface.Types.Common.Types (AccountKey(..), InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)
import Prelude hiding (null)

-- | Type synonym for `Factory`.
type F = Factory

-- | Type synonym for `NonFungible`.
type T = NonFungible

instance NonFungible.HasImplementation T
-- | Implementation of a non-fungible holding.
-- `NonFungible` implements the interface `Transferable.I` (which requires `Base.I` and
-- `Disclosure.I` to be implemented).
template NonFungible
  with
    instrument : InstrumentKey
      -- ^ The instrument of which units are held.
    account : AccountKey
      -- ^ The account at which the holding is held. Defines the holding's owner and custodian.
    amount : Decimal
      -- ^ Number of units.
    lock : Optional Base.Lock
      -- ^ An optional lock of a holding.
    observers : PartiesMap
      -- ^ Observers.
  where
    signatory account.custodian, account.owner, getLockers this
    observer Disclosure.flattenObservers observers

    ensure amount > 0.0

    interface instance Disclosure.I for NonFungible where
      view = Disclosure.View with
        disclosureControllers = fromList [account.owner, account.custodian]; observers
      setObservers = setObserversImpl @NonFungible @Disclosure.I this None
      addObservers = addObserversImpl @NonFungible @Disclosure.I this None
      removeObservers = removeObserversImpl @NonFungible @Disclosure.I this None

    interface instance Base.I for NonFungible where
      asDisclosure = toInterface @Disclosure.I this
      view = Base.View with instrument; account; amount; lock
      acquire = acquireImpl @NonFungible this
      release = releaseImpl @NonFungible this

    interface instance Transferable.I for NonFungible where
      asBase = toInterface @Base.I this
      view = Transferable.View {}
      transfer = transferImpl $ toInterface @Transferable.I this

instance HoldingFactory.HasImplementation Factory
-- | Implementation of the corresponding Holding Factory.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance HoldingFactory.F for Factory
      where
        asDisclosure = toInterface @Disclosure.I this
        view = HoldingFactory.View with provider
        create' HoldingFactory.Create{instrument; account; amount; observers} = do
          assertMsg "amount must be positive" $ amount > 0.0
          toInterfaceContractId <$>
            create NonFungible with instrument; account; amount; observers; lock = None
        remove HoldingFactory.Remove{holdingCid} =
          archive $ fromInterfaceContractId @NonFungible holdingCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None
