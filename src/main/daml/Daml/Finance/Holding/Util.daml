-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Holding.Util where

import DA.Action (foldlA)
import DA.Foldable qualified as F (all)
import DA.Optional (isSome)
import DA.Set qualified as S (delete, fromList, insert, isSubsetOf, notMember, null, singleton, toList)
import DA.Traversable qualified as T (forA)
import Daml.Finance.Interface.Account.Account qualified as Account (Credit(..), Debit(..), I, R, exerciseInterfaceByKey)
import Daml.Finance.Interface.Account.Util (fetchAccount)
import Daml.Finance.Interface.Holding.Base qualified as Base (Acquire(..), I, Lock(..), LockType(..), Release(..), getLockers)
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I, Merge(..), Split(..), SplitResult(..))
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Interface.Util.Common (fetchInterfaceByKey, qty, verify)

-- | Default implementation of `transfer` for the `Transferable` interface.
transferImpl : Transferable.I -> ContractId Transferable.I -> Transferable.Transfer
  -> Update (ContractId Transferable.I)
transferImpl this self Transferable.Transfer{actors; newOwnerAccount} = do
  let
    baseCid = toInterfaceContractId @Base.I self
    base = toInterface @Base.I this
  account <- fetchAccount base
  let
    vBase = view base
    vAccount = view account
    lockers = Base.getLockers base
  vNewAccount <- view <$> fetchInterfaceByKey @Account.R @Account.I newOwnerAccount
  -- Verify
  assertMsg "Actors must contain all transfer outgoing of the sender account"
    $ vAccount.controllers.outgoing `S.isSubsetOf` actors
  assertMsg "Actors must contain all transfer incoming of the receiving account"
    $ vNewAccount.controllers.incoming `S.isSubsetOf` actors
  assertMsg "Actors must contain all lockers" $ lockers `S.isSubsetOf` actors
  assertMsg "Custodians must be the same" $ vBase.account.custodian == vAccount.custodian
  -- Release all locks
  let
    releaseAll cid lock =
      foldlA (\acc context -> exercise acc Base.Release with context) cid (S.toList lock.context)
  baseCid <- toInterfaceContractId @Base.I <$>
    optional (pure baseCid) (releaseAll baseCid) vBase.lock
  -- Debit
  Account.exerciseInterfaceByKey @Account.I vBase.account vBase.account.custodian
    Account.Debit with holdingCid = baseCid
  -- Credit
  newBaseCid <- Account.exerciseInterfaceByKey @Account.I newOwnerAccount newOwnerAccount.custodian
    Account.Credit with quantity = qty vBase.amount vBase.instrument
  -- Consistency check
  newBase <- fetch newBaseCid
  assertMsg "credited and debited holding types must match" $
    interfaceTypeRep newBase == interfaceTypeRep base
  -- Reapply locks
  let
    reapplyLocks cid lock = foldlA (\acc context -> exercise acc Base.Acquire with
      newLockers = lock.lockers; context; lockType = lock.lockType) cid (S.toList lock.context)
  coerceInterfaceContractId <$> optional (pure newBaseCid) (reapplyLocks newBaseCid) vBase.lock

-- | Default implementation of `acquire` from the `Base` interface.
acquireImpl :
  ( HasCreate t
  , HasSignatory t
  , HasFromInterface t Base.I
  , HasToInterface t Base.I
  ) => Optional Base.Lock -> (Optional Base.Lock -> t) -> Base.Acquire -> Update (ContractId Base.I)
acquireImpl currentLock setLock Base.Acquire{newLockers; context; lockType} = do
  assertMsg "New lockers must be non-empty" (not $ S.null newLockers)
  newHolding <- setLock . Some <$> case currentLock of
    None -> pure Base.Lock with lockers = newLockers; context = S.singleton context; lockType
    Some existingLock -> do
      case lockType of
        Base.Reentrant -> do
          assertMsg "New lockers must match the existing lockers"
            $ existingLock.lockers == newLockers
          assertMsg "New lock type must match the existing lock type"
            $ existingLock.lockType == lockType
          assertMsg "Contract must not be already locked for the provided context"
            $ S.notMember context existingLock.context
          pure existingLock with
            context = context `S.insert` existingLock.context
        Base.Semaphore ->
          abort "A Semaphore lock can not be locked multiple times."
  assertMsg "New lockers must be signatories of the new holding"
    $ newLockers `S.isSubsetOf` S.fromList (signatory newHolding)
  toInterfaceContractId <$> create newHolding

-- | Default implementation of `release` from the `Base` interface.
releaseImpl :
  ( HasCreate t
  , HasFromInterface t Base.I
  , HasToInterface t Base.I
  ) => Optional Base.Lock -> (Optional Base.Lock -> t) -> Base.Release -> Update (ContractId Base.I)
releaseImpl currentLock setLock Base.Release{context} = do
  assertMsg "Must be locked" $ isSome currentLock
  let
    release lock = do
      let newContext = context `S.delete` lock.context
      case (lock.lockType, S.null newContext) of
        (Base.Reentrant, False) -> Some lock with context = newContext
        _ -> None
    releasedLock = currentLock >>= release
  fmap toInterfaceContractId . create . setLock $ releasedLock

-- | Default implementation of `split` from the `Fungible` interface.
splitImpl :
  ( HasCreate t
  , HasToInterface t Fungible.I
  ) => Decimal -> (Decimal -> t) -> Fungible.Split -> Update Fungible.SplitResult
splitImpl currentAmount setAmount Fungible.Split{amounts} = do
  let spawn = fmap toInterfaceContractId . create . setAmount
  splitCids <- forA amounts spawn
  restAmount <- getRestAmount amounts currentAmount
  rest <- T.forA restAmount spawn
  pure Fungible.SplitResult with splitCids; rest

-- | Default implementation of `merge` from the `Fungible` interface.
mergeImpl :
  forall t.
  ( HasCreate t
  , HasArchive t
  , HasSignatory t
  , HasFromInterface t Fungible.I
  , HasToInterface t Fungible.I
  )
  => Decimal
  -> (t -> Decimal)
  -> (Decimal -> t)
  -> Fungible.Merge
  -> Update (ContractId Fungible.I)
mergeImpl currentAmount getAmount setAmount Fungible.Merge{fungibleCids} = do
  assertMsg "List of fungibles must be non-empty" . not . null $ fungibleCids
  let
    currentSignatories = S.fromList . signatory . setAmount $ currentAmount
    current = view . toInterface @Base.I . toInterface @Fungible.I . setAmount $ currentAmount
    aggregate aggregatedAmount fungibleCid = do
      Some (otherHoldingCid, otherHolding) <- fetchFromInterface @t fungibleCid
      let other = view . toInterface @Base.I . toInterface @Fungible.I $ otherHolding
      assertMsg "Instrument must match" $ other.instrument == current.instrument
      assertMsg "Account must match" $ other.account == current.account
      assertMsg "Signatories must match" $ S.fromList (signatory otherHolding) == currentSignatories
      archive otherHoldingCid
      pure $ aggregatedAmount + getAmount otherHolding
  tot <- foldlA aggregate currentAmount fungibleCids
  fmap toInterfaceContractId . create . setAmount $ tot

-- | HIDE
-- Gets the rest amount of a split (if any) and verifies that split amounts are strictly positive
-- and don't exceed the current amount.
getRestAmount : CanAssert m => [Decimal] -> Decimal -> m (Optional Decimal)
getRestAmount amounts currentAmount = do
  let splitAmountSum = sum amounts
  verify (splitAmountSum <= currentAmount && F.all (> 0.0) amounts && amounts /= []) $ "Fungible::"
    <> "verifySplit - Amounts must be non-empty, strictly positive, and not exceed current amount. "
    <> "amounts=" <> show amounts
    <> ", splitAmountSum=" <> show splitAmountSum
    <> ", currentAmount=" <> show currentAmount
  let rest = currentAmount - splitAmountSum
  pure $ if rest == 0.0 then None else Some rest
