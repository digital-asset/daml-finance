-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Holding.Util
  ( acquireImpl
  , releaseImpl
  , transferImpl
  ) where

import DA.Action (foldlA)
import DA.Set qualified as S (delete, insert, isSubsetOf, null, singleton, toList)
import Daml.Finance.Interface.Account.Account qualified as Account (Credit(..), Debit(..), I, R, exerciseInterfaceByKey)
import Daml.Finance.Interface.Account.Util (fetchAccount)
import Daml.Finance.Interface.Holding.Base (getLockers)
import Daml.Finance.Interface.Holding.Base qualified as Base (Acquire(..), I, Lock(..), LockType(..), Release(..))
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (qty)
import Daml.Finance.Interface.Util.Common (fetchInterfaceByKey)
import Prelude hiding (null)

-- | Default implementation of transfer for the Transferable interface.
transferImpl : Transferable.I -> ContractId Transferable.I -> Transferable.Transfer
  -> Update (ContractId Transferable.I)
transferImpl this self Transferable.Transfer{actors; newOwnerAccount} = do
  let
    baseCid = toInterfaceContractId @Base.I self
    base = toInterface @Base.I this
  account <- fetchAccount base
  let
    vBase = view base
    vAccount = view account
    lockers = getLockers base
  vNewAccount <- view <$> fetchInterfaceByKey @Account.R @Account.I newOwnerAccount
  -- Verify
  assertMsg "actors must contain all transfer outgoing of the sender account" $
    S.isSubsetOf vAccount.controllers.outgoing actors
  assertMsg "actors must contain all transfer incoming of the receiving account" $
    S.isSubsetOf vNewAccount.controllers.incoming actors
  assertMsg "actors must contain all lockers" $ S.isSubsetOf lockers actors
  assertMsg "custodians must be the same" $ vBase.account.custodian == vAccount.custodian
  -- Release all locks
  let
    releaseAll cid lock =
      foldlA (\acc context -> exercise acc Base.Release with context) cid (S.toList lock.context)
  baseCid <- toInterfaceContractId @Base.I <$>
    optional (pure baseCid) (releaseAll baseCid) vBase.lock
  -- Debit
  Account.exerciseInterfaceByKey @Account.I vBase.account vBase.account.custodian
    Account.Debit with holdingCid = baseCid
  -- Credit
  newBaseCid <- Account.exerciseInterfaceByKey @Account.I newOwnerAccount newOwnerAccount.custodian
    Account.Credit with quantity = Instrument.qty vBase.amount vBase.instrument
  -- Consistency check
  newBase <- fetch newBaseCid
  assertMsg "credited and debited holding types must match" $
    interfaceTypeRep newBase == interfaceTypeRep base
  -- Reapply locks
  let
    reapplyLocks cid lock = foldlA (\acc context -> exercise acc Base.Acquire with
      newLockers = lock.lockers; context; lockType = lock.lockType) cid (S.toList lock.context)
  coerceInterfaceContractId <$> optional (pure newBaseCid) (reapplyLocks newBaseCid) vBase.lock

-- | Default implementation of `acquire` from the Base interface.
acquireImpl :
  ( HasCreate t
  , DA.Internal.Record.HasField "lock" t (Optional Base.Lock)
  , HasFromInterface t Base.I, HasToInterface t Base.I
  ) => t -> Base.Acquire -> Update (ContractId Base.I)
acquireImpl base Base.Acquire{newLockers; context; lockType} = do
  newLock <- case (base.lock, lockType) of
    (Some existingLock, Base.Reentrant) -> pure existingLock with
      context = context `S.insert` existingLock.context
    (None, _) -> pure Base.Lock with lockers = newLockers; context = S.singleton context; lockType
    _ -> abort "Contract is already locked."
  toInterfaceContractId <$> create base with lock = Some newLock

-- | Default implementation of release from the Base interface.
releaseImpl :
  ( HasCreate t
  , DA.Internal.Record.HasField "lock" t (Optional Base.Lock)
  , HasFromInterface t Base.I
  , HasToInterface t Base.I
  ) => t -> Base.Release -> Update (ContractId Base.I)
releaseImpl base Base.Release{context} = do
  let
    f currentLock = do
      let newContext = context `S.delete` currentLock.context
      case (currentLock.lockType, S.null newContext) of
        (Base.Reentrant, False) -> Some currentLock with context = newContext
        _ -> None
    releasedLock = base.lock >>= f
  toInterfaceContractId <$> create base with lock = releasedLock
