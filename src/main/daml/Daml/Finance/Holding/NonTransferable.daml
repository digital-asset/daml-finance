-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Holding.NonTransferable where

import DA.Set (fromList, singleton)
import Daml.Finance.Holding.Util (acquireImpl, releaseImpl)
import Daml.Finance.Interface.Holding.Base (getLockers)
import Daml.Finance.Interface.Holding.Base qualified as Base (I, Lock(), View(..))
import Daml.Finance.Interface.Holding.Base qualified as NonTransferable (HasImplementation)
import Daml.Finance.Interface.Holding.Factory qualified as HoldingFactory (Create(..), F, HasImplementation(..), Remove(..), View(..))
import Daml.Finance.Interface.Types.Common.Types (AccountKey(..), InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)
import Prelude hiding (null)

-- | Type synonym for `Factory`.
type F = Factory

-- | Type synonym for `NonTransferable`.
type T = NonTransferable

instance NonTransferable.HasImplementation T
-- | Implementation of a non-transferable holding.
-- `NonTransferable` implements the interface `Base.I` (which requires `Disclosure.I` to be
-- implemented).
template NonTransferable
  with
    instrument : InstrumentKey
      -- ^ The instrument of which units are held.
    account : AccountKey
      -- ^ The account at which the holding is held. Defines the holding's owner and custodian.
    amount : Decimal
      -- ^ Number of units.
    lock : Optional Base.Lock
      -- ^ An optional lock of a holding.
    observers : PartiesMap
      -- ^ Observers.
  where
    signatory account.custodian, account.owner, getLockers this
    observer Disclosure.flattenObservers observers

    ensure amount > 0.0

    interface instance Disclosure.I for NonTransferable where
      view = Disclosure.View with
        disclosureControllers = fromList [account.owner, account.custodian]; observers
      setObservers = setObserversImpl @NonTransferable @Disclosure.I this None
      addObservers = addObserversImpl @NonTransferable @Disclosure.I this None
      removeObservers = removeObserversImpl @NonTransferable @Disclosure.I this None

    interface instance Base.I for NonTransferable where
      asDisclosure = toInterface @Disclosure.I this
      view = Base.View with instrument; account; amount; lock
      acquire = acquireImpl @NonTransferable this
      release = releaseImpl @NonTransferable this

instance HoldingFactory.HasImplementation Factory
-- | Implementation of the corresponding Holding Factory.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance HoldingFactory.F for Factory
      where
        asDisclosure = toInterface @Disclosure.I this
        view = HoldingFactory.View with provider
        create' HoldingFactory.Create{instrument; account; amount; observers} = do
          assertMsg "amount must be positive" $ amount > 0.0
          toInterfaceContractId <$>
            create NonTransferable with instrument; account; amount; observers; lock = None
        remove HoldingFactory.Remove{holdingCid} =
          archive $ fromInterfaceContractId @NonTransferable holdingCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None
