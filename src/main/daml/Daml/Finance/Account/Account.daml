-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Account.Account where

import DA.Map qualified as M (empty)
import DA.Optional (isNone)
import DA.Set qualified as S (fromList, null, singleton)
import Daml.Finance.Interface.Account.Account qualified as Account (Controllers(..), Credit(..), Debit(..), GetCid(..), I, R, View(..), createReference, disclosureUpdateReference)
import Daml.Finance.Interface.Account.Factory qualified as AccountFactory (Create(..), F, Remove(..), View(..))
import Daml.Finance.Interface.Holding.Factory qualified as HoldingFactory (Create(..), F)
import Daml.Finance.Interface.Types.Common.Types (AccountKey(..), Id, PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (AddObservers(..), I, RemoveObservers(..), View(..), flattenObservers)
import Daml.Finance.Interface.Util.Lockable qualified as Lockable (Acquire(..), I, Lock, Release(..), View(..), getLockers)
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)
import Daml.Finance.Util.Lockable (acquireImpl, isValidLock, releaseImpl)

-- | Type synonym for `Account`.
type T = Account

-- | A relationship between a custodian and an asset owner. It is referenced by holdings.
template Account
  with
    custodian : Party
      -- ^ The account provider.
    owner : Party
      -- ^ The account owner.
    lock : Optional Lockable.Lock
      -- ^ An optional lock for the account.
    controllers : Account.Controllers
      -- ^ Controllers of transfers.
    id : Id
      -- ^ Identifier of the account.
    description : Text
      -- ^ Description of the account.
    holdingFactoryCid : ContractId HoldingFactory.F
      -- ^ Associated holding factory.
    observers : PartiesMap
      -- ^ Observers.
  where
    signatory custodian, owner, Lockable.getLockers this
    observer Disclosure.flattenObservers observers

    -- Outgoing controllers must be non-empty.
    ensure isValidLock lock && (not . S.null $ controllers.outgoing)

    let
      account = AccountKey with custodian; owner; id
      mustNotBeLocked = assertMsg @Update "Must not be locked" $ isNone lock

    interface instance Account.I for Account where
      view = Account.View with custodian; id; owner; holdingFactoryCid; description; controllers
      getKey = account
      credit Account.Credit{quantity} = do
        mustNotBeLocked
        exercise holdingFactoryCid HoldingFactory.Create with
          instrument = quantity.unit
          account
          amount = quantity.amount
          observers = M.empty
      debit Account.Debit{holdingCid} = do
        mustNotBeLocked
        holding <- fetch holdingCid
        let
          vHolding = view holding
          vLockable = view $ toInterface @Lockable.I holding
        assertMsg "Holding must not be locked" $ isNone vLockable.lock
        assertMsg "Accounts must match" $ vHolding.account == account
        archive holdingCid

    interface instance Lockable.I for Account where
      view = Lockable.View with lock; controllers = S.singleton custodian
      acquire lockable@Lockable.Acquire{newLockers; context; lockType} = do
        newLockableCid <- toInterfaceContractId @Disclosure.I <$>
          acquireImpl this.lock (\lock -> this with lock) lockable
        -- adding lockers as observers to Account.R
        fromInterfaceContractId @Lockable.I <$>
          exercise newLockableCid Disclosure.AddObservers with
            disclosers = S.fromList $ signatory this
            observersToAdd = (context, newLockers)
      release lockable@Lockable.Release{context} = do
        newLockableCid <- releaseImpl this.lock (\lock -> this with lock) lockable
         -- removing lockers as observers to Account.R
        optional newLockableCid coerceContractId <$>
          exercise (toInterfaceContractId @Disclosure.I newLockableCid)
            Disclosure.RemoveObservers with
              disclosers = S.fromList $ signatory this
              observersToRemove = (context, Lockable.getLockers this)

    interface instance Disclosure.I for Account where
      view = Disclosure.View with disclosureControllers = S.fromList [custodian, owner]; observers
      setObservers = setObserversImpl this $ Some (Account.disclosureUpdateReference account)
      addObservers = addObserversImpl this $ Some (Account.disclosureUpdateReference account)
      removeObservers = removeObserversImpl this $ Some (Account.disclosureUpdateReference account)

-- | Template used to create accounts.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance AccountFactory.F for Factory where
      view = AccountFactory.View with provider
      create' AccountFactory.Create {account; holdingFactoryCid; controllers; observers;
        description} = do
          cid <- toInterfaceContractId <$> create Account with
            custodian = account.custodian; owner = account.owner; lock = None; controllers
            id = account.id; holdingFactoryCid; observers; description
          Account.createReference account.custodian cid
          pure cid
      remove AccountFactory.Remove{account} = do
        (refCid, ref) <- fetchByKey @Account.R account
        accountCid <- exercise refCid Account.GetCid with viewer = account.custodian
        archive accountCid
        archive refCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = S.singleton provider; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None
