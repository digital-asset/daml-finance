-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

module Daml.Finance.Util.Disclosure where

import DA.Traversable qualified as T (mapA)
import DA.Foldable qualified as F (mapA_)
import DA.Map qualified as M (delete, insert, lookup)
import DA.Optional (fromOptional)
import DA.Set qualified as S (difference, empty, intersection, isSubsetOf, null)
import Daml.Finance.Interface.Types.Common.Types (PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (AddObservers(..), I, RemoveObservers(..), SetObservers(..))

setObserversImpl :
  forall t i.
  ( HasCreate t
  , HasField "observers" t PartiesMap
  , HasFromInterface t Disclosure.I
  , HasToInterface t Disclosure.I
  , HasInterfaceTypeRep i
  , HasToInterface i Disclosure.I
  , HasToInterface t i
  ) => t -> Optional (PartiesMap -> ContractId i -> Update (ContractId Disclosure.I)) ->
    Disclosure.SetObservers -> Update (ContractId Disclosure.I)
setObserversImpl this refUpdate Disclosure.SetObservers{disclosers; newObservers} = do
  assertMsg
    ("controller (" <> show disclosers <> ") must be authorized to SetObservers") $
    not (S.null $ disclosers `S.intersection`
      (view $ toInterface @Disclosure.I this).disclosureControllers)
  cid <- toInterfaceContractId @i <$> create this with observers = newObservers
  F.mapA_ (\f -> f newObservers cid) refUpdate
  pure $ toInterfaceContractId @Disclosure.I cid

addObserversImpl :
  forall t i.
  ( HasCreate t
  , HasField "observers" t PartiesMap
  , HasFromInterface t Disclosure.I
  , HasToInterface t Disclosure.I
  , HasInterfaceTypeRep i
  , HasToInterface i Disclosure.I
  , HasToInterface t i
  ) =>
    t -> Optional (PartiesMap -> ContractId i -> Update (ContractId Disclosure.I)) ->
      Disclosure.AddObservers -> Update (ContractId Disclosure.I)
addObserversImpl this refUpdate
  Disclosure.AddObservers{disclosers; observersToAdd} = do
    let
      v = view $ toInterface @Disclosure.I this
      context = fst observersToAdd
      curObservers = v.observers
      curParties = fromOptional S.empty $ M.lookup context curObservers
      value = curParties <> snd observersToAdd
      newObservers = M.insert context value curObservers
    assertMsg
      ("controller (" <> show disclosers <> ") must be authorized to AddObservers") $
      disclosers `S.isSubsetOf` v.disclosureControllers
    cid <- toInterfaceContractId @i <$> create this with observers = newObservers
    F.mapA_ (\f -> f newObservers cid) refUpdate
    pure $ toInterfaceContractId @Disclosure.I cid

removeObserversImpl :
  forall t i. ( HasCreate t
  , HasField "observers" t PartiesMap
  , HasFromInterface t Disclosure.I
  , HasToInterface t Disclosure.I
  , HasInterfaceTypeRep i
  , HasToInterface i Disclosure.I
  , HasToInterface t i
  ) =>
  t -> Optional (PartiesMap -> ContractId i -> Update (ContractId Disclosure.I))
    -> ContractId Disclosure.I
    -> Disclosure.RemoveObservers -> Update (Optional (ContractId Disclosure.I))
removeObserversImpl this refUpdate self Disclosure.RemoveObservers{disclosers; observersToRemove} =
  do
    let
      v = view $ toInterface @Disclosure.I this
      k = fst observersToRemove
    assertMsg "disclosers must be authorized to RemoveObservers when removing other parties" $
      not (S.null $ disclosers `S.intersection` snd observersToRemove) ||
      not (S.null $ disclosers `S.intersection` v.disclosureControllers)
    fromOptional None <$>
      T.mapA
        (\viewers -> do
          let updatedViewers = viewers `S.difference` snd observersToRemove
          if updatedViewers == viewers then
            pure None
          else do
            archive self
            let
              newObservers = if S.null updatedViewers
                            then M.delete k v.observers
                            else M.insert k updatedViewers v.observers
            cid <- toInterfaceContractId @i <$> create this with observers = newObservers
            F.mapA_ (\f -> f newObservers cid) refUpdate
            pure $ Some (toInterfaceContractId @Disclosure.I cid)
        )
      (M.lookup k v.observers)
