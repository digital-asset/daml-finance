-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Util.Common
  ( groupBy
  , notNull
  , sortAndGroupOn
  ) where

import DA.List qualified as List (groupOn, null, sortOn)
import DA.Map qualified as M (Map, empty, insert, lookup)

-- | Like `List.groupOn`, but returns the output in a `Map`.
groupBy : Ord k => (a -> k) -> [a] -> M.Map k [a]
groupBy f = foldl g M.empty
  where
    g acc x =
      let
        k = f x
        z = case M.lookup k acc of
          None -> [x]
          Some xs -> x :: xs
      in M.insert k z acc

-- | Checks if the input list is not empty.
notNull : [a] -> Bool
notNull = not . List.null

-- | Like `List.groupOn`, but sorts the list first.
sortAndGroupOn : Ord k => (a -> k) -> [a] -> [[a]]
sortAndGroupOn f l =
  List.groupOn f $ List.sortOn f l
