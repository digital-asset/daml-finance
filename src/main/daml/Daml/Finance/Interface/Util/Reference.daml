-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

module Daml.Finance.Interface.Util.Reference where

import Daml.Finance.Interface.Types.Common.Types (PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (GetView(..), I)

-- | Fetch an interface by key.
fetchInterfaceByKey : forall t i2 k i1.
  ( HasInterfaceTypeRep i1
  , HasInterfaceTypeRep i2
  , HasFetchByKey t k
  , HasField "cid" t (ContractId i1)
  , HasFetch i2
  )
  => k -> Update i2
fetchInterfaceByKey k = do
  d <- snd <$> fetchByKey @t k
  fetch $ coerceInterfaceContractId d.cid

-- | HIDE
-- Helper function exercising interface by key.
exerciseInterfaceByKeyHelper : forall t i1 i2 k c d r.
  ( HasInterfaceTypeRep i1
  , HasInterfaceTypeRep i2
  , HasExerciseByKey t k c (ContractId i1)
  , HasExercise i2 d r
  )
  => k -> c -> d -> Update r
exerciseInterfaceByKeyHelper k arg1 arg2 = do
  cid <- exerciseByKey @t k arg1
  exercise (coerceInterfaceContractId @i2 cid) arg2

-- | HIDE
-- Helper function for creating a reference for an interface.
createReferenceHelper :
  ( HasCreate t
  , HasExercise i c v
  , HasToInterface i Disclosure.I
  )
  => (v -> ContractId i -> PartiesMap -> t)
  -> (Party -> c)
  -> Party
  -> ContractId i
  -> Update (ContractId t)
createReferenceHelper getReference getView actor cid = do
  view <- exercise cid $ getView actor
  disclosureView <- exercise
    (toInterfaceContractId @Disclosure.I cid)
    Disclosure.GetView with viewer = actor
  create $ getReference view cid disclosureView.observers

-- | HIDE
-- Helper function for updating the reference once observers are added to the referred to instance.
disclosureUpdateReferenceHelper : forall r k i c1 c2.
  ( HasExerciseByKey r k c1 (ContractId r)
  , HasExerciseByKey r k c2 (ContractId r)
  , HasToInterface i Disclosure.I
  )
  => (ContractId i -> c1)
  -> (PartiesMap -> c2)
  -> k
  -> PartiesMap
  -> ContractId i
  -> Update (ContractId Disclosure.I)
disclosureUpdateReferenceHelper getSetCid setObservers k newObservers iCid = do
  exerciseByKey @r k $ getSetCid iCid
  exerciseByKey @r k $ setObservers newObservers
  pure $ toInterfaceContractId iCid
