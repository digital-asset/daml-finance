-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Types.Fpml where

import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayConventionEnum)
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum)
import Daml.Finance.Interface.Types.Date.RollConvention

-- | The swap streams, describing each leg of the swap.
data SwapStream = SwapStream
  with
    payerPartyReference : Text
    receiverPartyReference : Text
    calculationPeriodDates : CalculationPeriodDates
    paymentDates : PaymentDates
    resetDates : Optional ResetDates
    calculationPeriodAmount : CalculationPeriodAmount
    stubCalculationPeriodAmount : Optional StubCalculationPeriodAmount
  deriving (Eq, Show)

-- | The calculation periods dates schedule.
data CalculationPeriodDates = CalculationPeriodDates
  with
    id : Text
    effectiveDate : AdjustableDate
    terminationDate : AdjustableDate
    calculationPeriodDatesAdjustments : CalculationPeriodDatesAdjustments
    firstRegularPeriodStartDate : Optional Date
    lastRegularPeriodEndDate : Optional Date
    calculationPeriodFrequency : CalculationPeriodFrequency
  deriving (Eq, Show)

-- | The payment dates schedule.
data PaymentDates = PaymentDates
  with
    -- id : Optional Text
    calculationPeriodDatesReference : Text
    paymentFrequency : PaymentFrequency
    firstPaymentDate : Optional Date
    lastRegularPaymentDate : Optional Date
    payRelativeTo : DateRelativeToEnum
    paymentDatesAdjustments : BusinessDayAdjustments
  deriving (Eq, Show)

-- | A type for defining a date that shall be subject to
--   adjustment if it would otherwise fall on a day that
--   is not a business day in the specified business
--   centers, together with the convention for adjusting
--   the date.
data AdjustableDate = AdjustableDate with
  -- id_ : Optional Text
  unadjustedDate : Date
      -- ^ A date subject to adjustment.
  dateAdjustments : BusinessDayAdjustments
      -- ^ The business day convention and financial business
      --   centers used for adjusting the date if it would
      --   otherwise fall on a day that is not a business date
      --   in the specified business centers.
  -- adjustedDate : Optional IdentifiedDate
      -- ^ The date once the adjustment has been performed.
      --   (Note that this date may change if the business
      --   center holidays change).
    deriving (Eq, Show)

-- | A type defining the business day convention and
--   financial business centers used for adjusting any
--   relevant date if it would otherwise fall on a day
--   that is not a business day in the specified business
--   centers.
data BusinessDayAdjustments = BusinessDayAdjustments with
  -- id_ : Optional Text
  businessDayConvention : BusinessDayConventionEnum
      -- ^ The convention for adjusting a date if it would
      --   otherwise fall on a day that is not a business day.
  businessCenters : Optional [Text]
    deriving (Eq, Show)

-- | The reset dates schedule. This only applies for a floating rate stream.
data ResetDates = ResetDates
  with
    calculationPeriodDatesReference : Text
    resetRelativeTo : DateRelativeToEnum
    fixingDates : FixingDates
    resetFrequency : ResetFrequency
    resetDatesAdjustments : ResetDatesAdjustments
  deriving (Eq, Show)

-- | The specification of whether payments/resets occur relative to
--   the first or last day of a calculation period.
data DateRelativeToEnum
  = CalculationPeriodStartDate
    -- ^ Payments/Resets will occur relative to the first day of each
    --   calculation period.
  | CalculationPeriodEndDate
    -- ^ Payments/Resets will occur relative to the last day of each
    --   calculation period.
  deriving (Eq, Show)

-- | Specifies the fixing date relative to the reset date in terms of a business days offset and an associated set of financial business centers.
data FixingDates = FixingDates
  with
    periodMultiplier : Int
    period : PeriodEnum
    dayType : DayTypeEnum
    businessDayConvention : BusinessDayConventionEnum
    businessCenters : [Text]
  deriving (Eq, Show)

-- | A day type classification used in counting the number
--   of days between two dates.
data DayTypeEnum
  = Business
    -- ^ When calculating the number of days between two dates
    --   the count includes only business days.
  | Calendar
    -- ^ When calculating the number of days between two dates
    --   the count includes all calendar days.
  | CommodityBusiness
    -- ^ When calculating the number of days between two dates
    --   the count includes only commodity business days.
  | CurrencyBusiness
    -- ^ When calculating the number of days between two dates
    --   the count includes only currency business days.
  | ExchangeBusiness
    -- ^ When calculating the number of days between two dates
    --   the count includes only stock exchange business days.
  | ScheduledTradingDay
    -- ^ When calculating the number of days between two dates
    --   the count includes only scheduled trading days.
  deriving (Eq, Show)

-- | The frequency at which reset dates occur.
data ResetFrequency = ResetFrequency
  with
    periodMultiplier : Int
    period : PeriodEnum
  deriving (Eq, Show)

-- | The frequency at which regular payment dates occur. If the payment frequency is equal to the frequency defined in the calculation period dates component then one calculation period contributes to each payment amount. If the payment frequency is less frequent than the frequency defined in the calculation period dates component then more than one calculation period will contribute to the payment amount. A payment frequency more frequent than the calculation period frequency or one that is not a multiple of the calculation period frequency is invalid. If the payment frequency is of value T (term), the period is defined by the swap\swapStream\calculationPerioDates\effectiveDate and the swap\swapStream\calculationPerioDates\terminationDate.
data PaymentFrequency = PaymentFrequency
  with
    periodMultiplier : Int
    period : PeriodEnum
  deriving (Eq, Show)

-- | The business day convention to apply to each calculation period end date if it would otherwise fall on a day that is not a business day in the specified financial business centers.
data CalculationPeriodDatesAdjustments = CalculationPeriodDatesAdjustments
  with
    businessDayConvention : BusinessDayConventionEnum
    businessCenters : [Text]
  deriving (Eq, Show)

-- | The business day convention to apply to each reset date if it would otherwise fall on a day that is not a business day in the specified financial business centers.
data ResetDatesAdjustments = ResetDatesAdjustments
  with
    businessDayConvention : BusinessDayConventionEnum
    businessCenters : [Text]
  deriving (Eq, Show)

-- | A type defining the frequency at which calculation
--   period end dates occur within the regular part of the
--   calculation period schedule and thier roll date
--   convention. In case the calculation frequency is of
--   value T (term), the period is defined by the
--   swap\swapStream\calculationPerioDates\effectiveDate
--   and the
--   swap\swapStream\calculationPerioDates\terminationDate.
data CalculationPeriodFrequency = CalculationPeriodFrequency with
  -- id_ : Optional Text
  periodMultiplier : Int
    -- ^ A time period multiplier, e.g. 1, 2 or 3 etc. If the
    --   period value is T (Term) then periodMultiplier must
    --   contain the value 1.
  period : PeriodEnum
    -- ^ A time period, e.g. a day, week, month, year or term
    --   of the stream.
  rollConvention : RollConventionEnum
    -- ^ Used in conjunction with a frequency and the regular
    --   period start date of a calculation period, determines
    --   each calculation period end date within the regular
    --   part of a calculation period schedule.
    deriving (Eq, Show)

-- | The calculation period amount parameters.
data CalculationPeriodAmount = CalculationPeriodAmount
  with
    calculation : Calculation
  deriving (Eq, Show)

-- | The parameters used in the calculation of fixed or floating rate period amounts.
data Calculation = Calculation
  with
    notionalSchedule : NotionalSchedule
    floatingRateCalculation : Optional FloatingRateCalculation
    fixedRateSchedule : Optional FixedRateSchedule
    dayCountFraction : DayCountConventionEnum
  deriving (Eq, Show)

-- | The notional amount or notional amount schedule.
data NotionalSchedule = NotionalSchedule
  with
    notionalStepSchedule : NotionalStepSchedule
  deriving (Eq, Show)

-- | The notional amount or notional amount schedule expressed as explicit outstanding notional amounts and dates.
-- Currently, only an initial value is supported, which corresponds to a fix notional (of each leg, individually).
data NotionalStepSchedule = NotionalStepSchedule
  with
    initialValue : Decimal
    currency : Text
  deriving (Eq, Show)

-- | A type defining the floating rate and definitions
--   relating to the calculation of floating rate amounts.
data FloatingRateCalculation = FloatingRateCalculation with
  -- id_ : Optional Text
  -- floatingRateIndex : FloatingRateIndex
  floatingRateIndex : Text
  indexTenor : Optional Period
    -- ^ The ISDA Designated Maturity, i.e. the tenor of the
    --   floating rate.
  -- floatingRateMultiplierSchedule : Optional Schedule
    -- ^ A rate multiplier or multiplier schedule to apply to
    --   the floating rate. A multiplier schedule is expressed
    --   as explicit multipliers and dates. In the case of a
    --   schedule, the step dates may be subject to adjustment
    --   in accordance with any adjustments specified in the
    --   calculationPeriodDatesAdjustments. The multiplier can
    --   be a positive or negative decimal. This element
    --   should only be included if the multiplier is not
    --   equal to 1 (one) for the term of the stream.
  -- spreadSchedule : [SpreadSchedule]
  spreadSchedule : SpreadSchedule
    -- ^ The ISDA Spread or a Spread schedule expressed as
    --   explicit spreads and dates. In the case of a
    --   schedule, the step dates may be subject to adjustment
    --   in accordance with any adjustments specified in
    --   calculationPeriodDatesAdjustments. The spread is a
    --   per annum rate, expressed as a decimal. For purposes
    --   of determining a calculation period amount, if
    --   positive the spread will be added to the floating
    --   rate and if negative the spread will be subtracted
    --   from the floating rate. A positive 10 basis point
    --   (0.1%) spread would be represented as 0.001.
  -- rateTreatment : Optional RateTreatmentEnum
    -- ^ The specification of any rate conversion which needs
    --   to be applied to the observed rate before being used
    --   in any calculations. The two common conversions are
    --   for securities quoted on a bank discount basis which
    --   will need to be converted to either a Money Market
    --   Yield or Bond Equivalent Yield. See the Annex to the
    --   2000 ISDA Definitions, Section 7.3. Certain General
    --   Definitions Relating to Floating Rate Options,
    --   paragraphs (g) and (h) for definitions of these
    --   terms.
  -- capRateSchedule : [StrikeSchedule]
    -- ^ The cap rate or cap rate schedule, if any, which
    --   applies to the floating rate. The cap rate (strike)
    --   is only required where the floating rate on a swap
    --   stream is capped at a certain level. A cap rate
    --   schedule is expressed as explicit cap rates and dates
    --   and the step dates may be subject to adjustment in
    --   accordance with any adjustments specified in
    --   calculationPeriodDatesAdjustments. The cap rate is
    --   assumed to be exclusive of any spread and is a per
    --   annum rate, expressed as a decimal. A cap rate of 5%
    --   would be represented as 0.05.
  -- floorRateSchedule : [StrikeSchedule]
    -- ^ The floor rate or floor rate schedule, if any, which
    --   applies to the floating rate. The floor rate (strike)
    --   is only required where the floating rate on a swap
    --   stream is floored at a certain strike level. A floor
    --   rate schedule is expressed as explicit floor rates
    --   and dates and the step dates may be subject to
    --   adjustment in accordance with any adjustments
    --   specified in calculationPeriodDatesAdjustments. The
    --   floor rate is assumed to be exclusive of any spread
    --   and is a per annum rate, expressed as a decimal. A
    --   floor rate of 5% would be represented as 0.05.
  -- initialRate : Optional Decimal
    -- ^ The initial floating rate reset agreed between the
    --   principal parties involved in the trade. This is
    --   assumed to be the first required reset rate for the
    --   first regular calculation period. It should only be
    --   included when the rate is not equal to the rate
    --   published on the source implied by the floating rate
    --   index. An initial rate of 5% would be represented as
    --   0.05.
  -- finalRateRounding : Optional Rounding
    -- ^ The rounding convention to apply to the final rate
    --   used in determination of a calculation period amount.
  -- averagingMethod : Optional AveragingMethodEnum
    -- ^ If averaging is applicable, this component specifies
    --   whether a weighted or unweighted average method of
    --   calculation is to be used. The component must only be
    --   included when averaging applies.
  -- negativeInterestRateTreatment : Optional NegativeInterestRateTreatmentEnum
    -- ^ The specification of any provisions for calculating
    --   payment obligations when a floating rate is negative
    --   (either due to a quoted negative floating rate or by
    --   operation of a spread that is subtracted from the
    --   floating rate).
    deriving (Eq, Show)

-- | Adds an optional spread type element to the Schedule
--   to identify a long or short spread value.
data SpreadSchedule = SpreadSchedule with
  -- id_ : Optional Text
  initialValue : Decimal
    -- ^ The initial rate or amount, as the case may be. An
    --   initial rate of 5% would be represented as 0.05.
  -- step : [Step]
    -- ^ The schedule of step date and value pairs. On each
    --   step date the associated step value becomes effective
    --   A list of steps may be ordered in the document by
    --   ascending step date. An FpML document containing an
    --   unordered list of steps is still regarded as a
    --   conformant document.
  -- type_ : Optional SpreadScheduleType
    deriving (Eq, Show)

-- | Specify the fixed rate
data FixedRateSchedule = FixedRateSchedule with
  -- id_ : Optional Text
  initialValue : Decimal
    -- ^ The initial rate or amount, as the case may be. An
    --   initial rate of 5% would be represented as 0.05.
  -- step : [Step]
    -- ^ The schedule of step date and value pairs. On each
    --   step date the associated step value becomes effective
    --   A list of steps may be ordered in the document by
    --   ascending step date. An FpML document containing an
    --   unordered list of steps is still regarded as a
    --   conformant document.
  -- type_ : Optional SpreadScheduleType
    deriving (Eq, Show)

-- | The stub calculation period amount parameters. This element must only be included if there is an initial or final stub calculation period. Even then, it must only be included if either the stub references a different floating rate tenor to the regular calculation periods, or if the stub is calculated as a linear interpolation of two different floating rate tenors, or if a specific stub rate or stub amount has been negotiated.
data StubCalculationPeriodAmount = StubCalculationPeriodAmount
  with
    calculationPeriodDatesReference : Text
    initialStub : Optional StubValue
    finalStub : Optional StubValue
  deriving (Eq, Show)

-- | Specifies how the stub amount is calculated. A single floating rate tenor different to that used for the regular part of the calculation periods schedule may be specified, or two floating tenors may be specified. If two floating rate tenors are specified then Linear Interpolation (in accordance with the 2000 ISDA Definitions, Section 8.3. Interpolation) is assumed to apply. Alternatively, an actual known stub rate or stub amount may be specified.
data StubValue = StubValue
  with
    stubRate : Optional Decimal
    floatingRate : Optional [StubFloatingRate]
  deriving (Eq, Show)

-- | The rates to be applied to the initial or final stub may be the linear interpolation of two different rates.
data StubFloatingRate = StubFloatingRate
  with
    floatingRateIndex : Text
    indexTenor : Optional Period
  deriving (Eq, Show)
