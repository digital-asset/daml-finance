-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Types.Common.Types where

import DA.Map (Map)
import DA.Set (Set)

-- | A set of parties.
type Parties = Set Party

-- | Parties mapped by a specific key (or context).
-- The textual key is the "context" which describes the value set of parties.
-- This allows processes to add/remove parties for their specific purpose, without affecting others.
type PartiesMap = Map Text Parties

-- A textual identifier.
newtype Id = Id Text
  deriving (Eq, Ord)

instance Show Id where
  show (Id t) = t

-- | The `HoldingStandard` data type categorizes holdings into four distinct classes, each defined
-- by the combination of holding interfaces they implemnt: `Transferable.I`, `Fungible.I`, and
-- `Holding.I`. Notably, `Transferable.I` and `Fungible.I` both require the implementation of the
-- `Holding.I` interface. Please also note that, in this context, "transferable" refers to the
-- capability of a holding to be transferred between parties (e.g., from Alice to Bob) through a
-- custodian. Additionally, it is pertinent to mention that all classes of holdings, regardless of
-- their specific combination of interfaces, are capable of being settled:
data HoldingStandard
  = TransferableFungible
    -- ^ Represents the class of holdings which implement `Fungible.I` and `Transferable.I`, and by
    --   extension `Holding.I`. Holdings in this class are both interchangeable (fungible) and
    --   can be transferred between parties (such as Alice to Bob) via a custodian.
  | Transferable
    -- ^ Represents the class of holdings which implement `Transferable.I` and, by extension,
    --   `Holding.I`, but not `Fungible.I`. This class pertains to assets that can be transferred
    --   between parties through a custodian, but are not interchangeable.
  | Fungible
    -- ^ Represents the class of holdings which implement `Fungible.I` and, by extension,
    --   `Holding.I`, but not `Transferable.I`. These holdings are interchangeable, suitable for
    --   scenarios where asset fungibility is crucial, but do not have the transfer capability
    --   between parties via a custodian.
  | BaseHolding
    -- ^ Represents the class of holdings which implement only `Holding.I` and neither
    --   `Transferable.I` nor `Fungible.I`. This class encompasses basic, non-specialized holdings
    --   without the functionalities of custodian-based transferability or fungibility.
  deriving (Eq, Ord, Show)

-- | A unique key for a holding factory.
data HoldingFactoryKey = HoldingFactoryKey
  with
    provider : Party
      -- ^ Holding factory provider.
    id : Id
      -- ^ Unique identifier for a holding factory.
  deriving (Eq, Ord, Show)

-- | A unique key for Accounts.
data AccountKey = AccountKey
  with
    custodian : Party
      -- ^ Account provider.
    owner : Party
      -- ^ Account owner.
    id : Id
      -- ^ Unique identifier for an account.
  deriving (Eq, Ord, Show)

-- | A unique key for Instruments.
data InstrumentKey = InstrumentKey
  with
    depository : Party
      -- ^ Party providing depository services.
    issuer : Party
      -- ^ Issuer of instrument.
    id : Id
      -- ^ A unique identifier for an instrument.
    version : Text
      -- ^ A textual instrument version.
    holdingStandard: HoldingStandard
      -- ^ The used holding standard for the instrument.
  deriving (Eq, Ord, Show)

-- | A dimensioned quantity.
data Quantity u a = Quantity
  with
    unit : u
      -- ^ The quantity's unit.
    amount : a
      -- ^ A numerical amount.
  deriving (Eq, Ord, Show)

type InstrumentQuantity = Quantity InstrumentKey Decimal
