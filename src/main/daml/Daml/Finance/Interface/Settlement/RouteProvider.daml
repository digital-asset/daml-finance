-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Settlement.RouteProvider where

import Daml.Finance.Interface.Settlement.Types (RoutedStep, Step)
import Daml.Finance.Interface.Types.Common.Types (Id, Parties)

-- | Type synonym for `RouteProvider`.
type I = RouteProvider

-- | Type synonym for `View`.
type V = View

-- | View for `RouteProvider`.
data View = View
  with
    provider : Party
      -- ^ Party providing the `RouteProvider` facility.
    observers : Parties
      -- ^ Observers.
  deriving (Eq, Show)

-- | An interface used to discover the settlement route for each `Step`, i.e., `[RoutedStep]`.
interface RouteProvider where
  viewtype V

  discover : Discover -> Update [RoutedStep]
    -- ^ Implementation of the `Discover` choice.

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice Discover : [RoutedStep]
    -- ^ Discover the settlement route for each `Step`.
    with
      discoverors : Parties
        -- ^ Parties requesting to discover.
      contextId : Optional Id
        -- ^ Context for the discovery.
      steps : [Step]
        -- ^ Settlement steps to route.
    controller discoverors
    do
      discover this arg

-- | Type constraint for requiring templates to implement `Factory`.
type Implementation t = HasToInterface t I
class (Implementation t) => HasImplementation t
instance HasImplementation I
