-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Settlement.Instructable where

import Daml.Finance.Interface.Common.Types (Parties)
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (I)
import Daml.Finance.Interface.Settlement.Settleable qualified as Settleable (I)
import Daml.Finance.Interface.Settlement.Types (Step)

type I = Instructable
type V = View

-- | View for `Instructable`.
data View = View
  with
    provider : Party
      -- ^ Party providing the facility to create settlement instructions.
    observers : Parties
      -- ^ Observers.
  deriving (Eq, Ord, Show)

-- | An interface used to generate settlement instructions.
interface Instructable where
  view : View
    -- ^ Acquire the default interface view.
  instructImpl : Instruct -> Update (ContractId Settleable.I, [ContractId Instruction.I])
    -- ^ Implementation of the `Instruct` choice.

  nonconsuming choice GetView : View
    -- ^ Retrieves the instrument view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice Instruct : (ContractId Settleable.I, [ContractId Instruction.I])
    --  ^ Generate settlement instructions. It returns the `Instruction`s as well as a container to batch-settle them.
    with
      instructors : Parties
        -- ^ Parties requesting to instruct a settlement.
      settler : Party
        -- ^ Party that triggers the final settlement.
      id : Text
        -- ^ A textual identifier.
      steps : [Step]
        -- ^ Settlement steps to instruct.
    controller instructors
    do
      instructImpl this arg

-- | Type constraint used to require templates implementing `Instructable` to not
-- require any other interface to be implemented.
type Implementation t = HasToInterface t I
class (Implementation t) => HasImplementation t
instance HasImplementation I
