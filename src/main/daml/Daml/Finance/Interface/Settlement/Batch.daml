-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Settlement.Batch where

import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I)
import Daml.Finance.Interface.Settlement.Types (Step)
import Daml.Finance.Interface.Types.Common (Id, Parties)

-- | Type synonym for `Batch`.
type I = Batch

-- | Type synonym for `View`.
type V = View

-- | View for `Batch`.
data View = View
  with
    requestors : Parties
      -- ^ Parties requesting the settlement.
    settlers : Parties
      -- ^ Parties that can trigger the final settlement.
    id : Id
      -- ^ Batch identifier.
    description : Text
      -- ^ Batch description.
    contextId : Optional Id
      -- ^ Identifier to link a batch to a context (eg. the `Effect` it originated from).
    steps : [Step]
      -- ^ Settlement steps.
  deriving (Eq, Show)

-- | An interface for atomically settling `Transferable`\s.
interface Batch where
  viewtype V

  settle : Settle -> Update [ContractId Transferable.I]
    -- ^ Implementation of the `Settle` choice.

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

  choice Settle : [ContractId Transferable.I]
    -- ^ Execute settlement.
    with
      actors : Parties
        -- ^ The parties that executes the settlement.
    controller actors
    do
      settle this arg

-- | Type constraint for requiring templates to implement `Batch`.
type Implementation t = HasToInterface t I
class (Implementation t) => HasImplementation t
instance HasImplementation I
