-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Settlement.Instruction where

import Daml.Finance.Interface.Asset.Transferable qualified as Transferable (I)
import Daml.Finance.Interface.Common.Disclosure qualified as Disclosure (I, Implementation)
import Daml.Finance.Interface.Common.Types (AccountKey)
import Daml.Finance.Interface.Settlement.Types (Step)

type I = Instruction
type V = View

-- | View for `Instruction`.
data View = View
  with
    settler : Party
      -- ^ Party which execute the Instruction.
    step : Step
      -- ^ Instruction details to execute.
  deriving (Eq, Show)

-- | An interface for providing a single instruction to transfer an asset.
interface Instruction where
  viewtype View

  asDisclosure : Disclosure.I
    -- ^ Conversion to `Disclosure` interface.
  allocate : Allocate -> Update (ContractId Instruction)
    -- ^ Implementation of the `Allocate` choice.
  approve : Approve -> Update (ContractId Instruction)
    -- ^ Implementation of the `Approve` choice.
  execute : Update (ContractId Transferable.I)
    -- ^ Implementation of the `Execute` choice.

  nonconsuming choice GetView : View
    -- ^ Retrieves the instrument view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ _view this

  choice Allocate : ContractId Instruction
    -- ^ Allocate an asset to an instruction.
    with
      transferableCid : ContractId Transferable.I
        -- ^ Asset to be transferred.
    controller (_view this).step.sender
    do
      allocate this arg

  choice Approve : ContractId Instruction
    -- ^ Approve this instruction.
    with
      receiverAccount : AccountKey
        -- ^ Account reference of the receiving parties.
    controller (_view this).step.receiver
    do
      approve this arg

  choice Execute : ContractId Transferable.I
    -- ^ Execute the instruction.
    controller (_view this).settler
    do
      execute this

-- | Type constraint used to require templates implementing `Instruction` to also
-- implement `Disclosure`.
type Implementation t = (HasToInterface t I, Disclosure.Implementation t)
class (Implementation t) => HasImplementation t
instance HasImplementation I
instance HasToInterface I Disclosure.I where _toInterface = asDisclosure
