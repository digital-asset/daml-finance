-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Data.Observable where

import DA.Map as M (Map)
import Daml.Finance.Interface.Types.Common (Id, Parties)

-- | Type synonym for `Observable`.
type I = Observable

-- | Type synonym for `View`.
type V = View

-- | View for `Observable`.
data View = View
  with
    provider : Party
      -- ^ Party providing the observables.
    id : Id
      -- ^ Textual reference to the observable.
    observations : Map Time Decimal
      -- ^ The time-dependent values.
  deriving (Eq, Show)

-- | An inferface to inspect some numerical values (e.g. a stock price or an interest rate) required when processing a lifecycle rule.
interface Observable where
  viewtype V

  observe : Time -> Update Decimal
    -- ^ Implementation of the `Observe` choice.

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice Observe : Decimal
    -- ^ Observe the `Observable`.
    with
      actors : Parties
        -- ^ Parties calling this 'Observe' choice.
      t : Time
        -- ^ Time at which the value is observed.
    controller actors
    do
      observe this t

-- | Type constraint for requiring templates to implement `Observable`.
type Implementation t = HasToInterface t I
class (Implementation t) => HasImplementation t
instance HasImplementation I
