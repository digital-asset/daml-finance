-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Data.Reference.HolidayCalendar where

import Daml.Finance.Interface.Types.Date.Calendar
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, Implementation)

-- | Type synonym for `HolidayCalendar`.
type I = HolidayCalendar

-- | Type synonym for `View`.
type V = View

-- | View for `HolidayCalendar`.
data View = View
  with
    provider : Party
      -- ^ The parties providing the `HolidayCalendar`.
    calendar : HolidayCalendarData
      -- ^ Holiday Calendar Data used to define holidays.

interface HolidayCalendar where
  viewtype V

  asDisclosure : Disclosure.I
    -- ^ Conversion to `Disclosure` interface.
  updateCalendar : UpdateCalendar -> Update (ContractId HolidayCalendar)
      -- ^ Updates the holiday calendar.

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party fetching the view.
    controller viewer
    do
      pure $ view this

  choice UpdateCalendar : ContractId HolidayCalendar
    -- ^ Updates the holiday calendar.
    with
      newCalendar : HolidayCalendarData
        -- ^ The new `HolidayCalendarData`.
    controller (view this).provider
    do
      updateCalendar this arg

-- | Type constraint for requiring templates to implement `HolidayCalendar` along with `Disclosure`.
type Implementation t = (HasToInterface t I, Disclosure.Implementation t)
instance HasToInterface I Disclosure.I where _toInterface = asDisclosure
class (Implementation t) => HasImplementation t
instance HasImplementation I
