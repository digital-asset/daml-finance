-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | This module defines an interface for `BusinessTime` rules, which are contracts to control and
-- keep track of business time.
module Daml.Finance.Interface.Data.Reference.Time where

import Daml.Finance.Interface.Lifecycle.Event.Time qualified as Time (Event)
import Daml.Finance.Interface.Lifecycle.Observable.TimeObservable qualified as TimeObservable (I, Implementation)
import Daml.Finance.Interface.Types.Common.Types (Id, Parties)
import Prelude hiding (Time)

-- | Type synonym for `Time`.
type I = Time

-- | Type synonym for `View`.
type V = View

-- | View for `Time`.
data View = View
  with
    providers : Parties
      -- ^ Parties controlling time.
    id : Id
      -- ^ Textual identifier for the time rule.
  deriving (Eq, Show)

-- | An interface to manage and control business time. Controlled time rules (i.e. clocks) are
-- managed by entities that have control certain business time events. These can be trading-open /
-- -close on an exchange, start-of-day / end-of-day events of a trading desk, or just a daily
-- clock tick to signal the passing of aticking. Intervals in which
-- the clock "ticks" don't have to be regular, and can e.g. consider business days only.
interface Time where
  viewtype V

  asTimeObservable : TimeObservable.I
    -- Conversion to `TimeObservable` interface.
  advance : ContractId Time -> Advance -> Update (ContractId Time, ContractId Time.Event)
    -- ^ Implementation of the `Advance` choice.
  rewind : ContractId Time -> Rewind -> Update (ContractId Time, ContractId Time.Event)
    -- ^ Implementation of the `Rewind` choice.

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice Advance : (ContractId Time, ContractId Time.Event)
    -- ^ Advance time to its next state.
    with
      eventId : Id
        -- ^ Event identifier.
      eventDescription : Text
        -- ^ Event description.
    controller (view this).providers
    do
      advance this self arg

  nonconsuming choice Rewind : (ContractId Time, ContractId Time.Event)
    -- ^ Rewind time to its previous state.
    with
      eventId : Id
        -- ^ Event identifier.
      eventDescription : Text
        -- ^ Event description.
    controller (view this).providers
    do
      rewind this self arg

-- | Type constraint for requiring templates to implement `Time`.
type Implementation t = (HasToInterface t Time, TimeObservable.Implementation t)
class (Implementation t) => HasImplementation t
instance HasImplementation Time
instance HasToInterface I TimeObservable.I where _toInterface = asTimeObservable
