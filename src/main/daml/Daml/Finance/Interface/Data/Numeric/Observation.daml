-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Data.Numeric.Observation where

import DA.Map (Map)
import Daml.Finance.Interface.Lifecycle.Observable.NumericObservable qualified as NumericObservable (I, Implementation)
import Daml.Finance.Interface.Types.Common.Types (Id, PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, Implementation)

-- | Type synonym for `Observation`.
type I = Observation

-- | Type synonym for `View`.
type V = View

-- | View for `Observation`.
data View = View
  with
    provider : Party
      -- ^ The reference data provider.
    id : Id
      -- ^ A textual identifier.
    observations : Map Time Decimal
      -- ^ The time-dependent values.
    observers : PartiesMap
      -- ^ Observers.

-- | Interface for a time-dependent numeric `Observation`, where the values are explicitly stored
-- on-ledger.
interface Observation where
  viewtype V

  asDisclosure : Disclosure.I
    -- ^ Conversion to `Disclosure` interface.
  asNumericObservable : NumericObservable.I
    -- ^ Conversion to `NumericObservable` interface.

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party fetching the view.
    controller viewer
    do
      pure $ view this

-- | Type constraint for requiring templates to implement `Observation` along with `Disclosure`
-- as well as `NumericObservable`.
type Implementation t = (HasToInterface t I, Disclosure.Implementation t, NumericObservable.Implementation t)
instance HasToInterface I Disclosure.I where _toInterface = asDisclosure
instance HasToInterface I NumericObservable.I where _toInterface = asNumericObservable
class (Implementation t) => HasImplementation t
instance HasImplementation I
