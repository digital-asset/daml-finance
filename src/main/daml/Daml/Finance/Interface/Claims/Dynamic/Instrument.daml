-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Claims.Dynamic.Instrument where

-- | Type synonym for `Instrument`.
type I = Instrument

-- | Type synonym for `View`.
type V = View

-- | View for `Instrument`.
data View = View
  with
    lifecycler : Party
      -- ^ Party performing the lifecycling.
    lastEventTimestamp : Time
      -- ^ (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
      --   time of creation should be used.
  deriving (Eq, Show)

-- | Interface implemented by instruments that create Contingent Claims trees on-the-fly
-- (ie., the tree is not stored on disk as part of a contract, but created and processed in-memory).
interface Instrument where
  viewtype V

  createNewVersion : CreateNewVersion -> Update (ContractId Instrument)

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice CreateNewVersion : ContractId Instrument
    -- ^ Create a new version of an instrument, using a new lastEventTimestamp.
    with
      version : Text
        -- ^ The new version of the instrument.
      lastEventTimestamp : Time
        -- ^ The new lastEventTimestamp of the instrument.
    controller (view this).lifecycler
    do
      createNewVersion this arg

-- | Type constraint for requiring templates to implement `Instrument`.
type Implementation t = HasToInterface t I
class (Implementation t) => HasImplementation t
instance HasImplementation I
