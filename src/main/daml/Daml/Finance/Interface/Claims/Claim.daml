-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Claims.Claim
  ( Claim(..)
  , I
  , Implementation
  , V
  , View(..)
  , getAcquisitionTime
  , getClaim
  , getClaims
  , view
  ) where

import Daml.Finance.Interface.Claims.Types (C, TaggedClaim)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I, Implementation, asDisclosure)
import Daml.Finance.Interface.Types.Common (InstrumentKey)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I)

-- | Type synonym for `Claim`.
type I = Claim

-- | Type synonym for `View`.
type V = View

-- | View for `Claim`.
data View = View
  with
    instrument : InstrumentKey
      -- ^ The instrument's key.
    acquisitionTime : Time
      -- ^ The claim's acquisition time.
  deriving (Eq, Show)

-- | Interface implemented by templates that can be represented as Contingent Claims.
interface Claim where
  viewtype V

  asBaseInstrument : BaseInstrument.I
    -- ^ Conversion to base `Instrument` interface.
  getClaims : Update [TaggedClaim]
    -- ^ The list of claims representing the instrument.

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice GetClaims : [TaggedClaim]
    -- ^ Retrieves the list of claims representing the instrument.
    with
      viewer : Party
        -- ^ The party retrieving the claims.
    controller viewer
    do
      getClaims this

-- | Type constraint for requiring templates to implement `Claim`.
type Implementation t = (HasToInterface t I, BaseInstrument.Implementation t)
instance HasToInterface I BaseInstrument.I where _toInterface = asBaseInstrument
instance HasToInterface I Disclosure.I where _toInterface = BaseInstrument.asDisclosure . asBaseInstrument
class (Implementation t) => HasImplementation t
instance HasImplementation I

-- | Retrieves the single claim representing the template. An error is thrown if there are zero or more than one claims.
getClaim : Claim -> Update C
getClaim instrument = do
  x <- getClaims instrument
  case x of
    [tc] -> pure tc.claim
    other -> abort "Expecting exactly one claim"

-- | Retrieves the claim's acquisition time.
getAcquisitionTime : Claim -> Time
getAcquisitionTime = (.acquisitionTime) . view
