-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Claims.Claim where

import Daml.Control.Monad.Trans.State (StateT(..))
import Daml.Finance.Interface.Claims.Types (C, TaggedClaim)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I)
import Daml.Finance.Interface.Util.SyntheticKey (IndexTable, UpdateWithKey)
import Daml.Finance.Interface.Util.SyntheticKey qualified as SyntheticKey (I)

-- | Type synonym for `Claim`.
type I = Claim

-- | Type synonym for `View`.
type V = View

-- | View for `Claim`.
data View = View
  with
    acquisitionTime : Time
      -- ^ The claim's acquisition time.
  deriving (Eq, Show)

-- | Interface implemented by templates that can be represented as Contingent Claims.
interface Claim requires BaseInstrument.I, Disclosure.I, SyntheticKey.I where
  viewtype V

  getClaims : GetClaims -> Update ([TaggedClaim], IndexTable)
    -- ^ The list of claims representing the instrument.

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice GetClaims : ([TaggedClaim], IndexTable)
    -- ^ Retrieves the list of claims representing the instrument. This might involve fetching
    --   reference data, such as calendars, on which the actor must have visibility.
    with
      actor : Party
        -- ^ The party retrieving the claims.
      idx : IndexTable
        -- ^ The index table needed for the action.
    controller actor
    do
      getClaims this arg

-- | Retrieves the single claim representing the template. An error is thrown if there are zero or
-- more than one claims.
getClaim : Party -> Claim -> UpdateWithKey C
getClaim actor instrument = do
  x <- StateT $ getClaims instrument . GetClaims actor
  case x of
    [tc] -> pure tc.claim
    other -> abort "Expecting exactly one claim"

-- | Retrieves the claim's acquisition time.
getAcquisitionTime : Claim -> Time
getAcquisitionTime = (.acquisitionTime) . view
