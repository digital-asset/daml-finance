-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Asset.Util
  ( fetchAccount
  , fetchInstrument
  , getInstrument
  , getAccount
  , getCustodian
  , getOwner
  , getAmount
  , getLocker
  ) where

import Daml.Finance.Interface.Asset.Account qualified as Account (I, R)
import Daml.Finance.Interface.Asset.Holding qualified as Holding (I, view)
import Daml.Finance.Interface.Asset.Instrument qualified as Instrument (I, R)
import Daml.Finance.Interface.Asset.Lockable qualified as Lockable (I, view)
import Daml.Finance.Interface.Asset.Types (AccountKey, InstrumentKey)
import Daml.Finance.Interface.Common.Types (Parties)
import Daml.Finance.Interface.Common.Util (fetchInterfaceByKey)

-- | Fetch the account of a holding.
fetchAccount : (HasToInterface t Holding.I) => t -> Update Account.I
fetchAccount holding = fetchInterfaceByKey @Account.R $ getAccount (toInterface @Holding.I holding)

-- | Fetch instrument from holding.
fetchInstrument : (HasToInterface t Holding.I) => t -> Update Instrument.I
fetchInstrument holding = fetchInterfaceByKey @Instrument.R $ getInstrument (toInterface @Holding.I holding)

-- | Get the instrument key of a holding.
getInstrument : (HasToInterface t Holding.I) => t -> InstrumentKey
getInstrument holding = (Holding.view $ toInterface @Holding.I holding).instrument

-- | Get the account key of a holding.
getAccount : (HasToInterface t Holding.I) => t -> AccountKey
getAccount holding = (Holding.view $ toInterface @Holding.I holding).account

-- | Get the custodian of a holding.
getCustodian : (HasToInterface t Holding.I) => t -> Party
getCustodian holding = (Holding.view $ toInterface @Holding.I holding).account.custodian

-- | Get the owner of a holding.
getOwner : (HasToInterface t Holding.I) => t -> Party
getOwner holding = (Holding.view $ toInterface @Holding.I holding).account.owner

-- | Get the amount of a holding.
getAmount : (HasToInterface t Holding.I) => t -> Decimal
getAmount holding = (Holding.view $ toInterface @Holding.I holding).amount

-- | Get the lockers of a lockable holding.
getLocker : (HasToInterface t Lockable.I) => t -> Parties
getLocker lockable = case (Lockable.view $ toInterface @Lockable.I lockable).lock of None -> mempty; Some lock -> lock.locker
