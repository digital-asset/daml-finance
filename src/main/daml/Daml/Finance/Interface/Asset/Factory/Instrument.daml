-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Asset.Factory.Instrument where

import Daml.Finance.Interface.Asset.Instrument qualified as Instrument (I)
import Daml.Finance.Interface.Asset.Types (InstrumentKey(..))
import Daml.Finance.Interface.Common.Disclosure qualified as Disclosure (I, Implementation)
import Daml.Finance.Interface.Common.Types (Observers)

-- | Type synonym for `Factory`.
type F = Factory

-- View of `Factory`.
data View = View
  with
    provider : Party
      -- ^ The provider of the `Factory`.
  deriving (Eq, Ord, Show)

-- | Interface that allows implementing templates to create instruments.
interface Factory where
  viewtype View

  asDisclosure : Disclosure.I
    -- ^ Conversion to `Disclosure` interface.
  create' : Create -> Update (ContractId Instrument.I)
    -- ^ Implementation of `Create` choice.
  remove : Remove -> Update ()
    -- ^ Implementation of `Remove` choice.

  nonconsuming choice Create : ContractId Instrument.I
    -- ^ Create a new account.
    with
      instrument : InstrumentKey
        -- ^ The instrument's key.
      validAsOf : Time
        -- ^ Timestamp as of which the instrument is valid.
      observers : Observers
        -- ^ The instrument's observers.
    controller instrument.depository, instrument.issuer
    do
      create' this arg

  nonconsuming choice Remove : ()
    -- ^ Archive an account.
    with
      instrument : InstrumentKey
        -- ^ The account's key.
    controller instrument.depository, instrument.issuer
      do
        remove this arg

-- | Type constraint used to require templates implementing `Factory` to also
-- implement `Disclosure`.
type Implementation t = (HasToInterface t Factory, Disclosure.Implementation t)
instance HasToInterface Factory Disclosure.I where _toInterface = asDisclosure
class (Implementation t) => HasImplementation t
instance HasImplementation Factory
