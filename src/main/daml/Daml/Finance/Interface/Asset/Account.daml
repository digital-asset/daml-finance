-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

-- | We recommend to import this module qualified.
module Daml.Finance.Interface.Asset.Account where

import Daml.Finance.Interface.Asset.Factory.Holding qualified as Holding (F)
import Daml.Finance.Interface.Asset.Holding qualified as Holding (I)
import Daml.Finance.Interface.Common.Disclosure qualified as Disclosure (GetView(..), I, Implementation)
import Daml.Finance.Interface.Common.Types (AccountKey(..), InstrumentKey(..), Observers, Quantity)
import Daml.Finance.Interface.Common.Util (exerciseInterfaceByKeyHelper, flattenObservers)

-- | Type synonym for `Account`.
type I = Account

-- | Type synonym for `AccountKey`.
type K = AccountKey

-- | Type synonym for `Reference`. This type is currently used as a work-around given the lack of interface keys.
type R = Reference

-- | Type synonym for `View`.
type V = View

-- | Exercise interface by key.
-- This method can be used to exercise a choice on an `Account` given its `AccountKey`.
-- Requires as input the `AccountKey`, the actor fetching the account and the choice arguments. For example:
-- ```
-- exerciseInterfaceByKey @Account.I accountKey actor Account.Debit with holdingCid
-- ```
exerciseInterfaceByKey : forall t2 d r. (HasExercise t2 d r)
  => K          -- ^ The account key.
  -> Party      -- ^ The actor fetching the account.
  -> d          -- ^ The choice arguments.
  -> Update r
exerciseInterfaceByKey k actor arg = exerciseInterfaceByKeyHelper @R @t2 k (GetCid with viewer = actor) arg

-- | View for `Account`.
data View = View
  with
    custodian : Party
      -- ^ Party providing accounting services.
    owner : Party
      -- ^ Party owning this account.
    id : Text
      -- ^ Textual description of the account.
    holdingFactoryCid : ContractId Holding.F
      -- ^ Associated holding factory.
  deriving (Eq, Ord, Show)

-- | Convert the account's 'View' to its key.
toKey : View -> AccountKey
toKey v = AccountKey with custodian = v.custodian; owner = v.owner; id = v.id

-- | An interface which represents an established relationship between a provider and an owner.
interface Account where
  viewtype View

  asDisclosure : Disclosure.I
    -- ^ Conversion to `Disclosure` interface.
  getKey : AccountKey
    -- ^ Get the unique key of the `Account`.
  credit : Credit -> Update (ContractId Holding.I)
    -- ^ Implementation of the `Credit` choice.
  debit : Debit -> Update ()
    -- ^ Implementation of the `Debit` choice.

  nonconsuming choice GetView : View
    -- ^ Returns the account's view.
    with
      viewer : Party
        -- ^ The party fetching the view.
    controller viewer
    do
      pure $ _view this

  nonconsuming choice Credit : ContractId Holding.I
    -- ^ Creates a new `Holding` in the corresponding `Account`.
    with
      quantity : Quantity InstrumentKey Decimal
        -- ^ The target `Instrument` and corresponding amount.
    controller (_view this).custodian, (_view this).owner
    do
      credit this arg

  nonconsuming choice Debit : ()
    -- ^ Destroys an existing `Holding`.
    with
      holdingCid : ContractId Holding.I
        -- ^ The `Holding`'s contract id.
    controller (_view this).custodian, (_view this).owner
    do
      debit this arg

-- | Type constraint used to require templates implementing `Account` to also
-- implement `Disclosure`.
type Implementation t = (HasToInterface t I, Disclosure.Implementation t)
instance HasToInterface I Disclosure.I where _toInterface = asDisclosure
class (Implementation t) => HasImplementation t
instance HasImplementation I

-- | HIDE
-- This template is used to key an Account contract. It allows for looking up this contract
-- by key then acquiring the Account contract by fetching its contract id on this contract.
-- As updates are made to an Account, this Reference contract is required to be kept in sync.
template Reference
  with
    accountView : View
      -- ^ The default view for accounts.
    cid : ContractId Account
      -- ^ The contract id of the account
    observers : Observers
  where
    signatory accountView.custodian, accountView.owner
    observer flattenObservers observers

    key toKey accountView : AccountKey
    maintainer key.custodian

    nonconsuming choice GetCid : ContractId Account
      -- ^ Get the `Account`'s contract id.
      with
        viewer : Party
      controller viewer
      do
        pure cid

    choice SetCid : ContractId Reference
      -- ^ Set the account cid. This choice should be called only from `Account` implementations.
      with
        newCid : ContractId Account
          -- ^ The account cid.
      controller accountView.custodian, accountView.owner
      do
        create this with cid = newCid

    choice SetObservers : ContractId Reference
      -- ^ Set observers. This choice should be called only from `Account` implementations.
      with
        newObservers : Observers
          -- ^ The new observers.
      controller accountView.custodian, accountView.owner
      do
        create this with observers = newObservers

-- | HIDE
-- Create Reference for the account
createReference : Party -> ContractId Account -> Update (ContractId Reference)
createReference actor cid = do
  accountView <- exercise cid GetView with viewer = actor
  disclosureView <- exercise (toInterfaceContractId @Disclosure.I cid) Disclosure.GetView with viewer = actor
  create Reference with accountView; cid; observers = disclosureView.observers

-- | HIDE
-- Helper function to update the account reference once observers are added to the account.
disclosureUpdateReference : Observers -> AccountKey -> ContractId Account -> Update (ContractId Disclosure.I)
disclosureUpdateReference newObservers k iCid = do
  exerciseByKey @Reference k SetCid with newCid = iCid
  exerciseByKey @Reference k SetObservers with newObservers
  pure $ toInterfaceContractId iCid
