-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

module Daml.Finance.Interface.Asset.Account where

import Daml.Finance.Interface.Asset.Factory.Holding qualified as Holding (F)
import Daml.Finance.Interface.Asset.Holding qualified as Holding (I)
import Daml.Finance.Interface.Asset.Instrument qualified as Instrument (Q)
import Daml.Finance.Interface.Asset.Types (AccountKey(..))
import Daml.Finance.Interface.Common.Disclosure qualified as Disclosure (GetView(..), I, Implementation)
import Daml.Finance.Interface.Common.Types (Observers)
import Daml.Finance.Interface.Common.Util (exerciseInterfaceByKeyHelper, flattenObservers)

type I = Account
type K = AccountKey
type R = Reference
type V = View

-- | Exercise interface by key
exerciseInterfaceByKey : forall t2 d r. (HasExercise t2 d r) => K -> Party -> d -> Update r
exerciseInterfaceByKey k actor arg = exerciseInterfaceByKeyHelper @R @t2 k (GetCid with viewer = actor) arg

-- | View for `Account`.
data View = View
  with
    custodian : Party
      -- ^ Party providing accounting services.
    owner : Party
      -- ^ Party owning this account.
    id : Text
      -- ^ Textual description of the account.
    holdingFactoryCid : ContractId Holding.F
      -- ^ Associated holding factory.
  deriving (Eq, Ord, Show)

-- | Convert the account's 'View' to its key
toKey : View -> AccountKey
toKey v = AccountKey with custodian = v.custodian; owner = v.owner; id = v.id

-- | An interface which respresents an established relationship between multiple parties
-- and/or a specific grouping of assets.
interface Account where
  asDisclosure : Disclosure.I
    -- ^ Conversion to `Disclosure` interface.
  view : View
    -- ^ Acquire the default interface view.
  getKey : AccountKey
    -- ^ Get the unique key of the `Account`.
  creditImpl : Credit -> Update (ContractId Holding.I)
    -- ^ Implementation of the `Credit` choice.
  debitImpl : Debit -> Update ()
    -- ^ Implementation of the `Debit` choice.

  nonconsuming choice GetView : View
    -- ^ Returns the account's view.
    with
      viewer : Party
        -- ^ The party fetching the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice Credit : ContractId Holding.I
    -- ^ Creates a new `Holding` in the corresponding `Account`.
    with
      quantity : Instrument.Q
        -- ^ The target `Instrument` and corresponding amount.
    controller (view this).custodian, (view this).owner
    do
      creditImpl this arg

  nonconsuming choice Debit : ()
    -- ^ Destroys an existing `Holding`.
    with
      holdingCid : ContractId Holding.I
        -- ^ The `Holding`'s contract id.
    controller (view this).custodian, (view this).owner
    do
      debitImpl this arg

-- | Type constraint used to require templates implementing `Account` to also
-- implement `Disclosure`.
type Implementation t = (HasToInterface t I, Disclosure.Implementation t)
instance HasToInterface I Disclosure.I where _toInterface = asDisclosure
class (Implementation t) => HasImplementation t
instance HasImplementation I

-- | This template is used to key an Account contract. It allows for looking up this contract
-- by key then acquiring the Account contract by fetching its contract id on this contract.
-- As updates are made to an Account, this Reference contract is required to be kept in sync.
template Reference
  with
    accountView : View
      -- ^ The default view for accounts.
    cid : ContractId Account
      -- ^ The contract id of the account
    observers : Observers
  where
    signatory accountView.custodian, accountView.owner
    observer flattenObservers observers

    key toKey accountView : AccountKey
    maintainer key.custodian

    nonconsuming choice GetCid : ContractId Account
      -- ^ Get the `Account`'s contract id.
      with
        viewer : Party
      controller viewer
      do
        pure cid

    -- | HIDE
    -- Only to be called from the interface implementation.
    choice SetCid : ContractId Reference
      with
        newCid : ContractId Account
      controller accountView.custodian, accountView.owner
      do
        create this with cid = newCid

    -- | HIDE
    -- Only to be called from the interface implementation.
    choice SetObservers : ContractId Reference
      with
        newObservers : Observers
      controller accountView.custodian, accountView.owner
      do
        create this with observers = newObservers

-- | Create Reference for the account
createReference : Party -> ContractId Account -> Update (ContractId Reference)
createReference actor cid = do
  accountView <- exercise cid GetView with viewer = actor
  disclosureView <- exercise (toInterfaceContractId @Disclosure.I cid) Disclosure.GetView with viewer = actor
  create Reference with accountView; cid; observers = disclosureView.observers

-- | Helper function to update the acount reference once observers are added to the account.
disclosureUpdateReference : Observers -> AccountKey -> ContractId Account -> Update (ContractId Disclosure.I)
disclosureUpdateReference newObservers k iCid = do
  exerciseByKey @Reference k SetCid with newCid = iCid
  exerciseByKey @Reference k SetObservers with newObservers
  pure $ toInterfaceContractId iCid
