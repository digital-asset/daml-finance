-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Common.Disclosure where

import DA.Map qualified as M (delete, insert, lookup)
import DA.Optional (fromOptional)
import DA.Set (Set, delete, empty, insert, null, member)
import DA.Traversable qualified as T (mapA)
import Daml.Finance.Interface.Common.Types (Observers, Parties)
import Prelude hiding (null)

-- | Type synonym for `Disclosure`.
type I = Disclosure

-- | Type synonym for `View`.
type V = View

-- | View for `Disclosure`.
data View = View
  with
    disclosureControllers : Set Parties
      -- ^ Disjunction choice controllers.
    observers : Observers
      -- ^ Observers with context.
  deriving (Eq, Ord, Show)

-- | An interface for managing the visibility of contracts for non-authorizing parties.
interface Disclosure where
  viewtype V

  setObservers : SetObservers -> Update (ContractId Disclosure)
    -- ^ Implementation of the `SetObservers` choice.
  archive' : ContractId Disclosure -> Update ()
    -- ^ Implemetation of archiving the contract.

  nonconsuming choice GetView : View
    -- ^ Retrieves the instrument view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ _view this

  choice SetObservers : ContractId Disclosure
    -- ^ Set the observers for a contract.
    with
      disclosers : Parties
        -- ^ Party calling this choice.
      newObservers : Observers
        -- ^ Observers to set for this contract. This overrides the existing observers.
    controller disclosers
    do
      assertMsg "controller must be authorized to SetObservers" $ disclosers `member` (_view this).disclosureControllers
      setObservers this arg

  choice AddObservers : ContractId Disclosure
    -- ^ Add a single new observer context to the existing observers.
    with
      disclosers : Parties
        -- ^ Party calling this choice.
      observersToAdd : (Text, Parties)
        -- ^ Observer context to add to a contract.
    controller disclosers
    do
      assertMsg "controller must be authorized to AddObservers" $ disclosers `member` (_view this).disclosureControllers
      let
        elem = fromOptional empty (M.lookup observersToAdd._1 (view @Disclosure this).observers)
        value = insert observersToAdd._2 elem
        newObservers = M.insert observersToAdd._1 value ((_view this).observers)
      setObservers this (SetObservers with disclosers; newObservers)

  nonconsuming choice RemoveObservers : Optional (ContractId Disclosure)
    -- ^ Remove an observer context from the existing observers.
    -- Any party can undisclose itself. None is returned if no update is needed.
    with
      observersToRemove : (Text, Parties)
        -- ^ Observer context to remove.
    controller observersToRemove._2
    do
      let observers = (_view this).observers
      fromOptional None <$> T.mapA
        (\elem -> do
          let
            elem' = delete observersToRemove._2 elem
            newObservers = (
              if (null elem') then
                M.delete observersToRemove._1
              else
                M.insert observersToRemove._1 elem')
              observers
          if (observers == newObservers) then
            pure None
          else do
            archive' this (coerceContractId self : ContractId Disclosure)
            Some <$> setObservers this (SetObservers with disclosers = observersToRemove._2; newObservers)
       ) (M.lookup observersToRemove._1 observers)

-- | Type constraint used to require templates implementing `Disclosure` to not
-- require any other interface to be implemented.
type Implementation t = HasToInterface t I
class (Implementation t) => HasImplementation t
instance HasImplementation I
