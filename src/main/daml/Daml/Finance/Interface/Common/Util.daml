-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

module Daml.Finance.Interface.Common.Util
  ( exerciseInterfaceByKeyHelper
  , fetchInterfaceByKey
  , flattenObservers
  , verify
  ) where

import DA.Map qualified as M (toList)
import DA.Record (HasField)
import DA.Set qualified as S (fromList, toList)
import Daml.Finance.Interface.Common.Types (Observers, Parties)

-- | Let us fetch an interface by key
fetchInterfaceByKey : forall t k i. (HasFetchByKey t k, HasField "cid" t (ContractId i), HasFetch i) => k -> Update i
fetchInterfaceByKey k = do
  d <- snd <$> fetchByKey @t k
  fetch $ coerceContractId d.cid

-- | HIDE
-- Utility function for exercising interface by key.
exerciseInterfaceByKeyHelper : forall t1 t2 t k c d r. (HasExerciseByKey t1 k c (ContractId t), HasExercise t2 d r) => k -> c -> d -> Update r
exerciseInterfaceByKeyHelper k arg1 arg2 = do
  cid : ContractId t <- exerciseByKey @t1 k arg1
  let cid' : ContractId t2 = coerceContractId cid
  exercise cid' arg2

-- | Verify is assertMsg with its arguments flipped.
verify : CanAssert m => Bool -> Text -> m ()
verify = flip assertMsg

-- | Flattens observers into a `Set Party` for usage in template definitions. For example:
-- ```
-- observer $ flattenObservers observers
-- ```
flattenObservers : Observers -> Parties
flattenObservers (observers : Observers) =
  S.fromList $ concatMap (\t -> concatMap S.toList (S.toList t._2)) (M.toList observers)
