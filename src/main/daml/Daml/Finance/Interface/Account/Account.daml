-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | We recommend to import this module qualified.
module Daml.Finance.Interface.Account.Account where

import DA.Optional (whenSome)
import Daml.Finance.Interface.Holding.Base qualified as Base (I)
import Daml.Finance.Interface.Holding.Factory qualified as Holding (F)
import Daml.Finance.Interface.Types.Common.Types (Id, AccountKey(..), InstrumentKey(..), Parties, Quantity)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, disclose, undisclose)
import Daml.Finance.Interface.Util.KeyTable (HasSyntheticKey(..), UpdateWithKey, exercise, fetchByKey, insertWithState)
import Daml.Finance.Interface.Util.KeyTable qualified as SyntheticallyKeyed (I)
import Prelude hiding (archive, create, exercise, exerciseByKey, fetch, fetchByKey, fetchFromInterface, lookup, lookupByKey)

-- | Type synonym for `Account`.
type I = Account

-- | Type synonym for `View`.
type V = View

-- | Controllers of the account (related to transfers).
data Controllers = Controllers
  with
    outgoing : Parties
      -- ^ Parties instructing a transfer (outgoing).
    incoming : Parties
      -- ^ Parties approving a transfer (incoming).
  deriving (Eq, Show)

-- | View for `Account`.
data View = View
  with
    custodian : Party
      -- ^ Party providing accounting services.
    owner : Party
      -- ^ Party owning this account.
    id : Id
      -- ^ Identifier for the account.
    description : Text
      -- ^ Human readable description of the account.
    holdingFactoryCid : ContractId Holding.F
      -- ^ Associated holding factory.
    controllers : Controllers
      -- ^ Parties controlling transfers.
  deriving (Eq, Show)

-- | An interface which represents an established relationship between a provider and an owner.
interface Account requires Disclosure.I, SyntheticallyKeyed.I where
  viewtype V

  getKey : AccountKey
    -- ^ Get the key of the `Account`.
  credit : Credit -> Update (ContractId Base.I)
    -- ^ Implementation of the `Credit` choice.
  debit : Debit -> Update ()
    -- ^ Implementation of the `Debit` choice.

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party fetching the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice Credit : ContractId Base.I
    -- ^ Creates a new `Holding` in the corresponding `Account`.
    with
      quantity : Quantity InstrumentKey Decimal
        -- ^ The target `Instrument` and corresponding amount.
    controller (view this).custodian, (view this).controllers.incoming
    do
      credit this arg

  nonconsuming choice Debit : ()
    -- ^ Removes an existing `Holding`.
    with
      holdingCid : ContractId Base.I
        -- ^ The `Holding`'s contract id.
    controller (view this).custodian, (view this).controllers.outgoing
    do
      debit this arg

-- | Convert the account's 'View' to its key.
toKey : View -> AccountKey
toKey v = AccountKey with custodian = v.custodian; owner = v.owner; id = v.id

-- | HIDE
discloseByKey : (Text, Parties) -> AccountKey -> Bool -> UpdateWithKey (ContractId Account)
discloseByKey observersToAdd account isOutgoingController = do
  (cid, i) <- fetchByKey @Account @Account @AccountKey account
  let
    controllers = (view i).controllers
    disclosers = if isOutgoingController then controllers.outgoing else controllers.incoming
  cid <- Disclosure.disclose @Account observersToAdd disclosers cid
  insertWithState account cid
  pure cid

-- | HIDE
undiscloseByKey : (Text, Parties) -> AccountKey -> Bool ->
  UpdateWithKey (Optional (ContractId Account))
undiscloseByKey observersToRemove account isOutgoingController = do
  (cid, i) <- fetchByKey @Account @Account @AccountKey account
  let
    controllers = (view i).controllers
    disclosers = if isOutgoingController then controllers.outgoing else controllers.incoming
  oCid <- Disclosure.undisclose @Account observersToRemove disclosers cid
  whenSome oCid $ insertWithState account
  pure oCid

-- | HIDE
instance HasSyntheticKey I AccountKey where
  getKey = Daml.Finance.Interface.Account.Account.getKey
  getKeyFromCid viewer cid = toKey <$> exercise cid GetView with viewer
