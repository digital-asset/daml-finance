-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

-- | We recommend to import this module qualified.
module Daml.Finance.Interface.Account.Account where

import Daml.Finance.Interface.Holding.Base qualified as Base (I)
import Daml.Finance.Interface.Holding.Factory qualified as Holding (F)
import Daml.Finance.Interface.Types.Common.Types (Id, AccountKey(..), InstrumentKey(..), Parties, PartiesMap, Quantity)
import Daml.Finance.Interface.Util.Common (exerciseInterfaceByKeyHelper)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (AddObservers(..), GetView(..), I, RemoveObservers(..), flattenObservers)

-- | Type synonym for `Account`.
type I = Account

-- | Type synonym for `Reference`. This type is currently used as a work-around given the lack of
-- interface keys.
type R = Reference

-- | Type synonym for `View`.
type V = View

-- | Controllers of the account (related to transfers).
data Controllers = Controllers
  with
    outgoing : Parties
      -- ^ Parties instructing a transfer (outgoing).
    incoming : Parties
      -- ^ Parties approving a transfer (incoming).
  deriving (Eq, Show)

-- | View for `Account`.
data View = View
  with
    custodian : Party
      -- ^ Party providing accounting services.
    owner : Party
      -- ^ Party owning this account.
    id : Id
      -- ^ Identifier for the account.
    description : Text
      -- ^ Human readable description of the account.
    holdingFactoryCid : ContractId Holding.F
      -- ^ Associated holding factory.
    controllers : Controllers
      -- ^ Parties controlling transfers.
  deriving (Eq, Show)

-- | Convert the account's 'View' to its key.
toKey : View -> AccountKey
toKey v = AccountKey with custodian = v.custodian; owner = v.owner; id = v.id

-- | An interface which represents an established relationship between a provider and an owner.
interface Account requires Disclosure.I where
  viewtype V

  getKey : AccountKey
    -- ^ Get the unique key of the `Account`.
  credit : Credit -> Update (ContractId Base.I)
    -- ^ Implementation of the `Credit` choice.
  debit : Debit -> Update ()
    -- ^ Implementation of the `Debit` choice.

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party fetching the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice Credit : ContractId Base.I
    -- ^ Creates a new `Holding` in the corresponding `Account`.
    with
      quantity : Quantity InstrumentKey Decimal
        -- ^ The target `Instrument` and corresponding amount.
    controller (view this).custodian, (view this).controllers.incoming
    do
      credit this arg

  nonconsuming choice Debit : ()
    -- ^ Removes an existing `Holding`.
    with
      holdingCid : ContractId Base.I
        -- ^ The `Holding`'s contract id.
    controller (view this).custodian, (view this).controllers.outgoing
    do
      debit this arg

-- | HIDE
-- This template is used to key an Account contract. It allows for looking up this contract by key
-- then acquiring the Account contract by fetching its contract id on this contract. As updates are
-- made to an Account, this Reference contract is required to be kept in sync.
template Reference
  with
    accountView : View
      -- ^ The default view for accounts.
    cid : ContractId Account
      -- ^ The contract id of the account.
    observers : PartiesMap
  where
    signatory accountView.custodian, accountView.owner
    observer Disclosure.flattenObservers observers

    key toKey accountView : AccountKey
    maintainer key.custodian

    nonconsuming choice GetCid : ContractId Account
      -- ^ Get the `Account`'s contract id.
      with
        viewer : Party
      controller viewer
      do
        pure cid

    choice SetCid : ContractId Reference
      -- ^ Set the account cid. This choice should be called only from `Account` implementations.
      with
        newCid : ContractId Account
          -- ^ The account cid.
      controller accountView.custodian, accountView.owner
      do
        create this with cid = newCid

    choice SetObservers : ContractId Reference
      -- ^ Set observers. This choice should be called only from `Account` implementations.
      with
        newObservers : PartiesMap
          -- ^ The new observers.
      controller accountView.custodian, accountView.owner
      do
        create this with observers = newObservers

-- | Exercise interface by key.
-- This method can be used to exercise a choice on an `Account` given its `AccountKey`.
-- Requires as input the `AccountKey`, the actor fetching the account and the choice arguments.
-- For example:
-- ```
-- exerciseInterfaceByKey @Account.I accountKey actor Account.Debit with holdingCid
-- ```
exerciseInterfaceByKey : forall i d r. (HasInterfaceTypeRep i, HasExercise i d r)
  => AccountKey -- ^ The account key.
  -> Party      -- ^ The actor fetching the account.
  -> d          -- ^ The choice arguments.
  -> Update r
exerciseInterfaceByKey k viewer arg =
  exerciseInterfaceByKeyHelper @R @I @i k (GetCid with viewer) arg

-- | Disclose account.
disclose : (Text, Parties) -> Party -> Parties -> AccountKey -> Update (ContractId I)
disclose observersToAdd actor disclosers account =
  coerceInterfaceContractId <$>
    exerciseInterfaceByKey
      @Disclosure.I
      account
      actor
      Disclosure.AddObservers with disclosers; observersToAdd

-- | Undisclose account.
undisclose : (Text, Parties) -> Party -> Parties -> AccountKey -> Update (Optional (ContractId I))
undisclose observersToRemove actor disclosers account =
  fmap coerceInterfaceContractId <$>
    exerciseInterfaceByKey
      @Disclosure.I
      account
      actor
      Disclosure.RemoveObservers with disclosers; observersToRemove

-- | HIDE
-- Create Reference for the account
createReference : Party -> ContractId I -> Update (ContractId R)
createReference actor cid = do
  accountView <- exercise cid GetView with viewer = actor
  disclosureView <- exercise
    (toInterfaceContractId @Disclosure.I cid)
    Disclosure.GetView with viewer = actor
  create Reference with accountView; cid; observers = disclosureView.observers

-- | HIDE
-- Helper function to update the account reference once observers are added to the account.
disclosureUpdateReference : AccountKey -> PartiesMap -> ContractId Account ->
  Update (ContractId Disclosure.I)
disclosureUpdateReference k newObservers iCid = do
  exerciseByKey @Reference k SetCid with newCid = iCid
  exerciseByKey @Reference k SetObservers with newObservers
  pure $ toInterfaceContractId iCid
