-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Holding.Util
  ( disclose
  , fetchAccount
  , getAccountKey
  , getAmount
  , getCustodian
  , getInstrumentKey
  , getLocker
  , getOwner
  , undisclose
  ) where

import Daml.Finance.Interface.Holding.Account qualified as Account (I, R)
import Daml.Finance.Interface.Holding.Base qualified as Base (I)
import Daml.Finance.Interface.Holding.Lockable qualified as Lockable (I)
import Daml.Finance.Interface.Types.Common (AccountKey, InstrumentKey, Parties)
import Daml.Finance.Interface.Util.Common (fetchInterfaceByKey)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (AddObservers(..), I, RemoveObservers(..))

-- | Fetch the account of a holding.
fetchAccount : (HasToInterface t Base.I) => t -> Update Account.I
fetchAccount holding = fetchInterfaceByKey @Account.R $ getAccountKey (toInterface @Base.I holding)

-- | Get the key of a holding.
getInstrumentKey : (HasToInterface t Base.I) => t -> InstrumentKey
getInstrumentKey holding = (view $ toInterface @Base.I holding).instrumentKey

-- | Get the account key of a holding.
getAccountKey : (HasToInterface t Base.I) => t -> AccountKey
getAccountKey holding = (view $ toInterface @Base.I holding).accountKey

-- | Get the custodian of a holding.
getCustodian : (HasToInterface t Base.I) => t -> Party
getCustodian holding = (view $ toInterface @Base.I holding).accountKey.custodian

-- | Get the owner of a holding.
getOwner : (HasToInterface t Base.I) => t -> Party
getOwner holding = (view $ toInterface @Base.I holding).accountKey.owner

-- | Get the amount of a holding.
getAmount : (HasToInterface t Base.I) => t -> Decimal
getAmount holding = (view $ toInterface @Base.I holding).amount

-- | Get the lockers of a lockable holding.
getLocker : (HasToInterface t Lockable.I) => t -> Parties
getLocker lockable = case (view $ toInterface @Lockable.I lockable).lock of None -> mempty; Some lock -> lock.locker

-- | Disclose a holding.
disclose : forall h. (HasToInterface h Disclosure.I) => (Text, Parties) -> Party -> Parties -> ContractId h -> Update (ContractId h)
disclose observersToAdd actor disclosers tCid = coerceContractId <$> exercise (toInterfaceContractId @Disclosure.I tCid) Disclosure.AddObservers with disclosers; observersToAdd

-- | Undisclose a holding.
undisclose : forall h. (HasToInterface h Disclosure.I) => (Text, Parties) -> Parties -> ContractId h -> Update (Optional (ContractId h))
undisclose observersToRemove disclosers tCid = fmap coerceContractId <$> exercise (toInterfaceContractId @Disclosure.I tCid) Disclosure.RemoveObservers with disclosers; observersToRemove
