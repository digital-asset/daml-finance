-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Holding.Util where

import Daml.Finance.Interface.Holding.Base qualified as Base (I)
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I)
import Daml.Finance.Interface.Types.Common.Types (InstrumentKey, Parties)
import Daml.Finance.Interface.Util.Common (isInstanceOf)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (AddObservers(..), I, RemoveObservers(..))

-- | Type of holdings that can be settled as part of a settlement batch.
data HoldingStandard
  = NonTransferable
    -- ^ Represents a holding that implements Base.I but not Transferable.I.
  | NonFungible
    -- ^ Represents a holding that implements Transferable.I but not Fungible.I.
  | Fungible
    -- ^ Represents a holding that implements Fungible.I.
  deriving (Eq, Ord)

-- | Returns the holding standard of a holding.
getHoldingStandard : ContractId Base.I -> Update HoldingStandard
getHoldingStandard cid = do
  implementsFungible <- isInstanceOf @Fungible.I cid
  if implementsFungible then
    pure Fungible
  else do
    implementsTransferable <- isInstanceOf @Transferable.I cid
    pure $ if implementsTransferable then NonFungible else NonTransferable

-- | Get the key of a holding.
getInstrument : (HasToInterface t Base.I) => t -> InstrumentKey
getInstrument holding = (view $ toInterface @Base.I holding).instrument

-- | Get the amount of a holding.
getAmount : (HasToInterface t Base.I) => t -> Decimal
getAmount holding = (view $ toInterface @Base.I holding).amount

-- | Disclose a holding.
disclose :
  ( HasInterfaceTypeRep i
  , HasToInterface i Disclosure.I
  , HasFromInterface i Disclosure.I
  )
  => (Text, Parties) -> Parties -> ContractId i -> Update (ContractId i)
disclose observersToAdd disclosers cid = fromInterfaceContractId <$>
  exercise (toInterfaceContractId @Disclosure.I cid) Disclosure.AddObservers with
    disclosers; observersToAdd

-- | Undisclose a holding.
undisclose :
  ( HasInterfaceTypeRep i
  , HasToInterface i Disclosure.I
  , HasFromInterface i Disclosure.I
  )
  => (Text, Parties) -> Parties -> ContractId i -> Update (Optional (ContractId i))
undisclose observersToRemove disclosers cid = fmap fromInterfaceContractId <$>
  exercise (toInterfaceContractId @Disclosure.I cid) Disclosure.RemoveObservers with
    disclosers; observersToRemove
