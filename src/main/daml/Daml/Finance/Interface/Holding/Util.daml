-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Holding.Util where

import Daml.Finance.Interface.Holding.Base qualified as Base (I)
import Daml.Finance.Interface.Types.Common.Types (InstrumentKey, Parties)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (AddObservers(..), I, RemoveObservers(..))

-- | Get the key of a holding.
getInstrument : (HasToInterface t Base.I) => t -> InstrumentKey
getInstrument holding = (view $ toInterface @Base.I holding).instrument

-- | Get the amount of a holding.
getAmount : (HasToInterface t Base.I) => t -> Decimal
getAmount holding = (view $ toInterface @Base.I holding).amount

-- | Disclose a holding.
disclose : (HasInterfaceTypeRep i, HasToInterface i Disclosure.I) =>
  (Text, Parties) -> Party -> Parties -> ContractId i -> Update (ContractId i)
disclose observersToAdd actor disclosers tCid = coerceInterfaceContractId <$>
  exercise (toInterfaceContractId @Disclosure.I tCid) Disclosure.AddObservers with
    disclosers; observersToAdd

-- | Undisclose a holding.
undisclose : (HasInterfaceTypeRep i, HasToInterface i Disclosure.I) =>
  (Text, Parties) -> Parties -> ContractId i -> Update (Optional (ContractId i))
undisclose observersToRemove disclosers tCid = fmap coerceInterfaceContractId <$>
  exercise (toInterfaceContractId @Disclosure.I tCid) Disclosure.RemoveObservers with
    disclosers; observersToRemove
