-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Holding.Util
  ( disclose
  , getAmount
  , getInstrument
  , undisclose
  ) where

import Daml.Finance.Interface.Holding.Base qualified as Base (I)
import Daml.Finance.Interface.Types.Common (InstrumentKey, Parties)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (AddObservers(..), I, RemoveObservers(..))

-- | Get the key of a holding.
getInstrument : (HasToInterface t Base.I) => t -> InstrumentKey
getInstrument holding = (view $ toInterface @Base.I holding).instrument

-- | Get the amount of a holding.
getAmount : (HasToInterface t Base.I) => t -> Decimal
getAmount holding = (view $ toInterface @Base.I holding).amount

-- | Disclose a holding.
disclose : (HasToInterface h Disclosure.I) =>
  (Text, Parties) -> Party -> Parties -> ContractId h -> Update (ContractId h)
disclose observersToAdd actor disclosers tCid = coerceContractId <$>
  exercise (toInterfaceContractId @Disclosure.I tCid) Disclosure.AddObservers with
    disclosers; observersToAdd

-- | Undisclose a holding.
undisclose : (HasToInterface h Disclosure.I) =>
  (Text, Parties) -> Parties -> ContractId h -> Update (Optional (ContractId h))
undisclose observersToRemove disclosers tCid = fmap coerceContractId <$>
  exercise (toInterfaceContractId @Disclosure.I tCid) Disclosure.RemoveObservers with
    disclosers; observersToRemove
