-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Holding.Fungible where

import Daml.Finance.Interface.Holding.Base (getLockers)
import Daml.Finance.Interface.Holding.Base qualified as Base (I, asDisclosure)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Implementation, asBase)
import Daml.Finance.Interface.Types.Common.Types (Parties)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I)

-- | Type synonym for `Fungible`.
type I = Fungible

-- | Type synonym for `View`.
type V = View

-- | View for `Fungible`.
data View = View
  with
    modifiers : Parties
      -- ^ Parties which have the authorization to modify a fungible asset.
  deriving (Eq, Show)

-- | Result of a call to `Split`.
data SplitResult = SplitResult
  with
    splitCids : [ContractId Fungible]
      -- ^ The contract ids for the split holdings.
    rest : Optional (ContractId Fungible)
      -- ^ Contract id for the holding on the remaining amount. It is `None` when the split is
      --   exact.
  deriving (Eq, Show)

-- | Interface for a fungible holding.
interface Fungible where
  viewtype V

  asTransferable : Transferable.I
    -- ^ Conversion to `Transferable` interface.
  split : Split -> Update SplitResult
    -- ^ Implementation of the `Split` choice.
  merge : Merge -> Update (ContractId Fungible)
    -- ^ Implementation of the `Merge` choice.

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party fetching the view.
    controller viewer
    do
      pure $ view this

  choice Split : SplitResult
    -- ^ Split a fungible contract into multiple contracts by amount.
    with
      amounts : [Decimal]
        -- ^ The quantities to split the fungible asset by, creating a new contract per amount.
    controller (view this).modifiers, getLockers this
    do
      split this arg

  choice Merge : ContractId Fungible
    -- ^ Merge multiple fungible contracts into a single fungible contract.
    with
      fungibleCids : [ContractId Fungible]
        -- ^ The fungible contracts to merge which will get consumed.
    controller (view this).modifiers, getLockers this
    do
      merge this arg

  choice ArchiveFungible : ()
    -- ^ Archives the fungible contract.
    controller signatory this
    do
      pure ()

-- | Type constraint for requiring templates to implement `Fungible` along with `Transferable`.
type Implementation t = (HasToInterface t I, Transferable.Implementation t)
instance HasToInterface I Transferable.I where _toInterface = asTransferable
instance HasToInterface I Base.I where _toInterface = Transferable.asBase . asTransferable
instance HasToInterface I Disclosure.I where
  _toInterface = Base.asDisclosure . Transferable.asBase . asTransferable
class (Implementation t) => HasImplementation t
instance HasImplementation I
