-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Holding.Fungible where

import DA.Foldable qualified as F (all)
import DA.Optional (optionalToList)
import Daml.Finance.Interface.Holding.Base qualified as Base (I, asDisclosure)
import Daml.Finance.Interface.Holding.Lockable qualified as Lockable (I, asHolding)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Implementation, asLockable)
import Daml.Finance.Interface.Holding.Util (getAmount, getLocker)
import Daml.Finance.Interface.Types.Common (Parties)
import Daml.Finance.Interface.Util.Common (verify)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I)

-- | Type synonym for `Fungible`.
type I = Fungible

-- | Type synonym for `View`.
type V = View

-- | View for `Fungible`.
data View = View
  with
    modifiers : Parties
      -- ^ Parties which have the authorization to modify a fungible asset.
  deriving (Eq, Ord, Show)

-- | Result of a call to `Split`.
data SplitResult = SplitResult
  with
    splitCids : [ContractId Fungible]
      -- ^ The contract ids for the split holdings.
    rest : Optional (ContractId Fungible)
      -- ^ Contract id for the holding on the remaining amount. It is `None` when the split is exact.
  deriving (Eq, Show)

-- | Interface for a fungible holding. It requires `Transferable`.
interface Fungible where
  viewtype V

  asTransferable : Transferable.I
    -- ^ Conversion to `Transferable` interface.
  split : Split -> Update SplitResult
    -- ^ Implementation of the `Split` choice.
  merge : Merge -> Update (ContractId Fungible)
    -- ^ Implementation of the `Merge` choice.

  nonconsuming choice GetView : View
    -- ^ Returns the account's view.
    with
      actor : Parties
        -- ^ The party fetching the view.
    controller actor
    do
      pure $ _view this

  choice Split : SplitResult
    -- ^ Split a fungible contract into multiple contracts by amount.
    with
      amounts : [Decimal]
        -- ^ The quantities to split the fungible asset by, creating a new contract per amount.
        -- The sum of the quantities is required to be smaller or equal to the amount on the fungible contract.
    controller (_view this).modifiers, getLocker this
    do
      verifySplit amounts $ getAmount this
      splitResult <- split this arg
      newFungibles <- mapA fetch $ splitResult.splitCids ++ optionalToList splitResult.rest
      verifyAmountPreserving newFungibles [this]
      pure splitResult

  choice Merge : ContractId Fungible
    -- ^ Merge multiple fungible contracts into a single fungible contract.
    with
      fungibleCids : [ContractId Fungible]
        -- ^ The fungible contracts to merge which will get consumed.
    controller (_view this).modifiers, getLocker this
    do
      oldFungibles <- mapA fetch $ fmap (toInterfaceContractId @I) fungibleCids
      newFungibleCid <- merge this arg
      newFungible <- fetch newFungibleCid
      verifyAmountPreserving [newFungible] (this :: oldFungibles)
      pure newFungibleCid

  choice ArchiveFungible : ()
    -- ^ Archives the fungible contract.
    controller signatory this
    do
      pure ()

-- | Type constraint for requiring templates to implement `Fungible` along with `Transferable`.
type Implementation t = (HasToInterface t I, Transferable.Implementation t)
instance HasToInterface I Transferable.I where _toInterface = asTransferable
instance HasToInterface I Lockable.I where _toInterface = Transferable.asLockable . asTransferable
instance HasToInterface I Base.I where _toInterface = Lockable.asHolding . Transferable.asLockable . asTransferable
instance HasToInterface I Disclosure.I where _toInterface = Base.asDisclosure . Lockable.asHolding . Transferable.asLockable . asTransferable
class (Implementation t) => HasImplementation t
instance HasImplementation I

-- | Verifies that split amounts are strictly positive and don't exceed the current amount.
verifySplit : forall m. CanAssert m => [Decimal] -> Decimal -> m ()
verifySplit amounts currentAmount =
  let
    splitAmountSum = sum amounts
  in
  verify (splitAmountSum <= currentAmount && F.all (> 0.0) amounts)
    $ "Fungible::verifySplit - Amounts must be strictly positive and not exceed current amount. "
    <> "amounts=" <> show amounts
    <> ", splitAmountSum=" <> show splitAmountSum
    <> ", currentAmount=" <> show currentAmount

-- | Verifies that the original amount is preserved after a merge or a split.
verifyAmountPreserving : forall m. CanAssert m => [Fungible] -> [Fungible] -> m ()
verifyAmountPreserving newFungibles previousFungibles =
  let
    sumAmounts fungibles = sum $ getAmount <$> fungibles
    new = sumAmounts newFungibles
    previous = sumAmounts previousFungibles
  in
    verify (new == previous)
      $ "Fungible::verifyAmountPreserving - Sum of fungible amounts do not match the expected amount. "
      <> "newAmounTotal=" <> show new
      <> ", previousAmountTotal=" <> show previous
