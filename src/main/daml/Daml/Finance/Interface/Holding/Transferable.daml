-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Holding.Transferable where

import Daml.Finance.Interface.Common.Disclosure qualified as Disclosure (I)
import Daml.Finance.Interface.Common.Types (AccountKey)
import Daml.Finance.Interface.Holding.Base qualified as Base (I, asDisclosure)
import Daml.Finance.Interface.Holding.Lockable qualified as Lockable (I, Implementation, asHolding)
import Daml.Finance.Interface.Holding.Util (getLocker, getOwner)

-- | Type synonym for `Transferable`.
type I = Transferable

-- | Type synonym for `View`.
type V = View

-- | View for `Transferable`.
data View = View () deriving (Eq, Ord, Show)

-- | An interface respresenting a contract where ownership can be transfered to other parties
interface Transferable where
  viewtype V

  asLockable : Lockable.I
    -- ^ Conversion to `Lockable` interface.
  transfer : Transfer -> Update (ContractId Transferable)
    -- ^ Implementation of the `Transfer` choice.

  nonconsuming choice GetView : View
    -- ^ Retrieves the instrument view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ _view this

  choice Transfer : ContractId Transferable
    -- ^ Transfer a contract to a new owner
    with
      newOwnerAccount : AccountKey
        -- ^ Account contract id of the parties to transfer the contract to
    controller getOwner this, getLocker this, newOwnerAccount.owner
    do
      transfer this arg

-- | Type constraint used to require templates implementing `Transferable` to
-- also implement `Lockable`.
type Implementation t = (HasToInterface t I, Lockable.Implementation t)
instance HasToInterface I Lockable.I where _toInterface = asLockable
instance HasToInterface I Base.I where _toInterface = Lockable.asHolding . asLockable
instance HasToInterface I Disclosure.I where _toInterface = Base.asDisclosure . Lockable.asHolding . asLockable
class (Implementation t) => HasImplementation t
instance HasImplementation I
