-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE AllowAmbiguousTypes #-}

module Daml.Finance.Interface.Holding.Factory where

import Daml.Finance.Interface.Holding.Holding qualified as Holding (I)
import Daml.Finance.Interface.Types.Common.Types (AccountKey(..), HoldingFactoryKey(..), Id, InstrumentKey(..), Parties, PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (AddObservers(..), I, RemoveObservers(..), flattenObservers)
import Daml.Finance.Interface.Util.InterfaceKey (createReferenceHelper, disclosureUpdateReferenceHelper, exerciseInterfaceByKeyHelper)
import Daml.Finance.Interface.Util.InterfaceKey qualified as InterfaceKey (HasInterfaceKey(..))

-- | Type synonym for `Factory`.
type I = Factory

-- | Type synonym for `Reference`. This type is currently used as a work-around given the lack of
-- interface keys.
type R = Reference

-- | Type synonym for `View`.
type V = View

-- View of `Factory`.
data View = View
  with
    provider : Party
      -- ^ The provider of the `Factory`.
    id : Id
      -- ^ Identifier for the holding factory.
  deriving (Eq, Show)

-- | Convert the account's 'View' to its key.
toKey : View -> HoldingFactoryKey
toKey v = HoldingFactoryKey with provider = v.provider; id = v.id

-- | Retrieves the key of a `Factory`.
holdingFactoryKey : (HasToInterface i Factory) => i -> HoldingFactoryKey
holdingFactoryKey = toKey . view . toInterface @Factory

-- | Holding factory contract used to create (credit) holdings.
interface Factory requires Disclosure.I where
  viewtype V

  getKey : HoldingFactoryKey
    -- ^ Get the unique key of the `HoldingFactory`.
  create' : Create -> Update (ContractId Holding.I)
    -- ^ Implementation of `Create` choice.

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party fetching the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice Create : ContractId Holding.I
    -- ^ Create a holding on the instrument in the corresponding account.
    with
      instrument : InstrumentKey
        -- ^ The instrument of which units are held.
      account : AccountKey
        -- ^ The account at which the holding is held. Defines the holding's owner and custodian.
      amount : Decimal
        -- ^ Number of units.
      observers : PartiesMap
        -- ^ Observers of the holding to be credited.
    controller account.custodian, account.owner
      do
        create' this arg

  choice Remove : ()
    -- ^ Archive the factory.
    controller signatory this
    do
      (refCid, _) <- fetchByKey @Reference $ getKey this
      archive refCid

-- | HIDE
-- This template is used to key a Holding Factory contract. It allows for looking up this contract
-- by key then acquiring the Factory contract by fetching its contract id on this contract. As
-- updates are made to a Factory, this Reference contract is required to be kept in sync.
template Reference
  with
    factoryView : View
      -- ^ The default view for factories.
    cid : ContractId Factory
      -- ^ The contract id of the factory.
    observers : PartiesMap
  where
    signatory factoryView.provider
    observer Disclosure.flattenObservers observers

    key toKey factoryView : HoldingFactoryKey
    maintainer key.provider

    nonconsuming choice GetCid : ContractId Factory
      -- ^ Get the `Factory`'s contract id.
      with
        viewer : Party
          -- ^ The party retrieving the reference.
      controller viewer
      do
        pure cid

    choice SetCid : ContractId Reference
      -- ^ Set the factory cid. This choice should be called only from `Factory` implementations.
      with
        newCid : ContractId Factory
          -- ^ The factory cid.
      controller signatory this
      do
        create this with cid = newCid

    choice SetObservers : ContractId Reference
      -- ^ Set observers. This choice should be called only from `Factory` implementations.
      with
        newObservers : PartiesMap
          -- ^ The new observers.
      controller signatory this
      do
        create this with observers = newObservers

-- | Create factory including reference.
createFactory : (HasCreate f, HasToInterface f Factory) => f -> Update (ContractId Factory)
createFactory factory = do
  cid <- toInterfaceContractId @Factory <$> create factory
  createReference (view $ toInterface @Factory factory).provider cid
  pure cid

-- | Disclose factory.
disclose : (Text, Parties) -> Party -> Parties -> HoldingFactoryKey -> Update (ContractId Factory)
disclose observersToAdd actor disclosers factory =
  fromInterfaceContractId <$>
    exerciseInterfaceByKey @Disclosure.I
      factory
      actor
      Disclosure.AddObservers with disclosers; observersToAdd

-- | Undisclose factory.
undisclose : (Text, Parties) -> Party -> Parties -> HoldingFactoryKey ->
  Update (Optional (ContractId Factory))
undisclose observersToRemove actor disclosers factory =
  fmap fromInterfaceContractId <$>
    exerciseInterfaceByKey @Disclosure.I
      factory
      actor
      Disclosure.RemoveObservers with disclosers; observersToRemove

-- | Exercise interface by key.
-- This method can be used to exercise a choice on a `Factory` given its `HoldingFactoryKey`.
-- Requires as input the `HoldingFactoryKey`, the actor exercising the choice, and the choice
-- arguments. For example:
-- ```
-- exerciseInterfaceByKey @HoldingFactory.I holdingFactoryKey actor
--   HoldingFactory.Create with instrument; account; amount; observers
-- ```
exerciseInterfaceByKey : forall i c r.
  ( HasInterfaceTypeRep i
  , HasExercise i c r
  )
  => HoldingFactoryKey -- ^ The factory key.
  -> Party             -- ^ The actor exercising.
  -> c                 -- ^ The choice arguments.
  -> Update r
exerciseInterfaceByKey k actor arg =
  exerciseInterfaceByKeyHelper @Reference @GetCid @SetCid @SetObservers @GetView @i k actor arg

-- | HIDE
-- Create instance of HasInterfaceKey.
instance InterfaceKey.HasInterfaceKey Factory View HoldingFactoryKey Reference GetCid SetCid
  SetObservers GetView where
    createReference = Reference
    getCid = GetCid
    setCid = SetCid
    setObservers = SetObservers
    getView = GetView

-- | HIDE
-- Create Reference for the factory.
createReference : Party -> ContractId Factory -> Update (ContractId Reference)
createReference = createReferenceHelper @Reference @GetCid @SetCid @SetObservers @GetView

-- | HIDE
-- Update the factory reference once observers are added to the factory.
disclosureUpdateReference : HoldingFactoryKey -> PartiesMap -> ContractId Factory ->
  Update (ContractId Disclosure.I)
disclosureUpdateReference =
  disclosureUpdateReferenceHelper @Reference @GetCid @SetCid @SetObservers @GetView
