-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Instrument.Base.Instrument where

import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey(..), Quantity(..))
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I)
import Daml.Finance.Interface.Util.SyntheticKey (HasSyntheticKey(..))
import Daml.Finance.Interface.Util.SyntheticKey qualified as SyntheticKey (I)

-- | Type synonym for `Instrument`.
type I = Instrument

-- | Instrument quantity.
type Q = Quantity InstrumentKey Decimal

-- | Type synonym for `View`.
type V = View

-- | View for `Instrument`.
data View = View
  with
    issuer : Party
      -- ^ The instrument's issuer.
    depository : Party
      -- ^ The instrument's depository.
    id : Id
      -- ^ A versioned instrument identifier.
    version : Text
      -- ^ A textual instrument version.
    description : Text
      -- ^ A human readable description of the instrument.
    validAsOf : Time
      -- ^ Timestamp as of which the instrument is valid. This usually coincides with the timestamp
      --   of the event that creates the instrument. It usually does not coincide with ledger time.
  deriving (Eq, Show)

-- | Base interface for all instruments. This interface does not define any lifecycling logic.
interface Instrument requires Disclosure.I, SyntheticKey.I where
  viewtype V

  getKey : InstrumentKey
    -- ^ Get the key for the `Instrument`.

  nonconsuming choice GetView : V
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

-- | Convert the instrument's View to its key.
toKey : V -> InstrumentKey
toKey v = InstrumentKey with
  depository = v.depository; issuer = v.issuer; id = v.id; version = v.version

-- | Wraps an amount and an instrument key into an instrument quantity.
qty : Decimal -> InstrumentKey -> Q
qty amount instrument = Quantity with unit = instrument; amount

-- | Scale `Quantity` by the provided factor.
scale : Decimal -> Q -> Q
scale factor quantity = quantity with amount = quantity.amount * factor

-- | HIDE
instance HasSyntheticKey I InstrumentKey where
  getKey = Daml.Finance.Interface.Instrument.Base.Instrument.getKey
  getKeyFromCid viewer cid = toKey <$> exercise cid GetView with viewer
