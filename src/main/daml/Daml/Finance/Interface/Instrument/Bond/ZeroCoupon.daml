-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Instrument.Bond.ZeroCoupon where

import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (I, K)
import Daml.Finance.Interface.Types.Common (InstrumentKey(..), Observers)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, Implementation)

-- | Type synonym for `Factory`.
type F = Factory

-- | Type synonym for `View`.
type V = View

-- | View of `Factory`.
data View = View
  with
    provider : Party
      -- ^ The provider of the `Factory`.
  deriving (Eq, Ord, Show)

-- | Interface that allows implementing templates to create instruments.
interface Factory where
  viewtype V

  asDisclosure : Disclosure.I
    -- ^ Conversion to `Disclosure` interface.
  create' : Create -> Update (ContractId Instrument.I)
    -- ^ Implementation of `Create` choice.
  remove : Remove -> Update ()
    -- ^ Implementation of `Remove` choice.

  nonconsuming choice Create : ContractId Instrument.I
    -- ^ Create a new instrument.
    with
      instrument : InstrumentKey
        -- ^ The instrument's key.
      description : Text
        -- ^ The description of the bond.
      issueDate : Date
        -- ^ The date when the bond was issued.
      maturityDate : Date
        -- ^ The last coupon date (and the redemption date) of the bond.
      currency : Instrument.K
        -- ^ The currency of the bond. For example, if the bond pays in USD this should be a USD cash instrument.
      lastEventTimestamp : Time
        -- ^ (Market) time of the last recorded lifecycle event. If no event has occurred yet, the time of creation should be used.
      observers : Observers
        -- ^ The instrument's observers.
    controller instrument.depository, instrument.issuer
    do
      create' this arg

  nonconsuming choice Remove : ()
    -- ^ Archive an instrument.
    with
      instrument : InstrumentKey
        -- ^ The instrument's key.
    controller instrument.depository, instrument.issuer
      do
        remove this arg

-- | Type constraint for requiring templates to implement `Factory` along with `Disclosure`.
type Implementation t = (HasToInterface t Factory, Disclosure.Implementation t)
instance HasToInterface Factory Disclosure.I where _toInterface = asDisclosure
class (Implementation t) => HasImplementation t
instance HasImplementation Factory
