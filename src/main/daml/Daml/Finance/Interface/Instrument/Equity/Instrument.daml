-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Instrument.Equity.Instrument where

import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I)
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I)
import Daml.Finance.Interface.Types.Common.Types (Id, InstrumentKey, InstrumentQuantity)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I)

-- | Type synonym for `Instrument`.
type I = Instrument

-- | Type synonym for `View`.
type V = View

-- | View for `Instrument`.
data View = View
  with
    instrument : InstrumentKey
      -- ^ The instrument's key.
  deriving (Eq, Show)

-- | An interface for a generic equity instrument.
interface Instrument requires BaseInstrument.I, Disclosure.I where
  viewtype V

  declareDistribution : DeclareDistribution -> Update (ContractId Event.I)
    -- ^ Implementation for the `DeclareDistribution` choice.
  declareStockSplit : DeclareStockSplit -> Update (ContractId Event.I)
    -- ^ Implementation for the `DeclareStockSplit` choice.
  declareReplacement : DeclareReplacement -> Update (ContractId Event.I)
    -- ^ Implementation for the `DeclareReplacement` choice.

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice DeclareDistribution : ContractId Event.I
    -- ^ Declare a distribution (e.g. a dividend or a rights issue) to shareholders.
    with
      id : Id
        -- ^ Event identifier of the dividend distribution.
      description : Text
        -- ^ Description of the dividend event.
      effectiveTime : Time
        -- ^ Time at which the dividend is distributed.
      newInstrument : InstrumentKey
        -- ^ Instrument held after the dividend distribution (i.e. "ex-dividend" stock).
      perUnitDistribution : [InstrumentQuantity]
        -- ^ Distributed quantities per unit held.
    controller (view $ toInterface @BaseInstrument.I this).issuer
    do
      declareDistribution this arg

  nonconsuming choice DeclareStockSplit : ContractId Event.I
    -- ^ Declare a stock split.
    with
      id : Id
        -- ^ Event identifier of the stock split.
      description : Text
        -- ^ Description of the stock split event.
      effectiveTime : Time
        -- ^ Time at which the stock split is effective.
      newInstrument : InstrumentKey
        -- ^ Instrument to be held after the stock split is executed.
      adjustmentFactor : Decimal
        -- ^ Adjustment factor for the stock split.
    controller (view $ toInterface @BaseInstrument.I this).issuer
    do
      declareStockSplit this arg

  nonconsuming choice DeclareReplacement : ContractId Event.I
    -- ^ Declare a replacement event, where units of the instrument are replaced by a basket of
    -- other instruments.
    with
      id : Id
        -- ^ Distribution Id.
      description : Text
        -- ^ Description of the replacement event.
      effectiveTime : Time
        -- ^ Time the replacement is to be executed.
      perUnitReplacement : [InstrumentQuantity]
        -- ^ Payout offered to shareholders per held share.
    controller (view $ toInterface @BaseInstrument.I this).issuer
    do
      declareReplacement this arg
