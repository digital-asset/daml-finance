-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Instrument.Equity.Instrument where

import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I, Implementation, K, Q, asDisclosure)
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I)
import Daml.Finance.Interface.Types.Common (Id, InstrumentKey)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I)

-- | Type synonym for `Instrument`.
type I = Instrument

-- | Type synonym for `View`.
type V = View

-- | View for `Instrument`.
data View = View
  with
    instrument : InstrumentKey
      -- ^ The instrument's key.
  deriving (Eq, Show)

-- | An interface for a generic equity instrument.
interface Instrument where
  viewtype V

  asBaseInstrument : BaseInstrument.I
    -- ^ Conversion to base `Instrument` interface.
  declareDividend : DeclareDividend -> Update (ContractId Event.I)
    -- ^ Implementation fo the `DeclareDividend` choice.
  declareStockSplit : DeclareStockSplit -> Update (ContractId Event.I)
    -- ^ Implementation fo the `DeclareStockSplit` choice.
  declareReplacement : DeclareReplacement -> Update (ContractId Event.I)
    -- ^ Implementation fo the `DeclareReplacement` choice.

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice DeclareDividend : ContractId Event.I
    -- ^ Declare a dividend distribution to shareholders.
    with
      id : Id
        -- ^ Event identifier of the dividend distribution.
      description : Text
        -- ^ Description of the dividend event.
      effectiveDate : Date
        -- ^ Date at which the dividend is distributed.
      newInstrument : BaseInstrument.K
        -- ^ Instrument held after the dividend distribution (i.e. "ex-dividend" stock).
      perUnitDistribution : [BaseInstrument.Q]
        -- ^ Distributed quantities per unit held.
    controller (view $ asBaseInstrument this).issuer
    do
      declareDividend this arg

  nonconsuming choice DeclareStockSplit : ContractId Event.I
    -- ^ Declare a stock split.
    with
      id : Id
        -- ^ Event identifier of the stock split.
      description : Text
        -- ^ Description of the stock split event.
      effectiveDate : Date
        -- ^ Date at which the stock split is effective.
      newInstrument : BaseInstrument.K
        -- ^ Instrument to be held after the stock split is executed.
      adjustmentFactor : Decimal
        -- ^ Adjustment factor for the stock split.
        --   A factor between 0 and 1 represents a classic stock split (e.g. 2-for-1 or two new for
        --   one old).
        --   A factor above 1 represents a reverse stock split (e.g. 1-for-2 or one new for two old).
    controller (view $ asBaseInstrument this).issuer
    do
      assertMsg "Factor must be greater than zero" $ adjustmentFactor > 0.0
      declareStockSplit this arg

  nonconsuming choice DeclareReplacement : ContractId Event.I
    -- ^ Declare a replacement event, where units of the instrument are replaced by a basket of
    -- other instruments.
    with
      id : Id
        -- ^ Distribution Id.
      description : Text
        -- ^ Description of the replacement event.
      effectiveDate : Date
        -- ^ Date the replacement is to be executed.
      perUnitReplacement : [BaseInstrument.Q]
        -- ^ Payout offered to shareholders per held share.
    controller (view $ asBaseInstrument this).issuer
    do
      declareReplacement this arg

-- | Type constraint requiring templates to implement `Instrument` along with `BaseInstrument` and
-- `Disclosure`.
type Implementation t = (HasToInterface t I, BaseInstrument.Implementation t)
instance HasToInterface I BaseInstrument.I where _toInterface = asBaseInstrument
instance HasToInterface I Disclosure.I where
  _toInterface = BaseInstrument.asDisclosure . asBaseInstrument
class (Implementation t) => HasImplementation t
instance HasImplementation I
