-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Instrument.StructuredProduct.BarrierReverseConvertible.Factory where

import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (I)
import Daml.Finance.Interface.Instrument.StructuredProduct.BarrierReverseConvertible.Types (BarrierReverseConvertible)
import Daml.Finance.Interface.Types.Common.Types (InstrumentKey, PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I)

-- | Type synonym for `Factory`.
type F = Factory

-- | Type synonym for `View`.
type V = View

-- | View of `Factory`.
data View = View
  with
    provider : Party
      -- ^ The provider of the `Factory`.
  deriving (Eq, Show)

-- | Factory interface to instantiate BRCs.
interface Factory requires Disclosure.I where
  viewtype V

  create' : Create -> Update (ContractId Instrument.I)
    -- ^ Implementation of `Create` choice.
  remove : Remove -> Update ()
    -- ^ Implementation of `Remove` choice.

  nonconsuming choice Create : ContractId Instrument.I
    -- ^ Create a new instrument.
    with
      barrierReverseConvertible : BarrierReverseConvertible
        -- ^ Attributes to create a BRC.
      observers : PartiesMap
        -- ^ The instrument's observers.
    controller barrierReverseConvertible.instrument.depository, barrierReverseConvertible.instrument.issuer
    do
      create' this arg

  nonconsuming choice Remove : ()
    -- ^ Archive an instrument.
    with
      instrument : InstrumentKey
        -- ^ The instrument's key.
    controller instrument.depository, instrument.issuer
      do
        remove this arg
