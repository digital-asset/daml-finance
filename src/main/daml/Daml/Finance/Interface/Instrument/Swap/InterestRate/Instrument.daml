-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Instrument.Swap.InterestRate.Instrument where

import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I, Implementation, asDisclosure)
import Daml.Finance.Interface.Instrument.Swap.InterestRate.Types (InterestRate)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, Implementation)

-- | Type synonym for `Instrument`.
type I = Instrument

-- | Type synonym for `View`.
type V = View

-- | View of `Instrument`.
data View = View
  with
    interestRate : InterestRate
      -- ^ Attributes of an interest rate swap.
  deriving (Eq, Show)

-- | Instrument interface representing an interest rate swap.
interface Instrument where
  viewtype V

  asBaseInstrument : BaseInstrument.I
    -- ^ Conversion to `Base Instrument` interface.

  nonconsuming choice GetView : V
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

-- | Type constraint requiring templates to implement `Instrument` along with `BaseInstrument` and
-- `Disclosure`.
type Implementation t =
  (HasToInterface t Instrument, BaseInstrument.Implementation t, Disclosure.Implementation t)
instance HasToInterface Instrument BaseInstrument.I where _toInterface = asBaseInstrument
instance HasToInterface Instrument Disclosure.I where
  _toInterface = BaseInstrument.asDisclosure . asBaseInstrument
class (Implementation t) => HasImplementation t
instance HasImplementation Instrument
