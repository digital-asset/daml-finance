-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Instrument.Generic.HasClaims
  ( HasClaims(..)
  , I
  , Implementation
  , V
  , View(..)
  , getAcquisitionTime
  , getClaim
  , getClaims
  , view
  ) where

import Daml.Finance.Interface.Instrument.Generic.Types

type I = HasClaims
type V = View

-- | View for `HasClaims`.
data View = View
  with
    acquisitionTime : Time
      -- ^ The claim's acquisition time.
  deriving (Eq, Ord, Show)

-- | Interface implemented by templates that admit a representation as a set of contingent claims.
interface HasClaims where
  viewtype View

  getClaims : Update [TaggedClaim]
    -- ^ Gets the set of claims representing the instrument.

  nonconsuming choice GetView : View
    -- ^ Retrieves the instrument view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ _view this

-- | Type constraint used to require templates implementing `HasClaims` to not
-- require any other interface to be implemented.
type Implementation t = HasToInterface t I
class (Implementation t) => HasImplementation t
instance HasImplementation I

-- | Retrieves the single claim representing the template. An error is thrown if there are zero or more than one claims.
getClaim : HasClaims -> Update C
getClaim instrument = do
  x <- getClaims instrument
  case x of
    [tc] -> pure tc.claim
    other -> abort "Expecting exactly one claim"

-- | Retrieves the claim's acquisition time.
getAcquisitionTime : HasClaims -> Time
getAcquisitionTime = (.acquisitionTime) . _view
