-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Instrument.Generic.Util.Claims
  ( isZero
  , isZero'
  , toTime
  , toTime'
  ) where

import ContingentClaims.Claim (Claim, mapParams)
import ContingentClaims.Util qualified as CC (isZero)
import Daml.Finance.Interface.Common.Classes (HasUTCTimeConversion(..))
import Daml.Finance.Interface.Instrument.Generic.HasClaims qualified as HasClaims (I, getClaims)
import Daml.Finance.Interface.Instrument.Generic.Types (TaggedClaim)

-- | Checks if all input claims are zero.
isZero : HasClaims.I -> Update Bool
isZero c = isZero' <$> HasClaims.getClaims c

-- | Checks if all input claims are zero.
isZero' : [TaggedClaim] -> Bool
isZero' = all $ CC.isZero . (.claim)

-- | Maps the time parameter in a `Claim` to `Time`. As `Time` is generally understood to express UTC time, we recommend mapping to UTC time.
toTime : HasUTCTimeConversion t => Claim t x a o -> Claim Time x a o
toTime =
  let contraMap _ = error "Inverse mapping from `Time` is not provided" -- currently the contramap from `Time` back to `a` is not used, because `Observation`\s do not depend on time explicitly
  in mapParams contraMap toUTCTime identity identity identity

-- | Maps the time parameter in a `Claim` to `Time`. As `Time` is generally understood to express UTC time, we recommend mapping to UTC time.
toTime' : (t -> Time) -> Claim t x a o -> Claim Time x a o
toTime' forwardMap c =
  let contraMap _ = error "Inverse mapping from `Time` is not provided" -- currently the contramap from `Time` back to `a` is not used, because `Observation`\s do not depend on time explicitly
  in mapParams contraMap forwardMap identity identity identity c
