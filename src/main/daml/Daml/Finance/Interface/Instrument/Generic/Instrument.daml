-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Instrument.Generic.Instrument where

import Daml.Finance.Interface.Claims.Claim qualified as Claim (I, Implementation)
import Daml.Finance.Interface.Claims.Types (C)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (I, Implementation, asDisclosure)
import Daml.Finance.Interface.Types.Common (InstrumentKey)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I)

-- | Type synonym for `Instrument`.
type I = Instrument

-- | Type synonym for `View`.
type V = View

-- View of `Instrument`.
data View = View
  with
    instrument : InstrumentKey
      -- ^ The instrument's key.
    claims : C
      -- ^ The claim tree.
  deriving (Eq, Show)

-- | Interface for generic instruments utilizing Contingent Claims.
interface Instrument where
  viewtype V

  asBaseInstrument : BaseInstrument.I
    -- ^ Conversion to base `Instrument` interface.
  asClaim : Claim.I
    -- ^ Conversion to claim interface.

  nonconsuming choice GetView : V
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

-- | Type constraint requiring templates to implement `Instrument` along with `BaseInstrument` and
-- `Disclosure`.
type Implementation t =
  (HasToInterface t I, BaseInstrument.Implementation t, Claim.Implementation t)
instance HasToInterface I BaseInstrument.I where _toInterface = asBaseInstrument
instance HasToInterface I Claim.I where _toInterface = asClaim
instance HasToInterface I Disclosure.I where
  _toInterface = BaseInstrument.asDisclosure . asBaseInstrument
class (Implementation t) => HasImplementation t
instance HasImplementation I
