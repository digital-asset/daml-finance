-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Instrument.Generic.Instrument where

import Daml.Finance.Interface.Claims.Types (C)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Base (I, Implementation, V, asDisclosure)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I)

-- | Type synonym for `Instrument`.
type I = Instrument

-- | Type synonym for `View`.
type V = View

-- View of `Instrument`.
data View = View
  with
    baseView : Base.V
      -- ^ The provider of the `Factory`.
    claims : C
        -- ^ The claim tree.
    acquisitionTime : Time
        -- ^ The claim's acquisition time. This usually corresponds to the start date of the contract.
  deriving (Eq, Show)

-- | Interface for Standard instruments which do not define any lifecycling logic.
interface Instrument where
  viewtype V

  asBaseInstrument : Base.I

  nonconsuming choice GetView : V
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

-- | Type constraint for requiring templates to implement `Instrument` along with `Disclosure`.
type Implementation t = (HasToInterface t I, Base.Implementation t)
instance HasToInterface I Base.I where _toInterface = asBaseInstrument
instance HasToInterface I Disclosure.I where _toInterface = Base.asDisclosure . asBaseInstrument
class (Implementation t) => HasImplementation t
instance HasImplementation I
