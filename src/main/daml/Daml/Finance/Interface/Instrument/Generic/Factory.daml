-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Instrument.Generic.Factory where

import Daml.Finance.Interface.Claims.Types (C)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (I)
import Daml.Finance.Interface.Types.Common.Types (InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I)

-- | Type synonym for `Factory`.
type F = Factory

-- | Type synonym for `View`.
type V = View

-- View of `Factory`.
data View = View
  with
    provider : Party
      -- ^ The provider of the `Factory`.
  deriving (Eq, Show)

-- | Factory interface to instantiate generic instruments using Contingent Claims.
interface Factory requires Disclosure.I where
  viewtype V

  create' : Create -> Update (ContractId Instrument.I)
    -- ^ Implementation of `Create` choice.
  remove : Remove -> Update ()
    -- ^ Implementation of `Remove` choice.

  nonconsuming choice Create : ContractId Instrument.I
    -- ^ Create a new generic instrument.
    with
      instrument : InstrumentKey
        -- ^ The instrument's key.
      description : Text
        -- ^ A description of the instrument.
      claims : C
        -- ^ The claim tree.
      acquisitionTime : Time
        -- ^ The claim's acquisition time. This usually corresponds to the start date of the
        --   contract.
      lastEventTimestamp : Time
        -- ^ (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
        --   time of creation should be used.
      observers : PartiesMap
        -- ^ The instrument's observers.
    controller instrument.depository, instrument.issuer
    do
      create' this arg

  nonconsuming choice Remove : ()
    -- ^ Archive a generic instrument.
    with
      instrument : InstrumentKey
        -- ^ The instrument's key.
    controller instrument.depository, instrument.issuer
      do
        remove this arg
