-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Lifecycle.Event where

import Daml.Finance.Interface.Types.Common.Types (Id, Parties)

-- | Type synonym for `Event`.
type I = Event

-- | Type synonym for `View`.
type V = View

-- | View for `Event`.
data View = View
  with
    providers : Parties
      -- ^ Providers of the event.
    id : Id
      -- ^ Identifier for the event.
    description : Text
      -- ^ A human readable description of the event.
    eventTime : Time
      -- ^ The time of the event. This allows ordering of events.
  deriving (Eq, Show)

-- | A lifecycle event. These events are ordered based on the corresponding event time.
interface Event where
  viewtype V

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

-- | Type constraint for requiring templates to implement `Event`.
type Implementation t = HasToInterface t I
class (Implementation t) => HasImplementation t
instance HasImplementation I

instance Ord Event where
  x <= y = getEventTime x <= getEventTime y

-- | Given an event, retrieves the event time.
getEventTime : Event -> Time
getEventTime e = (view e).eventTime
