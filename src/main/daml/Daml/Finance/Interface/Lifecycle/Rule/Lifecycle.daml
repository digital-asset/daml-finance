-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Lifecycle.Rule.Lifecycle where

import Daml.Finance.Interface.Data.NumericObservable qualified as NumericObservable (I)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument(K)
import Daml.Finance.Interface.Lifecycle.Effect qualified as Effect (I)
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I)
import Daml.Finance.Interface.Types.Common.Types (Id(..))

-- | Type synonym for `Lifecycle`.
type I = Lifecycle

-- | Type synonym for `View`.
type V = View

-- | View for `Lifecycle`.
data View = View
  with
    id : Id
      -- ^ Identifier for the rule contract.
    description : Text
      -- ^ Textual description.
    lifecycler : Party
      -- ^ Party performing the lifecycling.
  deriving (Eq, Show)

-- | Interface implemented by instruments that can be lifecycled (either by the instrument itself
--   or by a separate rule contract).
interface Lifecycle where
  viewtype V

  evolve : Evolve -> Update (Optional Instrument.K, [ContractId Effect.I])
    -- ^ Implementation of the `Evolve` choice.

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice Evolve : (Optional Instrument.K, [ContractId Effect.I])
    -- ^ Process an event. It returns a tuple of the lifecycled instrument (or the original
    --   instrument when the former does not exist) and the effects.
    with
      eventCid : ContractId Event.I
        -- ^ The event.
      instrument : Instrument.K
        -- ^ The target instrument.
      observableCids : [ContractId NumericObservable.I]
        -- ^ Set of numerical time-dependent observables.
    controller (view this).lifecycler
    do
      evolve this arg

-- | Type constraint for requiring templates to implement `Lifecycle`.
type Implementation t = HasToInterface t I
class (Implementation t) => HasImplementation t
instance HasImplementation I
