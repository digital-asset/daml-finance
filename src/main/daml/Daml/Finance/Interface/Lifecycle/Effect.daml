-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Interface.Lifecycle.Effect where

import Daml.Finance.Interface.Holding.Base qualified as Base (I)
import Daml.Finance.Interface.Types.Common.Types (Id, InstrumentKey, InstrumentQuantity, Parties)

-- | Type synonym for `Effect`.
type I = Effect

-- | Type synonym for `View`.
type V = View

-- | View for `Effect`.
data View = View
  with
    providers : Parties
      -- ^ The parties providing the claim processing.
    targetInstrument : InstrumentKey
      -- ^ A holding on this instrument is required to claim the effect.
    producedInstrument : Optional InstrumentKey
      -- ^ The new version of the target instrument, when it exists.
    id : Id
      -- ^ A textual identifier.
    description : Text
      -- ^ A human readable description of the Effect.
    settlementTime : Optional Time
      -- ^ The effect's settlement time (if any).
    otherConsumed : [InstrumentQuantity]
      -- ^ Consumed quantities (in addition to the target instrument).
    otherProduced : [InstrumentQuantity]
      -- ^ Produced quantities (in addition to the produced instrument).
  deriving (Eq, Show)

-- | Interface for contracts exposing effects of lifecycling processes.
interface Effect where
  viewtype V

  setProviders : SetProviders -> Update (ContractId Effect)
    -- ^ Implementation of the `SetProviders` choice.
  calculate : Calculate -> ContractId Effect -> Update CalculationResult
    -- ^ Implementation of the `Calculate` choice.

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party retrieving the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice Calculate : CalculationResult
    -- ^ Given a holding, it calculates the instrument quantities to settle.
    with
      actor : Party
        -- ^ The party calculating the quantities to settle.
      holdingCid : ContractId Base.I
        -- ^ The holding being targeted.
    controller actor
    do
      calculate this arg self

  choice SetProviders : ContractId Effect
    -- ^ Set the provider of the effect. The provider has visibility on all sub-transactions
    --   triggered by `Claim`\ing an effect.
    with
      newProviders : Parties
        -- ^ The new provider.
    controller (view this).providers, newProviders
    do
      setProviders this arg

-- | Data type encapsulating the effect's calculation result.
data CalculationResult = CalculationResult
  with
    consumed : [InstrumentQuantity]
      -- ^ Consumed quantities.
    produced : [InstrumentQuantity]
      -- ^ Produced quantities.
  deriving (Eq, Show)
