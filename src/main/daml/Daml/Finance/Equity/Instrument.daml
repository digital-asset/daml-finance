-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Equity.Instrument where

import DA.Set (singleton)
import Daml.Finance.Lifecycle.Event.Distribution qualified as Distribution (Event(..))
import Daml.Finance.Lifecycle.Event.Replacement qualified as Replacement (Event(..))
import Daml.Finance.Interface.Asset.Instrument qualified as Instrument (I, View(..), disclosureUpdateReference, qty)
import Daml.Finance.Interface.Asset.Types (Id, InstrumentKey(..))
import Daml.Finance.Interface.Common.Disclosure qualified as Disclosure (I, SetObservers(..), View(..))
import Daml.Finance.Interface.Common.Types (Observers)
import Daml.Finance.Interface.Common.Util (flattenObservers)
import Daml.Finance.Interface.Equity.Instrument qualified as Equity (DeclareDividend(..), DeclareReplacement(..), DeclareStockSplit(..), HasImplementation, I, View(..))

type T = Instrument

instance Equity.HasImplementation T

-- | An Instrument representing a common stock.
template Instrument
  with
    issuer : Party
      -- ^ Issuer.
    depository : Party
      -- ^ Depository.
    id : Id
      -- ^ A textual identifier.
    observers : Observers
      -- ^ Observers.
    validAsOf : Time
      -- ^ Timestamp as of which the instrument is valid. This usually coincides with the timestamp of the event that creates the instrument. It usually does not coincide with ledger time.
  where
    signatory depository, issuer
    observer flattenObservers observers

    let instrumentKey = InstrumentKey with depository; issuer; id

    implements Instrument.I where
      asDisclosure = toInterface @Disclosure.I this
      view = Instrument.View with issuer; depository; id; validAsOf
      getKey = instrumentKey

    implements Equity.I where
      asInstrument = toInterface @Instrument.I this
      view = Equity.View ()
      declareDividendImpl Equity.DeclareDividend{id; effectiveDate; newInstrument; perUnitDistribution} = do
        toInterfaceContractId <$> create Distribution.Event with provider = issuer; id; effectiveDate; targetInstrument = instrumentKey; newInstrument; perUnitDistribution; observers
      declareStockSplitImpl Equity.DeclareStockSplit{id; adjustmentFactor; newInstrument; effectiveDate} =
        -- NOTE: Doesn't handle conversion of fractional shares into cash
        toInterfaceContractId <$> create Replacement.Event with provider = issuer; id; effectiveDate; targetInstrument = instrumentKey; perUnitReplacement = [Instrument.qty (1.0 / adjustmentFactor) newInstrument]; observers
      declareReplacementImpl Equity.DeclareReplacement{id; effectiveDate; perUnitReplacement} =
        toInterfaceContractId <$> create Replacement.Event with provider = issuer; id; effectiveDate; targetInstrument = instrumentKey; perUnitReplacement; observers

    implements Disclosure.I where
      view = Disclosure.View with disclosureControllers = singleton $ singleton issuer; observers
      setObserversImpl Disclosure.SetObservers{newObservers} = do
        cid <- toInterfaceContractId <$> create this with observers = newObservers
        Instrument.disclosureUpdateReference newObservers instrumentKey cid
      archiveImpl self = archive (coerceContractId self : ContractId Instrument)
