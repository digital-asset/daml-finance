-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.Claims.Lifecycle.Rule where

import DA.Set (fromList)
import DA.Text (sha256)
import Daml.Finance.Claims.Util (isZero')
import Daml.Finance.Claims.Util.Lifecycle (lifecycle, lifecycleClaims, netOnTag, splitPending, timeEvent)
import Daml.Finance.Interface.Claims.Claim qualified as Claim (getAcquisitionTime)
import Daml.Finance.Interface.Claims.Dynamic.Instrument qualified as DynamicInstrument (I, CreateNewVersion(..), GetView(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument (R, exerciseInterfaceByKey, getKey)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (I, Evolve(..), View(..))
import Daml.Finance.Interface.Types.Common.Types (Id(..), Parties, PartiesMap)
import Daml.Finance.Interface.Util.Common (fetchInterfaceByKey)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, flattenObservers)
import Daml.Finance.Lifecycle.Effect (Effect(..))
import Prelude hiding (exercise, key)

-- | Rule to process a time update event for instruments that are modelled using "on-the-fly"
-- claims (the tree is not stored on-ledger but generated dynamically).
template Rule
  with
    providers : Parties
      -- ^ Providers of the distribution rule.
    lifecycler : Party
      -- ^ Party performing the lifecycling.
    observers : PartiesMap
      -- ^ Observers of the distribution rule.
    id : Id
      -- ^ Identifier for the rule contract.
    description : Text
      -- ^ Textual description.
  where
    signatory providers
    observer Disclosure.flattenObservers observers, lifecycler

    interface instance Lifecycle.I for Rule where
      view = Lifecycle.View with lifecycler; id; description
      -- BOND_PROCESS_CLOCK_UPDATE_INITAL_CLAIMS_BEGIN
      evolve Lifecycle.Evolve{eventCid; observableCids; instrument} = do
        claimInstrument <- fetchInterfaceByKey @BaseInstrument.R instrument
      -- BOND_PROCESS_CLOCK_UPDATE_INITAL_CLAIMS_END
        -- BOND_PROCESS_CLOCK_UPDATE_LIFECYCLE_FASTFORWARD_BEGIN
        -- Recover claims tree as of the lastEventTimestamp. For a bond, this just requires
        -- lifecycling as of the lastEventTimestamp.
        nv <- BaseInstrument.exerciseInterfaceByKey @DynamicInstrument.I instrument lifecycler
          DynamicInstrument.GetView with viewer = lifecycler
        claims <- fst <$>
          lifecycle lifecycler observableCids claimInstrument [timeEvent nv.lastEventTimestamp]
        -- BOND_PROCESS_CLOCK_UPDATE_LIFECYCLE_FASTFORWARD_END
        -- BOND_PROCESS_CLOCK_UPDATE_LIFECYCLE_BEGIN
        -- Lifecycle
        let acquisitionTime = Claim.getAcquisitionTime claimInstrument
        v <- view <$> fetch eventCid
        (remaining, pending) <- lifecycleClaims observableCids acquisitionTime claims
          [timeEvent v.eventTime]
        let
          pendingAfterNetting = netOnTag pending
          (otherConsumed, otherProduced) = splitPending pendingAfterNetting
        if remaining == claims && null pendingAfterNetting then
          pure (None, [])
        else do
          let
            currentKey = BaseInstrument.getKey $ toInterface claimInstrument
            newKey = currentKey with version = sha256 $ show remaining
            producedInstrument = if isZero' remaining then None else Some newKey
          newInstrumentCid <- BaseInstrument.exerciseInterfaceByKey @DynamicInstrument.I instrument
            lifecycler DynamicInstrument.CreateNewVersion with
              lastEventTimestamp = v.eventTime; version = newKey.version
          effectCid <- toInterfaceContractId <$> create Effect with
            providers = fromList [currentKey.issuer]
            id = v.id
            description = v.description
            targetInstrument = currentKey
            producedInstrument
            otherConsumed
            otherProduced
            settlementTime = Some v.eventTime
            observers = Disclosure.flattenObservers . (.observers) . view $
              toInterface @Disclosure.I claimInstrument
          pure (producedInstrument, [effectCid])
        -- BOND_PROCESS_CLOCK_UPDATE_LIFECYCLE_END
