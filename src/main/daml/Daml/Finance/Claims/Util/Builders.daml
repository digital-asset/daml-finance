-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | This module includes utility functions used to build contingent claim trees that represent
-- specific payoffs. A `Schedule` is usually used as an input to these utility functions. Given
-- that schedules are defined in terms of dates, a claim where the time parameter is `Date`
-- is returned. These are then mapped to claims where the time parameter is `Time` using a
-- (user-provided) conversion function.
module Daml.Finance.Claims.Util.Builders where

import ContingentClaims.Core.Claim (Claim(..), Inequality(..), give, one, scale, upTo, when, until)
import ContingentClaims.Core.Observation (Observation(..))
import Daml.Finance.Claims.Util (toTime)
import Daml.Finance.Interface.Claims.Types (Deliverable, Observable, TaggedClaim(..))
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum)
import Daml.Finance.Interface.Types.Date.Schedule (PeriodicSchedule(..), Schedule)
import Daml.Finance.Util.Date.DayCount (calcPeriodDcf)
import Prelude hiding (key)

-- | Convert the claims to UTCTime and tag them.
prepareAndTagClaims : (Date -> Time) -> [Claim Date Decimal Deliverable Observable] ->
  Text -> TaggedClaim
prepareAndTagClaims dateToTime cs tag =
  let claim = toTime dateToTime $ mconcat cs
  in TaggedClaim with tag; claim

-- FIXED_RATE_BOND_COUPON_CLAIMS_BEGIN
createFixRatePaymentClaimsList : Schedule -> PeriodicSchedule -> Bool -> Decimal -> Bool ->
  DayCountConventionEnum -> Decimal -> Deliverable -> [Claim Date Decimal Deliverable Observable]
createFixRatePaymentClaimsList schedule periodicSchedule useAdjustedDatesForDcf couponRate
  ownerReceives dayCountConvention notional cashInstrumentCid =
    let
      couponDatesAdjusted = map (.adjustedEndDate) schedule
      couponAmounts = map (\p ->
          couponRate *
          (calcPeriodDcf dayCountConvention p useAdjustedDatesForDcf
            periodicSchedule.terminationDate periodicSchedule.frequency)
        ) schedule
      couponClaimAmounts = mconcat $
        zipWith
          (\d a ->
            when (TimeGte d) $ scale (Const a) $ scale (Const notional) $ one cashInstrumentCid
          ) couponDatesAdjusted couponAmounts
    in
      [if ownerReceives then couponClaimAmounts else give couponClaimAmounts]
-- FIXED_RATE_BOND_COUPON_CLAIMS_END

-- | Calculate a fix rate amount for each payment date and create claims.
createFixRatePaymentClaims : (Date -> Time) -> Schedule -> PeriodicSchedule -> Bool -> Decimal ->
  Bool -> DayCountConventionEnum -> Decimal -> Deliverable -> TaggedClaim
createFixRatePaymentClaims dateToTime schedule periodicSchedule useAdjustedDatesForDcf
  couponRate ownerReceives dayCountConvention notional cashInstrumentCid =
    let
      couponClaims = createFixRatePaymentClaimsList schedule periodicSchedule useAdjustedDatesForDcf
        couponRate ownerReceives dayCountConvention notional cashInstrumentCid
    in prepareAndTagClaims dateToTime couponClaims "Fix rate payment"

-- | Calculate a fix rate amount (if a credit event has not yet happened) for each payment date and
-- create claims.
createConditionalCreditFixRatePaymentClaims : (Date -> Time) -> Schedule -> PeriodicSchedule ->
  Bool -> Decimal -> Bool -> DayCountConventionEnum -> Decimal -> Deliverable -> Observable ->
  TaggedClaim
createConditionalCreditFixRatePaymentClaims dateToTime schedule periodicSchedule
  useAdjustedDatesForDcf couponRate ownerReceives dayCountConvention notional
  cashInstrumentCid defaultProbabilityReferenceId
  = let
      couponClaims = createFixRatePaymentClaimsList schedule periodicSchedule useAdjustedDatesForDcf
        couponRate ownerReceives dayCountConvention notional cashInstrumentCid
      creditEvent = Lte (Const 1.0, Observe defaultProbabilityReferenceId)
      couponClaimUntilCreditEvent =
        when (TimeGte periodicSchedule.effectiveDate)
        $ until creditEvent
        $ mconcat couponClaims
    in
      prepareAndTagClaims dateToTime [couponClaimUntilCreditEvent]
        "Fix rate payment (unless credit event has occurred)"

-- | Calculate a (1-recoveryRate) payment if a credit event just happened and create claims.
createCreditEventPaymentClaims : (Date -> Time) -> Bool -> Decimal -> Deliverable -> Observable ->
  Observable -> PeriodicSchedule -> TaggedClaim
createCreditEventPaymentClaims dateToTime ownerReceives notional cashInstrumentCid
  defaultProbabilityReferenceId recoveryRateReferenceId periodicSchedule =
  let
    creditEvent = Lte (Const 1.0, Observe defaultProbabilityReferenceId)
    payoffAmount =
      scale ((Const 1.0 - Observe recoveryRateReferenceId) * Const notional)
      $ one cashInstrumentCid
    payoff = if ownerReceives then payoffAmount else give payoffAmount
    creditEventClaim =
      when (TimeGte periodicSchedule.effectiveDate)
      $ when creditEvent
      $ when (upTo periodicSchedule.terminationDate) payoff
  in prepareAndTagClaims dateToTime [creditEventClaim] "Credit event payment"

-- FLOATING_RATE_BOND_COUPON_CLAIMS_BEGIN
-- | Calculate a floating rate amount for each payment date and create claims.
-- The floating rate is always observed on the first day of each payment period and used for the
-- corresponding payment on the last day of that payment period. This means that the calculation
-- agent needs to provide such an Observable, irrespective of the kind of reference rate used (e.g.
-- a forward looking LIBOR or a backward looking SOFR-COMPOUND).
createFloatingRatePaymentClaims : (Date -> Time) -> Schedule -> PeriodicSchedule -> Bool ->
  Decimal -> Bool -> DayCountConventionEnum -> Decimal -> Deliverable -> Observable -> TaggedClaim
createFloatingRatePaymentClaims dateToTime schedule periodicSchedule useAdjustedDatesForDcf
  floatingRateSpread ownerReceives dayCountConvention notional cashInstrumentCid referenceRateId =
  let
    couponClaimAmounts = mconcat $ map (\p ->
        when (TimeGte p.adjustedStartDate)
        $ scale (
          (Observe referenceRateId + Const floatingRateSpread) *
          (Const (calcPeriodDcf dayCountConvention p useAdjustedDatesForDcf
                    periodicSchedule.terminationDate periodicSchedule.frequency)
          ))
        $ when (TimeGte p.adjustedEndDate)
        $ scale (Const notional)
        $ one cashInstrumentCid
      ) schedule
    couponClaims = if ownerReceives then couponClaimAmounts else give couponClaimAmounts
  in prepareAndTagClaims dateToTime [couponClaims] "Floating rate payment"
-- FLOATING_RATE_BOND_COUPON_CLAIMS_END

-- ASSET_PERFORMANCE_CLAIMS_BEGIN
-- | Calculate the asset performance for each payment date and create claims.
-- The performance is calculated using the reference asset from the start date to the end date of
-- each payment period. The reference asset Observable needs to contain the appropriate type of
-- fixings:
--   - unadjusted fixings in case of a price return asset swap
--   - adjusted fixings in case of a total return asset swap
createAssetPerformancePaymentClaims : (Date -> Time) -> Schedule -> PeriodicSchedule -> Bool -> Bool ->
  DayCountConventionEnum -> Decimal -> Deliverable -> Observable -> TaggedClaim
createAssetPerformancePaymentClaims dateToTime schedule periodicSchedule useAdjustedDatesForDcf
  ownerReceives dayCountConvention notional cashInstrumentCid referenceAssetId =
  let
    assetClaimAmounts = mconcat $ map (\p ->
        when (TimeGte p.adjustedStartDate)
        $ scale (Const 1.0 / Observe referenceAssetId)
        $ when (TimeGte p.adjustedEndDate)
        $ scale (Observe referenceAssetId)
        $ scale (Const notional)
        $ one cashInstrumentCid
      ) schedule
    correctionClaimAmounts = mconcat $ map (\p ->
      when (TimeGte p.adjustedEndDate) $ scale (Const notional) $ one cashInstrumentCid) schedule
    assetClaims = if ownerReceives then assetClaimAmounts else give assetClaimAmounts
    correctionAssetClaims =
      if ownerReceives then give correctionClaimAmounts else correctionClaimAmounts
  in
    prepareAndTagClaims dateToTime [assetClaims, correctionAssetClaims] "Asset performance payment"
-- ASSET_PERFORMANCE_CLAIMS_END

-- FIXED_RATE_BOND_REDEMPTION_CLAIM_BEGIN
-- | Create an FX adjusted principal claim.
-- This can be used for both FX swaps (using the appropriate FX rate) and single currency bonds
-- (setting the FX rate to 1.0).
createFxAdjustedPrincipalClaim : (Date -> Time) -> Bool -> Decimal -> Decimal -> Deliverable ->
  Date -> TaggedClaim
createFxAdjustedPrincipalClaim dateToTime ownerReceives fxRateMultiplier notional
  cashInstrumentCid valueDate =
  let
    fxLegClaimAmount = when (TimeGte valueDate)
                       $ scale (Const fxRateMultiplier)
                       $ scale (Const notional)
                       $ one cashInstrumentCid
    fxLegClaim = if ownerReceives then fxLegClaimAmount else give fxLegClaimAmount
  in
    prepareAndTagClaims dateToTime [fxLegClaim] "Principal payment"
-- FIXED_RATE_BOND_REDEMPTION_CLAIM_END
