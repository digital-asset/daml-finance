-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module ContingentClaims.Core.Claim
  ( Claim
  , F
  , Inequality(..)
  , T
  , (<=)
  , and
  , anytime
  , at
  , compare
  , cond
  , give
  , mapParams
  , one
  , or
  , scale
  , until
  , upTo
  , when
  , zero
  ) where

import ContingentClaims.Core.Internal.Claim (Claim(..), ClaimF(..), Inequality(..))
import ContingentClaims.Core.Observation (Observation, eval)
import ContingentClaims.Core.Observation qualified as Observation (mapParams)
import Daml.Control.Recursion
import Prelude hiding ((<=), and, compare, or)
import qualified Prelude ((<=))

-- | Type synonym for `Claim`.
type T = Claim

-- | HIDE
type F = ClaimF

-- | Smart constructor for `Zero`.
zero : forall t x a o . Claim t x a o
zero = Zero

-- | Smart constructor for `One`.
one : a -> Claim t x a o
one = One

-- | Smart constructor for `Give`.
give : Claim t x a o -> Claim t x a o
give = Give

-- | Smart constructor for `And`. Because of the explicit representation of the first two arguments
-- of an `And`, it can be cumbersome to write `And c c' []`. With this constructor, you can write
-- `c \\`and\\` c'` instead. Flattens nested `And`s and applies additive monoid identity eagerly.
-- Note this is an `O(n)` operation. For a more efficient alternative, consider `mconcat`.
and : Claim t x a o -> Claim t x a o -> Claim t x a o
and (And a b cs) (And d e fs) = And a b (cs ++ d :: e :: fs)
and x Zero = x
and (And a b cs) claim = And a b (cs ++ [claim])
and Zero x = x
and claim (And a b cs) = And claim a (b :: cs)
and claim claim' = And claim claim' []

-- | Smart constructor for `Or`. Because of the explicit representation of the first two arguments
-- of an `Or`, it can be cumbersome to write `Or c c' []`. With this constructor, you can write
-- `c \\`or\\` c'` instead. Flattens nested `Or`s. Unlike `and`, this does not apply a monoid
-- identity. Note this is an `O(n)` operation.
or : Claim t x a o -> Claim t x a o -> Claim t x a o
or (Or a b cs) (Or d e fs) = Or a b (cs ++ d :: e :: fs)
or (Or a b cs) claim = Or a b (cs ++ [claim])
or claim (Or a b cs) = Or claim a (b :: cs)
or claim claim' = Or claim claim' []

-- | Smart constructor for `Cond`.
cond : Inequality t x o -> Claim t x a o -> Claim t x a o -> Claim t x a o
cond = Cond

-- | Smart constructor for `Scale`.
scale : Observation t x o -> Claim t x a o -> Claim t x a o
scale = Scale

-- | Smart constructor for `When`.
when : Inequality t x o -> Claim t x a o -> Claim t x a o
when = When

-- | Smart constructor for `Anytime`.
anytime : Inequality t x o -> Claim t x a o -> Claim t x a o
anytime = Anytime

-- | Smart constructor for `Until`.
until : Inequality t x o -> Claim t x a o -> Claim t x a o
until = Until

-- | `Claim` semigroup under `And`.
instance Semigroup (Claim t x a o) where
  (<>) = and

-- | `Claim` monoid under `And`.
instance Monoid (Claim t x a o) where
  mempty = Zero
  mconcat [] = mempty
  mconcat [c] = c
  mconcat (c :: c' :: cs) = And c c' cs
  -- ^ A more efficient `O(1)` version of (<>) for lists.

-- | Replace parameters in an `Claim` with actual values.
mapParams :  (t -> i)
          -> (i -> t)
          -> (a -> a')
          -> (o -> o')
          -> (x -> x')
          -> Claim i x a o -> Claim t x' a' o'
mapParams ft' ft fa fk fv =
  let f = Observation.mapParams ft' fk fv
  in cata \case
    ZeroF -> Zero
    OneF a -> One $ fa a
    GiveF c -> Give c
    AndF c c' cs -> And c c' cs
    OrF c c' cs -> Or c c' cs
    CondF (Lte (x, x')) c c' -> Cond (Lte(f x, f x')) c c'
    CondF (TimeGte t) c c' -> Cond (TimeGte (ft t)) c c'
    CondF (TimeLte t) c c' -> Cond (TimeLte (ft t)) c c'
    ScaleF k c -> Scale (f k) c
    WhenF (Lte (x, x')) c -> When (Lte (f x, f x')) c
    WhenF (TimeGte t) c -> When (TimeGte (ft t)) c
    WhenF (TimeLte t) c -> When (TimeLte (ft t)) c
    AnytimeF (Lte (x, x')) c -> Anytime (Lte (f x, f x')) c
    AnytimeF (TimeGte t) c -> Anytime (TimeGte (ft t)) c
    AnytimeF (TimeLte t) c -> Anytime (TimeLte (ft t)) c
    UntilF (Lte (x, x')) c -> Until (Lte (f x, f x')) c
    UntilF (TimeGte t) c -> Until (TimeGte (ft t)) c
    UntilF (TimeLte t) c -> Until (TimeLte (ft t)) c

-- Inequality --

-- | Smart constructor for `TimeGte`.
-- This boolean predicate is `True` for time ≥ t, `False` otherwise.
at : t -> Inequality t x o
at t = TimeGte t

-- | Observable that is true for time ≤ t.
-- This boolean predicate is `True` for time ≤ t, `False` otherwise.
upTo : t -> Inequality t x a
upTo t = TimeLte t

infix 4 <=
-- | Smart constructor for `Lte`.
-- `import Prelude hiding ((<=))` in order to use this.
(<=) : Observation t x o -> Observation t x o -> Inequality t x o
(<=) = curry Lte

-- | Reify the `Inequality` into an observation function.
-- This function is used to convert an abstract inequalityvation, e.g. `S ≤ 50.0` to the actual
-- observation function `t -> m Bool`. The function is only total when the first argument is too
-- (typically it will fail on `t` > today).
compare : (Ord t, Ord x, Number x, Divisible x, Action m) =>
  (o -> t -> m x) -> Inequality t x o -> t -> m Bool
compare doObserve (Lte (f, f')) t = liftA2 (Prelude.<=) (eval doObserve f t) (eval doObserve f' t)
compare _ (TimeGte s) t = pure $ t >= s
compare _ (TimeLte s) t = pure $ s >= t
