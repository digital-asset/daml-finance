module Scripts.Setup where

import DA.Map (empty)
import Daml.Script

-- INTERFACE DEPENDENCIES --
import Daml.Finance.Interface.Asset.Factory.Account qualified as Account (F)
import Daml.Finance.Interface.Asset.Factory.Holding qualified as Holding (F)
import Daml.Finance.Interface.Asset.Types (Id(..), InstrumentKey(..))
import Daml.Finance.Interface.Asset.Instrument qualified as Instrument (I)

-- IMPLEMENTATION DEPENDENCIES --
import Daml.Finance.Asset.Account qualified as Account (Factory(..))
import Daml.Finance.Asset.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Asset.Instrument (Instrument(..))

import Workflow.CreateAccount
import Workflow.Deposit
import Workflow.Transfer

-- | Test script that
-- 1. creates an account for Alice and Bob at the Bank
-- 2. issues a cash instrument
-- 3. credits a cash holding to Alice on her bank account
-- 4. transfers the holding from Alice to Bob
setup : Script()
setup = do

  -- Allocate Parties.
  [alice, bank, bob] <- mapA createParty $ ["Alice", "Bank", "Bob"]

  -- Account Factory (it is used by the bank to create accounts).
  -- CREATE_ACCOUNT_FACTORY_BEGIN
  accountFactoryCid <- toInterfaceContractId @Account.F <$> submit bank do
    createCmd Account.Factory
      with
        provider = bank
        observers = empty
  -- CREATE_ACCOUNT_FACTORY_END

  -- Holding Factory (it is used by the bank to create holdings with the desired implementation).
  -- CREATE_HOLDING_FACTORY_BEGIN
  holdingFactoryCid <- toInterfaceContractId @Holding.F <$> submit bank do
    createCmd Fungible.Factory
      with
        provider = bank
        observers = empty
  -- CREATE_HOLDING_FACTORY_END

  -- Alice and Bob setup account @Bank
  -- SETUP_ALICE_ACCOUNT_BEGIN
  aliceRequestCid <- submit alice do
    createCmd AccountOpenRequest
      with
        owner = alice
        custodian = bank
  aliceAccount <- submit bank do
    exerciseCmd aliceRequestCid AccountOpenRequest_Accept
      with
        label = "Alice@Bank"
        accountFactoryCid = accountFactoryCid
        holdingFactoryCid = holdingFactoryCid
        observers = []
  -- SETUP_ALICE_ACCOUNT_END

  bobRequestCid <- submit bob do
    createCmd AccountOpenRequest
      with
        owner = bob
        custodian = bank
  bobAccount <- submit bank do
    exerciseCmd bobRequestCid AccountOpenRequest_Accept
      with
        label = "Bob@Bank"
        accountFactoryCid = accountFactoryCid
        holdingFactoryCid = holdingFactoryCid
        observers = [alice]

  -- Bank creates the cash instrument
  -- ISSUE_CASH_INSTRUMENT_BEGIN
  let instrumentId = Id with label = "USD"; version = "0"
  now <- getTime

  cashInstrumentCid <- toInterfaceContractId @Instrument.I <$> submit bank do
    createCmd Instrument
      with
        depository = bank
        issuer = bank
        id = instrumentId
        observers = empty
        validAsOf = now
  -- ISSUE_CASH_INSTRUMENT_END

  -- Alice deposits cash at the bank
  -- CREATE_ALICE_HOLDING_BEGIN
  aliceRequestCid <- submit alice do
    createCmd DepositRequest
      with
        account = aliceAccount
        instrument = InstrumentKey with issuer = bank; depository = bank; id = instrumentId
        amount = 1000.0

  aliceCashHoldingCid <- submit bank do exerciseCmd aliceRequestCid CashDepositRequest_Accept
  -- CREATE_ALICE_HOLDING_END

  -- Bob requests a cash transfer from Alice
  -- TRANSFER_BEGIN
  transferRequestCid <- submit bob do
    createCmd TransferRequest
      with
        receiverAccount = bobAccount
        instrument = InstrumentKey with issuer = bank; depository = bank; id = instrumentId
        amount = 1000.0
        currentOwner = alice

  newHoldingCid <- submit alice do exerciseCmd transferRequestCid CashTransferRequest_Accept with holdingCid = aliceCashHoldingCid
  -- TRANSFER_END

  pure ()

createParty : Text -> Script Party
createParty name = allocatePartyWithHint name $ PartyIdHint name
