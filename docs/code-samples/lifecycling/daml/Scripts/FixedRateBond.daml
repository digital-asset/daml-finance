module Scripts.FixedRateBond where

import DA.Date (DayOfWeek(..), Month(..), date, toGregorian)
import DA.Map qualified as M (empty, fromList)
import DA.Set qualified as S (empty, fromList, singleton)
import Daml.Script

-- INTERFACE DEPENDENCIES --
import Daml.Finance.Interface.Account.Factory qualified as Account (F)
import Daml.Finance.Interface.Holding.Factory qualified as Holding (F)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (I)
import Daml.Finance.Interface.Instrument.Bond.FixedRate.Factory qualified as FixedRate (Create(..), F(..))
import Daml.Finance.Interface.Instrument.Bond.FixedRate.Types (FixedRate(..))
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I)
import Daml.Finance.Interface.Lifecycle.Rule.Claim qualified as Claim (ClaimEffect(..), I)
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (Evolve(..), I)
import Daml.Finance.Interface.Settlement.Batch qualified as Batch (Settle(..))
import Daml.Finance.Interface.Settlement.Factory qualified as Settlement (F)
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Allocate(..), Approve(..))
import Daml.Finance.Interface.Settlement.RouteProvider qualified as RouteProvider (I)
import Daml.Finance.Interface.Settlement.Types (Allocation(..), Approval(..))
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id(..), InstrumentKey(..), Parties)
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayAdjustment(..), BusinessDayConventionEnum(..), HolidayCalendarData(..))
import Daml.Finance.Interface.Types.Date.Classes (HasUTCTimeConversion(..))
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum(..))
import Daml.Finance.Interface.Types.Date.RollConvention (Period(..), PeriodEnum(..), RollConventionEnum(..))
import Daml.Finance.Interface.Types.Date.Schedule (Frequency(..), PeriodicSchedule(..), ScheduleFrequency(..))

-- IMPLEMENTATION DEPENDENCIES --
import Daml.Finance.Account.Account qualified as Account (Factory(..))
import Daml.Finance.Claims.Lifecycle.Rule (Rule(..))
import Daml.Finance.Data.Reference.HolidayCalendar (HolidayCalendar(..))
import Daml.Finance.Data.Time.DateClock.Types (Unit(..))
import Daml.Finance.Data.Time.DateClockUpdate qualified as DataTime (DateClockUpdateEvent(..))
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))
import Daml.Finance.Instrument.Bond.FixedRate.Factory qualified as FixedRate (Factory(..))
import Daml.Finance.Instrument.Token.Instrument (Instrument(..))
import Daml.Finance.Lifecycle.Rule.Claim qualified as Claim (Rule(..))
import Daml.Finance.Settlement.Factory qualified as Settlement (Factory(..))
import Daml.Finance.Settlement.RouteProvider.SingleCustodian (SingleCustodian(..))

import Workflow.CreateAccount qualified as CreateAccount
import Workflow.CreditAccount qualified as CreditAccount

-- | Helper container used to transfer state from one script to another.
data FixedRateState = FixedRateState
  with
    bank : Party
    bob : Party
    public : Party
    bobAccount : AccountKey
    periodicSchedule : PeriodicSchedule
    usdInstrument : InstrumentKey
    holidayCalendarIds : [Text]
    lifecycleRuleCid : ContractId Lifecycle.I
    routeProviderCid : ContractId RouteProvider.I
    settlementFactoryCid : ContractId Settlement.F
    lifecycleClaimRuleCid : ContractId Claim.I
    firstCouponClockEventCid : ContractId Event.I
  deriving (Eq, Show)

-- | Test script that
-- 1. creates a fixed rate bond instrument and a holding on it
-- 2. creates a lifecycle rule
-- 3. creates a lifecycle event (time event: DateClockUpdate)
-- 4. lifecycles the time event
-- 5. processes the lifecycle effect
-- 6. settles the distribution
runFixedRateBond : Script FixedRateState
runFixedRateBond = do

  -- Allocate parties
  [bank, bob, public] <- mapA createParty ["Bank", "Bob", "Public"]

  -- Account Factory (it is used by the bank to create accounts)
  accountFactoryCid <- toInterfaceContractId @Account.F <$> submit bank do
    createCmd Account.Factory with provider = bank; observers = M.empty

  -- Holding Factory (it is used by the bank to create holdings with the desired implementation)
  holdingFactoryCid <- toInterfaceContractId @Holding.F <$> submit bank do
    createCmd Fungible.Factory with
      provider = bank
      observers = M.fromList [("PublicObserver", S.singleton public )]

  -- Bob sets up account @Bank
  bobRequestCid <- submit bob do createCmd CreateAccount.Request with owner = bob; custodian = bank
  bobAccount <- submit bank do
    exerciseCmd bobRequestCid CreateAccount.Accept with
      label = "Bob@Bank"
      description = "Account of Bob at Bank"
      accountFactoryCid = accountFactoryCid
      holdingFactoryCid = holdingFactoryCid
      observers = []

  -- Setup a route provider
  -- This is used transform settlement `Step`s into a `RoutedStep`s using a single custodian
  routeProviderCid <- toInterfaceContractId @RouteProvider.I <$> submit bank do
    createCmd SingleCustodian with
      provider = bank; observers = S.fromList [bob]; custodian = bank

  -- Setup a Settlement Factory facility
  -- This is used to generate settlement instructions from a list of `RoutedStep`s
  settlementFactoryCid <- toInterfaceContractId @Settlement.F <$> submit bank do
    createCmd Settlement.Factory with
      provider = bank
      observers = S.fromList [bob]

  -- Bank creates the cash instrument
  let
    instrumentId = Id "USD"
    instrumentVersion = "0"
    usdInstrument = InstrumentKey with
      issuer = bank
      depository = bank
      id = instrumentId
      version = instrumentVersion
  now <- getTime

  cashInstrumentCid <- toInterfaceContractId @Instrument.I <$> submit bank do
    createCmd Instrument with
      depository = bank
      issuer = bank
      id = instrumentId
      version = instrumentVersion
      description = "Instrument representing units of USD"
      validAsOf = now
      observers = M.empty

  let pp = [("Public Party", S.singleton public)]

  -- Create and distribute bond
  -- CREATE_FIXED_RATE_BOND_VARIABLES_BEGIN
  let
    issueDate = date 2019 Jan 16
    firstCouponDate = date 2019 May 15
    maturityDate = date 2020 May 15
    notional = 1.0
    couponRate = 0.011
    couponPeriod = M
    couponPeriodMultiplier = 12
    dayCountConvention = ActActISDA
    businessDayConvention = Following
  -- CREATE_FIXED_RATE_BOND_VARIABLES_END

  -- CREATE_FIXED_RATE_BOND_CALENDARS_BEGIN
  let
    calendar =
      HolidayCalendarData with
        id = "USD"
        weekend = [Saturday, Sunday]
        holidays = [date 2019 Dec 19]
    holidayCalendarIds = [calendar.id]

  -- A reference data provider publishes the holiday calendar on the ledger
  calendarCid <- submit bank do
    createCmd HolidayCalendar with
      provider = bank
      calendar
      observers = M.fromList pp
  -- CREATE_FIXED_RATE_BOND_CALENDARS_END

  -- CREATE_PERIODIC_SCHEDULE_BEGIN
  let
    (y, m, d) = toGregorian firstCouponDate
    periodicSchedule = PeriodicSchedule with
      businessDayAdjustment =
        BusinessDayAdjustment with
          calendarIds = holidayCalendarIds
          convention = businessDayConvention
      effectiveDateBusinessDayAdjustment = None
      terminationDateBusinessDayAdjustment = None
      frequency =
        Periodic Frequency with
          rollConvention = DOM d
          period = Period with
            period = couponPeriod
            periodMultiplier = couponPeriodMultiplier
      effectiveDate = issueDate
      firstRegularPeriodStartDate = Some firstCouponDate
      lastRegularPeriodEndDate = Some maturityDate
      stubPeriodType = None
      terminationDate = maturityDate
  -- CREATE_PERIODIC_SCHEDULE_END

  -- CREATE_FIXED_RATE_BOND_INSTRUMENT_BEGIN
  -- Create a fixed rate bond factory
  fixedRateBondFactoryCid <- toInterfaceContractId @FixedRate.F <$> submit bank do
    createCmd FixedRate.Factory with
      provider = bank
      observers = M.empty

  -- Define an instrument key for the bond
  let
    bondInstrument = InstrumentKey with
      issuer = bank
      depository = bank
      id = Id "FixedRateBond"
      version = "0"

  -- Bank creates the bond instrument
  fixedRateBondCid <- submit bank do
    exerciseCmd fixedRateBondFactoryCid FixedRate.Create with
      fixedRate = FixedRate with
        instrument = bondInstrument
        description = "Instrument representing units of a fixed rate bond"
        couponRate
        periodicSchedule
        holidayCalendarIds
        calendarDataProvider = bank
        dayCountConvention
        currency = usdInstrument
        notional
        lastEventTimestamp = now
      observers = M.fromList pp
  -- CREATE_FIXED_RATE_BOND_INSTRUMENT_END

  -- CREATE_FIXED_RATE_BOND_HOLDING_BEGIN
  -- Credit Bob's account with a bond holding
  bobRequestCid <- submit bob do
    createCmd CreditAccount.Request with
      account = bobAccount
      instrument = bondInstrument
      amount = 100000.0
  bobBondHoldingCid <- submit bank do exerciseCmd bobRequestCid CreditAccount.Accept
  -- CREATE_FIXED_RATE_BOND_HOLDING_END

  -- CREATE_LIFECYCLE_RULE_BEGIN
  -- Create a lifecycle rule
  lifecycleRuleCid <- toInterfaceContractId @Lifecycle.I <$> submit bank do
    createCmd Rule with
      providers = S.singleton bank
      observers = M.empty
      lifecycler = bank
      id = Id "LifecycleRule"
      description = "Rule to lifecycle an instrument"
  -- CREATE_LIFECYCLE_RULE_END

  -- CREATE_CLOCK_UPDATE_EVENT_BEGIN
  -- Create a clock update event
  firstCouponClockEventCid <- createClockUpdateEvent bank firstCouponDate S.empty
  -- CREATE_CLOCK_UPDATE_EVENT_END

  -- LIFECYCLE_BOND_BEGIN
  -- Try to lifecycle the instrument
  (lifecycleCid, [effectCid]) <- submit bank do
    exerciseCmd lifecycleRuleCid Lifecycle.Evolve with
      eventCid = firstCouponClockEventCid
      observableCids = []
      instrument = bondInstrument
  -- LIFECYCLE_BOND_END

  -- CREATE_CLAIM_RULE_BEGIN
  -- Create the claim rule
  lifecycleClaimRuleCid <- toInterfaceContractId @Claim.I <$> submit bank do
    createCmd Claim.Rule with
      providers = S.fromList [bank]
      claimers = S.singleton bob
      settlers = S.singleton bob
      routeProviderCid
      settlementFactoryCid
      netInstructions = False
  -- CREATE_CLAIM_RULE_END

  -- Claim effect
  -- CLAIM_EFFECT_BEGIN
  result <- submitMulti [bob] [public] do
    exerciseCmd lifecycleClaimRuleCid Claim.ClaimEffect with
      claimer = bob
      holdingCids = [bobBondHoldingCid]
      effectCid -- This is equivalent to writing effectCid = effectCid
      batchId = Id "BondSettlement"
  let [bobInstructionCid, bankInstructionCid, couponInstructionCid] = result.instructionCids
  -- CLAIM_EFFECT_END

  -- EFFECT_SETTLEMENT_BEGIN
  -- Allocate instruction
  (bobInstructionCid, _) <- submit bob do
    exerciseCmd bobInstructionCid Instruction.Allocate with
      actors = S.singleton bob
      allocation = Pledge bobBondHoldingCid

  (bankInstructionCid, _) <- submit bank do
    exerciseCmd bankInstructionCid Instruction.Allocate with
      actors = S.singleton bank
      allocation = CreditReceiver

  (couponInstructionCid, _) <- submit bank do
    exerciseCmd couponInstructionCid Instruction.Allocate with
      actors = S.singleton bank
      allocation = CreditReceiver

  -- Approve instruction
  bobInstructionCid <- submit bank do
    exerciseCmd bobInstructionCid Instruction.Approve with
      actors = S.singleton bank
      approval = DebitSender

  bankInstructionCid <- submit bob do
    exerciseCmd bankInstructionCid Instruction.Approve with
      actors = S.singleton bob
      approval = TakeDelivery bobAccount

  couponInstructionCid <- submit bob do
    exerciseCmd couponInstructionCid Instruction.Approve with
      actors = S.singleton bob
      approval = TakeDelivery bobAccount

  -- Settle batch
  submitMulti [bob] [public] do
    exerciseCmd result.batchCid Batch.Settle with actors = S.singleton bob
  -- EFFECT_SETTLEMENT_END

  pure FixedRateState with
    bank
    bob
    public
    bobAccount
    periodicSchedule
    usdInstrument
    holidayCalendarIds
    lifecycleRuleCid
    routeProviderCid
    settlementFactoryCid
    lifecycleClaimRuleCid
    firstCouponClockEventCid

-- | Given a `Date`, it creates a `DateClockUpdateEvent`.
createClockUpdateEvent : Party -> Date -> Parties
  -> Script (ContractId Event.I)
createClockUpdateEvent provider today observers = do
  let
    description = show today
    id = Id description
    date = Unit today
  eventCid <- toInterfaceContractId <$> submit provider do
    createCmd DataTime.DateClockUpdateEvent with
      providers = (S.singleton provider); id; description; date = today; observers
      eventTime = toUTCTime date
  pure eventCid

-- | Creates a user + party given a hint.
createParty : Text -> Script Party
createParty name = do
  party <- allocatePartyWithHint name $ PartyIdHint name
  userId <- validateUserId name
  createUser (User userId (Some party)) [CanActAs party]
  pure party
