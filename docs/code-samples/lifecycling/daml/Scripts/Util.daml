module Scripts.Util where

import Daml.Script

-- INTERFACE DEPENDENCIES --
import Daml.Finance.Interface.Holding.Factory (Reference(..))
import Daml.Finance.Interface.Holding.Factory qualified as HoldingFactory (F)
import Daml.Finance.Interface.Types.Common.Types (HoldingFactoryKey(..))

-- IMPLEMENTATION DEPENDENCIES --
import Daml.Finance.Holding.Factory qualified as Holding (Factory(..))

-- | Creates a user + party given a hint.
createParty : Text -> Script Party
createParty name = do
  party <- allocatePartyWithHint name $ PartyIdHint name
  userId <- validateUserId name
  createUser (User userId (Some party)) [CanActAs party]
  pure party

-- | Create a holding factory as well as the companion `Reference` template, that is explained here:
-- https://docs.daml.com/daml-finance/reference/patterns.html#reference-pattern
createHoldingFactory : Holding.Factory -> Script HoldingFactoryKey
createHoldingFactory holdingFactory = do
  cid <- toInterfaceContractId @HoldingFactory.F <$> submit holdingFactory.provider do
    createCmd holdingFactory
  submit holdingFactory.provider do
    createCmd Reference with
      factoryView = view $ toInterface @HoldingFactory.F holdingFactory
      cid
      observers = holdingFactory.observers
  pure $ HoldingFactoryKey with provider = holdingFactory.provider; id = holdingFactory.id
