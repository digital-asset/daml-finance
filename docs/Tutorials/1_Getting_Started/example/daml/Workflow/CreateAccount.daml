-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Workflow.CreateAccount where

import DA.Map qualified as M (fromList)
import DA.Set qualified as S (fromList, singleton)
import Daml.Finance.Interface.Asset.Factory.Account qualified as Account (Create(..), F)
import Daml.Finance.Interface.Asset.Factory.Holding qualified as Holding (F)
import Daml.Finance.Interface.Asset.Types (AccountKey(..))

-- | Initiate / Accept template to open an account.
-- The account is created using an `Account.Factory` template.
-- By doing so, our workflow is generic and does not depend on the specific
-- account implementation.
-- For the same reason, we need to provide a `Holding.Factory` that will be
-- used by the account to create holdings without depending on the specific
-- implementation.
template AccountOpenRequest
  with
    custodian : Party
      -- ^ The account's custodian.
    owner : Party
      -- ^ The account's owner.
  where
    signatory owner
    observer custodian

    choice AccountOpenRequest_Accept : AccountKey
      -- ^ Accept the request.
      with
        label : Text
          -- ^ A textual label.
        accountFactoryCid : ContractId Account.F
          -- ^ The account factory. This is used to create the account template.
        holdingFactoryCid : ContractId Holding.F
          -- ^ The holding factory. This is used within an account to create holdings.
        observers : [Party]
          -- ^ Observers of the account to be created.

      controller custodian
      do
        let
          observersSet = S.fromList $ map S.singleton observers
          accountKey = AccountKey with custodian = custodian, owner = owner, id = label

        accountCid <- exercise accountFactoryCid Account.Create with
          account = accountKey
          holdingFactoryCid
          observers = M.fromList [("AccountObservers", observersSet)]

        pure accountKey

    choice AccountOpenRequest_Decline : ()
      -- ^ Decline the request.
      controller custodian
      do pure ()

    choice AccountOpenRequest_Withdraw : ()
      -- ^ Withdraw the request.
      controller owner
      do pure ()
