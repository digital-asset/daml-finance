-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Workflow.Transfer where

import DA.Assert ((===))
import Daml.Finance.Interface.Asset.Holding qualified as Holding (I)
import Daml.Finance.Interface.Asset.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Finance.Interface.Asset.Instrument qualified as Instrument (K)
import Daml.Finance.Interface.Asset.Types (AccountKey(..))
import Daml.Finance.Interface.Asset.Util (getAmount, getInstrument)

-- | Propose / Accept template to transfer a holding to a new owner.
template TransferRequest
  with
    receiverAccount : AccountKey
      -- ^ The account where the holding is sent.
    instrument : Instrument.K
      -- ^ The instrument referenced by the holding to be transferred.
    amount : Decimal
      -- ^ Number of units to be transferred.
    sender : Party
      -- ^
  where
    signatory receiverAccount.owner
    observer sender

    ensure amount > 0.0

    choice CashTransferRequest_Accept : ContractId Holding.I
      with
        holdingCid : ContractId Holding.I
      controller sender
      do
        -- Sanity checks
        holding <- fetch holdingCid
        getAmount holding === amount
        getInstrument holding === instrument

        -- Do transfer
        let transferableCid : ContractId Transferable.I = coerceContractId holdingCid

        newTransferableCid <- exercise transferableCid Transferable.Transfer
          with
            newOwnerAccount = receiverAccount

        pure $ toInterfaceContractId @Holding.I newTransferableCid

    choice CashTransferRequest_Decline : ()
      -- ^ Decline the request.
      controller receiverAccount.owner
      do pure ()

    choice CashTransferRequest_Withdraw : ()
      -- ^ Withdraw the request.
      controller receiverAccount.owner
      do pure ()


