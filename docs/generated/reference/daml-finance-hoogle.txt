-- Hoogle documentation for Daml, generated by damlc
-- See Hoogle, http://www.haskell.org/hoogle/

-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved. Any unauthorized use, duplication or distribution is strictly prohibited.

-- | Daml Finance library.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst
@package daml-finance
@version 1.1.1

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Builders.html#module-contingentclaims-core-v3-builders-35188
module ContingentClaims.Core.V3.Builders

-- | Helper function to generate a series of fixing dates, e.g. for coupon payments in `fixed`.
--   This assumes `fixingMonths` and `fixingDates` are ordered.
--   The [Daml Finance library](https://github.com/digital-asset/daml-finance) has more
--   feature-complete date handling functions.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Builders.html#function-contingentclaims-core-v3-builders-unrolldates-49024
unrollDates :: Int -> Int -> [Month] -> Int -> [Date]

-- | Forward agreement. Discounted by (potentially stochastic) interest rate `r`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Builders.html#function-contingentclaims-core-v3-builders-forward-17460
forward :: t -> Observation t x o -> Claim t x a o -> Claim t x a o

-- | Forward rate agreement.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Builders.html#function-contingentclaims-core-v3-builders-fra-47282
fra :: t -> t -> Observation t x o -> Observation t x o -> Claim t x a o -> Claim t x a o

-- | Zero Coupon Bond.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Builders.html#function-contingentclaims-core-v3-builders-zcb-50130
zcb :: t -> x -> ccy -> Claim t x ccy o

-- | A floating rate bond.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Builders.html#function-contingentclaims-core-v3-builders-floating-48956
floating :: Observation t x o -> Observation t x o -> ccy -> [t] -> Claim t x ccy o

-- | A (fixed rate) coupon paying bond.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Builders.html#function-contingentclaims-core-v3-builders-fixed-40239
fixed :: x -> x -> ccy -> [t] -> Claim t x ccy o

-- | European option on the input claim. At maturity, the holder must `EXERCISE` or `EXPIRE`
--   the claim. e.g. call option on S&P 500:
--   ```
--   european (date 2021 05 14) (observe "SPX" - pure 4200)
--   ```
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Builders.html#function-contingentclaims-core-v3-builders-european-38509
european :: t -> Claim t x a o -> Claim t x a o

-- | Bermudan option on the input claim. Given a pre-defined set of times
--   {t_1, t_2, .., t_N}, it allows the holder to acquire the underlying claim on at
--   most one of these times.
--   At each election time before maturity, the holder must `EXERCISE` the option or `POSTPONE`.
--   At maturity, the holder must `EXERCISE` or `EXPIRE`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Builders.html#function-contingentclaims-core-v3-builders-bermudan-53632
bermudan :: [t] -> Claim t x a o -> Claim t x a o

-- | American option (knock-in). The lead parameter is the first possible acquisition date.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Builders.html#function-contingentclaims-core-v3-builders-american-12480
american :: t -> t -> Claim t x a o -> Claim t x a o

-- | Asset swap on specific fixing dates `[t]`. For example:
--   ```
--   fixedUsdVsFloatingEur : [t] -> Serializable.Claim Text
--   fixedUsdVsFloatingEur =
--     fixed 100.0 0.02 "USD" `swap` floating (observe "USDEUR" * pure 100.0) (observe "EUR1M") "EUR"
--   ```
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Builders.html#function-contingentclaims-core-v3-builders-swap-11951
swap :: ([t] -> Claim t x a o) -> ([t] -> Claim t x a o) -> [t] -> Claim t x a o

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Claim.html#module-contingentclaims-core-v3-claim-98141
module ContingentClaims.Core.V3.Claim

-- | Constructs a claim without rights or obligations.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Claim.html#function-contingentclaims-core-v3-claim-zero-3849
zero :: Claim t x a o

-- | Constructs a claim that delivers one unit of `a` immediately to the bearer.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Claim.html#function-contingentclaims-core-v3-claim-one-90688
one :: a -> Claim t x a o

-- | Constructs a claim that reverses the obligations of the bearer and their counterparty.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Claim.html#function-contingentclaims-core-v3-claim-give-33092
give :: Claim t x a o -> Claim t x a o

-- | Used to additively combine two claims together. In order to use this,
--   you must import this module qualified or hide the `and` operator from `Prelude`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Claim.html#function-contingentclaims-core-v3-claim-and-87779
and :: Claim t x a o -> Claim t x a o -> Claim t x a o

-- | Gives the bearer the right to choose between the input claims. In order to use this,
--   you must import this module qualified or hide the `or` operator from `Prelude`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Claim.html#function-contingentclaims-core-v3-claim-or-29606
or :: Electable t x a o -> Electable t x a o -> Claim t x a o

-- | Used to additively combine a list of claims together. It is equivalent to
--   applying the `and` builder recursively.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Claim.html#function-contingentclaims-core-v3-claim-andlist-16715
andList :: [Claim t x a o] -> Claim t x a o

-- | Gives the bearer the right to choose between the input claims. It is equivalent to
--   applying the `or` builder recursively.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Claim.html#function-contingentclaims-core-v3-claim-orlist-42922
orList :: [Electable t x a o] -> Claim t x a o

-- | Gives the bearer the right to the first claim if predicate is true, else the second
--   claim.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Claim.html#function-contingentclaims-core-v3-claim-cond-30039
cond :: Inequality t x o -> Claim t x a o -> Claim t x a o -> Claim t x a o

-- | Multiplies the input claim by a scaling factor (which can be non-deterministic).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Claim.html#function-contingentclaims-core-v3-claim-scale-39304
scale :: Observation t x o -> Claim t x a o -> Claim t x a o

-- | Acquires the input claim on *the first instant* that `predicate` is true.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Claim.html#function-contingentclaims-core-v3-claim-when-40851
when :: Inequality t x o -> Claim t x a o -> Claim t x a o

-- | Gives the bearer the right to enter a claim at any time `predicate` is true.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Claim.html#function-contingentclaims-core-v3-claim-anytime-15949
anytime :: Inequality t x o -> Text -> Claim t x a o -> Claim t x a o

-- | Expires the input claim on the *first instant* that `predicate` is true.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Claim.html#function-contingentclaims-core-v3-claim-until-21738
until :: Inequality t x o -> Claim t x a o -> Claim t x a o

-- | Replaces parameters in a claims using the input mapping functions.
--   This can be used to e.g. map the time parameter in a claim from `Date` to `Time`, or
--   to map the asset type parameter from an abstract `Text` to a concrete `InstrumentKey`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Claim.html#function-contingentclaims-core-v3-claim-mapparams-95118
mapParams :: (t -> i) -> (i -> t) -> (a -> a') -> (o -> o') -> (x -> x') -> Claim i x a o -> Claim t x' a' o'

-- | Given `t`, constructs a predicate that is `True` for time ≥ `t`, `False` otherwise.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Claim.html#function-contingentclaims-core-v3-claim-at-41106
at :: t -> Inequality t x o

-- | Given `t`, constructs a predicate that is `True` for time ≤ `t`, `False` otherwise.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Claim.html#function-contingentclaims-core-v3-claim-upto-77107
upTo :: t -> Inequality t x a

-- | Given observations `o1` and `o2`, constructs the predicate `o1 ≤ o2`. In order to use this,
--   you must import this module qualified or hide the `(<=)` operator from `Prelude`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Claim.html#function-contingentclaims-core-v3-claim-lteq-65404
(<=) :: Observation t x o -> Observation t x o -> Inequality t x o

-- | Reify the `Inequality` into an observation function.
--   This function is used to convert an abstract predicate, e.g. `S ≤ 50.0` to the actual boolean
--   observation function `t -> m Bool`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Claim.html#function-contingentclaims-core-v3-claim-compare-90781
compare :: (Ord t, Ord x, Number x, Divisible x, CanAbort m) => (o -> t -> m x) -> Inequality t x o -> t -> m Bool

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Internal-Claim.html#module-contingentclaims-core-v3-internal-claim-26517
module ContingentClaims.Core.V3.Internal.Claim

-- | Core data type used to model cashflows of instruments.
--   In the reference paper from Peyton-Jones this is called 'Contract'.
--   We renamed it to avoid ambiguity.
--   * `t` corresponds to the time parameter.
--   * `x` corresponds to the `Observation` output type. An observation is a function from `t` to `x`.
--      A common choice is to use `Time` and `Decimal`, respectively.
--   * `a` is the representation of a deliverable asset, e.g. a `Text` ISIN code or
--      an `InstrumentKey`.
--   * `o` is the representation of an observable, e.g. a `Text`.
--   
--   You should build the `Claim` using the smart constructors (e.g. `zero`, `and`) instead of using
--   the data constructors directly (`Zero`, `And`).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Internal-Claim.html#type-contingentclaims-core-v3-internal-claim-claim-83050
data Claim t x a o

-- | Represents an absence of claims. Monoid `And` identity.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Internal-Claim.html#constr-contingentclaims-core-v3-internal-claim-zero-31124
Zero :: Claim

-- | The bearer acquires one unit of `a` *immediately*.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Internal-Claim.html#constr-contingentclaims-core-v3-internal-claim-one-23555
One :: a -> Claim

-- | The obligations of the bearer and the counterparty are reversed.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Internal-Claim.html#constr-contingentclaims-core-v3-internal-claim-give-76565
Give :: Claim t x a o -> Claim

-- | Used to combine multiple rights together.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Internal-Claim.html#constr-contingentclaims-core-v3-internal-claim-and-71128
And :: Claim t x a o -> Claim t x a o -> [Claim t x a o] -> Claim

a1 :: Claim -> Claim t x a o

a2 :: Claim -> Claim t x a o

as :: Claim -> [Claim t x a o]

-- | Gives the bearer the right to choose between several claims.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Internal-Claim.html#constr-contingentclaims-core-v3-internal-claim-or-27599
Or :: Electable t x a o -> Electable t x a o -> [Electable t x a o] -> Claim

or1 :: Claim -> Electable t x a o

or2 :: Claim -> Electable t x a o

ors :: Claim -> [Electable t x a o]

-- | Gives the bearer the right to the first claim if `predicate` is true, else the second
--   claim.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Internal-Claim.html#constr-contingentclaims-core-v3-internal-claim-cond-68070
Cond :: Inequality t x o -> Claim t x a o -> Claim t x a o -> Claim

predicate :: Claim -> Inequality t x o

success :: Claim -> Claim t x a o

failure :: Claim -> Claim t x a o

-- | Multiplies the `claim` by `k` (which can be non-deterministic).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Internal-Claim.html#constr-contingentclaims-core-v3-internal-claim-scale-6591
Scale :: Observation t x o -> Claim t x a o -> Claim

k :: Claim -> Observation t x o

claim :: Claim -> Claim t x a o

-- | Defers the acquisition of `claim` until *the first instant* that `predicate` is true.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Internal-Claim.html#constr-contingentclaims-core-v3-internal-claim-when-80674
When :: Inequality t x o -> Claim t x a o -> Claim

predicate :: Claim -> Inequality t x o

claim :: Claim -> Claim t x a o

-- | Gives the bearer the right to enter a claim at any time the predicate is true.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Internal-Claim.html#constr-contingentclaims-core-v3-internal-claim-anytime-82510
Anytime :: Inequality t x o -> Electable t x a o -> Claim

predicate :: Claim -> Inequality t x o

electable :: Claim -> Electable t x a o

-- | Expires said claim on the *first instant* that `predicate` is true.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Internal-Claim.html#constr-contingentclaims-core-v3-internal-claim-until-16645
Until :: Inequality t x o -> Claim t x a o -> Claim

predicate :: Claim -> Inequality t x o

claim :: Claim -> Claim t x a o

-- | Type synonym for sub-trees that can be elected in an `Or` or `Anytime` node.
--   The textual tag is used to identify each sub-tree when an election is made.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Internal-Claim.html#type-contingentclaims-core-v3-internal-claim-electable-24443
type Electable t x a o = (Text, Claim t x a o)

-- | Data type for boolean predicates supported by the library.
--   A boolean predicate is a generic function with signature `t -> Bool`. However, a limited
--   set of predicates is currently supported.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Internal-Claim.html#type-contingentclaims-core-v3-internal-claim-inequality-10348
data Inequality t x o

-- | `True` when `time ≥ t`, `False` otherwise.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Internal-Claim.html#constr-contingentclaims-core-v3-internal-claim-timegte-43192
TimeGte :: t -> Inequality

-- | `True` when `time ≤ t`, `False` otherwise.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Internal-Claim.html#constr-contingentclaims-core-v3-internal-claim-timelte-59631
TimeLte :: t -> Inequality

-- | `True` when `o(t) ≤ o'(t)`, `False` otherwise, for a pair of observations `o`, `o'`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Internal-Claim.html#constr-contingentclaims-core-v3-internal-claim-lte-64386
Lte :: (Observation t x o, Observation t x o) -> Inequality

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Observation.html#module-contingentclaims-core-v3-observation-36021
module ContingentClaims.Core.V3.Observation

-- | Implementation of market observables.
--   Conceptually it is helpful to think of this as the type `t -> x`, or `t -> Update x`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Observation.html#type-contingentclaims-core-v3-observation-observation-12406
data Observation t x o

-- | A numerical constant, e.g. `10.0`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Observation.html#constr-contingentclaims-core-v3-observation-const-3622
Const :: x -> Observation

value :: Observation -> x

-- | A named parameter, e.g. "LIBOR 3M".
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Observation.html#constr-contingentclaims-core-v3-observation-observe-27981
Observe :: o -> Observation

key :: Observation -> o

-- | A named parameter, e.g. "LIBOR 3M", observed at an explicit point in time.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Observation.html#constr-contingentclaims-core-v3-observation-observeat-93788
ObserveAt :: o -> t -> Observation

key :: Observation -> o

t :: Observation -> t

-- | Sum of two observations.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Observation.html#constr-contingentclaims-core-v3-observation-add-94052
Add :: (Observation t x o, Observation t x o) -> Observation

-- | Opposite of an observation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Observation.html#constr-contingentclaims-core-v3-observation-neg-23251
Neg :: Observation t x o -> Observation

-- | Product of two observations.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Observation.html#constr-contingentclaims-core-v3-observation-mul-55491
Mul :: (Observation t x o, Observation t x o) -> Observation

-- | Division of two observations.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Observation.html#constr-contingentclaims-core-v3-observation-div-92700
Div :: (Observation t x o, Observation t x o) -> Observation

-- | Smart constructor for `Const`. Lifts a constant to an observation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Observation.html#function-contingentclaims-core-v3-observation-pure-70485
pure :: x -> Observation t x o

-- | Smart constructor for `Observe`. Looks up the value of `o`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Observation.html#function-contingentclaims-core-v3-observation-observe-67896
observe :: o -> Observation t x o

-- | Reify the `Observation` into an observation function.
--   This function is used to convert an abstract observation, e.g. `LIBOR 3M + 0.005` to the actual
--   observation function `t -> m x`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Observation.html#function-contingentclaims-core-v3-observation-eval-64097
eval :: (Ord t, Number x, Divisible x, CanAbort m) => (o -> t -> m x) -> Observation t x o -> t -> m x

-- | The functor map operation _and_ also map any parameters to keys.
--   For example, could map the param "spot" to an ISIN code "GB123456789".
--   Also contra-maps time parameter, i.e. from relative time values to absolute ones.
--   
--   @ mapParams identity = bimap
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Observation.html#function-contingentclaims-core-v3-observation-mapparams-5210
mapParams :: (i -> t) -> (o -> o') -> (x -> x') -> Observation i x o -> Observation t x' o'

-- | This module collects a set of utilities used to execute recursion schemes.
--   The morphisms ending in 'M' are monadic variants, allowing to interleave, e.g., `Update` or
--   `Script`. `cataM` after Tim Williams' talk, https://www.youtube.com/watch?v=Zw9KeP3OzpU.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Util-Recursion.html#module-contingentclaims-core-v3-util-recursion-82116
module ContingentClaims.Core.V3.Util.Recursion

-- | Monadic paramorphism.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Util-Recursion.html#function-contingentclaims-core-v3-util-recursion-param-97666
paraM :: (Monad m, Traversable f, Recursive b f) => (f (b, a) -> m a) -> b -> m a

-- | Monadic anamorphism.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Util-Recursion.html#function-contingentclaims-core-v3-util-recursion-anam-92357
anaM :: (Monad m, Traversable f, Corecursive b f) => (a -> m (f a)) -> a -> m b

-- | Monadic apomorphism.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Util-Recursion.html#function-contingentclaims-core-v3-util-recursion-apom-39861
apoM :: (Monad m, Traversable f, Corecursive b f) => (a -> m (f (Either b a))) -> a -> m b

-- | Monadic futumorphism.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Util-Recursion.html#function-contingentclaims-core-v3-util-recursion-futum-43934
futuM :: (Monad m, Traversable f, Corecursive b f) => (a -> m (f (Free f a))) -> a -> m b

-- | Monadic lazy unfold (apoM) followed by a fold (cata).
--   This Specialised lazy re-fold is used by `lifecycle`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Util-Recursion.html#function-contingentclaims-core-v3-util-recursion-apocatam-92534
apoCataM :: (Monad m, Traversable f, Corecursive b f) => (f b -> b) -> (a -> m (f (Either b a))) -> a -> m b

-- | A modified `hylo` (refold), whith an interleaved monad effect (typically `Update`).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Util-Recursion.html#function-contingentclaims-core-v3-util-recursion-hylom-99842
hyloM :: (Traversable f, Monad n) => (f b -> b) -> (a -> n (f a)) -> a -> n b

-- | Generalised hylomorphism (with monadic unfold).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Util-Recursion.html#function-contingentclaims-core-v3-util-recursion-ghylom-43146
ghyloM :: (Comonad w, Traversable f, Monad m, Traversable m, Monad n) => (f (w c) -> w (f c)) -> (m (f d) -> f (m d)) -> (f (w b) -> b) -> (a -> n (f (m a))) -> a -> n b

-- | Functor unzip.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Util-Recursion.html#function-contingentclaims-core-v3-util-recursion-funzip-60224
funzip :: (Functor f) => f (a, b) -> (f a, f b)

-- | Annotate a recursive type bottom-up.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Util-Recursion.html#function-contingentclaims-core-v3-util-recursion-synthesize-71760
synthesize :: (Functor f, Recursive b f) => (f attr -> attr) -> b -> Cofree f attr

-- | Annotate a recursive type top-down.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Core-V3-Util-Recursion.html#function-contingentclaims-core-v3-util-recursion-inherit-91210
inherit :: (Functor f, Corecursive b f, Recursive b f) => (b -> attr -> attr) -> attr -> b -> Cofree f attr

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Lifecycle-V3-Lifecycle.html#module-contingentclaims-lifecycle-v3-lifecycle-61551
module ContingentClaims.Lifecycle.V3.Lifecycle

-- | Used to specify pending payments.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Lifecycle-V3-Lifecycle.html#type-contingentclaims-lifecycle-v3-lifecycle-pending-58851
data Pending t a

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Lifecycle-V3-Lifecycle.html#constr-contingentclaims-lifecycle-v3-lifecycle-pending-38284
Pending :: t -> Decimal -> a -> Pending

-- | Payment time.
t :: Pending -> t

-- | Amount of asset to be paid.
amount :: Pending -> Decimal

-- | Asset in which the payment is denominated.
asset :: Pending -> a

-- | Returned from a `lifecycle` operation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Lifecycle-V3-Lifecycle.html#type-contingentclaims-lifecycle-v3-lifecycle-result-98744
data Result t a o

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Lifecycle-V3-Lifecycle.html#constr-contingentclaims-lifecycle-v3-lifecycle-result-1445
Result :: [Pending t a] -> C t a o -> Result

-- | Payments requiring settlement.
pending :: Result -> [Pending t a]

-- | The tree after lifecycled branches have been pruned.
remaining :: Result -> C t a o

-- | Collect claims falling due into a list, and return the tree with those nodes pruned.
--   `m` will typically be `Update`. It is parametrised so it can be run in a `Script`. The first
--   argument is used to lookup the value of any `Observables`. Returns the pruned tree + pending
--   settlements up to the provided market time.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Lifecycle-V3-Lifecycle.html#function-contingentclaims-lifecycle-v3-lifecycle-lifecycle-11948
lifecycle :: (Ord t, Eq a, CanAbort m) => (o -> t -> m Decimal) -> C t a o -> t -> t -> m (Result t a o)

-- | Acquire `Anytime` and `Or` nodes, by making an election.
--   Import this `qualified` to avoid clashes with `Prelude.exercise`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Lifecycle-V3-Lifecycle.html#function-contingentclaims-lifecycle-v3-lifecycle-exercise-91455
exercise :: (Ord t, Eq a, Eq o, CanAbort m) => (o -> t -> m Decimal) -> (Bool, Text) -> C t a o -> t -> t -> m (C t a o)

-- | This module defines a set of utility functions to extract information from claim trees.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Lifecycle-V3-Util.html#module-contingentclaims-lifecycle-v3-util-47746
module ContingentClaims.Lifecycle.V3.Util

-- | Return the fixing dates of a claim. This does not discriminate between optional dates which
--   *may* result from a condition, and outright fixings. It also does not correctly account for
--   malformed trees, where subtrees are orphaned due to impossible `When` statements, e.g.,
--   `When (t > 1) ((When t < 1) _)`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Lifecycle-V3-Util.html#function-contingentclaims-lifecycle-v3-util-fixings-58971
fixings :: Claim t x a o -> [t]

-- | Return the time after which the claim is worthless, i.e., value = 0, if such a time exists.
--   Also known as 'maturity' or 'horizon' in the Eber/Jones paper.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Lifecycle-V3-Util.html#function-contingentclaims-lifecycle-v3-util-expiry-61667
expiry :: (Ord t) => Claim t x a o -> Optional t

-- | Return a list of possible scale-factor/payoff pairs.
--   This does not discriminate between conditional and outright payoffs.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Lifecycle-V3-Util.html#function-contingentclaims-lifecycle-v3-util-payoffs-58129
payoffs :: (Eq t, Eq x, Eq o, Multiplicative x) => Claim t x a o -> [(Observation t x o, a)]

-- | Prunes sub-trees which are `Zero`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Lifecycle-V3-Util.html#function-contingentclaims-lifecycle-v3-util-prunezeros-98191
pruneZeros :: Claim t x a o -> Claim t x a o

-- | Checks if a claim is the `Zero` claim.
--   This avoids requiring the equality type constraint on `a`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Lifecycle-V3-Util.html#function-contingentclaims-lifecycle-v3-util-iszero-36536
isZero :: Claim t x a o -> Bool

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-MathML.html#module-contingentclaims-valuation-v0-mathml-62715
module ContingentClaims.Valuation.V0.MathML

-- | Renders an `Expr` into MathML presentation format.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-MathML.html#class-contingentclaims-valuation-v0-mathml-toxml-72689
class ToXml a

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-MathML.html#function-contingentclaims-valuation-v0-mathml-presentation-1921
presentation :: (ToXml a) => a -> Xml

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#module-contingentclaims-valuation-v0-stochastic-56833
module ContingentClaims.Valuation.V0.Stochastic

-- | Represents an expression of t-adapted stochastic processes.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#type-contingentclaims-valuation-v0-stochastic-expr-82442
data Expr t

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-const-71966
Const :: Decimal -> Expr

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-ident-86121
Ident :: t -> Expr

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-proc-56280
Proc :: Text -> Process t -> t -> Expr

name :: Expr -> Text

process :: Expr -> Process t

filtration :: Expr -> t

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-sup-94161
Sup :: t -> t -> Expr t -> Expr

lowerBound :: Expr -> t

tau :: Expr -> t

rv :: Expr -> Expr t

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-sum-92340
Sum :: [Expr t] -> Expr

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-neg-91387
Neg :: Expr t -> Expr

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-mul-16891
Mul :: (Expr t, Expr t) -> Expr

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-pow-21779
Pow :: (Expr t, Expr t) -> Expr

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-i-81978
I :: (Expr t, Expr t) -> Expr

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-e-99358
E :: Expr t -> t -> Expr

rv :: Expr -> Expr t

filtration :: Expr -> t

-- | Base functor for `Expr`. Note that this is ADT is re-used in a couple of places, e.g.,
--   `Process`, where however not every choice is legal and will lead to a partial evaluator.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#type-contingentclaims-valuation-v0-stochastic-exprf-29267
data ExprF t x

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-constf-84247
ConstF :: Decimal -> ExprF

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-identf-45154
IdentF :: t -> ExprF

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-procf-39361
ProcF :: Text -> Process t -> t -> ExprF

name :: ExprF -> Text

process :: ExprF -> Process t

filtration :: ExprF -> t

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-supf-18986
SupF :: t -> t -> x -> ExprF

lowerBound :: ExprF -> t

tau :: ExprF -> t

rv :: ExprF -> x

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-sumf-98637
SumF :: [x] -> ExprF

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-negf-42352
NegF :: x -> ExprF

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-mulf-30384
MulF :: x -> x -> ExprF

lhs :: ExprF -> x

rhs :: ExprF -> x

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-powf-37144
PowF :: x -> x -> ExprF

lhs :: ExprF -> x

rhs :: ExprF -> x

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-if-59875
I_F :: x -> x -> ExprF

lhs :: ExprF -> x

rhs :: ExprF -> x

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-ef-89015
E_F :: x -> t -> ExprF

rv :: ExprF -> x

filtration :: ExprF -> t

-- | A stochastic processes. Currently this represents a Geometric Browniam Motion, i.e.,
--   dX / X = α dt + β dW. Eventually, we wish to support other processes such as Levy.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#type-contingentclaims-valuation-v0-stochastic-process-65587
data Process t

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#constr-contingentclaims-valuation-v0-stochastic-process-63762
Process :: Expr t -> Expr t -> Process

dt :: Process -> Expr t

dW :: Process -> Expr t

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#class-contingentclaims-valuation-v0-stochastic-isidentifier-37443
class IsIdentifier t

-- | Produce a local identifier of type `t`, subindexed by `i`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#function-contingentclaims-valuation-v0-stochastic-localvar-89955
localVar :: (IsIdentifier t) => Int -> t

-- | Helper function to create a riskless process `dS = r dt`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#function-contingentclaims-valuation-v0-stochastic-riskless-1905
riskless :: t -> Process t

-- | Helper function to create a geometric BM `dS = μ dt + σ dW`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#function-contingentclaims-valuation-v0-stochastic-gbm-47520
gbm :: t -> t -> Process t

-- | Converts a `Claim` into the Fundamental Asset Pricing Formula. The ϵ expressions are defined as
--   E1-E10 in the Eber/Peyton-Jones paper.
--   This is still an experimental feature.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#function-contingentclaims-valuation-v0-stochastic-fapf-50426
fapf :: (Eq a, Show a, Show o, IsIdentifier t) => a -> (a -> Process t) -> (a -> a -> Process t) -> (o -> Process t) -> t -> Claim t Decimal a o -> Expr t

-- | This is meant to be a function that algebraically simplifies the FAPF by
--   1) using simple identities and ring laws
--   2) change of numeraire technique.
--   This is still an experimental feature.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/ContingentClaims-Valuation-V0-Stochastic.html#function-contingentclaims-valuation-v0-stochastic-simplify-87254
simplify :: Expr t -> Expr t

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Account-V4-Account.html#module-daml-finance-account-v4-account-5834
module Daml.Finance.Account.V4.Account

-- | Type synonym for `Account`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Account-V4-Account.html#type-daml-finance-account-v4-account-t-56807
type T = Account

-- | A relationship between a custodian and an asset owner. It is referenced by holdings.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Account-V4-Account.html#type-daml-finance-account-v4-account-account-35720
data (Template Account) => Account

-- | A relationship between a custodian and an asset owner. It is referenced by holdings.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Account-V4-Account.html#type-daml-finance-account-v4-account-account-35720
Account :: Party -> Party -> Optional Lock -> Controllers -> Id -> Text -> HoldingFactoryKey -> PartiesMap -> Account

-- | The account provider.
custodian :: Account -> Party

-- | The account owner.
owner :: Account -> Party

-- | An optional lock for the account.
lock :: Account -> Optional Lock

-- | Controllers of transfers.
controllers :: Account -> Controllers

-- | Identifier of the account.
id :: Account -> Id

-- | Description of the account.
description :: Account -> Text

-- | Associated holding factory.
holdingFactory :: Account -> HoldingFactoryKey

-- | Observers.
observers :: Account -> PartiesMap

-- | Template used to create accounts.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Account-V4-Account.html#type-daml-finance-account-v4-account-factory-19307
data (Template Factory) => Factory

-- | Template used to create accounts.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Account-V4-Account.html#type-daml-finance-account-v4-account-factory-19307
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Lifecycle-Rule.html#module-daml-finance-claims-v3-lifecycle-rule-196
module Daml.Finance.Claims.V3.Lifecycle.Rule

-- | Rule to process an event for instruments that are modelled using "on-the-fly" claims
--   (the tree is not stored on-ledger but generated dynamically).
--   This rule supports both time update events and election events.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Lifecycle-Rule.html#type-daml-finance-claims-v3-lifecycle-rule-rule-14024
data (Template Rule) => Rule

-- | Rule to process an event for instruments that are modelled using "on-the-fly" claims
--   (the tree is not stored on-ledger but generated dynamically).
--   This rule supports both time update events and election events.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Lifecycle-Rule.html#type-daml-finance-claims-v3-lifecycle-rule-rule-14024
Rule :: Parties -> Party -> PartiesMap -> Id -> Text -> Rule

-- | Providers of the lifecycling rule.
providers :: Rule -> Parties

-- | Party performing the lifecycling.
lifecycler :: Rule -> Party

-- | Observers of the rule.
observers :: Rule -> PartiesMap

-- | Identifier for the rule contract.
id :: Rule -> Id

-- | Textual description.
description :: Rule -> Text

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util.html#module-daml-finance-claims-v3-util-10150
module Daml.Finance.Claims.V3.Util

-- | Checks if all input claims are zero.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util.html#function-daml-finance-claims-v3-util-iszero-80616
isZero :: Party -> I -> Update Bool

-- | Checks if all input claims are zero.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util.html#function-daml-finance-claims-v3-util-iszerotick-62164
isZero' :: [TaggedClaim] -> Bool

-- | Maps the time parameter in a `Claim` to `Time`. As `Time` is generally understood to express
--   UTC time, we recommend mapping to UTC time.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util.html#function-daml-finance-claims-v3-util-totime-8910
toTime :: (t -> Time) -> Claim t x a o -> Claim Time x a o

-- | This module includes utility functions used to build contingent claim trees that represent
--   specific payoffs. A `Schedule` is usually used as an input to these utility functions. Given
--   that schedules are defined in terms of dates, a claim where the time parameter is `Date`
--   is returned. These are then mapped to claims where the time parameter is `Time` using a
--   (user-provided) conversion function.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Builders.html#module-daml-finance-claims-v3-util-builders-30825
module Daml.Finance.Claims.V3.Util.Builders

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Builders.html#type-daml-finance-claims-v3-util-builders-c-48597
type C = Claim Date Decimal Deliverable Observable

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Builders.html#type-daml-finance-claims-v3-util-builders-fixingdates-31766
type FixingDates = DateOffset

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Builders.html#type-daml-finance-claims-v3-util-builders-o-737
type O = Observation Date Decimal Observable

-- | Convert the claims to UTCTime and tag them.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Builders.html#function-daml-finance-claims-v3-util-builders-prepareandtagclaims-21771
prepareAndTagClaims :: (Date -> Time) -> [C] -> Text -> TaggedClaim

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Builders.html#function-daml-finance-claims-v3-util-builders-createfixratepaymentclaimslist-63253
createFixRatePaymentClaimsList :: Schedule -> PeriodicSchedule -> Bool -> Decimal -> Bool -> DayCountConventionEnum -> Decimal -> Deliverable -> [C]

-- | Calculate a fix rate amount for each payment date and create claims.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Builders.html#function-daml-finance-claims-v3-util-builders-createfixratepaymentclaims-27509
createFixRatePaymentClaims :: (Date -> Time) -> Schedule -> PeriodicSchedule -> Bool -> Decimal -> Bool -> DayCountConventionEnum -> Decimal -> Deliverable -> TaggedClaim

-- | Calculate a floating rate amount for each payment date and create claims.
--   This is a general function that supports both LIBOR and SOFR-COMPOUND reference rates.
--   It also supports a fix rate spread. If no floating rate is provided, only the fix spread is used,
--   i.e. fix rate claims are created.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Builders.html#function-daml-finance-claims-v3-util-builders-createratepaymentclaims-74999
createRatePaymentClaims :: (Date -> Time) -> Schedule -> PeriodicSchedule -> Bool -> Decimal -> Bool -> DayCountConventionEnum -> Decimal -> Deliverable -> Optional FloatingRate -> HolidayCalendarData -> TaggedClaim

-- | Calculate a fix rate amount (if a credit event has not yet happened) for each payment date and
--   create claims.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Builders.html#function-daml-finance-claims-v3-util-builders-createconditionalcreditfixratepaymentclaims-48891
createConditionalCreditFixRatePaymentClaims :: (Date -> Time) -> Schedule -> PeriodicSchedule -> Bool -> Decimal -> Bool -> DayCountConventionEnum -> Decimal -> Deliverable -> Observable -> TaggedClaim

-- | Calculate a (1-recoveryRate) payment if a credit event just happened and create claims.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Builders.html#function-daml-finance-claims-v3-util-builders-createcrediteventpaymentclaims-78091
createCreditEventPaymentClaims :: (Date -> Time) -> Bool -> Decimal -> Deliverable -> Observable -> Observable -> PeriodicSchedule -> TaggedClaim

-- | Calculate the asset performance for each payment date and create claims.
--   The performance is calculated using the weighted performance of the basket underlyings from the
--   start date to the end date of each payment period.
--   The reference asset Observables need to contain the appropriate type of fixings:
--     - unadjusted fixings in case of a price return asset swap
--     - adjusted fixings in case of a total return asset swap
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Builders.html#function-daml-finance-claims-v3-util-builders-createassetperformancepaymentclaims-53211
createAssetPerformancePaymentClaims :: (Date -> Time) -> Schedule -> PeriodicSchedule -> Bool -> Bool -> DayCountConventionEnum -> Decimal -> Deliverable -> [(Text, Decimal)] -> TaggedClaim

-- | Create an FX adjusted principal claim.
--   This can be used for both FX swaps (using the appropriate FX rate) and single currency bonds
--   (setting the FX rate to 1.0).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Builders.html#function-daml-finance-claims-v3-util-builders-createfxadjustedprincipalclaim-27271
createFxAdjustedPrincipalClaim :: (Date -> Time) -> Bool -> Decimal -> Decimal -> Deliverable -> Date -> TaggedClaim

-- | Create the claim for a long vanilla option (cash-settled, automatically exercised).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Builders.html#function-daml-finance-claims-v3-util-builders-createvanillaoptionclaim-23305
createVanillaOptionClaim :: (Date -> Time) -> Decimal -> Observable -> Deliverable -> Date -> Bool -> Optional Decimal -> Decimal -> C

-- | Create the claim for a cash-settled, automatically exercised option (long or short).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Builders.html#function-daml-finance-claims-v3-util-builders-createeuropeancashclaim-21554
createEuropeanCashClaim :: (Date -> Time) -> Bool -> Decimal -> Observable -> Deliverable -> Date -> Bool -> Optional Decimal -> Decimal -> TaggedClaim

-- | Create the claim for a barrier option (automatically exercised, cash-settled).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Builders.html#function-daml-finance-claims-v3-util-builders-createbarriereuropeancashclaim-79552
createBarrierEuropeanCashClaim :: (Date -> Time) -> Bool -> Decimal -> Observable -> Deliverable -> Date -> Bool -> Decimal -> Date -> Bool -> Bool -> Optional Decimal -> Decimal -> TaggedClaim

-- | Create the claim for a physically settled European option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Builders.html#function-daml-finance-claims-v3-util-builders-createeuropeanphysicalclaim-64168
createEuropeanPhysicalClaim :: (Date -> Time) -> Bool -> Decimal -> Deliverable -> Deliverable -> Date -> Bool -> TaggedClaim

-- | Create the claim for a physically settled Dividend option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Builders.html#function-daml-finance-claims-v3-util-builders-createdividendoptionclaim-35992
createDividendOptionClaim :: (Date -> Time) -> Date -> InstrumentQuantity -> Optional InstrumentQuantity -> Optional InstrumentQuantity -> TaggedClaim

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Date.html#module-daml-finance-claims-v3-util-date-8229
module Daml.Finance.Claims.V3.Util.Date

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Date.html#type-daml-finance-claims-v3-util-date-o-78065
type O = Observation Date Decimal Observable

-- | Calculate a conversion factor if the dcf used for a floating rate compounded index does not
--   match the dcf used for an instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Date.html#function-daml-finance-claims-v3-util-date-convertimplicitdcftoactualdcf-21923
convertImplicitDcfToActualDcf :: O -> SchedulePeriod -> Bool -> PeriodicSchedule -> DayCountConventionEnum -> O

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Lifecycle.html#module-daml-finance-claims-v3-util-lifecycle-43238
module Daml.Finance.Claims.V3.Util.Lifecycle

-- | Constructor for a time event.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Lifecycle.html#function-daml-finance-claims-v3-util-lifecycle-timeevent-64726
timeEvent :: Time -> EventData

-- | Constructor for an election event.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Lifecycle.html#function-daml-finance-claims-v3-util-lifecycle-electionevent-54352
electionEvent :: Time -> Bool -> Text -> EventData

-- | Lifecycle a set of claims at specified events.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Lifecycle.html#function-daml-finance-claims-v3-util-lifecycle-lifecycleclaims-45610
lifecycleClaims :: [ContractId I] -> Time -> [TaggedClaim] -> [EventData] -> Update ([TaggedClaim], [Pending])

-- | Net pending payments on the same instrument, which also have the same tag.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Lifecycle.html#function-daml-finance-claims-v3-util-lifecycle-netontag-25394
netOnTag :: [Pending] -> [Pending]

-- | Lifecycle a claim instrument at specified events.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Lifecycle.html#function-daml-finance-claims-v3-util-lifecycle-lifecycle-71991
lifecycle :: Party -> [ContractId I] -> I -> [EventData] -> Update ([TaggedClaim], [Pending])

-- | Map pending settlements into corresponding instrument quantities and split them into consumed
--   and produced. Pending items with an amount of `0.0` are discarded.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Claims-V3-Util-Lifecycle.html#function-daml-finance-claims-v3-util-lifecycle-splitpending-46301
splitPending :: [Pending] -> ([InstrumentQuantity], [InstrumentQuantity])

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Numeric-Observation.html#module-daml-finance-data-v4-numeric-observation-19522
module Daml.Finance.Data.V4.Numeric.Observation

-- | Type synonym for `Observation`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Numeric-Observation.html#type-daml-finance-data-v4-numeric-observation-t-41827
type T = Observation

-- | Implementation of the corresponding Observation Factory.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Numeric-Observation.html#type-daml-finance-data-v4-numeric-observation-factory-28223
data (Template Factory) => Factory

-- | Implementation of the corresponding Observation Factory.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Numeric-Observation.html#type-daml-finance-data-v4-numeric-observation-factory-28223
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

-- | An implementation of `NumericObservable` that explicitly stores time-dependent numerical
--   values. For example, it can be used for equity or rate fixings.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Numeric-Observation.html#type-daml-finance-data-v4-numeric-observation-observation-13815
data (Template Observation) => Observation

-- | An implementation of `NumericObservable` that explicitly stores time-dependent numerical
--   values. For example, it can be used for equity or rate fixings.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Numeric-Observation.html#type-daml-finance-data-v4-numeric-observation-observation-13815
Observation :: Party -> Id -> Map Time Decimal -> PartiesMap -> Observation

-- | The reference data provider.
provider :: Observation -> Party

-- | A textual identifier.
id :: Observation -> Id

-- | The time-dependent values.
observations :: Observation -> Map Time Decimal

-- | Observers.
observers :: Observation -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Reference-HolidayCalendar.html#module-daml-finance-data-v4-reference-holidaycalendar-15110
module Daml.Finance.Data.V4.Reference.HolidayCalendar

-- | Key used to look up the holiday calendar of an entity, as defined by a reference data provider.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Reference-HolidayCalendar.html#type-daml-finance-data-v4-reference-holidaycalendar-holidaycalendarkey-90417
data HolidayCalendarKey

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Reference-HolidayCalendar.html#constr-daml-finance-data-v4-reference-holidaycalendar-holidaycalendarkey-7166
HolidayCalendarKey :: Party -> Text -> HolidayCalendarKey

-- | The party maintaining the `HolidayCalendar`.
provider :: HolidayCalendarKey -> Party

-- | A textual label identifying the calendar (e.g. "NYSE" for the New York Stock Exchange
--   holiday calendar).
id :: HolidayCalendarKey -> Text

-- | Retrieve holiday calendar(s) from the ledger.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Reference-HolidayCalendar.html#function-daml-finance-data-v4-reference-holidaycalendar-getholidaycalendars-73504
getHolidayCalendars :: Party -> Party -> [Text] -> Update [HolidayCalendarData]

-- | Retrieve holiday calendar(s) from the ledger and roll out a schedule.
--   Returns the rolled schedule and the required calendars.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Reference-HolidayCalendar.html#function-daml-finance-data-v4-reference-holidaycalendar-rollschedule-90182
rollSchedule :: ([Text] -> Update [HolidayCalendarData]) -> PeriodicSchedule -> [Text] -> Update (Schedule, [HolidayCalendarData])

-- | Implementation of the corresponding HolidayCalendar Factory.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Reference-HolidayCalendar.html#type-daml-finance-data-v4-reference-holidaycalendar-factory-82307
data (Template Factory) => Factory

-- | Implementation of the corresponding HolidayCalendar Factory.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Reference-HolidayCalendar.html#type-daml-finance-data-v4-reference-holidaycalendar-factory-82307
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

-- | Holiday calendar of an entity (typically an exchange or a currency).
--   It is maintained by a reference data provider.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Reference-HolidayCalendar.html#type-daml-finance-data-v4-reference-holidaycalendar-holidaycalendar-24871
data (Template HolidayCalendar) => HolidayCalendar

-- | Holiday calendar of an entity (typically an exchange or a currency).
--   It is maintained by a reference data provider.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Reference-HolidayCalendar.html#type-daml-finance-data-v4-reference-holidaycalendar-holidaycalendar-24871
HolidayCalendar :: HolidayCalendarData -> PartiesMap -> Party -> HolidayCalendar

-- | Holiday Calendar Data used to define holidays.
calendar :: HolidayCalendar -> HolidayCalendarData

-- | Observers.
observers :: HolidayCalendar -> PartiesMap

-- | The party maintaining the `HolidayCalendar`.
provider :: HolidayCalendar -> Party

-- | Returns the calendar's `HolidayCalendarData`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Reference-HolidayCalendar.html#type-daml-finance-data-v4-reference-holidaycalendar-getcalendar-25827
data (Choice HolidayCalendar GetCalendar HolidayCalendarData) => GetCalendar

-- | Returns the calendar's `HolidayCalendarData`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Reference-HolidayCalendar.html#type-daml-finance-data-v4-reference-holidaycalendar-getcalendar-25827
GetCalendar :: Party -> GetCalendar

-- | The party fetching the calendar.
viewer :: GetCalendar -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Time-DateClock.html#module-daml-finance-data-v4-time-dateclock-1389
module Daml.Finance.Data.V4.Time.DateClock

-- | Type synonym for `DateClock`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Time-DateClock.html#type-daml-finance-data-v4-time-dateclock-t-22118
type T = DateClock

-- | Maps a `Date` to `Time` using the rule in the `DateClock`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Time-DateClock.html#function-daml-finance-data-v4-time-dateclock-datetodateclocktime-8972
dateToDateClockTime :: Date -> Time

-- | A `DateClock` is a template used to keep track of the current date.
--   It implements the `Time` rule interface to be able to advance and rewind business time. It also
--   implements the `TimeObservable` interface. Specifically, each date `D` is mapped to
--   `D 00:00:00 UTC`. If your use-case involves working across multiple time zones, you may need to
--    define multiple `DateClock` templates with specific time conversions.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Time-DateClock.html#type-daml-finance-data-v4-time-dateclock-dateclock-18944
data (Template DateClock) => DateClock

-- | A `DateClock` is a template used to keep track of the current date.
--   It implements the `Time` rule interface to be able to advance and rewind business time. It also
--   implements the `TimeObservable` interface. Specifically, each date `D` is mapped to
--   `D 00:00:00 UTC`. If your use-case involves working across multiple time zones, you may need to
--    define multiple `DateClock` templates with specific time conversions.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Time-DateClock.html#type-daml-finance-data-v4-time-dateclock-dateclock-18944
DateClock :: Parties -> Unit -> Id -> Text -> Parties -> DateClock

-- | The clock's providers.
providers :: DateClock -> Parties

-- | The clock's date.
date :: DateClock -> Unit

-- | The clock's identifier.
id :: DateClock -> Id

-- | The clock's description.
description :: DateClock -> Text

-- | Observers.
observers :: DateClock -> Parties

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Time-DateClock-Types.html#module-daml-finance-data-v4-time-dateclock-types-32520
module Daml.Finance.Data.V4.Time.DateClock.Types

-- | A `Date` which can be converted to `Time`.
--   Specifically, each date `D` is mapped to `D 00:00:00 UTC`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Time-DateClock-Types.html#type-daml-finance-data-v4-time-dateclock-types-unit-49992
data Unit

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Time-DateClock-Types.html#constr-daml-finance-data-v4-time-dateclock-types-unit-64017
Unit :: Date -> Unit

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Time-DateClockUpdate.html#module-daml-finance-data-v4-time-dateclockupdate-59678
module Daml.Finance.Data.V4.Time.DateClockUpdate

-- | Type synonym for `DateClockUpdateEvent`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Time-DateClockUpdate.html#type-daml-finance-data-v4-time-dateclockupdate-t-51075
type T = DateClockUpdateEvent

-- | Event signalling the update of a `DateClock`. It can trigger the execution of lifecycle rules
--   for some instruments.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Time-DateClockUpdate.html#type-daml-finance-data-v4-time-dateclockupdate-dateclockupdateevent-31083
data (Template DateClockUpdateEvent) => DateClockUpdateEvent

-- | Event signalling the update of a `DateClock`. It can trigger the execution of lifecycle rules
--   for some instruments.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Time-DateClockUpdate.html#type-daml-finance-data-v4-time-dateclockupdate-dateclockupdateevent-31083
DateClockUpdateEvent :: Parties -> Date -> Time -> Id -> Text -> Parties -> DateClockUpdateEvent

-- | Providers of the event.
providers :: DateClockUpdateEvent -> Parties

-- | The updated clock data.
date :: DateClockUpdateEvent -> Date

-- | The event time.
eventTime :: DateClockUpdateEvent -> Time

-- | Event identifier.
id :: DateClockUpdateEvent -> Id

-- | Event description.
description :: DateClockUpdateEvent -> Text

-- | The clock's observers.
observers :: DateClockUpdateEvent -> Parties

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Time-LedgerTime.html#module-daml-finance-data-v4-time-ledgertime-80144
module Daml.Finance.Data.V4.Time.LedgerTime

-- | Type synonym for `LedgerTime`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Time-LedgerTime.html#type-daml-finance-data-v4-time-ledgertime-t-27525
type T = LedgerTime

-- | A `LedgerTime` is a template used to retrieve current ledger time as a `TimeObservable`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Time-LedgerTime.html#type-daml-finance-data-v4-time-ledgertime-ledgertime-59708
data (Template LedgerTime) => LedgerTime

-- | A `LedgerTime` is a template used to retrieve current ledger time as a `TimeObservable`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Data-V4-Time-LedgerTime.html#type-daml-finance-data-v4-time-ledgertime-ledgertime-59708
LedgerTime :: Parties -> Id -> Text -> Parties -> LedgerTime

-- | The time providers.
providers :: LedgerTime -> Parties

-- | The ledger time identifier.
id :: LedgerTime -> Id

-- | The ledger time description.
description :: LedgerTime -> Text

-- | Observers.
observers :: LedgerTime -> Parties

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-BaseHolding.html#module-daml-finance-holding-v4-baseholding-28133
module Daml.Finance.Holding.V4.BaseHolding

-- | Type synonym for `BaseHolding`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-BaseHolding.html#type-daml-finance-holding-v4-baseholding-t-71378
type T = BaseHolding

-- | Implementation of a `BaseHolding`.
--   `BaseHolding` implements the interface `Holding.I` (which requires `Lockable.I` and
--   `Disclosure.I` to be implemented), but neither `Fungible.I` nor `Transferable.I`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-BaseHolding.html#type-daml-finance-holding-v4-baseholding-baseholding-18612
data (Template BaseHolding) => BaseHolding

-- | Implementation of a `BaseHolding`.
--   `BaseHolding` implements the interface `Holding.I` (which requires `Lockable.I` and
--   `Disclosure.I` to be implemented), but neither `Fungible.I` nor `Transferable.I`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-BaseHolding.html#type-daml-finance-holding-v4-baseholding-baseholding-18612
BaseHolding :: InstrumentKey -> AccountKey -> Decimal -> Optional Lock -> PartiesMap -> BaseHolding

-- | The instrument of which units are held.
instrument :: BaseHolding -> InstrumentKey

-- | The account at which the holding is held. Defines the holding's owner and custodian.
account :: BaseHolding -> AccountKey

-- | Number of units.
amount :: BaseHolding -> Decimal

-- | An optional lock for the holding.
lock :: BaseHolding -> Optional Lock

-- | Observers.
observers :: BaseHolding -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-Factory.html#module-daml-finance-holding-v4-factory-50391
module Daml.Finance.Holding.V4.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-Factory.html#type-daml-finance-holding-v4-factory-t-28124
type T = Factory

-- | Implementation of a factory template for holdings.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-Factory.html#type-daml-finance-holding-v4-factory-factory-39768
data (Template Factory) => Factory

-- | Implementation of a factory template for holdings.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-Factory.html#type-daml-finance-holding-v4-factory-factory-39768
Factory :: Party -> Id -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | Identifier for the factory.
id :: Factory -> Id

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-Fungible.html#module-daml-finance-holding-v4-fungible-60188
module Daml.Finance.Holding.V4.Fungible

-- | Type synonym for `Fungible`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-Fungible.html#type-daml-finance-holding-v4-fungible-t-59201
type T = Fungible

-- | Implementation of a fungible holding.
--   The `Fungible` template implements the interface `Fungible.I` (which requires
--   `Holding.I`, `Lockable.I`, and `Disclosure.I` to be implemented), but not the `Transferable.I`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-Fungible.html#type-daml-finance-holding-v4-fungible-fungible-67336
data (Template Fungible) => Fungible

-- | Implementation of a fungible holding.
--   The `Fungible` template implements the interface `Fungible.I` (which requires
--   `Holding.I`, `Lockable.I`, and `Disclosure.I` to be implemented), but not the `Transferable.I`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-Fungible.html#type-daml-finance-holding-v4-fungible-fungible-67336
Fungible :: InstrumentKey -> AccountKey -> Decimal -> Optional Lock -> PartiesMap -> Fungible

-- | The instrument of which units are held.
instrument :: Fungible -> InstrumentKey

-- | The account at which the holding is held. Defines the holding's owner and custodian.
account :: Fungible -> AccountKey

-- | Number of units.
amount :: Fungible -> Decimal

-- | An optional lock for the holding.
lock :: Fungible -> Optional Lock

-- | Observers.
observers :: Fungible -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-Transferable.html#module-daml-finance-holding-v4-transferable-38649
module Daml.Finance.Holding.V4.Transferable

-- | Type synonym for `Transferable`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-Transferable.html#type-daml-finance-holding-v4-transferable-t-60714
type T = Transferable

-- | Implementation of a transferable holding.
--   `Transferable` implements the interface `Transferable.I` (which requires `Holding.I`,
--   `Lockable.I`, and Disclosure.I` to be implemented), but not the `Fungible.I`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-Transferable.html#type-daml-finance-holding-v4-transferable-transferable-12222
data (Template Transferable) => Transferable

-- | Implementation of a transferable holding.
--   `Transferable` implements the interface `Transferable.I` (which requires `Holding.I`,
--   `Lockable.I`, and Disclosure.I` to be implemented), but not the `Fungible.I`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-Transferable.html#type-daml-finance-holding-v4-transferable-transferable-12222
Transferable :: InstrumentKey -> AccountKey -> Decimal -> Optional Lock -> PartiesMap -> Transferable

-- | The instrument of which units are held.
instrument :: Transferable -> InstrumentKey

-- | The account at which the holding is held. Defines the holding's owner and custodian.
account :: Transferable -> AccountKey

-- | Number of units.
amount :: Transferable -> Decimal

-- | An optional lock for the holding.
lock :: Transferable -> Optional Lock

-- | Observers.
observers :: Transferable -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-TransferableFungible.html#module-daml-finance-holding-v4-transferablefungible-66907
module Daml.Finance.Holding.V4.TransferableFungible

-- | Type synonym for `TransferableFungible`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-TransferableFungible.html#type-daml-finance-holding-v4-transferablefungible-t-82448
type T = TransferableFungible

-- | Implementation of a transferable and fungible holding.
--   The `TransferableFungible` template implements the interface `Fungible.I` and `Transferable.I`
--   (which requires `Holding.I`, `Lockable.I`, and `Disclosure.I` to be implemented).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-TransferableFungible.html#type-daml-finance-holding-v4-transferablefungible-transferablefungible-50906
data (Template TransferableFungible) => TransferableFungible

-- | Implementation of a transferable and fungible holding.
--   The `TransferableFungible` template implements the interface `Fungible.I` and `Transferable.I`
--   (which requires `Holding.I`, `Lockable.I`, and `Disclosure.I` to be implemented).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-TransferableFungible.html#type-daml-finance-holding-v4-transferablefungible-transferablefungible-50906
TransferableFungible :: InstrumentKey -> AccountKey -> Decimal -> Optional Lock -> PartiesMap -> TransferableFungible

-- | The instrument of which units are held.
instrument :: TransferableFungible -> InstrumentKey

-- | The account at which the holding is held. Defines the holding's owner and custodian.
account :: TransferableFungible -> AccountKey

-- | Number of units.
amount :: TransferableFungible -> Decimal

-- | An optional lock for the holding.
lock :: TransferableFungible -> Optional Lock

-- | Observers.
observers :: TransferableFungible -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-Util.html#module-daml-finance-holding-v4-util-71966
module Daml.Finance.Holding.V4.Util

-- | Default implementation of `transfer` for the `Transferable` interface.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-Util.html#function-daml-finance-holding-v4-util-transferimpl-33631
transferImpl :: I -> ContractId I -> Transfer -> Update (ContractId I)

-- | Default implementation of `split` from the `Fungible` interface.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-Util.html#function-daml-finance-holding-v4-util-splitimpl-38681
splitImpl :: (HasCreate t, HasToInterface t I) => I -> (Decimal -> t) -> Split -> Update SplitResult

-- | Default implementation of `merge` from the `Fungible` interface.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Holding-V4-Util.html#function-daml-finance-holding-v4-util-mergeimpl-70989
mergeImpl :: (HasCreate t, HasArchive t, HasSignatory t, HasFromInterface t I, HasToInterface t I) => I -> (t -> Decimal) -> (Decimal -> t) -> Merge -> Update (ContractId I)

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-Callable-Factory.html#module-daml-finance-instrument-bond-v3-callable-factory-64026
module Daml.Finance.Instrument.Bond.V3.Callable.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-Callable-Factory.html#type-daml-finance-instrument-bond-v3-callable-factory-t-94135
type T = Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-Callable-Factory.html#type-daml-finance-instrument-bond-v3-callable-factory-factory-32603
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-Callable-Factory.html#type-daml-finance-instrument-bond-v3-callable-factory-factory-32603
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-Callable-Instrument.html#module-daml-finance-instrument-bond-v3-callable-instrument-35206
module Daml.Finance.Instrument.Bond.V3.Callable.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-Callable-Instrument.html#type-daml-finance-instrument-bond-v3-callable-instrument-t-95027
type T = Instrument

-- | This template models a callable bond.
--   It pays a fixed or a floating coupon rate at the end of every coupon period (unless the bond has
--   been called).
--   Callability is restricted to some (or all) of the coupon dates. This is specified by a separate
--   schedule.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-Callable-Instrument.html#type-daml-finance-instrument-bond-v3-callable-instrument-instrument-58277
data (Template Instrument) => Instrument

-- | This template models a callable bond.
--   It pays a fixed or a floating coupon rate at the end of every coupon period (unless the bond has
--   been called).
--   Callability is restricted to some (or all) of the coupon dates. This is specified by a separate
--   schedule.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-Callable-Instrument.html#type-daml-finance-instrument-bond-v3-callable-instrument-instrument-58277
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> Optional FloatingRate -> Decimal -> Optional Decimal -> Optional Decimal -> PeriodicSchedule -> PeriodicSchedule -> Int -> [Text] -> Party -> DayCountConventionEnum -> Bool -> InstrumentKey -> Decimal -> PartiesMap -> Time -> [EventData] -> Instrument

-- | The depository of the instrument.
depository :: Instrument -> Party

-- | The issuer of the instrument.
issuer :: Instrument -> Party

-- | The identifier of the instrument.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | A description of the floating rate to be used (if applicable). This supports both Libor
--   and SOFR style reference rates (using a compounded index, e.g. the SOFR Index).
floatingRate :: Instrument -> Optional FloatingRate

-- | The fixed coupon rate, per annum. For example, in case of a "3.5% p.a coupon" this should
--   be 0.035. This can also be used as a floating coupon spread. For example, in case of
--   "3M Libor + 0.5%" this should be 0.005.
couponRate :: Instrument -> Decimal

-- | The maximum coupon rate possible. For example, if "3M Libor + 0.5%" would result in a
--   rate of 2.5%, but capRate is 2.0%, the coupon rate used would be 2.0%.
capRate :: Instrument -> Optional Decimal

-- | The minimum coupon rate possible. For example, if "3M Libor + 0.5%" would result in a
--   rate of -0.2%, but floorRate is 0.0%, the coupon rate used would be 0.0%.
floorRate :: Instrument -> Optional Decimal

-- | The schedule for the periodic coupon payments. The coupon is paid on the *last* date of
--   each schedule period.
--   In case of a floating rate, the reference rate will be fixed in relation to this schedule
--   (in case of a Libor rate: at the start/end of each period, as specified by FloatingRate).
--   This is the main schedule of the instrument, which drives both the calculation and the
--   payment of coupons. It also defines the issue date and the maturity date of the bond.
couponSchedule :: Instrument -> PeriodicSchedule

-- | The bond is callable on the *last* date of each schedule period. For example, if this
--   schedule is the same as the couponSchedule, it means that the bond can be called on each
--   coupon payment date.
callSchedule :: Instrument -> PeriodicSchedule

-- | The number of business days in advance of the coupon date that the issuer must give
--   notice if it wants to call the bond. The election whether to call or not to call must be
--   done by this date.
noticeDays :: Instrument -> Int

-- | The identifiers of the holiday calendars to be used for the coupon schedule.
holidayCalendarIds :: Instrument -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: Instrument -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: Instrument -> DayCountConventionEnum

-- | Configure whether to use adjusted dates (as specified in *businessDayAdjustment* of the
--   *couponSchedule*) for day count fractions.
useAdjustedDatesForDcf :: Instrument -> Bool

-- | The currency of the bond. For example, if the bond pays in USD this should be a USD cash
--   instrument.
currency :: Instrument -> InstrumentKey

-- | The notional of the bond. This is the face value corresponding to one unit of the bond
--   instrument. For example, if one bond unit corresponds to 1000 USD, this should be 1000.0.
notional :: Instrument -> Decimal

-- | The observers of the instrument.
observers :: Instrument -> PartiesMap

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Instrument -> Time

-- | A list of previous events that have been lifecycled on this instrument so far.
--   CALLABLE_BOND_TEMPLATE_END
prevEvents :: Instrument -> [EventData]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-FixedRate-Factory.html#module-daml-finance-instrument-bond-v3-fixedrate-factory-55391
module Daml.Finance.Instrument.Bond.V3.FixedRate.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-FixedRate-Factory.html#type-daml-finance-instrument-bond-v3-fixedrate-factory-t-21596
type T = Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-FixedRate-Factory.html#type-daml-finance-instrument-bond-v3-fixedrate-factory-factory-38968
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-FixedRate-Factory.html#type-daml-finance-instrument-bond-v3-fixedrate-factory-factory-38968
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-FixedRate-Instrument.html#module-daml-finance-instrument-bond-v3-fixedrate-instrument-89221
module Daml.Finance.Instrument.Bond.V3.FixedRate.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-FixedRate-Instrument.html#type-daml-finance-instrument-bond-v3-fixedrate-instrument-t-24266
type T = Instrument

-- | This template models a fixed rate bond.
--   It pays a fixed coupon rate at the end of every coupon period.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-FixedRate-Instrument.html#type-daml-finance-instrument-bond-v3-fixedrate-instrument-instrument-67562
data (Template Instrument) => Instrument

-- | This template models a fixed rate bond.
--   It pays a fixed coupon rate at the end of every coupon period.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-FixedRate-Instrument.html#type-daml-finance-instrument-bond-v3-fixedrate-instrument-instrument-67562
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> Decimal -> PeriodicSchedule -> [Text] -> Party -> DayCountConventionEnum -> InstrumentKey -> Decimal -> PartiesMap -> Time -> Instrument

-- | The depository of the instrument.
depository :: Instrument -> Party

-- | The issuer of the instrument.
issuer :: Instrument -> Party

-- | The identifier of the instrument.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | The fixed coupon rate, per annum. For example, in case of a "3.5% p.a coupon" this should
--   be 0.035.
couponRate :: Instrument -> Decimal

-- | The schedule for the periodic coupon payments.
periodicSchedule :: Instrument -> PeriodicSchedule

-- | The identifiers of the holiday calendars to be used for the coupon schedule.
holidayCalendarIds :: Instrument -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: Instrument -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: Instrument -> DayCountConventionEnum

-- | The currency of the bond. For example, if the bond pays in USD this should be a USD cash
--   instrument.
currency :: Instrument -> InstrumentKey

-- | The notional of the bond. This is the face value corresponding to one unit of the bond
--   instrument. For example, if one bond unit corresponds to 1000 USD, this should be 1000.0.
notional :: Instrument -> Decimal

-- | The observers of the instrument.
observers :: Instrument -> PartiesMap

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
--   FIXED_RATE_BOND_TEMPLATE_END
lastEventTimestamp :: Instrument -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-FloatingRate-Factory.html#module-daml-finance-instrument-bond-v3-floatingrate-factory-96062
module Daml.Finance.Instrument.Bond.V3.FloatingRate.Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-FloatingRate-Factory.html#type-daml-finance-instrument-bond-v3-floatingrate-factory-factory-65043
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-FloatingRate-Factory.html#type-daml-finance-instrument-bond-v3-floatingrate-factory-factory-65043
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-FloatingRate-Instrument.html#module-daml-finance-instrument-bond-v3-floatingrate-instrument-82370
module Daml.Finance.Instrument.Bond.V3.FloatingRate.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-FloatingRate-Instrument.html#type-daml-finance-instrument-bond-v3-floatingrate-instrument-t-5291
type T = Instrument

-- | This template models a floating rate bond.
--   It pays a floating coupon rate at the end of every coupon period.
--   This consists of a reference rate (observed at the beginning of the coupon period) plus a coupon
--   spread. For example, 3M Euribor + 0.5%.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-FloatingRate-Instrument.html#type-daml-finance-instrument-bond-v3-floatingrate-instrument-instrument-91965
data (Template Instrument) => Instrument

-- | This template models a floating rate bond.
--   It pays a floating coupon rate at the end of every coupon period.
--   This consists of a reference rate (observed at the beginning of the coupon period) plus a coupon
--   spread. For example, 3M Euribor + 0.5%.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-FloatingRate-Instrument.html#type-daml-finance-instrument-bond-v3-floatingrate-instrument-instrument-91965
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> FloatingRate -> Decimal -> PeriodicSchedule -> [Text] -> Party -> DayCountConventionEnum -> InstrumentKey -> Decimal -> PartiesMap -> Time -> Instrument

-- | The depository of the instrument.
depository :: Instrument -> Party

-- | The issuer of the instrument.
issuer :: Instrument -> Party

-- | An identifier of the instrument.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | A description of the floating rate to be used. This supports both Libor and SOFR style
--   reference rates (using a compounded index, e.g. the SOFR Index).
--   FLOATING_RATE_BOND_TEMPLATE_UNTIL_REFRATE_END
floatingRate :: Instrument -> FloatingRate

-- | The floating rate coupon spread. For example, in case of "3M Euribor + 0.5%" this should
--   be 0.005.
couponSpread :: Instrument -> Decimal

-- | The schedule for the periodic coupon payments.
periodicSchedule :: Instrument -> PeriodicSchedule

-- | The identifiers of the holiday calendars to be used for the coupon schedule.
holidayCalendarIds :: Instrument -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: Instrument -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: Instrument -> DayCountConventionEnum

-- | The currency of the bond. For example, if the bond pays in USD this should be a USD cash
--   instrument.
currency :: Instrument -> InstrumentKey

-- | The notional of the bond. This is the face value corresponding to one unit of the bond
--   instrument. For example, if one bond unit corresponds to 1000 USD, this should be 1000.0.
notional :: Instrument -> Decimal

-- | The observers of the instrument.
observers :: Instrument -> PartiesMap

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Instrument -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-InflationLinked-Factory.html#module-daml-finance-instrument-bond-v3-inflationlinked-factory-84934
module Daml.Finance.Instrument.Bond.V3.InflationLinked.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-InflationLinked-Factory.html#type-daml-finance-instrument-bond-v3-inflationlinked-factory-t-61555
type T = Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-InflationLinked-Factory.html#type-daml-finance-instrument-bond-v3-inflationlinked-factory-factory-9487
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-InflationLinked-Factory.html#type-daml-finance-instrument-bond-v3-inflationlinked-factory-factory-9487
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-InflationLinked-Instrument.html#module-daml-finance-instrument-bond-v3-inflationlinked-instrument-99606
module Daml.Finance.Instrument.Bond.V3.InflationLinked.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-InflationLinked-Instrument.html#type-daml-finance-instrument-bond-v3-inflationlinked-instrument-t-70415
type T = Instrument

-- | This template models an inflation linked bond.
--   It pays an inflation adjusted coupon at the end of every coupon period.
--   The coupon is based on a fixed rate, which is applied to a principal that is adjusted according
--   to an inflation index, for example the Consumer Price Index (CPI) in the U.S.
--   For example: 0.5% p.a. coupon, CPI adjusted principal:
--   At maturity, the greater of the adjusted principal and the original principal is redeemed.
--   For clarity, this only applies to the redemption amount. The coupons are always calculated based
--   on the adjusted principal.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-InflationLinked-Instrument.html#type-daml-finance-instrument-bond-v3-inflationlinked-instrument-instrument-42121
data (Template Instrument) => Instrument

-- | This template models an inflation linked bond.
--   It pays an inflation adjusted coupon at the end of every coupon period.
--   The coupon is based on a fixed rate, which is applied to a principal that is adjusted according
--   to an inflation index, for example the Consumer Price Index (CPI) in the U.S.
--   For example: 0.5% p.a. coupon, CPI adjusted principal:
--   At maturity, the greater of the adjusted principal and the original principal is redeemed.
--   For clarity, this only applies to the redemption amount. The coupons are always calculated based
--   on the adjusted principal.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-InflationLinked-Instrument.html#type-daml-finance-instrument-bond-v3-inflationlinked-instrument-instrument-42121
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> Text -> Decimal -> Decimal -> PeriodicSchedule -> [Text] -> Party -> DayCountConventionEnum -> InstrumentKey -> Decimal -> PartiesMap -> Time -> Instrument

-- | The depository of the instrument.
depository :: Instrument -> Party

-- | The issuer of the instrument.
issuer :: Instrument -> Party

-- | An identifier of the instrument.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | The inflation index reference ID. For example, in case of "0.5% p.a. coupon, CPI adjusted
--   principal" this should be a valid reference to the "CPI" index.
inflationIndexId :: Instrument -> Text

-- | The value of the inflation index on the first reference date of this bond (called "dated
--   date" on US TIPS). This is used as the base value for the principal adjustment.
inflationIndexBaseValue :: Instrument -> Decimal

-- | The fixed coupon rate, per annum. For example, in case of a "0.5% p.a. coupon, CPI
--   adjusted principal" this should be 0.005.
couponRate :: Instrument -> Decimal

-- | The schedule for the periodic coupon payments.
periodicSchedule :: Instrument -> PeriodicSchedule

-- | The identifiers of the holiday calendars to be used for the coupon schedule.
holidayCalendarIds :: Instrument -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: Instrument -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: Instrument -> DayCountConventionEnum

-- | The currency of the bond. For example, if the bond pays in USD this should be a USD cash
--   instrument.
currency :: Instrument -> InstrumentKey

-- | The notional of the bond. This is the face value corresponding to one unit of the bond
--   instrument. For example, if one bond unit corresponds to 1000 USD, this should be 1000.0.
notional :: Instrument -> Decimal

-- | The observers of the instrument.
observers :: Instrument -> PartiesMap

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Instrument -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-Util.html#module-daml-finance-instrument-bond-v3-util-25042
module Daml.Finance.Instrument.Bond.V3.Util

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-Util.html#type-daml-finance-instrument-bond-v3-util-c-21556
type C = Claim Date Decimal Deliverable Observable

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-Util.html#type-daml-finance-instrument-bond-v3-util-o-69416
type O = Observation Date Decimal Observable

-- | Find out which schedule periods of scheduleA exist in scheduleB.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-Util.html#function-daml-finance-instrument-bond-v3-util-includes-30623
includes :: Schedule -> Schedule -> [Bool]

-- | Calculate the claims for a callable bond with a fixed and/or floating coupon on each payment
--   date and a redemption amount at the end (unless called by the issuer).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-Util.html#function-daml-finance-instrument-bond-v3-util-createcallablebondclaims-12972
createCallableBondClaims :: (Date -> Time) -> Schedule -> Schedule -> PeriodicSchedule -> Bool -> Decimal -> DayCountConventionEnum -> Decimal -> Deliverable -> Optional FloatingRate -> Optional Decimal -> Optional Decimal -> Int -> HolidayCalendarData -> TaggedClaim

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-ZeroCoupon-Factory.html#module-daml-finance-instrument-bond-v3-zerocoupon-factory-47672
module Daml.Finance.Instrument.Bond.V3.ZeroCoupon.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-ZeroCoupon-Factory.html#type-daml-finance-instrument-bond-v3-zerocoupon-factory-t-20257
type T = Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-ZeroCoupon-Factory.html#type-daml-finance-instrument-bond-v3-zerocoupon-factory-factory-76497
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-ZeroCoupon-Factory.html#type-daml-finance-instrument-bond-v3-zerocoupon-factory-factory-76497
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-ZeroCoupon-Instrument.html#module-daml-finance-instrument-bond-v3-zerocoupon-instrument-96672
module Daml.Finance.Instrument.Bond.V3.ZeroCoupon.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-ZeroCoupon-Instrument.html#type-daml-finance-instrument-bond-v3-zerocoupon-instrument-t-13209
type T = Instrument

-- | This template models a zero coupon bond.
--   It does not pay any coupons, only the redemption amount at maturity.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-ZeroCoupon-Instrument.html#type-daml-finance-instrument-bond-v3-zerocoupon-instrument-instrument-10035
data (Template Instrument) => Instrument

-- | This template models a zero coupon bond.
--   It does not pay any coupons, only the redemption amount at maturity.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-V3-ZeroCoupon-Instrument.html#type-daml-finance-instrument-bond-v3-zerocoupon-instrument-instrument-10035
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> Date -> Date -> InstrumentKey -> Decimal -> PartiesMap -> Time -> Instrument

-- | The depository of the instrument.
depository :: Instrument -> Party

-- | The issuer of the instrument.
issuer :: Instrument -> Party

-- | An identifier of the instrument.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | The date when the bond was issued.
issueDate :: Instrument -> Date

-- | The redemption date of the bond.
maturityDate :: Instrument -> Date

-- | The currency of the bond. For example, if the bond pays in USD this should be a USD cash
--   instrument.
currency :: Instrument -> InstrumentKey

-- | The notional of the bond. This is the face value corresponding to one unit of the bond
--   instrument. For example, if one bond unit corresponds to 1000 USD, this should be 1000.0.
notional :: Instrument -> Decimal

-- | The observers of the instrument.
observers :: Instrument -> PartiesMap

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Instrument -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Equity-V0-Factory.html#module-daml-finance-instrument-equity-v0-factory-49978
module Daml.Finance.Instrument.Equity.V0.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Equity-V0-Factory.html#type-daml-finance-instrument-equity-v0-factory-t-69087
type T = Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Equity-V0-Factory.html#type-daml-finance-instrument-equity-v0-factory-factory-99971
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Equity-V0-Factory.html#type-daml-finance-instrument-equity-v0-factory-factory-99971
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Equity-V0-Instrument.html#module-daml-finance-instrument-equity-v0-instrument-40246
module Daml.Finance.Instrument.Equity.V0.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Equity-V0-Instrument.html#type-daml-finance-instrument-equity-v0-instrument-t-80247
type T = Instrument

-- | An Instrument representing a common stock.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Equity-V0-Instrument.html#type-daml-finance-instrument-equity-v0-instrument-instrument-32561
data (Template Instrument) => Instrument

-- | An Instrument representing a common stock.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Equity-V0-Instrument.html#type-daml-finance-instrument-equity-v0-instrument-instrument-32561
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> PartiesMap -> Time -> Instrument

-- | Issuer.
issuer :: Instrument -> Party

-- | Depository.
depository :: Instrument -> Party

-- | A textual identifier.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | Observers.
observers :: Instrument -> PartiesMap

-- | Timestamp as of which the instrument is valid. This usually coincides with the timestamp
--   of the event that creates the instrument. It usually does not coincide with ledger time.
validAsOf :: Instrument -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Generic-V4-Factory.html#module-daml-finance-instrument-generic-v4-factory-26927
module Daml.Finance.Instrument.Generic.V4.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Generic-V4-Factory.html#type-daml-finance-instrument-generic-v4-factory-t-5576
type T = Factory

-- | Factory template for generic instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Generic-V4-Factory.html#type-daml-finance-instrument-generic-v4-factory-factory-39836
data (Template Factory) => Factory

-- | Factory template for generic instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Generic-V4-Factory.html#type-daml-finance-instrument-generic-v4-factory-factory-39836
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Generic-V4-Instrument.html#module-daml-finance-instrument-generic-v4-instrument-39541
module Daml.Finance.Instrument.Generic.V4.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Generic-V4-Instrument.html#type-daml-finance-instrument-generic-v4-instrument-t-32730
type T = Instrument

-- | An instrument representing a generic payoff, modelled using the Contingent Claims library.
--   The responsibility for processing lifecycle events as well as elections is delegated to the
--   issuer, who is hence responsible for providing the correct `Observable`\s.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Generic-V4-Instrument.html#type-daml-finance-instrument-generic-v4-instrument-instrument-96378
data (Template Instrument) => Instrument

-- | An instrument representing a generic payoff, modelled using the Contingent Claims library.
--   The responsibility for processing lifecycle events as well as elections is delegated to the
--   issuer, who is hence responsible for providing the correct `Observable`\s.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Generic-V4-Instrument.html#type-daml-finance-instrument-generic-v4-instrument-instrument-96378
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> C -> Time -> PartiesMap -> Time -> Instrument

-- | The instrument depository.
depository :: Instrument -> Party

-- | The instrument issuer.
issuer :: Instrument -> Party

-- | The identifier with corresponding version.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A human readable description of the instrument.
description :: Instrument -> Text

-- | The claim tree.
claims :: Instrument -> C

-- | The claim's acquisition time. This usually corresponds to the start date of the contract.
acquisitionTime :: Instrument -> Time

-- | Observers.
observers :: Instrument -> PartiesMap

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Instrument -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Generic-V4-Lifecycle-Rule.html#module-daml-finance-instrument-generic-v4-lifecycle-rule-7812
module Daml.Finance.Instrument.Generic.V4.Lifecycle.Rule

-- | Rule to process a lifecycle event.
--   This rule supports both time update events and election events.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Generic-V4-Lifecycle-Rule.html#type-daml-finance-instrument-generic-v4-lifecycle-rule-rule-21784
data (Template Rule) => Rule

-- | Rule to process a lifecycle event.
--   This rule supports both time update events and election events.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Generic-V4-Lifecycle-Rule.html#type-daml-finance-instrument-generic-v4-lifecycle-rule-rule-21784
Rule :: Parties -> Party -> PartiesMap -> Id -> Text -> Rule

-- | Providers of the distribution rule.
providers :: Rule -> Parties

-- | Party performing the lifecycling.
lifecycler :: Rule -> Party

-- | Observers of the distribution rule.
observers :: Rule -> PartiesMap

-- | Identifier for the rule contract.
id :: Rule -> Id

-- | Textual description.
description :: Rule -> Text

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-BarrierEuropeanCash-Factory.html#module-daml-finance-instrument-option-v0-barriereuropeancash-factory-31647
module Daml.Finance.Instrument.Option.V0.BarrierEuropeanCash.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-BarrierEuropeanCash-Factory.html#type-daml-finance-instrument-option-v0-barriereuropeancash-factory-t-18036
type T = Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-BarrierEuropeanCash-Factory.html#type-daml-finance-instrument-option-v0-barriereuropeancash-factory-factory-62768
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-BarrierEuropeanCash-Factory.html#type-daml-finance-instrument-option-v0-barriereuropeancash-factory-factory-62768
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-BarrierEuropeanCash-Instrument.html#module-daml-finance-instrument-option-v0-barriereuropeancash-instrument-60573
module Daml.Finance.Instrument.Option.V0.BarrierEuropeanCash.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-BarrierEuropeanCash-Instrument.html#type-daml-finance-instrument-option-v0-barriereuropeancash-instrument-t-93130
type T = Instrument

-- | This template models a cash settled, automatically excercised barrier option with European
--   exercise.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-BarrierEuropeanCash-Instrument.html#type-daml-finance-instrument-option-v0-barriereuropeancash-instrument-instrument-40010
data (Template Instrument) => Instrument

-- | This template models a cash settled, automatically excercised barrier option with European
--   exercise.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-BarrierEuropeanCash-Instrument.html#type-daml-finance-instrument-option-v0-barriereuropeancash-instrument-instrument-40010
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> Text -> Bool -> OptionTypeEnum -> Decimal -> Decimal -> BarrierTypeEnum -> Date -> Date -> InstrumentKey -> PartiesMap -> Time -> Instrument

-- | The depository of the instrument.
depository :: Instrument -> Party

-- | The issuer of the instrument.
issuer :: Instrument -> Party

-- | An identifier of the instrument.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | The reference asset ID. For example, in case of an option on AAPL this should be a valid
--   reference to the AAPL fixings to be used for the payoff calculation.
referenceAssetId :: Instrument -> Text

-- | Indicate whether a holding owner of this instrument receives option payoff.
ownerReceives :: Instrument -> Bool

-- | Indicate whether the option is a call or a put.
optionType :: Instrument -> OptionTypeEnum

-- | The strike price of the option.
strike :: Instrument -> Decimal

-- | The barrier level of the option.
barrier :: Instrument -> Decimal

-- | The type of barrier.
barrierType :: Instrument -> BarrierTypeEnum

-- | The start date for barrier observations.
barrierStartDate :: Instrument -> Date

-- | The expiry date of the option.
expiryDate :: Instrument -> Date

-- | The currency of the option. For example, if the option pays in USD this should be a USD
--   cash instrument.
currency :: Instrument -> InstrumentKey

-- | The observers of the instrument.
observers :: Instrument -> PartiesMap

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Instrument -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-Dividend-Election.html#module-daml-finance-instrument-option-v0-dividend-election-51824
module Daml.Finance.Instrument.Option.V0.Dividend.Election

-- | Factory template to create an `Election`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-Dividend-Election.html#type-daml-finance-instrument-option-v0-dividend-election-factory-67569
data (Template Factory) => Factory

-- | Factory template to create an `Election`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-Dividend-Election.html#type-daml-finance-instrument-option-v0-dividend-election-factory-67569
Factory :: Party -> PartiesMap -> Factory

-- | The provider of the `Factory`.
provider :: Factory -> Party

-- | A set of observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-Dividend-Factory.html#module-daml-finance-instrument-option-v0-dividend-factory-83384
module Daml.Finance.Instrument.Option.V0.Dividend.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-Dividend-Factory.html#type-daml-finance-instrument-option-v0-dividend-factory-t-21649
type T = Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-Dividend-Factory.html#type-daml-finance-instrument-option-v0-dividend-factory-factory-74369
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-Dividend-Factory.html#type-daml-finance-instrument-option-v0-dividend-factory-factory-74369
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-Dividend-Instrument.html#module-daml-finance-instrument-option-v0-dividend-instrument-16416
module Daml.Finance.Instrument.Option.V0.Dividend.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-Dividend-Instrument.html#type-daml-finance-instrument-option-v0-dividend-instrument-t-35369
type T = Instrument

-- | This template models a physically settled Dividend option.
--   The holder gets to choose to receive the dividend in cash or in a different form (in shares
--   and/or in a foreign currency).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-Dividend-Instrument.html#type-daml-finance-instrument-option-v0-dividend-instrument-instrument-69507
data (Template Instrument) => Instrument

-- | This template models a physically settled Dividend option.
--   The holder gets to choose to receive the dividend in cash or in a different form (in shares
--   and/or in a foreign currency).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-Dividend-Instrument.html#type-daml-finance-instrument-option-v0-dividend-instrument-instrument-69507
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> Date -> InstrumentQuantity -> Optional InstrumentQuantity -> Optional InstrumentQuantity -> PartiesMap -> Time -> [EventData] -> Instrument

-- | The depository of the instrument.
depository :: Instrument -> Party

-- | The issuer of the instrument.
issuer :: Instrument -> Party

-- | An identifier of the instrument.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | The expiry date of the option.
expiryDate :: Instrument -> Date

-- | Dividend paid in cash
cashQuantity :: Instrument -> InstrumentQuantity

-- | Dividend paid in shares (if applicable)
sharesQuantity :: Instrument -> Optional InstrumentQuantity

-- | Dividend paid in a foreign currency (if applicable)
fxQuantity :: Instrument -> Optional InstrumentQuantity

-- | The observers of the instrument.
observers :: Instrument -> PartiesMap

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Instrument -> Time

-- | A list of previous elections that have been lifecycled on this instrument so far.
prevEvents :: Instrument -> [EventData]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-EuropeanCash-Factory.html#module-daml-finance-instrument-option-v0-europeancash-factory-83305
module Daml.Finance.Instrument.Option.V0.EuropeanCash.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-EuropeanCash-Factory.html#type-daml-finance-instrument-option-v0-europeancash-factory-t-24074
type T = Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-EuropeanCash-Factory.html#type-daml-finance-instrument-option-v0-europeancash-factory-factory-42074
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-EuropeanCash-Factory.html#type-daml-finance-instrument-option-v0-europeancash-factory-factory-42074
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-EuropeanCash-Instrument.html#module-daml-finance-instrument-option-v0-europeancash-instrument-35799
module Daml.Finance.Instrument.Option.V0.EuropeanCash.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-EuropeanCash-Instrument.html#type-daml-finance-instrument-option-v0-europeancash-instrument-t-24164
type T = Instrument

-- | This template models a cash settled, automatically excercised European option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-EuropeanCash-Instrument.html#type-daml-finance-instrument-option-v0-europeancash-instrument-instrument-58340
data (Template Instrument) => Instrument

-- | This template models a cash settled, automatically excercised European option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-EuropeanCash-Instrument.html#type-daml-finance-instrument-option-v0-europeancash-instrument-instrument-58340
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> Text -> Bool -> OptionTypeEnum -> Decimal -> Date -> InstrumentKey -> PartiesMap -> Time -> Instrument

-- | The depository of the instrument.
depository :: Instrument -> Party

-- | The issuer of the instrument.
issuer :: Instrument -> Party

-- | An identifier of the instrument.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | The reference asset ID. For example, in case of an option on AAPL this should be a valid
--   reference to the AAPL fixings to be used for the payoff calculation.
referenceAssetId :: Instrument -> Text

-- | Indicate whether a holding owner of this instrument receives option payoff.
ownerReceives :: Instrument -> Bool

-- | Indicate whether the option is a call or a put.
optionType :: Instrument -> OptionTypeEnum

-- | The strike price of the option.
strike :: Instrument -> Decimal

-- | The expiry date of the option.
expiryDate :: Instrument -> Date

-- | The currency of the option. For example, if the option pays in USD this should be a USD
--   cash instrument.
currency :: Instrument -> InstrumentKey

-- | The observers of the instrument.
observers :: Instrument -> PartiesMap

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Instrument -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-EuropeanPhysical-Factory.html#module-daml-finance-instrument-option-v0-europeanphysical-factory-76943
module Daml.Finance.Instrument.Option.V0.EuropeanPhysical.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-EuropeanPhysical-Factory.html#type-daml-finance-instrument-option-v0-europeanphysical-factory-t-6844
type T = Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-EuropeanPhysical-Factory.html#type-daml-finance-instrument-option-v0-europeanphysical-factory-factory-40216
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-EuropeanPhysical-Factory.html#type-daml-finance-instrument-option-v0-europeanphysical-factory-factory-40216
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-EuropeanPhysical-Instrument.html#module-daml-finance-instrument-option-v0-europeanphysical-instrument-57525
module Daml.Finance.Instrument.Option.V0.EuropeanPhysical.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-EuropeanPhysical-Instrument.html#type-daml-finance-instrument-option-v0-europeanphysical-instrument-t-29806
type T = Instrument

-- | This template models a physically settled European option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-EuropeanPhysical-Instrument.html#type-daml-finance-instrument-option-v0-europeanphysical-instrument-instrument-68822
data (Template Instrument) => Instrument

-- | This template models a physically settled European option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Option-V0-EuropeanPhysical-Instrument.html#type-daml-finance-instrument-option-v0-europeanphysical-instrument-instrument-68822
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> InstrumentKey -> Bool -> OptionTypeEnum -> Decimal -> Date -> InstrumentKey -> PartiesMap -> Time -> [EventData] -> Instrument

-- | The depository of the instrument.
depository :: Instrument -> Party

-- | The issuer of the instrument.
issuer :: Instrument -> Party

-- | An identifier of the instrument.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | The reference asset. For example, in case of an option on AAPL this should be an AAPL
--   instrument.
referenceAsset :: Instrument -> InstrumentKey

-- | Indicate whether a holding owner of this instrument receives option payoff.
ownerReceives :: Instrument -> Bool

-- | Indicate whether the option is a call or a put.
optionType :: Instrument -> OptionTypeEnum

-- | The strike price of the option.
strike :: Instrument -> Decimal

-- | The expiry date of the option.
expiryDate :: Instrument -> Date

-- | The currency of the option. For example, if the option pays in USD this should be a USD
--   cash instrument.
currency :: Instrument -> InstrumentKey

-- | The observers of the instrument.
observers :: Instrument -> PartiesMap

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Instrument -> Time

-- | A list of previous elections that have been lifecycled on this instrument so far.
prevEvents :: Instrument -> [EventData]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-AutoCallable-Factory.html#module-daml-finance-instrument-structuredproduct-v0-autocallable-factory-7288
module Daml.Finance.Instrument.StructuredProduct.V0.AutoCallable.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-AutoCallable-Factory.html#type-daml-finance-instrument-structuredproduct-v0-autocallable-factory-t-29077
type T = Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-AutoCallable-Factory.html#type-daml-finance-instrument-structuredproduct-v0-autocallable-factory-factory-74669
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-AutoCallable-Factory.html#type-daml-finance-instrument-structuredproduct-v0-autocallable-factory-factory-74669
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-AutoCallable-Instrument.html#module-daml-finance-instrument-structuredproduct-v0-autocallable-instrument-68544
module Daml.Finance.Instrument.StructuredProduct.V0.AutoCallable.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-AutoCallable-Instrument.html#type-daml-finance-instrument-structuredproduct-v0-autocallable-instrument-t-12513
type T = Instrument

-- | This template models an AutoCallable instrument that pays a conditional coupon.
--   It is an AutoCallable Barrier Reverse Convertible where the KI barrier is observed at maturity.
--   It is a single-underlying product.
--   The instrument is automatically called (redeemed early) if the call barrier is hit.
--   The conditional coupon is paid in each coupon period unless the coupon barrier has been hit.
--   Both the call barrier and the coupon barrier are observed only on the last observation date of
--   each period.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-AutoCallable-Instrument.html#type-daml-finance-instrument-structuredproduct-v0-autocallable-instrument-instrument-72027
data (Template Instrument) => Instrument

-- | This template models an AutoCallable instrument that pays a conditional coupon.
--   It is an AutoCallable Barrier Reverse Convertible where the KI barrier is observed at maturity.
--   It is a single-underlying product.
--   The instrument is automatically called (redeemed early) if the call barrier is hit.
--   The conditional coupon is paid in each coupon period unless the coupon barrier has been hit.
--   Both the call barrier and the coupon barrier are observed only on the last observation date of
--   each period.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-AutoCallable-Instrument.html#type-daml-finance-instrument-structuredproduct-v0-autocallable-instrument-instrument-72027
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> Text -> Decimal -> Decimal -> Decimal -> Decimal -> Decimal -> PeriodicSchedule -> PeriodicSchedule -> [Text] -> Party -> DayCountConventionEnum -> InstrumentKey -> Decimal -> PartiesMap -> Time -> [EventData] -> Instrument

-- | The depository of the instrument.
depository :: Instrument -> Party

-- | The issuer of the instrument.
issuer :: Instrument -> Party

-- | An identifier of the instrument.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | The reference asset ID. For example, in case of an AAPL underlying this should be a valid
--   reference to the AAPL fixings to be used for the payoff calculation.
referenceAssetId :: Instrument -> Text

-- | The strike of the put (as a percentage of the underlying closing price on the first
--   observation date).
putStrike :: Instrument -> Decimal

-- | The coupon barrier (as a percentage of the underlying closing price on the first
--   observation date).
couponBarrier :: Instrument -> Decimal

-- | The barrier used to automatically call the instrument (as a percentage of the underlying
--   closing price on the first observation date).
callBarrier :: Instrument -> Decimal

-- | The barrier used to determine the final redemption amount (as a percentage of the
--   underlying closing price on the first observation date).
finalBarrier :: Instrument -> Decimal

-- | The fixed coupon rate, either per annum or per coupon period (depending on the
--   dayCountConvention below).
couponRate :: Instrument -> Decimal

-- | The schedule for the observation dates. These are used to observe the barrier, determine
--   whether the instrument is automatically called and to determine the final redemption
--   amount.
observationSchedule :: Instrument -> PeriodicSchedule

-- | The schedule for the periodic coupon payments.
periodicSchedule :: Instrument -> PeriodicSchedule

-- | The identifiers of the holiday calendars to be used for the coupon schedule.
holidayCalendarIds :: Instrument -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: Instrument -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: Instrument -> DayCountConventionEnum

-- | The currency of the product. For example, if the product pays in USD this should be a USD
--   cash instrument.
currency :: Instrument -> InstrumentKey

-- | The notional of the product. This is the face value corresponding to one unit of the
--   product. For example, if one product unit corresponds to 1000 USD, this should be 1000.0.
notional :: Instrument -> Decimal

-- | The observers of the instrument.
observers :: Instrument -> PartiesMap

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Instrument -> Time

-- | A list of previous events that have been lifecycled on this instrument so far.
prevEvents :: Instrument -> [EventData]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Factory.html#module-daml-finance-instrument-structuredproduct-v0-barrierreverseconvertible-factory-26362
module Daml.Finance.Instrument.StructuredProduct.V0.BarrierReverseConvertible.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Factory.html#type-daml-finance-instrument-structuredproduct-v0-barrierreverseconvertible-factory-t-52071
type T = Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Factory.html#type-daml-finance-instrument-structuredproduct-v0-barrierreverseconvertible-factory-factory-32331
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Factory.html#type-daml-finance-instrument-structuredproduct-v0-barrierreverseconvertible-factory-factory-32331
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Instrument.html#module-daml-finance-instrument-structuredproduct-v0-barrierreverseconvertible-instrument-60122
module Daml.Finance.Instrument.StructuredProduct.V0.BarrierReverseConvertible.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Instrument.html#type-daml-finance-instrument-structuredproduct-v0-barrierreverseconvertible-instrument-t-60935
type T = Instrument

-- | This template models a Barrier Reverse Convertible (BRC) instrument.
--   It can be seen as a long fixed coupon bond and a short Down-And-In put option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Instrument.html#type-daml-finance-instrument-structuredproduct-v0-barrierreverseconvertible-instrument-instrument-83873
data (Template Instrument) => Instrument

-- | This template models a Barrier Reverse Convertible (BRC) instrument.
--   It can be seen as a long fixed coupon bond and a short Down-And-In put option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Instrument.html#type-daml-finance-instrument-structuredproduct-v0-barrierreverseconvertible-instrument-instrument-83873
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> Text -> Decimal -> Decimal -> Date -> Date -> Decimal -> PeriodicSchedule -> [Text] -> Party -> DayCountConventionEnum -> InstrumentKey -> Decimal -> PartiesMap -> Time -> [EventData] -> Instrument

-- | The depository of the instrument.
depository :: Instrument -> Party

-- | The issuer of the instrument.
issuer :: Instrument -> Party

-- | An identifier of the instrument.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | The reference asset ID. For example, in case of an option on AAPL this should be a valid
--   reference to the AAPL fixings to be used for the payoff calculation.
referenceAssetId :: Instrument -> Text

-- | The strike price of the option.
strike :: Instrument -> Decimal

-- | The barrier level of the option.
barrier :: Instrument -> Decimal

-- | The start date for barrier observations.
barrierStartDate :: Instrument -> Date

-- | The expiry date of the instrument.
expiryDate :: Instrument -> Date

-- | The fixed coupon rate, per annum. For example, in case of a "3.5% p.a coupon" this should
--   be 0.035.
couponRate :: Instrument -> Decimal

-- | The schedule for the periodic coupon payments.
periodicSchedule :: Instrument -> PeriodicSchedule

-- | The identifiers of the holiday calendars to be used for the coupon schedule.
holidayCalendarIds :: Instrument -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: Instrument -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: Instrument -> DayCountConventionEnum

-- | The currency of the product. For example, if the product pays in USD this should be a USD
--   cash instrument.
currency :: Instrument -> InstrumentKey

-- | The notional of the product. This is the face value corresponding to one unit of the
--   product. For example, if one product unit corresponds to 1000 USD, this should be 1000.0.
notional :: Instrument -> Decimal

-- | The observers of the instrument.
observers :: Instrument -> PartiesMap

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Instrument -> Time

-- | A list of previous events that have been lifecycled on this instrument so far.
prevEvents :: Instrument -> [EventData]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-Util.html#module-daml-finance-instrument-structuredproduct-v0-util-44475
module Daml.Finance.Instrument.StructuredProduct.V0.Util

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-Util.html#type-daml-finance-instrument-structuredproduct-v0-util-c-88007
type C = Claim Date Decimal Deliverable Observable

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-Util.html#type-daml-finance-instrument-structuredproduct-v0-util-o-5387
type O = Observation Date Decimal Observable

-- | Find out which schedule periods of scheduleA exist in scheduleB.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-Util.html#function-daml-finance-instrument-structuredproduct-v0-util-includes-48834
includes :: Schedule -> Schedule -> [Bool]

-- | Calculate the claims for an auto-callable with a contingent coupon on each payment date
--   and a redemption amount at maturity (unless auto-called previously).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-StructuredProduct-V0-Util.html#function-daml-finance-instrument-structuredproduct-v0-util-createautocallableclaims-13527
createAutoCallableClaims :: (Date -> Time) -> Schedule -> Schedule -> PeriodicSchedule -> Bool -> Decimal -> DayCountConventionEnum -> Decimal -> Deliverable -> Optional FloatingRate -> Optional Decimal -> Optional Decimal -> Text -> Decimal -> Decimal -> Decimal -> Decimal -> HolidayCalendarData -> TaggedClaim

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Asset-DistributionRule.html#module-daml-finance-instrument-swap-v0-asset-distributionrule-89667
module Daml.Finance.Instrument.Swap.V0.Asset.DistributionRule

-- | Rule contract used to process a Distribution event (e.g. share or cash dividends) targeting an
--   underlying of an asset swap.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Asset-DistributionRule.html#type-daml-finance-instrument-swap-v0-asset-distributionrule-distributionrule-67789
data (Template DistributionRule) => DistributionRule

-- | Rule contract used to process a Distribution event (e.g. share or cash dividends) targeting an
--   underlying of an asset swap.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Asset-DistributionRule.html#type-daml-finance-instrument-swap-v0-asset-distributionrule-distributionrule-67789
DistributionRule :: Parties -> Party -> Parties -> Id -> Text -> ContractId I -> [(Text, Parties)] -> DistributionRule

-- | Providers of the distribution rule.
providers :: DistributionRule -> Parties

-- | Party performing the lifecycling.
lifecycler :: DistributionRule -> Party

-- | Observers of the distribution rule.
observers :: DistributionRule -> Parties

-- | Identifier for the rule contract.
id :: DistributionRule -> Id

-- | Textual description.
description :: DistributionRule -> Text

-- | Factory used to create an updated version of the asset swap.
assetSwapFactoryCid :: DistributionRule -> ContractId I

-- | Observers used for the updated version of the asset swap.
newInstrumentObservers :: DistributionRule -> [(Text, Parties)]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Asset-Factory.html#module-daml-finance-instrument-swap-v0-asset-factory-78880
module Daml.Finance.Instrument.Swap.V0.Asset.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Asset-Factory.html#type-daml-finance-instrument-swap-v0-asset-factory-t-86685
type T = Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Asset-Factory.html#type-daml-finance-instrument-swap-v0-asset-factory-factory-64565
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Asset-Factory.html#type-daml-finance-instrument-swap-v0-asset-factory-factory-64565
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Asset-Instrument.html#module-daml-finance-instrument-swap-v0-asset-instrument-74976
module Daml.Finance.Instrument.Swap.V0.Asset.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Asset-Instrument.html#type-daml-finance-instrument-swap-v0-asset-instrument-t-64265
type T = Instrument

-- | This template models an asset swap.
--   It pays an asset performance vs a fix interest rate at the end of every payment period.
--   It can be used to model equity swaps, some types of commodity swaps (of the form performance vs
--   rate) and swaps with the same payoff on other asset types.
--   The asset leg is described by an observable containing either unadjusted or adjusted fixings (for
--   a price return or a total return swap, respectively).
--   The template calculates the performance for each payment period using this observable.
--   For example: AAPL total return vs 2.5% fix.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Asset-Instrument.html#type-daml-finance-instrument-swap-v0-asset-instrument-instrument-26627
data (Template Instrument) => Instrument

-- | This template models an asset swap.
--   It pays an asset performance vs a fix interest rate at the end of every payment period.
--   It can be used to model equity swaps, some types of commodity swaps (of the form performance vs
--   rate) and swaps with the same payoff on other asset types.
--   The asset leg is described by an observable containing either unadjusted or adjusted fixings (for
--   a price return or a total return swap, respectively).
--   The template calculates the performance for each payment period using this observable.
--   For example: AAPL total return vs 2.5% fix.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Asset-Instrument.html#type-daml-finance-instrument-swap-v0-asset-instrument-instrument-26627
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> [Underlying] -> Bool -> Optional FloatingRate -> Decimal -> PeriodicSchedule -> [Text] -> Party -> DayCountConventionEnum -> InstrumentKey -> PartiesMap -> Time -> Instrument

-- | The depository of the instrument.
depository :: Instrument -> Party

-- | The issuer of the instrument.
issuer :: Instrument -> Party

-- | An identifier of the instrument.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | The list of underlyings (the basket of reference assets for the asset swap).
underlyings :: Instrument -> [Underlying]

-- | Indicate whether a holding owner of this instrument receives the rate or the asset leg of
--   the swap.
ownerReceivesRate :: Instrument -> Bool

-- | A description of the floating rate to be used (if applicable). This supports both Libor
--   and SOFR style reference rates (using a compounded index, e.g. the SOFR Index).
floatingRate :: Instrument -> Optional FloatingRate

-- | The interest rate of the fix leg. For example, in case of "AAPL total return vs 2.5% fix"
--   this should be 0.025. This can also be used as a floating rate spread. For example, in
--   case of "3M Libor + 0.5%" this should be 0.005.
fixRate :: Instrument -> Decimal

-- | The schedule for the periodic swap payments.
periodicSchedule :: Instrument -> PeriodicSchedule

-- | The identifiers of the holiday calendars to be used for the swap payment schedule.
holidayCalendarIds :: Instrument -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: Instrument -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: Instrument -> DayCountConventionEnum

-- | The currency of the swap. For example, if the swap pays in USD this should be a USD cash
--   instrument.
currency :: Instrument -> InstrumentKey

-- | The observers of the instrument.
observers :: Instrument -> PartiesMap

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Instrument -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-CreditDefault-Factory.html#module-daml-finance-instrument-swap-v0-creditdefault-factory-47862
module Daml.Finance.Instrument.Swap.V0.CreditDefault.Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-CreditDefault-Factory.html#type-daml-finance-instrument-swap-v0-creditdefault-factory-factory-72519
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-CreditDefault-Factory.html#type-daml-finance-instrument-swap-v0-creditdefault-factory-factory-72519
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-CreditDefault-Instrument.html#module-daml-finance-instrument-swap-v0-creditdefault-instrument-93234
module Daml.Finance.Instrument.Swap.V0.CreditDefault.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-CreditDefault-Instrument.html#type-daml-finance-instrument-swap-v0-creditdefault-instrument-t-68763
type T = Instrument

-- | This template models a cash-settled credit default swap.
--   In case of a credit default event it pays (1-recoveryRate), in exchange for a fix rate at the end
--   of every payment period. For example: 2.5% fix vs (1-recoveryRate) if TSLA defaults on a bond
--   payment
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-CreditDefault-Instrument.html#type-daml-finance-instrument-swap-v0-creditdefault-instrument-instrument-63085
data (Template Instrument) => Instrument

-- | This template models a cash-settled credit default swap.
--   In case of a credit default event it pays (1-recoveryRate), in exchange for a fix rate at the end
--   of every payment period. For example: 2.5% fix vs (1-recoveryRate) if TSLA defaults on a bond
--   payment
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-CreditDefault-Instrument.html#type-daml-finance-instrument-swap-v0-creditdefault-instrument-instrument-63085
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> Text -> Text -> Bool -> Decimal -> PeriodicSchedule -> [Text] -> Party -> DayCountConventionEnum -> InstrumentKey -> PartiesMap -> Time -> Instrument

-- | The depository of the instrument.
depository :: Instrument -> Party

-- | The issuer of the instrument.
issuer :: Instrument -> Party

-- | An identifier of the instrument.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | The reference ID of the default probability observable. For example, in case of
--   protection against a "TSLA bond payment default" this should be a valid reference to the
--   "TSLA default probability".
defaultProbabilityReferenceId :: Instrument -> Text

-- | The reference ID of the recovery rate observable. For example, in case of a "TSLA bond
--   payment default with a 60% recovery rate" this should be a valid reference to the "TSLA
--   bond recovery rate".
recoveryRateReferenceId :: Instrument -> Text

-- | Indicate whether a holding owner of this instrument receives the fix or the default
--   protection leg of the swap.
ownerReceivesFix :: Instrument -> Bool

-- | The interest rate of the fix leg. For example, in case of "2.5% fix" this should be
--   0.025.
fixRate :: Instrument -> Decimal

-- | The schedule for the periodic swap payments.
periodicSchedule :: Instrument -> PeriodicSchedule

-- | The identifiers of the holiday calendars to be used for the swap payment schedule.
holidayCalendarIds :: Instrument -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: Instrument -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: Instrument -> DayCountConventionEnum

-- | The currency of the swap. For example, if the swap pays in USD this should be a USD cash
--   instrument.
currency :: Instrument -> InstrumentKey

-- | The observers of the instrument.
observers :: Instrument -> PartiesMap

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Instrument -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Currency-Factory.html#module-daml-finance-instrument-swap-v0-currency-factory-5168
module Daml.Finance.Instrument.Swap.V0.Currency.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Currency-Factory.html#type-daml-finance-instrument-swap-v0-currency-factory-t-74629
type T = Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Currency-Factory.html#type-daml-finance-instrument-swap-v0-currency-factory-factory-69341
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Currency-Factory.html#type-daml-finance-instrument-swap-v0-currency-factory-factory-69341
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Currency-Instrument.html#module-daml-finance-instrument-swap-v0-currency-instrument-73724
module Daml.Finance.Instrument.Swap.V0.Currency.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Currency-Instrument.html#type-daml-finance-instrument-swap-v0-currency-instrument-t-43329
type T = Instrument

-- | This template models a currency swap.
--   It pays a fix vs fix rate (in different currencies) at the end of every payment period.
--   The principal in the foreign currency is calculated using an fx rate and the principal amount in
--   the base currency. The principal is not exchanged.
--   For example: USD 1000k principal, fx rate 1.10 -> EUR 1100k principal
--                3% fix rate on USD 1000k vs
--                2% fix rate on EUR 1100k
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Currency-Instrument.html#type-daml-finance-instrument-swap-v0-currency-instrument-instrument-45179
data (Template Instrument) => Instrument

-- | This template models a currency swap.
--   It pays a fix vs fix rate (in different currencies) at the end of every payment period.
--   The principal in the foreign currency is calculated using an fx rate and the principal amount in
--   the base currency. The principal is not exchanged.
--   For example: USD 1000k principal, fx rate 1.10 -> EUR 1100k principal
--                3% fix rate on USD 1000k vs
--                2% fix rate on EUR 1100k
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Currency-Instrument.html#type-daml-finance-instrument-swap-v0-currency-instrument-instrument-45179
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> Bool -> Decimal -> Decimal -> PeriodicSchedule -> [Text] -> Party -> DayCountConventionEnum -> InstrumentKey -> InstrumentKey -> Decimal -> PartiesMap -> Time -> Instrument

-- | The depository of the instrument.
depository :: Instrument -> Party

-- | The issuer of the instrument.
issuer :: Instrument -> Party

-- | An identifier of the instrument.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | Indicate whether a holding owner of this instrument receives the base currency leg or the
--   foreign currency leg of the swap.
ownerReceivesBase :: Instrument -> Bool

-- | The interest rate of the base currency. For example, in case of "3% in USD" this should
--   be 0.03.
baseRate :: Instrument -> Decimal

-- | The interest rate of the foreign currency. For example, in case of "2% in EUR" this
--   should be 0.02.
foreignRate :: Instrument -> Decimal

-- | The schedule for the periodic swap payments.
periodicSchedule :: Instrument -> PeriodicSchedule

-- | The identifiers of the holiday calendars to be used for the swap payment schedule.
holidayCalendarIds :: Instrument -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: Instrument -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: Instrument -> DayCountConventionEnum

-- | The base currency of the swap. For example, in the case of USD this should be a USD cash
--   instrument.
baseCurrency :: Instrument -> InstrumentKey

-- | The foreign currency of the swap. For example, in case of EUR this should be a EUR cash
--   instrument.
foreignCurrency :: Instrument -> InstrumentKey

-- | The fx rate used to convert from the base currency principal amount to the foreign
--   currency principal amount.
fxRate :: Instrument -> Decimal

-- | The observers of the instrument.
observers :: Instrument -> PartiesMap

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Instrument -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-ForeignExchange-Factory.html#module-daml-finance-instrument-swap-v0-foreignexchange-factory-57987
module Daml.Finance.Instrument.Swap.V0.ForeignExchange.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-ForeignExchange-Factory.html#type-daml-finance-instrument-swap-v0-foreignexchange-factory-t-46836
type T = Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-ForeignExchange-Factory.html#type-daml-finance-instrument-swap-v0-foreignexchange-factory-factory-75472
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-ForeignExchange-Factory.html#type-daml-finance-instrument-swap-v0-foreignexchange-factory-factory-75472
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-ForeignExchange-Instrument.html#module-daml-finance-instrument-swap-v0-foreignexchange-instrument-58705
module Daml.Finance.Instrument.Swap.V0.ForeignExchange.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-ForeignExchange-Instrument.html#type-daml-finance-instrument-swap-v0-foreignexchange-instrument-t-67930
type T = Instrument

-- | This template models a foreign exchange swap (FX Swap).
--   It has two legs: an initial FX transaction and a final FX transaction.
--   The instrument has a base currency and a foreign currency.
--   The convention is that a holding owner receives the foreign currency in the initial transaction
--   (and pays it in the final transaction).
--   Both FX rates and transaction dates are predetermined between the counterparties.
--   For example: USD 1000k vs EUR 1100k (fx rate: 1.10) today
--                USD 1000k vs EUR 1200k (fx rate: 1.20) in 6 months
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-ForeignExchange-Instrument.html#type-daml-finance-instrument-swap-v0-foreignexchange-instrument-instrument-3514
data (Template Instrument) => Instrument

-- | This template models a foreign exchange swap (FX Swap).
--   It has two legs: an initial FX transaction and a final FX transaction.
--   The instrument has a base currency and a foreign currency.
--   The convention is that a holding owner receives the foreign currency in the initial transaction
--   (and pays it in the final transaction).
--   Both FX rates and transaction dates are predetermined between the counterparties.
--   For example: USD 1000k vs EUR 1100k (fx rate: 1.10) today
--                USD 1000k vs EUR 1200k (fx rate: 1.20) in 6 months
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-ForeignExchange-Instrument.html#type-daml-finance-instrument-swap-v0-foreignexchange-instrument-instrument-3514
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> Decimal -> Decimal -> Date -> Date -> Date -> InstrumentKey -> InstrumentKey -> PartiesMap -> Time -> Instrument

-- | The depository of the instrument.
depository :: Instrument -> Party

-- | The issuer of the instrument.
issuer :: Instrument -> Party

-- | An identifier of the instrument.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | The fx rate used for the first swap payment.
firstFxRate :: Instrument -> Decimal

-- | The fx rate used for the final swap payment.
finalFxRate :: Instrument -> Decimal

-- | The date when the swap was issued.
issueDate :: Instrument -> Date

-- | The first payment date of the swap.
firstPaymentDate :: Instrument -> Date

-- | The final payment date of the swap.
maturityDate :: Instrument -> Date

-- | The base currency of the swap, which will be exchanged to another (foreign) currency on
--   the first payment date. For example, in case of USD this should be a USD cash instrument.
baseCurrency :: Instrument -> InstrumentKey

-- | The foreign currency of the swap. For example, in case of EUR this should be a EUR cash
--   instrument.
foreignCurrency :: Instrument -> InstrumentKey

-- | The observers of the instrument.
observers :: Instrument -> PartiesMap

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Instrument -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Factory.html#module-daml-finance-instrument-swap-v0-fpml-factory-61592
module Daml.Finance.Instrument.Swap.V0.Fpml.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Factory.html#type-daml-finance-instrument-swap-v0-fpml-factory-t-69693
type T = Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Factory.html#type-daml-finance-instrument-swap-v0-fpml-factory-factory-13237
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Factory.html#type-daml-finance-instrument-swap-v0-fpml-factory-factory-13237
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Instrument.html#module-daml-finance-instrument-swap-v0-fpml-instrument-27524
module Daml.Finance.Instrument.Swap.V0.Fpml.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Instrument.html#type-daml-finance-instrument-swap-v0-fpml-instrument-t-92937
type T = Instrument

-- | This template models a swap specified by FpML swapStream modules.
--   It can contain one or several legs of different types: fix or floating rates
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Instrument.html#type-daml-finance-instrument-swap-v0-fpml-instrument-instrument-27235
data (Template Instrument) => Instrument

-- | This template models a swap specified by FpML swapStream modules.
--   It can contain one or several legs of different types: fix or floating rates
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Instrument.html#type-daml-finance-instrument-swap-v0-fpml-instrument-instrument-27235
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> [SwapStream] -> Text -> Party -> [InstrumentKey] -> PartiesMap -> Time -> Instrument

-- | The depository of the instrument.
depository :: Instrument -> Party

-- | The issuer of the instrument.
issuer :: Instrument -> Party

-- | An identifier of the instrument.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | Each element describes a stream of swap payments, for example a regular fixed or floating
--   rate.
swapStreams :: Instrument -> [SwapStream]

-- | Used to the identify which counterparty is the issuer in the swapStream.
issuerPartyRef :: Instrument -> Text

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: Instrument -> Party

-- | The currencies of the different swap legs, one for each swapStream. For example, if one
--   leg pays in USD this should be a USD cash instrument.
currencies :: Instrument -> [InstrumentKey]

-- | The observers of the instrument.
observers :: Instrument -> PartiesMap

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Instrument -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#module-daml-finance-instrument-swap-v0-fpml-util-77135
module Daml.Finance.Instrument.Swap.V0.Fpml.Util

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#type-daml-finance-instrument-swap-v0-fpml-util-c-60023
type C = Claim Date Decimal Deliverable Observable

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#type-daml-finance-instrument-swap-v0-fpml-util-o-77403
type O = Observation Date Decimal Observable

-- | Create a schedule for calculation periods.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-createcalculationperiodicschedule-76747
createCalculationPeriodicSchedule :: CalculationPeriodDates -> PeriodicSchedule

-- | Create a schedule for payment periods.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-createpaymentperiodicschedule-56262
createPaymentPeriodicSchedule :: SwapStream -> PeriodicSchedule

-- | Retrieve holiday calendars and adjust a date as specified in a BusinessDayAdjustments FpML
--   element
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-getcalendarsandadjust-48793
getCalendarsAndAdjust :: Date -> BusinessDayAdjustments -> Party -> Party -> Update Date

-- | Adjust a date as specified in a BusinessDayAdjustments FpML element
--   (or not at all if NoAdjustment)
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-adjustdateaccordingtobusinessdayadjustments-45594
adjustDateAccordingToBusinessDayAdjustments :: Date -> BusinessDayAdjustments -> Party -> Party -> Update Date

-- | Adjust payment schedule according to paymentDaysOffset (if available).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-applypaymentdaysoffset-98909
applyPaymentDaysOffset :: [SchedulePeriod] -> PaymentDates -> [HolidayCalendarData] -> [SchedulePeriod]

-- | Define observable part of claim when one specific floating rate is provided for a stub period.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-getsinglestubrate-19846
getSingleStubRate :: StubFloatingRate -> Date -> Optional O

-- | Linearly interpolates two rates within a period, as specified in
--   https://www.isda.org/a/aWkgE/Linear-interpolation-04022022.pdf
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-getinterpolatedstubrate-51087
getInterpolatedStubRate :: StubFloatingRate -> StubFloatingRate -> SchedulePeriod -> HolidayCalendarData -> BusinessDayConventionEnum -> Date -> Optional O

-- | Get the floating stub rate to be used for a stub period.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-getstubratefloating-23338
getStubRateFloating :: [StubFloatingRate] -> SchedulePeriod -> HolidayCalendarData -> BusinessDayConventionEnum -> Date -> Optional O

-- | Get the stub rate to be used for a stub period.
--   Currently, three main options from the FpML schema are supported:
--   1. A fix stubRate.
--   2. One or two floating rates for the stub.
--   3. No specific stub rate defined -> use the same rate as is used for regular periods.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-getstubrate-20396
getStubRate :: StubCalculationPeriodAmount -> Bool -> SchedulePeriod -> HolidayCalendarData -> BusinessDayConventionEnum -> Bool -> Date -> Optional O

-- | Align the payment schedule with the calculation schedule.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-alignpaymentschedule-70469
alignPaymentSchedule :: [SchedulePeriod] -> [SchedulePeriod] -> Update [SchedulePeriod]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-verifyfxscheduleandgetid-5325
verifyFxScheduleAndGetId :: [SchedulePeriod] -> SwapStream -> Party -> Party -> FxLinkedNotionalSchedule -> Update (Optional Text, Optional Decimal, Optional [Date])

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-getfxrateid-28493
getFxRateId :: [SchedulePeriod] -> SwapStream -> Party -> Party -> Update (Optional Text, Optional Decimal, Optional [Date])

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-getratefixingsandcalendars-78007
getRateFixingsAndCalendars :: SwapStream -> ResetDates -> [SchedulePeriod] -> Party -> Party -> Update ([Date], HolidayCalendarData)

-- | Create claims from swapStream that describes a fixed coupon stream.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-calculatefixpaymentclaimsfromswapstream-23769
calculateFixPaymentClaimsFromSwapStream :: FixedRateSchedule -> SwapStream -> PeriodicSchedule -> [SchedulePeriod] -> [SchedulePeriod] -> Bool -> Bool -> Deliverable -> Party -> Party -> Optional Text -> Optional [Date] -> [(Decimal, Bool)] -> Update [TaggedClaim]

-- | Create principal exchange claims.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-calculateprincipalexchangepaymentclaims-76236
calculatePrincipalExchangePaymentClaims :: [SchedulePeriod] -> Bool -> Deliverable -> Optional Text -> [(Decimal, Bool)] -> [Date] -> PrincipalExchanges -> TaggedClaim

-- | Apply rounding convention to the rate used in a calculation period.
--   Takes a Rounding FpML object as an input:
--   https://www.fpml.org/spec/fpml-5-11-3-lcwd-1/html/confirmation/schemaDocumentation/schemas/fpml-shared-5-11_xsd/complexTypes/FloatingRateCalculation/finalRateRounding.html
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-roundrate-17286
roundRate :: Decimal -> Rounding -> Decimal

-- | Check whether a FloatingRateCalculation uses a reference rate that needs to be compounded.
--   Seems there is no FpML element that specificies this, but that it is implicit in the rate name,
--   for example "USD-SOFR-COMPOUND"
--   If it is a compounded reference rate, also return the daycount convention that was used for the
--   corresponding reference index, e.g. Act360 in the case of the SOFR Index.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-checkrefratecompounding-33788
checkRefRateCompounding :: FloatingRateCalculation -> (Bool, Optional DayCountConventionEnum)

-- | Create claims from swapStream that describes a floating coupon stream.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-calculatefloatingpaymentclaimsfromswapstream-39727
calculateFloatingPaymentClaimsFromSwapStream :: FloatingRateCalculation -> SwapStream -> PeriodicSchedule -> [SchedulePeriod] -> [SchedulePeriod] -> Bool -> Bool -> Deliverable -> Party -> Party -> Optional Text -> Optional [Date] -> [(Decimal, Bool)] -> Update [TaggedClaim]

-- | Create claims from swapStream that describes a fixed or floating coupon stream.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-Fpml-Util.html#function-daml-finance-instrument-swap-v0-fpml-util-calculateclaimsfromswapstream-39034
calculateClaimsFromSwapStream :: SwapStream -> PeriodicSchedule -> [SchedulePeriod] -> [SchedulePeriod] -> Optional SwapStream -> Bool -> Bool -> Deliverable -> Party -> Party -> Update [TaggedClaim]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-InterestRate-Factory.html#module-daml-finance-instrument-swap-v0-interestrate-factory-55239
module Daml.Finance.Instrument.Swap.V0.InterestRate.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-InterestRate-Factory.html#type-daml-finance-instrument-swap-v0-interestrate-factory-t-49112
type T = Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-InterestRate-Factory.html#type-daml-finance-instrument-swap-v0-interestrate-factory-factory-60524
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-InterestRate-Factory.html#type-daml-finance-instrument-swap-v0-interestrate-factory-factory-60524
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-InterestRate-Instrument.html#module-daml-finance-instrument-swap-v0-interestrate-instrument-37965
module Daml.Finance.Instrument.Swap.V0.InterestRate.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-InterestRate-Instrument.html#type-daml-finance-instrument-swap-v0-interestrate-instrument-t-82562
type T = Instrument

-- | This template models an interest rate swap.
--   It pays a fix vs floating rate at the end of every payment period.
--   The floating leg depends on a reference rate (observed at the beginning of the swap payment
--   period). For example: 3M Euribor vs 2.5% fix.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-InterestRate-Instrument.html#type-daml-finance-instrument-swap-v0-interestrate-instrument-instrument-3842
data (Template Instrument) => Instrument

-- | This template models an interest rate swap.
--   It pays a fix vs floating rate at the end of every payment period.
--   The floating leg depends on a reference rate (observed at the beginning of the swap payment
--   period). For example: 3M Euribor vs 2.5% fix.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Swap-V0-InterestRate-Instrument.html#type-daml-finance-instrument-swap-v0-interestrate-instrument-instrument-3842
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> FloatingRate -> Bool -> Decimal -> PeriodicSchedule -> [Text] -> Party -> DayCountConventionEnum -> InstrumentKey -> PartiesMap -> Time -> Instrument

-- | The depository of the instrument.
depository :: Instrument -> Party

-- | The issuer of the instrument.
issuer :: Instrument -> Party

-- | An identifier of the instrument.
id :: Instrument -> Id

-- | The instrument's version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | A description of the floating rate to be used. This supports both Libor and SOFR style
--   reference rates (using a compounded index, e.g. the SOFR Index).
floatingRate :: Instrument -> FloatingRate

-- | Indicate whether a holding owner of this instrument receives the fix or the floating leg
--   of the swap.
ownerReceivesFix :: Instrument -> Bool

-- | The interest rate of the fix leg. For example, in case of "3M Euribor vs 2.5% fix" this
--   should be 0.025.
fixRate :: Instrument -> Decimal

-- | The schedule for the periodic swap payments.
periodicSchedule :: Instrument -> PeriodicSchedule

-- | The identifiers of the holiday calendars to be used for the swap payment schedule.
holidayCalendarIds :: Instrument -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: Instrument -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: Instrument -> DayCountConventionEnum

-- | The currency of the swap. For example, if the swap pays in USD this should be a USD cash
--   instrument.
currency :: Instrument -> InstrumentKey

-- | The observers of the instrument.
observers :: Instrument -> PartiesMap

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Instrument -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Token-V4-Factory.html#module-daml-finance-instrument-token-v4-factory-92377
module Daml.Finance.Instrument.Token.V4.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Token-V4-Factory.html#type-daml-finance-instrument-token-v4-factory-t-53478
type T = Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Token-V4-Factory.html#type-daml-finance-instrument-token-v4-factory-factory-83934
data (Template Factory) => Factory

-- | Factory template for instrument creation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Token-V4-Factory.html#type-daml-finance-instrument-token-v4-factory-factory-83934
Factory :: Party -> PartiesMap -> Factory

-- | The factory's provider.
provider :: Factory -> Party

-- | The factory's observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Token-V4-Instrument.html#module-daml-finance-instrument-token-v4-instrument-53415
module Daml.Finance.Instrument.Token.V4.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Token-V4-Instrument.html#type-daml-finance-instrument-token-v4-instrument-t-54816
type T = Instrument

-- | Implementation of a Token Instrument, which is a simple instrument whose economic terms
--   on the ledger are represented by an `id` and a textual `description`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Token-V4-Instrument.html#type-daml-finance-instrument-token-v4-instrument-instrument-45256
data (Template Instrument) => Instrument

-- | Implementation of a Token Instrument, which is a simple instrument whose economic terms
--   on the ledger are represented by an `id` and a textual `description`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Token-V4-Instrument.html#type-daml-finance-instrument-token-v4-instrument-instrument-45256
Instrument :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> Time -> PartiesMap -> Instrument

-- | The instrument's depository.
depository :: Instrument -> Party

-- | The instrument's issuer.
issuer :: Instrument -> Party

-- | The intrument's identifier.
id :: Instrument -> Id

-- | A textual instrument version.
version :: Instrument -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: Instrument -> HoldingStandard

-- | A description of the instrument.
description :: Instrument -> Text

-- | Timestamp as of which the instrument is valid. This usually coincides with the timestamp
--   of the event that creates the instrument. It usually does not coincide with ledger time.
validAsOf :: Instrument -> Time

-- | Observers.
observers :: Instrument -> PartiesMap

-- | We recommend to import this module qualified.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#module-daml-finance-interface-account-v4-account-30007
module Daml.Finance.Interface.Account.V4.Account

-- | Controllers of the account (related to transfers).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#type-daml-finance-interface-account-v4-account-controllers-59817
data Controllers

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#constr-daml-finance-interface-account-v4-account-controllers-11570
Controllers :: Parties -> Parties -> Controllers

-- | Parties instructing a transfer (outgoing).
outgoing :: Controllers -> Parties

-- | Parties approving a transfer (incoming).
incoming :: Controllers -> Parties

-- | Type synonym for `Account`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#type-daml-finance-interface-account-v4-account-i-22897
type I = Account

-- | Type synonym for `Reference`. This type is currently used as a work-around given the lack of
--   interface keys.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#type-daml-finance-interface-account-v4-account-r-46890
type R = Reference

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#type-daml-finance-interface-account-v4-account-v-29510
type V = View

-- | View for `Account`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#type-daml-finance-interface-account-v4-account-view-18066
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#constr-daml-finance-interface-account-v4-account-view-46419
View :: Party -> Party -> Id -> Text -> Controllers -> View

-- | Party providing accounting services.
custodian :: View -> Party

-- | Party owning this account.
owner :: View -> Party

-- | Identifier for the account.
id :: View -> Id

-- | Human readable description of the account.
description :: View -> Text

-- | Parties controlling transfers.
controllers :: View -> Controllers

-- | Convert the account's 'View' to its key.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#function-daml-finance-interface-account-v4-account-tokey-30232
toKey :: View -> AccountKey

-- | Retrieves the key of an `Account`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#function-daml-finance-interface-account-v4-account-accountkey-74157
accountKey :: (HasToInterface i Account) => i -> AccountKey

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#function-daml-finance-interface-account-v4-account-getkey-54894
getKey :: Account -> AccountKey

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#function-daml-finance-interface-account-v4-account-credit-27484
credit :: Account -> Credit -> Update (ContractId I)

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#function-daml-finance-interface-account-v4-account-debit-31346
debit :: Account -> Debit -> Update ()

-- | Disclose account.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#function-daml-finance-interface-account-v4-account-disclose-16489
disclose :: (Text, Parties) -> Party -> Parties -> AccountKey -> Update (ContractId Account)

-- | Undisclose account.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#function-daml-finance-interface-account-v4-account-undisclose-26330
undisclose :: (Text, Parties) -> Party -> Parties -> AccountKey -> Update (Optional (ContractId Account))

-- | Exercise interface by key.
--   This method can be used to exercise a choice on an `Account` given its `AccountKey`.
--   Requires as input the `AccountKey`,
--   For example:
--   ```
--   exerciseInterfaceByKey @Account.I accountKey actor Account.Debit with holdingCid
--   ```
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#function-daml-finance-interface-account-v4-account-exerciseinterfacebykey-87310
exerciseInterfaceByKey :: (HasInterfaceTypeRep i, HasExercise i c r) => AccountKey -> Party -> c -> Update r

-- | An interface which represents an established relationship between a provider and an owner.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#type-daml-finance-interface-account-v4-account-account-93407
data (HasInterfaceView Account V) => Account

-- | Creates a new `Holding` in the corresponding `Account`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#type-daml-finance-interface-account-v4-account-credit-92816
data (Choice Account Credit (ContractId I)) => Credit

-- | Creates a new `Holding` in the corresponding `Account`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#type-daml-finance-interface-account-v4-account-credit-92816
Credit :: Quantity InstrumentKey Decimal -> Credit

-- | The target `Instrument` and corresponding amount.
quantity :: Credit -> Quantity InstrumentKey Decimal

-- | Removes an existing `Holding`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#type-daml-finance-interface-account-v4-account-debit-98062
data (Choice Account Debit ()) => Debit

-- | Removes an existing `Holding`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#type-daml-finance-interface-account-v4-account-debit-98062
Debit :: ContractId I -> Debit

-- | The `Holding`'s contract id.
holdingCid :: Debit -> ContractId I

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#type-daml-finance-interface-account-v4-account-getview-21073
data (Choice Account GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#type-daml-finance-interface-account-v4-account-getview-21073
GetView :: Party -> GetView

-- | The party fetching the view.
viewer :: GetView -> Party

-- | Archive the account.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#type-daml-finance-interface-account-v4-account-remove-91479
data (Choice Account Remove ()) => Remove

-- | Archive the account.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Account.html#type-daml-finance-interface-account-v4-account-remove-91479
Remove :: Remove

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Factory.html#module-daml-finance-interface-account-v4-factory-69358
module Daml.Finance.Interface.Account.V4.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Factory.html#type-daml-finance-interface-account-v4-factory-i-68866
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Factory.html#type-daml-finance-interface-account-v4-factory-v-97013
type V = View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Factory.html#type-daml-finance-interface-account-v4-factory-view-19547
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Factory.html#constr-daml-finance-interface-account-v4-factory-view-94498
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Factory.html#function-daml-finance-interface-account-v4-factory-createtick-33466
create' :: Factory -> Create -> Update (ContractId I)

-- | Interface that allows implementing templates to create accounts.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Factory.html#type-daml-finance-interface-account-v4-factory-factory-48831
data (HasInterfaceView Factory V) => Factory

-- | Create a new account.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Factory.html#type-daml-finance-interface-account-v4-factory-create-72130
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new account.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Factory.html#type-daml-finance-interface-account-v4-factory-create-72130
Create :: AccountKey -> HoldingFactoryKey -> Controllers -> Text -> PartiesMap -> Create

-- | The account's key.
account :: Create -> AccountKey

-- | Associated holding factory for the account.
holdingFactory :: Create -> HoldingFactoryKey

-- | Controllers of the account.
controllers :: Create -> Controllers

-- | Human readable description of the account.
description :: Create -> Text

-- | The account's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Util.html#module-daml-finance-interface-account-v4-util-78761
module Daml.Finance.Interface.Account.V4.Util

-- | Fetch the account of a holding.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Util.html#function-daml-finance-interface-account-v4-util-fetchaccount-79234
fetchAccount :: (HasToInterface t I) => t -> Update I

-- | Get the account key of a holding.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Util.html#function-daml-finance-interface-account-v4-util-getaccount-6084
getAccount :: (HasToInterface t I) => t -> AccountKey

-- | Get the custodian of a holding.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Util.html#function-daml-finance-interface-account-v4-util-getcustodian-57495
getCustodian :: (HasToInterface t I) => t -> Party

-- | Get the owner of a holding.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Account-V4-Util.html#function-daml-finance-interface-account-v4-util-getowner-12282
getOwner :: (HasToInterface t I) => t -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Claim.html#module-daml-finance-interface-claims-v4-claim-38573
module Daml.Finance.Interface.Claims.V4.Claim

-- | Type synonym for `Claim`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Claim.html#type-daml-finance-interface-claims-v4-claim-i-57743
type I = Claim

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Claim.html#type-daml-finance-interface-claims-v4-claim-v-42696
type V = View

-- | View for `Claim`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Claim.html#type-daml-finance-interface-claims-v4-claim-view-18692
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Claim.html#constr-daml-finance-interface-claims-v4-claim-view-62295
View :: Time -> View

-- | The claim's acquisition time.
acquisitionTime :: View -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Claim.html#function-daml-finance-interface-claims-v4-claim-getclaims-87153
getClaims :: Claim -> GetClaims -> Update [TaggedClaim]

-- | Retrieves the single claim representing the template. An error is thrown if there are zero or
--   more than one claims.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Claim.html#function-daml-finance-interface-claims-v4-claim-getclaim-68311
getClaim :: Party -> Claim -> Update C

-- | Retrieves the claim's acquisition time.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Claim.html#function-daml-finance-interface-claims-v4-claim-getacquisitiontime-25831
getAcquisitionTime :: Claim -> Time

-- | Interface implemented by templates that can be represented as Contingent Claims.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Claim.html#type-daml-finance-interface-claims-v4-claim-claim-91182
data (HasInterfaceView Claim V) => Claim

-- | Retrieves the list of claims representing the instrument. This might involve fetching
--   reference data, such as calendars, on which the actor must have visibility.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Claim.html#type-daml-finance-interface-claims-v4-claim-getclaims-15445
data (Choice Claim GetClaims [TaggedClaim]) => GetClaims

-- | Retrieves the list of claims representing the instrument. This might involve fetching
--   reference data, such as calendars, on which the actor must have visibility.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Claim.html#type-daml-finance-interface-claims-v4-claim-getclaims-15445
GetClaims :: Party -> GetClaims

-- | The party retrieving the claims.
actor :: GetClaims -> Party

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Claim.html#type-daml-finance-interface-claims-v4-claim-getview-95007
data (Choice Claim GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Claim.html#type-daml-finance-interface-claims-v4-claim-getview-95007
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Dynamic-Instrument.html#module-daml-finance-interface-claims-v4-dynamic-instrument-86702
module Daml.Finance.Interface.Claims.V4.Dynamic.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Dynamic-Instrument.html#type-daml-finance-interface-claims-v4-dynamic-instrument-i-98466
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Dynamic-Instrument.html#type-daml-finance-interface-claims-v4-dynamic-instrument-v-26613
type V = View

-- | View for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Dynamic-Instrument.html#type-daml-finance-interface-claims-v4-dynamic-instrument-view-90779
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Dynamic-Instrument.html#constr-daml-finance-interface-claims-v4-dynamic-instrument-view-84562
View :: Party -> Time -> [EventData] -> View

-- | Party performing the lifecycling.
lifecycler :: View -> Party

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: View -> Time

-- | A list of previous elections that have been lifecycled on this instrument so far.
prevEvents :: View -> [EventData]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Dynamic-Instrument.html#function-daml-finance-interface-claims-v4-dynamic-instrument-createnewversion-59050
createNewVersion :: Instrument -> CreateNewVersion -> Update (ContractId Instrument)

-- | Interface implemented by instruments that create Contingent Claims trees on-the-fly (i.e., the
--   tree is not stored on disk as part of a contract, but created and processed in-memory).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Dynamic-Instrument.html#type-daml-finance-interface-claims-v4-dynamic-instrument-instrument-19765
data (HasInterfaceView Instrument V) => Instrument

-- | Create a new version of an instrument, using a new lastEventTimestamp and a list of
--   previous elections (if applicable).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Dynamic-Instrument.html#type-daml-finance-interface-claims-v4-dynamic-instrument-createnewversion-58950
data (Choice Instrument CreateNewVersion (ContractId Instrument)) => CreateNewVersion

-- | Create a new version of an instrument, using a new lastEventTimestamp and a list of
--   previous elections (if applicable).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Dynamic-Instrument.html#type-daml-finance-interface-claims-v4-dynamic-instrument-createnewversion-58950
CreateNewVersion :: Text -> Time -> [EventData] -> CreateNewVersion

-- | The new version of the instrument.
version :: CreateNewVersion -> Text

-- | The new lastEventTimestamp of the instrument.
lastEventTimestamp :: CreateNewVersion -> Time

-- | A list of previous elections that have been lifecycled on this instrument so far.
prevEvents :: CreateNewVersion -> [EventData]

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Dynamic-Instrument.html#type-daml-finance-interface-claims-v4-dynamic-instrument-getview-33666
data (Choice Instrument GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Dynamic-Instrument.html#type-daml-finance-interface-claims-v4-dynamic-instrument-getview-33666
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Types.html#module-daml-finance-interface-claims-v4-types-7840
module Daml.Finance.Interface.Claims.V4.Types

-- | The specialized claim type.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Types.html#type-daml-finance-interface-claims-v4-types-c-76802
type C = Claim Time Decimal Deliverable Observable

-- | Type used to reference assets in the claim tree.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Types.html#type-daml-finance-interface-claims-v4-types-deliverable-51084
type Deliverable = InstrumentKey

-- | Type used to reference observables in the claim tree.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Types.html#type-daml-finance-interface-claims-v4-types-observable-11919
type Observable = Text

-- | Type used to record pending payments.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Types.html#type-daml-finance-interface-claims-v4-types-pending-22818
data Pending

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Types.html#constr-daml-finance-interface-claims-v4-types-pending-2747
Pending :: Time -> Text -> Deliverable -> Decimal -> Pending

t :: Pending -> Time

tag :: Pending -> Text

instrument :: Pending -> Deliverable

amount :: Pending -> Decimal

-- | A claim and a textual tag.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Types.html#type-daml-finance-interface-claims-v4-types-taggedclaim-85831
data TaggedClaim

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Claims-V4-Types.html#constr-daml-finance-interface-claims-v4-types-taggedclaim-83974
TaggedClaim :: C -> Text -> TaggedClaim

claim :: TaggedClaim -> C

tag :: TaggedClaim -> Text

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Numeric-Observation.html#module-daml-finance-interface-data-v4-numeric-observation-41921
module Daml.Finance.Interface.Data.V4.Numeric.Observation

-- | Type synonym for `Observation`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Numeric-Observation.html#type-daml-finance-interface-data-v4-numeric-observation-i-84859
type I = Observation

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Numeric-Observation.html#type-daml-finance-interface-data-v4-numeric-observation-v-43612
type V = View

-- | View for `Observation`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Numeric-Observation.html#type-daml-finance-interface-data-v4-numeric-observation-view-99464
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Numeric-Observation.html#constr-daml-finance-interface-data-v4-numeric-observation-view-52415
View :: Party -> Id -> Map Time Decimal -> PartiesMap -> View

-- | The reference data provider.
provider :: View -> Party

-- | A textual identifier.
id :: View -> Id

-- | The time-dependent values.
observations :: View -> Map Time Decimal

-- | Observers.
observers :: View -> PartiesMap

-- | Interface for a time-dependent numeric `Observation`, where the values are explicitly stored
--   on-ledger.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Numeric-Observation.html#type-daml-finance-interface-data-v4-numeric-observation-observation-69182
data (HasInterfaceView Observation V) => Observation

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Numeric-Observation.html#type-daml-finance-interface-data-v4-numeric-observation-getview-73155
data (Choice Observation GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Numeric-Observation.html#type-daml-finance-interface-data-v4-numeric-observation-getview-73155
GetView :: Party -> GetView

-- | The party fetching the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Numeric-Observation-Factory.html#module-daml-finance-interface-data-v4-numeric-observation-factory-95641
module Daml.Finance.Interface.Data.V4.Numeric.Observation.Factory

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Numeric-Observation-Factory.html#type-daml-finance-interface-data-v4-numeric-observation-factory-f-94552
type F = Factory

-- | Type synonyms for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Numeric-Observation-Factory.html#type-daml-finance-interface-data-v4-numeric-observation-factory-i-40079
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Numeric-Observation-Factory.html#type-daml-finance-interface-data-v4-numeric-observation-factory-v-25032
type V = View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Numeric-Observation-Factory.html#type-daml-finance-interface-data-v4-numeric-observation-factory-view-86852
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Numeric-Observation-Factory.html#constr-daml-finance-interface-data-v4-numeric-observation-factory-view-89975
View :: Party -> PartiesMap -> View

-- | The provider of the `Factory`.
provider :: View -> Party

-- | The observers of the `Factory`.
observers :: View -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Numeric-Observation-Factory.html#function-daml-finance-interface-data-v4-numeric-observation-factory-createtick-82983
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory contract used to create, remove and view a `Numeric.Observation`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Numeric-Observation-Factory.html#type-daml-finance-interface-data-v4-numeric-observation-factory-factory-52430
data (HasInterfaceView Factory V) => Factory

-- | Create an `Observation`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Numeric-Observation-Factory.html#type-daml-finance-interface-data-v4-numeric-observation-factory-create-1681
data (Choice Factory Create (ContractId I)) => Create

-- | Create an `Observation`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Numeric-Observation-Factory.html#type-daml-finance-interface-data-v4-numeric-observation-factory-create-1681
Create :: Party -> Id -> Map Time Decimal -> PartiesMap -> Create

-- | The reference data provider.
provider :: Create -> Party

-- | A textual identifier.
id :: Create -> Id

-- | The time-dependent values.
observations :: Create -> Map Time Decimal

-- | Observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar.html#module-daml-finance-interface-data-v4-reference-holidaycalendar-24201
module Daml.Finance.Interface.Data.V4.Reference.HolidayCalendar

-- | Type synonym for `HolidayCalendar`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar.html#type-daml-finance-interface-data-v4-reference-holidaycalendar-i-49491
type I = HolidayCalendar

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar.html#type-daml-finance-interface-data-v4-reference-holidaycalendar-v-77764
type V = View

-- | View for `HolidayCalendar`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar.html#type-daml-finance-interface-data-v4-reference-holidaycalendar-view-55728
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar.html#constr-daml-finance-interface-data-v4-reference-holidaycalendar-view-52807
View :: Party -> HolidayCalendarData -> View

-- | The parties providing the `HolidayCalendar`.
provider :: View -> Party

-- | Holiday Calendar Data used to define holidays.
calendar :: View -> HolidayCalendarData

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar.html#function-daml-finance-interface-data-v4-reference-holidaycalendar-updatecalendar-64684
updateCalendar :: HolidayCalendar -> UpdateCalendar -> Update (ContractId HolidayCalendar)

-- | Interface for contracts storing holiday calendar data on the ledger.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar.html#type-daml-finance-interface-data-v4-reference-holidaycalendar-holidaycalendar-62534
data (HasInterfaceView HolidayCalendar V) => HolidayCalendar

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar.html#type-daml-finance-interface-data-v4-reference-holidaycalendar-getview-27451
data (Choice HolidayCalendar GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar.html#type-daml-finance-interface-data-v4-reference-holidaycalendar-getview-27451
GetView :: Party -> GetView

-- | The party fetching the view.
viewer :: GetView -> Party

-- | Updates the holiday calendar.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar.html#type-daml-finance-interface-data-v4-reference-holidaycalendar-updatecalendar-40272
data (Choice HolidayCalendar UpdateCalendar (ContractId HolidayCalendar)) => UpdateCalendar

-- | Updates the holiday calendar.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar.html#type-daml-finance-interface-data-v4-reference-holidaycalendar-updatecalendar-40272
UpdateCalendar :: HolidayCalendarData -> UpdateCalendar

-- | The new `HolidayCalendarData`.
newCalendar :: UpdateCalendar -> HolidayCalendarData

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar-Factory.html#module-daml-finance-interface-data-v4-reference-holidaycalendar-factory-36485
module Daml.Finance.Interface.Data.V4.Reference.HolidayCalendar.Factory

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar-Factory.html#type-daml-finance-interface-data-v4-reference-holidaycalendar-factory-f-64348
type F = Factory

-- | Type synonyms for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar-Factory.html#type-daml-finance-interface-data-v4-reference-holidaycalendar-factory-i-75115
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar-Factory.html#type-daml-finance-interface-data-v4-reference-holidaycalendar-factory-v-94828
type V = View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar-Factory.html#type-daml-finance-interface-data-v4-reference-holidaycalendar-factory-view-44824
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar-Factory.html#constr-daml-finance-interface-data-v4-reference-holidaycalendar-factory-view-427
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar-Factory.html#function-daml-finance-interface-data-v4-reference-holidaycalendar-factory-createtick-22339
create' :: Factory -> Create -> Update (ContractId I)

-- | Interface that allows implementing templates to create holiday calendars.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar-Factory.html#type-daml-finance-interface-data-v4-reference-holidaycalendar-factory-factory-89386
data (HasInterfaceView Factory V) => Factory

-- | Create a new Holiday Calendar.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar-Factory.html#type-daml-finance-interface-data-v4-reference-holidaycalendar-factory-create-25637
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new Holiday Calendar.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-HolidayCalendar-Factory.html#type-daml-finance-interface-data-v4-reference-holidaycalendar-factory-create-25637
Create :: HolidayCalendarData -> PartiesMap -> Party -> Create

-- | Holiday Calendar Data used to define holidays.
calendar :: Create -> HolidayCalendarData

-- | Observers.
observers :: Create -> PartiesMap

-- | The calendar's provider.
provider :: Create -> Party

-- | This module defines an interface for `BusinessTime` rules, which are contracts to control and
--   keep track of business time.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-Time.html#module-daml-finance-interface-data-v4-reference-time-12465
module Daml.Finance.Interface.Data.V4.Reference.Time

-- | Type synonym for `Time`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-Time.html#type-daml-finance-interface-data-v4-reference-time-i-2519
type I = Time

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-Time.html#type-daml-finance-interface-data-v4-reference-time-v-96032
type V = View

-- | View for `Time`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-Time.html#type-daml-finance-interface-data-v4-reference-time-view-8124
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-Time.html#constr-daml-finance-interface-data-v4-reference-time-view-72445
View :: Parties -> Id -> View

-- | Parties controlling time.
providers :: View -> Parties

-- | Textual identifier for the time rule.
id :: View -> Id

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-Time.html#function-daml-finance-interface-data-v4-reference-time-advance-63914
advance :: Time -> ContractId Time -> Advance -> Update (ContractId Time, ContractId Event)

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-Time.html#function-daml-finance-interface-data-v4-reference-time-rewind-25948
rewind :: Time -> ContractId Time -> Rewind -> Update (ContractId Time, ContractId Event)

-- | An interface to manage and control business time. Controlled time rules (i.e. clocks) are
--   managed by entities that have control certain business time events. These can be trading-open /
--   -close on an exchange, start-of-day / end-of-day events of a trading desk, or just a daily
--   clock tick to signal the passing of aticking. Intervals in which
--   the clock "ticks" don't have to be regular, and can e.g. consider business days only.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-Time.html#type-daml-finance-interface-data-v4-reference-time-time-96632
data (HasInterfaceView Time V) => Time

-- | Advance time to its next state.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-Time.html#type-daml-finance-interface-data-v4-reference-time-advance-64582
data (Choice Time Advance (ContractId Time, ContractId Event)) => Advance

-- | Advance time to its next state.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-Time.html#type-daml-finance-interface-data-v4-reference-time-advance-64582
Advance :: Id -> Text -> Advance

-- | Event identifier.
eventId :: Advance -> Id

-- | Event description.
eventDescription :: Advance -> Text

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-Time.html#type-daml-finance-interface-data-v4-reference-time-getview-6375
data (Choice Time GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-Time.html#type-daml-finance-interface-data-v4-reference-time-getview-6375
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

-- | Rewind time to its previous state.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-Time.html#type-daml-finance-interface-data-v4-reference-time-rewind-93104
data (Choice Time Rewind (ContractId Time, ContractId Event)) => Rewind

-- | Rewind time to its previous state.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Data-V4-Reference-Time.html#type-daml-finance-interface-data-v4-reference-time-rewind-93104
Rewind :: Id -> Text -> Rewind

-- | Event identifier.
eventId :: Rewind -> Id

-- | Event description.
eventDescription :: Rewind -> Text

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#module-daml-finance-interface-holding-v4-factory-49942
module Daml.Finance.Interface.Holding.V4.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#type-daml-finance-interface-holding-v4-factory-i-40318
type I = Factory

-- | Type synonym for `Reference`. This type is currently used as a work-around given the lack of
--   interface keys.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#type-daml-finance-interface-holding-v4-factory-r-85845
type R = Reference

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#type-daml-finance-interface-holding-v4-factory-v-3225
type V = View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#type-daml-finance-interface-holding-v4-factory-view-66511
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#constr-daml-finance-interface-holding-v4-factory-view-77806
View :: Party -> Id -> View

-- | The provider of the `Factory`.
provider :: View -> Party

-- | Identifier for the holding factory.
id :: View -> Id

-- | Convert the account's 'View' to its key.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#function-daml-finance-interface-holding-v4-factory-tokey-36435
toKey :: View -> HoldingFactoryKey

-- | Retrieves the key of a `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#function-daml-finance-interface-holding-v4-factory-holdingfactorykey-61521
holdingFactoryKey :: (HasToInterface i Factory) => i -> HoldingFactoryKey

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#function-daml-finance-interface-holding-v4-factory-getkey-42011
getKey :: Factory -> HoldingFactoryKey

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#function-daml-finance-interface-holding-v4-factory-createtick-50998
create' :: Factory -> Create -> Update (ContractId I)

-- | Create factory including reference.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#function-daml-finance-interface-holding-v4-factory-createfactory-37513
createFactory :: (HasCreate f, HasToInterface f Factory) => f -> Update (ContractId Factory)

-- | Disclose factory.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#function-daml-finance-interface-holding-v4-factory-disclose-27612
disclose :: (Text, Parties) -> Party -> Parties -> HoldingFactoryKey -> Update (ContractId Factory)

-- | Undisclose factory.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#function-daml-finance-interface-holding-v4-factory-undisclose-93111
undisclose :: (Text, Parties) -> Party -> Parties -> HoldingFactoryKey -> Update (Optional (ContractId Factory))

-- | Exercise interface by key.
--   This method can be used to exercise a choice on a `Factory` given its `HoldingFactoryKey`.
--   Requires as input the `HoldingFactoryKey`, the actor exercising the choice, and the choice
--   arguments. For example:
--   ```
--   exerciseInterfaceByKey @HoldingFactory.I holdingFactoryKey actor
--     HoldingFactory.Create with instrument; account; amount; observers
--   ```
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#function-daml-finance-interface-holding-v4-factory-exerciseinterfacebykey-335
exerciseInterfaceByKey :: (HasInterfaceTypeRep i, HasExercise i c r) => HoldingFactoryKey -> Party -> c -> Update r

-- | Holding factory contract used to create (credit) holdings.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#type-daml-finance-interface-holding-v4-factory-factory-22859
data (HasInterfaceView Factory V) => Factory

-- | Create a holding on the instrument in the corresponding account.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#type-daml-finance-interface-holding-v4-factory-create-84550
data (Choice Factory Create (ContractId I)) => Create

-- | Create a holding on the instrument in the corresponding account.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#type-daml-finance-interface-holding-v4-factory-create-84550
Create :: InstrumentKey -> AccountKey -> Decimal -> PartiesMap -> Create

-- | The instrument of which units are held.
instrument :: Create -> InstrumentKey

-- | The account at which the holding is held. Defines the holding's owner and custodian.
account :: Create -> AccountKey

-- | Number of units.
amount :: Create -> Decimal

-- | Observers of the holding to be credited.
observers :: Create -> PartiesMap

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#type-daml-finance-interface-holding-v4-factory-getview-97414
data (Choice Factory GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#type-daml-finance-interface-holding-v4-factory-getview-97414
GetView :: Party -> GetView

-- | The party fetching the view.
viewer :: GetView -> Party

-- | Archive the factory.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#type-daml-finance-interface-holding-v4-factory-remove-83370
data (Choice Factory Remove ()) => Remove

-- | Archive the factory.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Factory.html#type-daml-finance-interface-holding-v4-factory-remove-83370
Remove :: Remove

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Fungible.html#module-daml-finance-interface-holding-v4-fungible-55495
module Daml.Finance.Interface.Holding.V4.Fungible

-- | Type synonym for `Fungible`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Fungible.html#type-daml-finance-interface-holding-v4-fungible-i-95581
type I = Fungible

-- | Result of a call to `Split`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Fungible.html#type-daml-finance-interface-holding-v4-fungible-splitresult-97497
data SplitResult

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Fungible.html#constr-daml-finance-interface-holding-v4-fungible-splitresult-96424
SplitResult :: [ContractId Fungible] -> Optional (ContractId Fungible) -> SplitResult

-- | The contract ids for the split holdings.
splitCids :: SplitResult -> [ContractId Fungible]

-- | Contract id for the holding on the remaining amount. It is `None` when the split is
--   exact.
rest :: SplitResult -> Optional (ContractId Fungible)

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Fungible.html#type-daml-finance-interface-holding-v4-fungible-v-97914
type V = View

-- | View for `Fungible`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Fungible.html#type-daml-finance-interface-holding-v4-fungible-view-93398
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Fungible.html#constr-daml-finance-interface-holding-v4-fungible-view-32885
View :: Parties -> View

-- | Parties which have the authorization to modify a fungible asset.
modifiers :: View -> Parties

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Fungible.html#function-daml-finance-interface-holding-v4-fungible-split-85728
split :: Fungible -> Split -> Update SplitResult

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Fungible.html#function-daml-finance-interface-holding-v4-fungible-merge-52600
merge :: Fungible -> Merge -> Update (ContractId Fungible)

-- | Interface for a fungible holding.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Fungible.html#type-daml-finance-interface-holding-v4-fungible-fungible-31071
data (HasInterfaceView Fungible V) => Fungible

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Fungible.html#type-daml-finance-interface-holding-v4-fungible-getview-5733
data (Choice Fungible GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Fungible.html#type-daml-finance-interface-holding-v4-fungible-getview-5733
GetView :: Party -> GetView

-- | The party fetching the view.
viewer :: GetView -> Party

-- | Merge multiple fungible contracts into a single fungible contract.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Fungible.html#type-daml-finance-interface-holding-v4-fungible-merge-76684
data (Choice Fungible Merge (ContractId Fungible)) => Merge

-- | Merge multiple fungible contracts into a single fungible contract.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Fungible.html#type-daml-finance-interface-holding-v4-fungible-merge-76684
Merge :: [ContractId Fungible] -> Merge

-- | The fungible contracts to merge which will get consumed.
fungibleCids :: Merge -> [ContractId Fungible]

-- | Split a fungible contract into multiple contracts by amount.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Fungible.html#type-daml-finance-interface-holding-v4-fungible-split-16580
data (Choice Fungible Split SplitResult) => Split

-- | Split a fungible contract into multiple contracts by amount.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Fungible.html#type-daml-finance-interface-holding-v4-fungible-split-16580
Split :: [Decimal] -> Split

-- | The quantities to split the fungible asset by, creating a new contract per amount.
amounts :: Split -> [Decimal]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Holding.html#module-daml-finance-interface-holding-v4-holding-20535
module Daml.Finance.Interface.Holding.V4.Holding

-- | Type synonym for `Holding`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Holding.html#type-daml-finance-interface-holding-v4-holding-i-25641
type I = Holding

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Holding.html#type-daml-finance-interface-holding-v4-holding-v-1774
type V = View

-- | View for `Holding`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Holding.html#type-daml-finance-interface-holding-v4-holding-view-10906
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Holding.html#constr-daml-finance-interface-holding-v4-holding-view-99999
View :: InstrumentKey -> AccountKey -> Decimal -> View

-- | Instrument being held.
instrument :: View -> InstrumentKey

-- | Key of the account holding the assets.
account :: View -> AccountKey

-- | Size of the holding.
amount :: View -> Decimal

-- | Holding interface.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Holding.html#type-daml-finance-interface-holding-v4-holding-holding-66887
data (HasInterfaceView Holding V) => Holding

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Holding.html#type-daml-finance-interface-holding-v4-holding-getview-9417
data (Choice Holding GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Holding.html#type-daml-finance-interface-holding-v4-holding-getview-9417
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Transferable.html#module-daml-finance-interface-holding-v4-transferable-93054
module Daml.Finance.Interface.Holding.V4.Transferable

-- | Type synonym for `Transferable`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Transferable.html#type-daml-finance-interface-holding-v4-transferable-i-68214
type I = Transferable

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Transferable.html#type-daml-finance-interface-holding-v4-transferable-v-641
type V = View

-- | View for `Transferable`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Transferable.html#type-daml-finance-interface-holding-v4-transferable-view-4631
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Transferable.html#constr-daml-finance-interface-holding-v4-transferable-view-62264
View :: View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Transferable.html#function-daml-finance-interface-holding-v4-transferable-transfer-48285
transfer :: Transferable -> ContractId I -> Transfer -> Update (ContractId Transferable)

-- | An interface respresenting a contract where ownership can be transferred to other parties.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Transferable.html#type-daml-finance-interface-holding-v4-transferable-transferable-83505
data (HasInterfaceView Transferable View) => Transferable

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Transferable.html#type-daml-finance-interface-holding-v4-transferable-getview-81598
data (Choice Transferable GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Transferable.html#type-daml-finance-interface-holding-v4-transferable-getview-81598
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

-- | Transfer a contract to a new owner.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Transferable.html#type-daml-finance-interface-holding-v4-transferable-transfer-3593
data (Choice Transferable Transfer (ContractId Transferable)) => Transfer

-- | Transfer a contract to a new owner.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Transferable.html#type-daml-finance-interface-holding-v4-transferable-transfer-3593
Transfer :: Parties -> AccountKey -> Transfer

-- | Parties authorizing the transfer.
actors :: Transfer -> Parties

-- | The new owner's account.
newOwnerAccount :: Transfer -> AccountKey

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Util.html#module-daml-finance-interface-holding-v4-util-74545
module Daml.Finance.Interface.Holding.V4.Util

-- | Get the key of a holding.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Util.html#function-daml-finance-interface-holding-v4-util-getinstrument-9221
getInstrument :: (HasToInterface t I) => t -> InstrumentKey

-- | Get the amount of a holding.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Util.html#function-daml-finance-interface-holding-v4-util-getamount-39102
getAmount :: (HasToInterface t I) => t -> Decimal

-- | Disclose a holding.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Util.html#function-daml-finance-interface-holding-v4-util-disclose-59423
disclose :: (HasInterfaceTypeRep i, HasToInterface i I, HasFromInterface i I) => (Text, Parties) -> Parties -> ContractId i -> Update (ContractId i)

-- | Undisclose a holding.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Holding-V4-Util.html#function-daml-finance-interface-holding-v4-util-undisclose-39552
undisclose :: (HasInterfaceTypeRep i, HasToInterface i I, HasFromInterface i I) => (Text, Parties) -> Parties -> ContractId i -> Update (Optional (ContractId i))

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#module-daml-finance-interface-instrument-base-v4-instrument-47185
module Daml.Finance.Interface.Instrument.Base.V4.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#type-daml-finance-interface-instrument-base-v4-instrument-i-70415
type I = Instrument

-- | Instrument quantity.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#type-daml-finance-interface-instrument-base-v4-instrument-q-66135
type Q = Quantity InstrumentKey Decimal

-- | Type synonym for `Reference`. This type is currently used as a work-around given the lack of
--   interface keys.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#type-daml-finance-interface-instrument-base-v4-instrument-r-72748
type R = Reference

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#type-daml-finance-interface-instrument-base-v4-instrument-v-55368
type V = View

-- | View for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#type-daml-finance-interface-instrument-base-v4-instrument-view-52900
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#constr-daml-finance-interface-instrument-base-v4-instrument-view-91959
View :: Party -> Party -> Id -> Text -> HoldingStandard -> Text -> Time -> View

-- | The instrument's issuer.
issuer :: View -> Party

-- | The instrument's depository.
depository :: View -> Party

-- | The instrument's identifier.
id :: View -> Id

-- | A textual instrument version.
version :: View -> Text

-- | The holding standard for holdings referencing this instrument.
holdingStandard :: View -> HoldingStandard

-- | A human readable description of the instrument.
description :: View -> Text

-- | Timestamp as of which the instrument is valid. This usually coincides with the timestamp
--   of the event that creates the instrument. It usually does not coincide with ledger time.
--   This is required for lifecycling of some instruments, in order to keep track of the last
--   time the instrument was lifecycled. For instruments where this is not applicable, it can
--   be set to the current time.
validAsOf :: View -> Time

-- | Convert the instrument's View to its key.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#function-daml-finance-interface-instrument-base-v4-instrument-tokey-84902
toKey :: V -> InstrumentKey

-- | Retrieves the key of an `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#function-daml-finance-interface-instrument-base-v4-instrument-instrumentkey-25474
instrumentKey :: (HasToInterface i Instrument) => i -> InstrumentKey

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#function-daml-finance-interface-instrument-base-v4-instrument-getkey-72348
getKey :: Instrument -> InstrumentKey

-- | Wraps an amount and an instrument key into an instrument quantity.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#function-daml-finance-interface-instrument-base-v4-instrument-qty-30556
qty :: Decimal -> InstrumentKey -> Q

-- | Scale `Quantity` by the provided factor.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#function-daml-finance-interface-instrument-base-v4-instrument-scale-95016
scale :: Decimal -> Q -> Q

-- | Fetch instrument from holding.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#function-daml-finance-interface-instrument-base-v4-instrument-fetchinstrument-72799
fetchInstrument :: (HasToInterface t I) => t -> Update Instrument

-- | Exercise interface by key.
--   This method can be used to exercise a choice on an `Instrument` given its `InstrumentKey`.
--   Requires as input the `InstrumentKey`, the actor exercising the choice, and the choice arguments.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#function-daml-finance-interface-instrument-base-v4-instrument-exerciseinterfacebykey-98720
exerciseInterfaceByKey :: (HasInterfaceTypeRep i, HasExercise i c r) => InstrumentKey -> Party -> c -> Update r

-- | Base interface for all instruments. This interface does not define any lifecycling logic.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#type-daml-finance-interface-instrument-base-v4-instrument-instrument-74494
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#type-daml-finance-interface-instrument-base-v4-instrument-getview-66559
data (Choice Instrument GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#type-daml-finance-interface-instrument-base-v4-instrument-getview-66559
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

-- | Archive the instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#type-daml-finance-interface-instrument-base-v4-instrument-remove-35281
data (Choice Instrument Remove ()) => Remove

-- | Archive the instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Base-V4-Instrument.html#type-daml-finance-interface-instrument-base-v4-instrument-remove-35281
Remove :: Remove

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Factory.html#module-daml-finance-interface-instrument-bond-v3-callable-factory-33809
module Daml.Finance.Interface.Instrument.Bond.V3.Callable.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Factory.html#type-daml-finance-interface-instrument-bond-v3-callable-factory-i-42439
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Factory.html#type-daml-finance-interface-instrument-bond-v3-callable-factory-v-96912
type V = View

-- | View of `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Factory.html#type-daml-finance-interface-instrument-bond-v3-callable-factory-view-21804
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Factory.html#constr-daml-finance-interface-instrument-bond-v3-callable-factory-view-4775
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Factory.html#function-daml-finance-interface-instrument-bond-v3-callable-factory-createtick-18487
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate callable bond instruments.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Factory.html#type-daml-finance-interface-instrument-bond-v3-callable-factory-factory-95382
data (HasInterfaceView Factory V) => Factory

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Factory.html#type-daml-finance-interface-instrument-bond-v3-callable-factory-create-44265
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Factory.html#type-daml-finance-interface-instrument-bond-v3-callable-factory-create-44265
Create :: Callable -> PartiesMap -> Create

-- | Attributes to create a callable rate bond.
callable :: Create -> Callable

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Instrument.html#module-daml-finance-interface-instrument-bond-v3-callable-instrument-14719
module Daml.Finance.Interface.Instrument.Bond.V3.Callable.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Instrument.html#type-daml-finance-interface-instrument-bond-v3-callable-instrument-i-23721
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Instrument.html#type-daml-finance-interface-instrument-bond-v3-callable-instrument-v-99854
type V = View

-- | View of `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Instrument.html#type-daml-finance-interface-instrument-bond-v3-callable-instrument-view-85850
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Instrument.html#constr-daml-finance-interface-instrument-bond-v3-callable-instrument-view-82591
View :: Callable -> View

-- | Attributes of a callable bond.
callable :: View -> Callable

-- | Instrument interface representing a callable bond.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Instrument.html#type-daml-finance-interface-instrument-bond-v3-callable-instrument-instrument-53544
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Instrument.html#type-daml-finance-interface-instrument-bond-v3-callable-instrument-getview-84553
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Instrument.html#type-daml-finance-interface-instrument-bond-v3-callable-instrument-getview-84553
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Types.html#module-daml-finance-interface-instrument-bond-v3-callable-types-79940
module Daml.Finance.Interface.Instrument.Bond.V3.Callable.Types

-- | Describes the attributes of a Callable Bond.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Types.html#type-daml-finance-interface-instrument-bond-v3-callable-types-callable-12794
data Callable

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-Callable-Types.html#constr-daml-finance-interface-instrument-bond-v3-callable-types-callable-69769
Callable :: InstrumentKey -> Text -> Optional FloatingRate -> Decimal -> Optional Decimal -> Optional Decimal -> PeriodicSchedule -> PeriodicSchedule -> Int -> [Text] -> Party -> DayCountConventionEnum -> Bool -> InstrumentKey -> Decimal -> Time -> [EventData] -> Callable

-- | The instrument's key.
instrument :: Callable -> InstrumentKey

-- | The description of the bond.
description :: Callable -> Text

-- | A description of the floating rate to be used (if applicable). This supports both Libor
--   and SOFR style reference rates (using a compounded index, e.g. the SOFR Index).
floatingRate :: Callable -> Optional FloatingRate

-- | The fixed coupon rate, per annum. For example, in case of a "3.5% p.a coupon" this should
--   be 0.035. This can also be used as a floating coupon spread. For example, in case of
--   "3M Libor + 0.5%" this should be 0.005.
couponRate :: Callable -> Decimal

-- | The maximum coupon rate possible. For example, if "3M Libor + 0.5%" would result in a
--   rate of 2.5%, but capRate is 2.0%, the coupon rate used would be 2.0%.
capRate :: Callable -> Optional Decimal

-- | The minimum coupon rate possible. For example, if "3M Libor + 0.5%" would result in a
--   rate of -0.2%, but floorRate is 0.0%, the coupon rate used would be 0.0%.
floorRate :: Callable -> Optional Decimal

-- | The schedule for the periodic coupon payments. The coupon is paid on the last date of
--   each schedule period.
--   In case of a floating rate, the reference rate will be fixed in relation to this schedule
--   (at the start/end of each period, as specified by FloatingRate).
--   This is the main schedule of the instrument, which drives both the calculation and the
--   payment of coupons. It also defines the issue date and the maturity date of the bond.
couponSchedule :: Callable -> PeriodicSchedule

-- | The bond is callable on the last date of each schedule period. For example, if this
--   schedule is the same as the periodicSchedule, it means that the bond can be called on
--   each coupon payment date.
callSchedule :: Callable -> PeriodicSchedule

-- | The number of business days in advance of the coupon date that the issuer must give
--   notice if it wants to call the bond. The election whether to call or not to call must be
--   done by this date.
noticeDays :: Callable -> Int

-- | The identifiers of the holiday calendars to be used for the coupon schedule.
holidayCalendarIds :: Callable -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: Callable -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: Callable -> DayCountConventionEnum

-- | Configure whether to use adjusted dates (as specified in *businessDayAdjustment* of the
--   *couponSchedule*) for day count fractions.
useAdjustedDatesForDcf :: Callable -> Bool

-- | The currency of the bond. For example, if the bond pays in USD this should be a USD cash
--   instrument.
currency :: Callable -> InstrumentKey

-- | The notional of the bond. This is the face value corresponding to one unit of the bond
--   instrument. For example, if one bond unit corresponds to 1000 USD, this should be 1000.0.
notional :: Callable -> Decimal

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Callable -> Time

-- | A list of previous events that have been lifecycled on this instrument so far.
prevEvents :: Callable -> [EventData]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Factory.html#module-daml-finance-interface-instrument-bond-v3-fixedrate-factory-45278
module Daml.Finance.Interface.Instrument.Bond.V3.FixedRate.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Factory.html#type-daml-finance-interface-instrument-bond-v3-fixedrate-factory-i-96150
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Factory.html#type-daml-finance-interface-instrument-bond-v3-fixedrate-factory-v-28577
type V = View

-- | View of `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Factory.html#type-daml-finance-interface-instrument-bond-v3-fixedrate-factory-view-22743
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Factory.html#constr-daml-finance-interface-instrument-bond-v3-fixedrate-factory-view-7714
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Factory.html#function-daml-finance-interface-instrument-bond-v3-fixedrate-factory-createtick-38278
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate fixed-rate bond instruments.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Factory.html#type-daml-finance-interface-instrument-bond-v3-fixedrate-factory-factory-74675
data (HasInterfaceView Factory V) => Factory

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Factory.html#type-daml-finance-interface-instrument-bond-v3-fixedrate-factory-create-25182
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Factory.html#type-daml-finance-interface-instrument-bond-v3-fixedrate-factory-create-25182
Create :: FixedRate -> PartiesMap -> Create

-- | Attributes to create a fixed rate bond.
fixedRate :: Create -> FixedRate

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Instrument.html#module-daml-finance-interface-instrument-bond-v3-fixedrate-instrument-6918
module Daml.Finance.Interface.Instrument.Bond.V3.FixedRate.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Instrument.html#type-daml-finance-interface-instrument-bond-v3-fixedrate-instrument-i-69642
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Instrument.html#type-daml-finance-interface-instrument-bond-v3-fixedrate-instrument-v-28269
type V = View

-- | View of `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Instrument.html#type-daml-finance-interface-instrument-bond-v3-fixedrate-instrument-view-62931
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Instrument.html#constr-daml-finance-interface-instrument-bond-v3-fixedrate-instrument-view-42244
View :: FixedRate -> View

-- | Attributes of a fixed rate bond.
fixedRate :: View -> FixedRate

-- | Instrument interface representing a fixed rate bond.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Instrument.html#type-daml-finance-interface-instrument-bond-v3-fixedrate-instrument-instrument-19853
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Instrument.html#type-daml-finance-interface-instrument-bond-v3-fixedrate-instrument-getview-73834
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Instrument.html#type-daml-finance-interface-instrument-bond-v3-fixedrate-instrument-getview-73834
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Types.html#module-daml-finance-interface-instrument-bond-v3-fixedrate-types-11835
module Daml.Finance.Interface.Instrument.Bond.V3.FixedRate.Types

-- | Describes the attributes of a Fixed Rate Bond.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Types.html#type-daml-finance-interface-instrument-bond-v3-fixedrate-types-fixedrate-8592
data FixedRate

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FixedRate-Types.html#constr-daml-finance-interface-instrument-bond-v3-fixedrate-types-fixedrate-87827
FixedRate :: InstrumentKey -> Text -> Decimal -> PeriodicSchedule -> [Text] -> Party -> DayCountConventionEnum -> InstrumentKey -> Decimal -> Time -> FixedRate

-- | The instrument's key.
instrument :: FixedRate -> InstrumentKey

-- | The description of the bond.
description :: FixedRate -> Text

-- | The fixed coupon rate, per annum. For example, in case of a "3.5% p.a. coupon" this
--   should be 0.035.
couponRate :: FixedRate -> Decimal

-- | The schedule for the periodic coupon payments.
periodicSchedule :: FixedRate -> PeriodicSchedule

-- | The identifiers of the holiday calendars to be used for the coupon schedule.
holidayCalendarIds :: FixedRate -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: FixedRate -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: FixedRate -> DayCountConventionEnum

-- | The currency of the bond. For example, if the bond pays in USD this should be a USD cash
--   instrument.
currency :: FixedRate -> InstrumentKey

-- | The notional of the bond. This is the face value corresponding to one unit of the bond
--   instrument. For example, if one bond unit corresponds to 1000 USD, this should be 1000.0.
notional :: FixedRate -> Decimal

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: FixedRate -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Factory.html#module-daml-finance-interface-instrument-bond-v3-floatingrate-factory-1777
module Daml.Finance.Interface.Instrument.Bond.V3.FloatingRate.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Factory.html#type-daml-finance-interface-instrument-bond-v3-floatingrate-factory-i-49763
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Factory.html#type-daml-finance-interface-instrument-bond-v3-floatingrate-factory-v-38996
type V = View

-- | View of `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Factory.html#type-daml-finance-interface-instrument-bond-v3-floatingrate-factory-view-68416
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Factory.html#constr-daml-finance-interface-instrument-bond-v3-floatingrate-factory-view-13451
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Factory.html#function-daml-finance-interface-instrument-bond-v3-floatingrate-factory-createtick-87699
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate floating-rate bond instruments.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Factory.html#type-daml-finance-interface-instrument-bond-v3-floatingrate-factory-factory-65490
data (HasInterfaceView Factory V) => Factory

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Factory.html#type-daml-finance-interface-instrument-bond-v3-floatingrate-factory-create-37181
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Factory.html#type-daml-finance-interface-instrument-bond-v3-floatingrate-factory-create-37181
Create :: FloatingRate -> PartiesMap -> Create

-- | Attributes to create a floating rate bond.
floatingRate :: Create -> FloatingRate

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Instrument.html#module-daml-finance-interface-instrument-bond-v3-floatingrate-instrument-18047
module Daml.Finance.Interface.Instrument.Bond.V3.FloatingRate.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Instrument.html#type-daml-finance-interface-instrument-bond-v3-floatingrate-instrument-i-29309
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Instrument.html#type-daml-finance-interface-instrument-bond-v3-floatingrate-instrument-v-31642
type V = View

-- | View of `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Instrument.html#type-daml-finance-interface-instrument-bond-v3-floatingrate-instrument-view-4086
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Instrument.html#constr-daml-finance-interface-instrument-bond-v3-floatingrate-instrument-view-93867
View :: FloatingRate -> View

-- | Attributes of a floating rate bond.
floatingRate :: View -> FloatingRate

-- | Instrument interface representing a floating rate bond.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Instrument.html#type-daml-finance-interface-instrument-bond-v3-floatingrate-instrument-instrument-15084
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Instrument.html#type-daml-finance-interface-instrument-bond-v3-floatingrate-instrument-getview-19909
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Instrument.html#type-daml-finance-interface-instrument-bond-v3-floatingrate-instrument-getview-19909
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Types.html#module-daml-finance-interface-instrument-bond-v3-floatingrate-types-56004
module Daml.Finance.Interface.Instrument.Bond.V3.FloatingRate.Types

-- | Describes the attributes representing a floating rate bond.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Types.html#type-daml-finance-interface-instrument-bond-v3-floatingrate-types-floatingrate-91442
data FloatingRate

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-FloatingRate-Types.html#constr-daml-finance-interface-instrument-bond-v3-floatingrate-types-floatingrate-92861
FloatingRate :: InstrumentKey -> Text -> FloatingRate -> Decimal -> PeriodicSchedule -> [Text] -> Party -> DayCountConventionEnum -> InstrumentKey -> Decimal -> Time -> FloatingRate

-- | The instrument's key.
instrument :: FloatingRate -> InstrumentKey

-- | The description of the bond.
description :: FloatingRate -> Text

-- | A description of the floating rate to be used. This supports both Libor and SOFR style
--   reference rates (using a compounded index, e.g. the SOFR Index).
floatingRate :: FloatingRate -> FloatingRate

-- | The floating rate coupon spread. For example, in case of "3M Euribor + 0.5%" this should
--   be 0.005.
couponSpread :: FloatingRate -> Decimal

-- | The schedule for the periodic coupon payments.
periodicSchedule :: FloatingRate -> PeriodicSchedule

-- | The identifiers of the holiday calendars to be used for the coupon schedule.
holidayCalendarIds :: FloatingRate -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: FloatingRate -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: FloatingRate -> DayCountConventionEnum

-- | The currency of the bond. For example, if the bond pays in USD this should be a USD cash
--   instrument.
currency :: FloatingRate -> InstrumentKey

-- | The notional of the bond. This is the face value corresponding to one unit of the bond
--   instrument. For example, if one bond unit corresponds to 1000 USD, this should be 1000.0.
notional :: FloatingRate -> Decimal

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: FloatingRate -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Factory.html#module-daml-finance-interface-instrument-bond-v3-inflationlinked-factory-90803
module Daml.Finance.Interface.Instrument.Bond.V3.InflationLinked.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Factory.html#type-daml-finance-interface-instrument-bond-v3-inflationlinked-factory-i-93925
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Factory.html#type-daml-finance-interface-instrument-bond-v3-inflationlinked-factory-v-4818
type V = View

-- | View of `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Factory.html#type-daml-finance-interface-instrument-bond-v3-inflationlinked-factory-view-20750
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Factory.html#constr-daml-finance-interface-instrument-bond-v3-inflationlinked-factory-view-98487
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Factory.html#function-daml-finance-interface-instrument-bond-v3-inflationlinked-factory-createtick-10725
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate inflation-linked bond instruments.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Factory.html#type-daml-finance-interface-instrument-bond-v3-inflationlinked-factory-factory-33440
data (HasInterfaceView Factory V) => Factory

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Factory.html#type-daml-finance-interface-instrument-bond-v3-inflationlinked-factory-create-17927
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Factory.html#type-daml-finance-interface-instrument-bond-v3-inflationlinked-factory-create-17927
Create :: InflationLinked -> PartiesMap -> Create

-- | Attributes to create an inflation linked bond.
inflationLinked :: Create -> InflationLinked

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Instrument.html#module-daml-finance-interface-instrument-bond-v3-inflationlinked-instrument-29769
module Daml.Finance.Interface.Instrument.Bond.V3.InflationLinked.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Instrument.html#type-daml-finance-interface-instrument-bond-v3-inflationlinked-instrument-i-26275
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Instrument.html#type-daml-finance-interface-instrument-bond-v3-inflationlinked-instrument-v-15508
type V = View

-- | View of `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Instrument.html#type-daml-finance-interface-instrument-bond-v3-inflationlinked-instrument-view-44800
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Instrument.html#constr-daml-finance-interface-instrument-bond-v3-inflationlinked-instrument-view-83247
View :: InflationLinked -> View

-- | Attributes of an inflation linked bond.
inflationLinked :: View -> InflationLinked

-- | Instrument interface representing an inflation linked bond.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Instrument.html#type-daml-finance-interface-instrument-bond-v3-inflationlinked-instrument-instrument-58178
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Instrument.html#type-daml-finance-interface-instrument-bond-v3-inflationlinked-instrument-getview-17323
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Instrument.html#type-daml-finance-interface-instrument-bond-v3-inflationlinked-instrument-getview-17323
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Types.html#module-daml-finance-interface-instrument-bond-v3-inflationlinked-types-43490
module Daml.Finance.Interface.Instrument.Bond.V3.InflationLinked.Types

-- | Describes the attributes of an Inflation Linked Bond.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Types.html#type-daml-finance-interface-instrument-bond-v3-inflationlinked-types-inflationlinked-43736
data InflationLinked

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-InflationLinked-Types.html#constr-daml-finance-interface-instrument-bond-v3-inflationlinked-types-inflationlinked-90435
InflationLinked :: InstrumentKey -> Text -> Text -> Decimal -> Decimal -> PeriodicSchedule -> [Text] -> Party -> DayCountConventionEnum -> InstrumentKey -> Decimal -> Time -> InflationLinked

-- | The instrument's key.
instrument :: InflationLinked -> InstrumentKey

-- | The description of the bond.
description :: InflationLinked -> Text

-- | The inflation index reference ID. For example, in case of "0.5% p.a. coupon, CPI adjusted
--   principal" this should be a valid reference to the "CPI" index.
inflationIndexId :: InflationLinked -> Text

-- | The value of the inflation index on the first reference date of this bond (called "dated
--   date" on US TIPS). This is used as the base value for the principal adjustment.
inflationIndexBaseValue :: InflationLinked -> Decimal

-- | The fixed coupon rate, per annum. For example, in case of a "0.5% p.a. coupon, CPI
--   adjusted principal" this should be 0.005.
couponRate :: InflationLinked -> Decimal

-- | The schedule for the periodic coupon payments.
periodicSchedule :: InflationLinked -> PeriodicSchedule

-- | The identifiers of the holiday calendars to be used for the coupon schedule.
holidayCalendarIds :: InflationLinked -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: InflationLinked -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: InflationLinked -> DayCountConventionEnum

-- | The currency of the bond. For example, if the bond pays in USD this should be a USD cash
--   instrument.
currency :: InflationLinked -> InstrumentKey

-- | The notional of the bond. This is the face value corresponding to one unit of the bond
--   instrument. For example, if one bond unit corresponds to 1000 USD, this should be 1000.0.
notional :: InflationLinked -> Decimal

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: InflationLinked -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Factory.html#module-daml-finance-interface-instrument-bond-v3-zerocoupon-factory-22139
module Daml.Finance.Interface.Instrument.Bond.V3.ZeroCoupon.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Factory.html#type-daml-finance-interface-instrument-bond-v3-zerocoupon-factory-i-10477
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Factory.html#type-daml-finance-interface-instrument-bond-v3-zerocoupon-factory-v-51850
type V = View

-- | View of `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Factory.html#type-daml-finance-interface-instrument-bond-v3-zerocoupon-factory-view-86374
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Factory.html#constr-daml-finance-interface-instrument-bond-v3-zerocoupon-factory-view-47045
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Factory.html#function-daml-finance-interface-instrument-bond-v3-zerocoupon-factory-createtick-10941
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate zero-coupon bond instruments.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Factory.html#type-daml-finance-interface-instrument-bond-v3-zerocoupon-factory-factory-44152
data (HasInterfaceView Factory V) => Factory

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Factory.html#type-daml-finance-interface-instrument-bond-v3-zerocoupon-factory-create-75151
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Factory.html#type-daml-finance-interface-instrument-bond-v3-zerocoupon-factory-create-75151
Create :: ZeroCoupon -> PartiesMap -> Create

-- | Attributes to create a zero coupon bond.
zeroCoupon :: Create -> ZeroCoupon

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Instrument.html#module-daml-finance-interface-instrument-bond-v3-zerocoupon-instrument-34777
module Daml.Finance.Interface.Instrument.Bond.V3.ZeroCoupon.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Instrument.html#type-daml-finance-interface-instrument-bond-v3-zerocoupon-instrument-i-7239
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Instrument.html#type-daml-finance-interface-instrument-bond-v3-zerocoupon-instrument-v-61712
type V = View

-- | View of `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Instrument.html#type-daml-finance-interface-instrument-bond-v3-zerocoupon-instrument-view-64748
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Instrument.html#constr-daml-finance-interface-instrument-bond-v3-zerocoupon-instrument-view-5977
View :: ZeroCoupon -> View

-- | Attributes of a zero coupon bond.
zeroCoupon :: View -> ZeroCoupon

-- | Instrument interface representing a zero coupon bond.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Instrument.html#type-daml-finance-interface-instrument-bond-v3-zerocoupon-instrument-instrument-79974
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Instrument.html#type-daml-finance-interface-instrument-bond-v3-zerocoupon-instrument-getview-89719
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Instrument.html#type-daml-finance-interface-instrument-bond-v3-zerocoupon-instrument-getview-89719
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Types.html#module-daml-finance-interface-instrument-bond-v3-zerocoupon-types-44506
module Daml.Finance.Interface.Instrument.Bond.V3.ZeroCoupon.Types

-- | Describes the attributes of a Zero Coupon bond.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Types.html#type-daml-finance-interface-instrument-bond-v3-zerocoupon-types-zerocoupon-3978
data ZeroCoupon

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Bond-V3-ZeroCoupon-Types.html#constr-daml-finance-interface-instrument-bond-v3-zerocoupon-types-zerocoupon-50769
ZeroCoupon :: InstrumentKey -> Text -> Date -> Date -> InstrumentKey -> Decimal -> Time -> ZeroCoupon

-- | The instrument's key.
instrument :: ZeroCoupon -> InstrumentKey

-- | The description of the bond.
description :: ZeroCoupon -> Text

-- | The date when the bond was issued.
issueDate :: ZeroCoupon -> Date

-- | The redemption date of the bond.
maturityDate :: ZeroCoupon -> Date

-- | The currency of the bond. For example, if the bond pays in USD this should be a USD cash
--   instrument.
currency :: ZeroCoupon -> InstrumentKey

-- | The notional of the bond. This is the face value corresponding to one unit of the bond
--   instrument. For example, if one bond unit corresponds to 1000 USD, this should be 1000.0.
notional :: ZeroCoupon -> Decimal

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: ZeroCoupon -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Factory.html#module-daml-finance-interface-instrument-equity-v0-factory-67939
module Daml.Finance.Interface.Instrument.Equity.V0.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Factory.html#type-daml-finance-interface-instrument-equity-v0-factory-i-27509
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Factory.html#type-daml-finance-interface-instrument-equity-v0-factory-v-99362
type V = View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Factory.html#type-daml-finance-interface-instrument-equity-v0-factory-view-61438
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Factory.html#constr-daml-finance-interface-instrument-equity-v0-factory-view-62775
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Factory.html#function-daml-finance-interface-instrument-equity-v0-factory-createtick-23133
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate equities.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Factory.html#type-daml-finance-interface-instrument-equity-v0-factory-factory-21456
data (HasInterfaceView Factory V) => Factory

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Factory.html#type-daml-finance-interface-instrument-equity-v0-factory-create-45111
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Factory.html#type-daml-finance-interface-instrument-equity-v0-factory-create-45111
Create :: InstrumentKey -> Text -> Time -> PartiesMap -> Create

-- | The instrument's key.
instrument :: Create -> InstrumentKey

-- | A description of the instrument.
description :: Create -> Text

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
validAsOf :: Create -> Time

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Instrument.html#module-daml-finance-interface-instrument-equity-v0-instrument-90217
module Daml.Finance.Interface.Instrument.Equity.V0.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Instrument.html#type-daml-finance-interface-instrument-equity-v0-instrument-i-47875
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Instrument.html#type-daml-finance-interface-instrument-equity-v0-instrument-v-37108
type V = View

-- | View for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Instrument.html#type-daml-finance-interface-instrument-equity-v0-instrument-view-97536
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Instrument.html#constr-daml-finance-interface-instrument-equity-v0-instrument-view-27859
View :: InstrumentKey -> View

-- | The instrument's key.
instrument :: View -> InstrumentKey

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Instrument.html#function-daml-finance-interface-instrument-equity-v0-instrument-declaredistribution-82168
declareDistribution :: Instrument -> DeclareDistribution -> Update (ContractId I)

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Instrument.html#function-daml-finance-interface-instrument-equity-v0-instrument-declarestocksplit-44310
declareStockSplit :: Instrument -> DeclareStockSplit -> Update (ContractId I)

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Instrument.html#function-daml-finance-interface-instrument-equity-v0-instrument-declarereplacement-18879
declareReplacement :: Instrument -> DeclareReplacement -> Update (ContractId I)

-- | An interface for a generic equity instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Instrument.html#type-daml-finance-interface-instrument-equity-v0-instrument-instrument-31490
data (HasInterfaceView Instrument V) => Instrument

-- | Declare a distribution (e.g. a dividend or a rights issue) to shareholders.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Instrument.html#type-daml-finance-interface-instrument-equity-v0-instrument-declaredistribution-57612
data (Choice Instrument DeclareDistribution (ContractId I)) => DeclareDistribution

-- | Declare a distribution (e.g. a dividend or a rights issue) to shareholders.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Instrument.html#type-daml-finance-interface-instrument-equity-v0-instrument-declaredistribution-57612
DeclareDistribution :: Id -> Text -> Time -> InstrumentKey -> [InstrumentQuantity] -> DeclareDistribution

-- | Event identifier of the dividend distribution.
id :: DeclareDistribution -> Id

-- | Description of the dividend event.
description :: DeclareDistribution -> Text

-- | Time at which the dividend is distributed.
effectiveTime :: DeclareDistribution -> Time

-- | Instrument held after the dividend distribution (i.e. "ex-dividend" stock).
newInstrument :: DeclareDistribution -> InstrumentKey

-- | Distributed quantities per unit held.
perUnitDistribution :: DeclareDistribution -> [InstrumentQuantity]

-- | Declare a replacement event, where units of the instrument are replaced by a basket of
--   other instruments.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Instrument.html#type-daml-finance-interface-instrument-equity-v0-instrument-declarereplacement-46147
data (Choice Instrument DeclareReplacement (ContractId I)) => DeclareReplacement

-- | Declare a replacement event, where units of the instrument are replaced by a basket of
--   other instruments.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Instrument.html#type-daml-finance-interface-instrument-equity-v0-instrument-declarereplacement-46147
DeclareReplacement :: Id -> Text -> Time -> [InstrumentQuantity] -> DeclareReplacement

-- | Distribution Id.
id :: DeclareReplacement -> Id

-- | Description of the replacement event.
description :: DeclareReplacement -> Text

-- | Time the replacement is to be executed.
effectiveTime :: DeclareReplacement -> Time

-- | Payout offered to shareholders per held share.
perUnitReplacement :: DeclareReplacement -> [InstrumentQuantity]

-- | Declare a stock split.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Instrument.html#type-daml-finance-interface-instrument-equity-v0-instrument-declarestocksplit-89514
data (Choice Instrument DeclareStockSplit (ContractId I)) => DeclareStockSplit

-- | Declare a stock split.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Instrument.html#type-daml-finance-interface-instrument-equity-v0-instrument-declarestocksplit-89514
DeclareStockSplit :: Id -> Text -> Time -> InstrumentKey -> Decimal -> DeclareStockSplit

-- | Event identifier of the stock split.
id :: DeclareStockSplit -> Id

-- | Description of the stock split event.
description :: DeclareStockSplit -> Text

-- | Time at which the stock split is effective.
effectiveTime :: DeclareStockSplit -> Time

-- | Instrument to be held after the stock split is executed.
newInstrument :: DeclareStockSplit -> InstrumentKey

-- | Adjustment factor for the stock split.
adjustmentFactor :: DeclareStockSplit -> Decimal

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Instrument.html#type-daml-finance-interface-instrument-equity-v0-instrument-getview-66507
data (Choice Instrument GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Equity-V0-Instrument.html#type-daml-finance-interface-instrument-equity-v0-instrument-getview-66507
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Generic-V4-Factory.html#module-daml-finance-interface-instrument-generic-v4-factory-73556
module Daml.Finance.Interface.Instrument.Generic.V4.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Generic-V4-Factory.html#type-daml-finance-interface-instrument-generic-v4-factory-i-33172
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Generic-V4-Factory.html#type-daml-finance-interface-instrument-generic-v4-factory-v-43939
type V = View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Generic-V4-Factory.html#type-daml-finance-interface-instrument-generic-v4-factory-view-99113
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Generic-V4-Factory.html#constr-daml-finance-interface-instrument-generic-v4-factory-view-44894
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Generic-V4-Factory.html#function-daml-finance-interface-instrument-generic-v4-factory-createtick-63852
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate generic instruments using Contingent Claims.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Generic-V4-Factory.html#type-daml-finance-interface-instrument-generic-v4-factory-factory-8845
data (HasInterfaceView Factory V) => Factory

-- | Create a new generic instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Generic-V4-Factory.html#type-daml-finance-interface-instrument-generic-v4-factory-create-52332
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new generic instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Generic-V4-Factory.html#type-daml-finance-interface-instrument-generic-v4-factory-create-52332
Create :: InstrumentKey -> Text -> C -> Time -> Time -> PartiesMap -> Create

-- | The instrument's key.
instrument :: Create -> InstrumentKey

-- | A description of the instrument.
description :: Create -> Text

-- | The claim tree.
claims :: Create -> C

-- | The claim's acquisition time. This usually corresponds to the start date of the
--   contract.
acquisitionTime :: Create -> Time

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Create -> Time

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Generic-V4-Instrument.html#module-daml-finance-interface-instrument-generic-v4-instrument-7928
module Daml.Finance.Interface.Instrument.Generic.V4.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Generic-V4-Instrument.html#type-daml-finance-interface-instrument-generic-v4-instrument-i-8248
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Generic-V4-Instrument.html#type-daml-finance-interface-instrument-generic-v4-instrument-v-84255
type V = View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Generic-V4-Instrument.html#type-daml-finance-interface-instrument-generic-v4-instrument-view-70325
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Generic-V4-Instrument.html#constr-daml-finance-interface-instrument-generic-v4-instrument-view-58740
View :: InstrumentKey -> C -> View

-- | The instrument's key.
instrument :: View -> InstrumentKey

-- | The claim tree.
claims :: View -> C

-- | Interface for generic instruments utilizing Contingent Claims.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Generic-V4-Instrument.html#type-daml-finance-interface-instrument-generic-v4-instrument-instrument-84459
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Generic-V4-Instrument.html#type-daml-finance-interface-instrument-generic-v4-instrument-getview-76480
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Generic-V4-Instrument.html#type-daml-finance-interface-instrument-generic-v4-instrument-getview-76480
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Factory.html#module-daml-finance-interface-instrument-option-v0-barriereuropeancash-factory-3874
module Daml.Finance.Interface.Instrument.Option.V0.BarrierEuropeanCash.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Factory.html#type-daml-finance-interface-instrument-option-v0-barriereuropeancash-factory-i-63002
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Factory.html#type-daml-finance-interface-instrument-option-v0-barriereuropeancash-factory-v-60669
type V = View

-- | View of `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Factory.html#type-daml-finance-interface-instrument-option-v0-barriereuropeancash-factory-view-50371
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Factory.html#constr-daml-finance-interface-instrument-option-v0-barriereuropeancash-factory-view-98914
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Factory.html#function-daml-finance-interface-instrument-option-v0-barriereuropeancash-factory-createtick-37818
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate barrier options.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Factory.html#type-daml-finance-interface-instrument-option-v0-barriereuropeancash-factory-factory-30599
data (HasInterfaceView Factory V) => Factory

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Factory.html#type-daml-finance-interface-instrument-option-v0-barriereuropeancash-factory-create-44698
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Factory.html#type-daml-finance-interface-instrument-option-v0-barriereuropeancash-factory-create-44698
Create :: BarrierEuropean -> PartiesMap -> Create

-- | Attributes to create a barrier option.
barrierEuropean :: Create -> BarrierEuropean

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Instrument.html#module-daml-finance-interface-instrument-option-v0-barriereuropeancash-instrument-35570
module Daml.Finance.Interface.Instrument.Option.V0.BarrierEuropeanCash.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Instrument.html#type-daml-finance-interface-instrument-option-v0-barriereuropeancash-instrument-i-62014
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Instrument.html#type-daml-finance-interface-instrument-option-v0-barriereuropeancash-instrument-v-24921
type V = View

-- | View of `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Instrument.html#type-daml-finance-interface-instrument-option-v0-barriereuropeancash-instrument-view-38799
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Instrument.html#constr-daml-finance-interface-instrument-option-v0-barriereuropeancash-instrument-view-38524
View :: BarrierEuropean -> View

-- | Attributes of a barrier option.
barrierEuropean :: View -> BarrierEuropean

-- | Instrument interface representing a barrier option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Instrument.html#type-daml-finance-interface-instrument-option-v0-barriereuropeancash-instrument-instrument-32577
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Instrument.html#type-daml-finance-interface-instrument-option-v0-barriereuropeancash-instrument-getview-13574
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Instrument.html#type-daml-finance-interface-instrument-option-v0-barriereuropeancash-instrument-getview-13574
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Types.html#module-daml-finance-interface-instrument-option-v0-barriereuropeancash-types-37351
module Daml.Finance.Interface.Instrument.Option.V0.BarrierEuropeanCash.Types

-- | Describes the attributes of a cash-settled barrier option with European exercise.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Types.html#type-daml-finance-interface-instrument-option-v0-barriereuropeancash-types-barriereuropean-83436
data BarrierEuropean

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-BarrierEuropeanCash-Types.html#constr-daml-finance-interface-instrument-option-v0-barriereuropeancash-types-barriereuropean-65587
BarrierEuropean :: InstrumentKey -> Text -> Text -> Bool -> OptionTypeEnum -> Decimal -> Decimal -> BarrierTypeEnum -> Date -> Date -> InstrumentKey -> Time -> BarrierEuropean

-- | The instrument's key.
instrument :: BarrierEuropean -> InstrumentKey

-- | The description of the option.
description :: BarrierEuropean -> Text

-- | The reference asset ID. For example, in case of an option on AAPL this should be a valid
--   reference to the AAPL fixings to be used for the payoff calculation.
referenceAssetId :: BarrierEuropean -> Text

-- | Indicate whether a holding owner of this instrument receives the option payoff.
ownerReceives :: BarrierEuropean -> Bool

-- | Indicate whether the option is a call or a put.
optionType :: BarrierEuropean -> OptionTypeEnum

-- | The strike price of the option.
strike :: BarrierEuropean -> Decimal

-- | The barrier level of the option.
barrier :: BarrierEuropean -> Decimal

-- | The type of barrier.
barrierType :: BarrierEuropean -> BarrierTypeEnum

-- | The start date for barrier observations.
barrierStartDate :: BarrierEuropean -> Date

-- | The expiry date of the option.
expiryDate :: BarrierEuropean -> Date

-- | The currency of the option. For example, if the option pays in USD this should be a USD
--   cash instrument.
currency :: BarrierEuropean -> InstrumentKey

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: BarrierEuropean -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Election-Factory.html#module-daml-finance-interface-instrument-option-v0-dividend-election-factory-93665
module Daml.Finance.Interface.Instrument.Option.V0.Dividend.Election.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Election-Factory.html#type-daml-finance-interface-instrument-option-v0-dividend-election-factory-i-73947
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Election-Factory.html#type-daml-finance-interface-instrument-option-v0-dividend-election-factory-v-32700
type V = View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Election-Factory.html#type-daml-finance-interface-instrument-option-v0-dividend-election-factory-view-99272
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Election-Factory.html#constr-daml-finance-interface-instrument-option-v0-dividend-election-factory-view-87893
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Election-Factory.html#function-daml-finance-interface-instrument-option-v0-dividend-election-factory-createtick-371
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate elections on generic instruments.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Election-Factory.html#type-daml-finance-interface-instrument-option-v0-dividend-election-factory-factory-44378
data (HasInterfaceView Factory V) => Factory

-- | Create a new Election.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Election-Factory.html#type-daml-finance-interface-instrument-option-v0-dividend-election-factory-create-69397
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new Election.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Election-Factory.html#type-daml-finance-interface-instrument-option-v0-dividend-election-factory-create-69397
Create :: Parties -> Party -> Party -> Party -> Id -> Text -> ElectionTypeEnum -> Bool -> Time -> PartiesMap -> Decimal -> InstrumentKey -> Create

-- | Parties calling the `Create` choice.
actors :: Create -> Parties

-- | Parties on behalf of which the election is made.
elector :: Create -> Party

-- | Faces the `elector` in the `Holding`.
counterparty :: Create -> Party

-- | Party that signs the election (together with the elector).
provider :: Create -> Party

-- | The identifier for an election.
id :: Create -> Id

-- | A description of the instrument.
description :: Create -> Text

-- | The election type corresponding to the elected sub-tree.
claimType :: Create -> ElectionTypeEnum

-- | `True` if election is on behalf of the owner of the holding, `False` otherwise.
electorIsOwner :: Create -> Bool

-- | Time at which the election is put forward.
electionTime :: Create -> Time

-- | Observers of the election.
observers :: Create -> PartiesMap

-- | Number of instrument units to which the election applies.
amount :: Create -> Decimal

-- | The instrument to which the election applies.
instrument :: Create -> InstrumentKey

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Factory.html#module-daml-finance-interface-instrument-option-v0-dividend-factory-71631
module Daml.Finance.Interface.Instrument.Option.V0.Dividend.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Factory.html#type-daml-finance-interface-instrument-option-v0-dividend-factory-i-15409
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Factory.html#type-daml-finance-interface-instrument-option-v0-dividend-factory-v-22022
type V = View

-- | View of `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Factory.html#type-daml-finance-interface-instrument-option-v0-dividend-factory-view-850
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Factory.html#constr-daml-finance-interface-instrument-option-v0-dividend-factory-view-93797
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Factory.html#function-daml-finance-interface-instrument-option-v0-dividend-factory-createtick-45617
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate Dividend options.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Factory.html#type-daml-finance-interface-instrument-option-v0-dividend-factory-factory-81964
data (HasInterfaceView Factory V) => Factory

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Factory.html#type-daml-finance-interface-instrument-option-v0-dividend-factory-create-44747
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Factory.html#type-daml-finance-interface-instrument-option-v0-dividend-factory-create-44747
Create :: Dividend -> PartiesMap -> Create

-- | Attributes to create a Dividend option.
dividend :: Create -> Dividend

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Instrument.html#module-daml-finance-interface-instrument-option-v0-dividend-instrument-37029
module Daml.Finance.Interface.Instrument.Option.V0.Dividend.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Instrument.html#type-daml-finance-interface-instrument-option-v0-dividend-instrument-i-22979
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Instrument.html#type-daml-finance-interface-instrument-option-v0-dividend-instrument-v-12212
type V = View

-- | View of `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Instrument.html#type-daml-finance-interface-instrument-option-v0-dividend-instrument-view-15904
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Instrument.html#constr-daml-finance-interface-instrument-option-v0-dividend-instrument-view-62041
View :: Dividend -> View

-- | Attributes of a Dividend option.
dividend :: View -> Dividend

-- | Instrument interface representing a physically settled Dividend option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Instrument.html#type-daml-finance-interface-instrument-option-v0-dividend-instrument-instrument-39714
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Instrument.html#type-daml-finance-interface-instrument-option-v0-dividend-instrument-getview-74827
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Instrument.html#type-daml-finance-interface-instrument-option-v0-dividend-instrument-getview-74827
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Types.html#module-daml-finance-interface-instrument-option-v0-dividend-types-32782
module Daml.Finance.Interface.Instrument.Option.V0.Dividend.Types

-- | Describes the attributes of a physically settled Dividend option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Types.html#type-daml-finance-interface-instrument-option-v0-dividend-types-dividend-7997
data Dividend

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Types.html#constr-daml-finance-interface-instrument-option-v0-dividend-types-dividend-79286
Dividend :: InstrumentKey -> Text -> Date -> InstrumentQuantity -> Optional InstrumentQuantity -> Optional InstrumentQuantity -> Time -> [EventData] -> Dividend

-- | The instrument's key.
instrument :: Dividend -> InstrumentKey

-- | The description of the option.
description :: Dividend -> Text

-- | The expiry date of the option.
expiryDate :: Dividend -> Date

-- | Dividend paid in cash
cashQuantity :: Dividend -> InstrumentQuantity

-- | Dividend paid in shares (if applicable)
sharesQuantity :: Dividend -> Optional InstrumentQuantity

-- | Dividend paid in a foreign currency (if applicable)
fxQuantity :: Dividend -> Optional InstrumentQuantity

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Dividend -> Time

-- | A list of previous elections that have been lifecycled on this instrument so far.
prevEvents :: Dividend -> [EventData]

-- | An election type classification.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Types.html#type-daml-finance-interface-instrument-option-v0-dividend-types-electiontypeenum-74590
data ElectionTypeEnum

-- | Shares dividend.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Types.html#constr-daml-finance-interface-instrument-option-v0-dividend-types-shares-60469
Shares :: ElectionTypeEnum

-- | Cash dividend.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Types.html#constr-daml-finance-interface-instrument-option-v0-dividend-types-cash-32962
Cash :: ElectionTypeEnum

-- | Foreign currency cash dividend.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Dividend-Types.html#constr-daml-finance-interface-instrument-option-v0-dividend-types-cashfx-20670
CashFx :: ElectionTypeEnum

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Factory.html#module-daml-finance-interface-instrument-option-v0-europeancash-factory-64002
module Daml.Finance.Interface.Instrument.Option.V0.EuropeanCash.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Factory.html#type-daml-finance-interface-instrument-option-v0-europeancash-factory-i-10634
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Factory.html#type-daml-finance-interface-instrument-option-v0-europeancash-factory-v-69261
type V = View

-- | View of `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Factory.html#type-daml-finance-interface-instrument-option-v0-europeancash-factory-view-99187
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Factory.html#constr-daml-finance-interface-instrument-option-v0-europeancash-factory-view-26740
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Factory.html#function-daml-finance-interface-instrument-option-v0-europeancash-factory-createtick-10786
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate European options.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Factory.html#type-daml-finance-interface-instrument-option-v0-europeancash-factory-factory-72951
data (HasInterfaceView Factory V) => Factory

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Factory.html#type-daml-finance-interface-instrument-option-v0-europeancash-factory-create-31274
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Factory.html#type-daml-finance-interface-instrument-option-v0-europeancash-factory-create-31274
Create :: European -> PartiesMap -> Create

-- | Attributes to create a European option.
european :: Create -> European

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Instrument.html#module-daml-finance-interface-instrument-option-v0-europeancash-instrument-85374
module Daml.Finance.Interface.Instrument.Option.V0.EuropeanCash.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Instrument.html#type-daml-finance-interface-instrument-option-v0-europeancash-instrument-i-2950
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Instrument.html#type-daml-finance-interface-instrument-option-v0-europeancash-instrument-v-96337
type V = View

-- | View of `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Instrument.html#type-daml-finance-interface-instrument-option-v0-europeancash-instrument-view-95143
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Instrument.html#constr-daml-finance-interface-instrument-option-v0-europeancash-instrument-view-83690
View :: European -> View

-- | Attributes of a European option.
european :: View -> European

-- | Instrument interface representing a European option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Instrument.html#type-daml-finance-interface-instrument-option-v0-europeancash-instrument-instrument-68985
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Instrument.html#type-daml-finance-interface-instrument-option-v0-europeancash-instrument-getview-53966
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Instrument.html#type-daml-finance-interface-instrument-option-v0-europeancash-instrument-getview-53966
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Types.html#module-daml-finance-interface-instrument-option-v0-europeancash-types-91763
module Daml.Finance.Interface.Instrument.Option.V0.EuropeanCash.Types

-- | Describes the attributes of a cash-settled European option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Types.html#type-daml-finance-interface-instrument-option-v0-europeancash-types-european-14694
data European

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanCash-Types.html#constr-daml-finance-interface-instrument-option-v0-europeancash-types-european-7809
European :: InstrumentKey -> Text -> Text -> Bool -> OptionTypeEnum -> Decimal -> Date -> InstrumentKey -> Time -> European

-- | The instrument's key.
instrument :: European -> InstrumentKey

-- | The description of the option.
description :: European -> Text

-- | The reference asset ID. For example, in case of an option on AAPL this should be a valid
--   reference to the AAPL fixings to be used for the payoff calculation.
referenceAssetId :: European -> Text

-- | Indicate whether a holding owner of this instrument receives the option payoff.
ownerReceives :: European -> Bool

-- | Indicate whether the option is a call or a put.
optionType :: European -> OptionTypeEnum

-- | The strike price of the option.
strike :: European -> Decimal

-- | The expiry date of the option.
expiryDate :: European -> Date

-- | The currency of the option. For example, if the option pays in USD this should be a USD
--   cash instrument.
currency :: European -> InstrumentKey

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: European -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Factory.html#module-daml-finance-interface-instrument-option-v0-europeanphysical-factory-14616
module Daml.Finance.Interface.Instrument.Option.V0.EuropeanPhysical.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Factory.html#type-daml-finance-interface-instrument-option-v0-europeanphysical-factory-i-99780
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Factory.html#type-daml-finance-interface-instrument-option-v0-europeanphysical-factory-v-71507
type V = View

-- | View of `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Factory.html#type-daml-finance-interface-instrument-option-v0-europeanphysical-factory-view-82873
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Factory.html#constr-daml-finance-interface-instrument-option-v0-europeanphysical-factory-view-4910
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Factory.html#function-daml-finance-interface-instrument-option-v0-europeanphysical-factory-createtick-84252
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate European options.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Factory.html#type-daml-finance-interface-instrument-option-v0-europeanphysical-factory-factory-2909
data (HasInterfaceView Factory V) => Factory

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Factory.html#type-daml-finance-interface-instrument-option-v0-europeanphysical-factory-create-41404
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Factory.html#type-daml-finance-interface-instrument-option-v0-europeanphysical-factory-create-41404
Create :: European -> PartiesMap -> Create

-- | Attributes to create a European option.
european :: Create -> European

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Instrument.html#module-daml-finance-interface-instrument-option-v0-europeanphysical-instrument-39652
module Daml.Finance.Interface.Instrument.Option.V0.EuropeanPhysical.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Instrument.html#type-daml-finance-interface-instrument-option-v0-europeanphysical-instrument-i-88456
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Instrument.html#type-daml-finance-interface-instrument-option-v0-europeanphysical-instrument-v-3503
type V = View

-- | View of `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Instrument.html#type-daml-finance-interface-instrument-option-v0-europeanphysical-instrument-view-96581
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Instrument.html#constr-daml-finance-interface-instrument-option-v0-europeanphysical-instrument-view-1348
View :: European -> View

-- | Attributes of a European option.
european :: View -> European

-- | Instrument interface representing a physically settled European option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Instrument.html#type-daml-finance-interface-instrument-option-v0-europeanphysical-instrument-instrument-49403
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Instrument.html#type-daml-finance-interface-instrument-option-v0-europeanphysical-instrument-getview-96528
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Instrument.html#type-daml-finance-interface-instrument-option-v0-europeanphysical-instrument-getview-96528
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Types.html#module-daml-finance-interface-instrument-option-v0-europeanphysical-types-28777
module Daml.Finance.Interface.Instrument.Option.V0.EuropeanPhysical.Types

-- | Describes the attributes of a physically settled European option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Types.html#type-daml-finance-interface-instrument-option-v0-europeanphysical-types-european-81104
data European

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-EuropeanPhysical-Types.html#constr-daml-finance-interface-instrument-option-v0-europeanphysical-types-european-36687
European :: InstrumentKey -> Text -> InstrumentKey -> Bool -> OptionTypeEnum -> Decimal -> Date -> InstrumentKey -> Time -> [EventData] -> European

-- | The instrument's key.
instrument :: European -> InstrumentKey

-- | The description of the option.
description :: European -> Text

-- | The reference asset. For example, in case of an option on AAPL this should be an AAPL
--   instrument.
referenceAsset :: European -> InstrumentKey

-- | Indicate whether a holding owner of this instrument receives the option payoff.
ownerReceives :: European -> Bool

-- | Indicate whether the option is a call or a put.
optionType :: European -> OptionTypeEnum

-- | The strike price of the option.
strike :: European -> Decimal

-- | The expiry date of the option.
expiryDate :: European -> Date

-- | The currency of the option. For example, if the option pays in USD this should be a USD
--   cash instrument.
currency :: European -> InstrumentKey

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: European -> Time

-- | A list of previous elections that have been lifecycled on this instrument so far.
prevEvents :: European -> [EventData]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Types.html#module-daml-finance-interface-instrument-option-v0-types-54480
module Daml.Finance.Interface.Instrument.Option.V0.Types

-- | A barrier type classification.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Types.html#type-daml-finance-interface-instrument-option-v0-types-barriertypeenum-77029
data BarrierTypeEnum

-- | The option is knocked out if the underlying trades at or above the barrier.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Types.html#constr-daml-finance-interface-instrument-option-v0-types-upandout-80029
UpAndOut :: BarrierTypeEnum

-- | The option is knocked out if the underlying trades at or below the barrier.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Types.html#constr-daml-finance-interface-instrument-option-v0-types-downandout-96532
DownAndOut :: BarrierTypeEnum

-- | The option is activated if the underlying trades at or above the barrier.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Types.html#constr-daml-finance-interface-instrument-option-v0-types-upandin-16755
UpAndIn :: BarrierTypeEnum

-- | The option is activated if the underlying trades at or below the barrier.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Types.html#constr-daml-finance-interface-instrument-option-v0-types-downandin-21676
DownAndIn :: BarrierTypeEnum

-- | An option type classification.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Types.html#type-daml-finance-interface-instrument-option-v0-types-optiontypeenum-30036
data OptionTypeEnum

-- | Call option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Types.html#constr-daml-finance-interface-instrument-option-v0-types-call-13259
Call :: OptionTypeEnum

-- | Put option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Option-V0-Types.html#constr-daml-finance-interface-instrument-option-v0-types-put-54139
Put :: OptionTypeEnum

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Factory.html#module-daml-finance-interface-instrument-structuredproduct-v0-autocallable-factory-50965
module Daml.Finance.Interface.Instrument.StructuredProduct.V0.AutoCallable.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Factory.html#type-daml-finance-interface-instrument-structuredproduct-v0-autocallable-factory-i-21871
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Factory.html#type-daml-finance-interface-instrument-structuredproduct-v0-autocallable-factory-v-6824
type V = View

-- | View of `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Factory.html#type-daml-finance-interface-instrument-structuredproduct-v0-autocallable-factory-view-74308
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Factory.html#constr-daml-finance-interface-instrument-structuredproduct-v0-autocallable-factory-view-37425
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Factory.html#function-daml-finance-interface-instrument-structuredproduct-v0-autocallable-factory-createtick-59943
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate AutoCallable instruments.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Factory.html#type-daml-finance-interface-instrument-structuredproduct-v0-autocallable-factory-factory-17934
data (HasInterfaceView Factory V) => Factory

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Factory.html#type-daml-finance-interface-instrument-structuredproduct-v0-autocallable-factory-create-58961
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Factory.html#type-daml-finance-interface-instrument-structuredproduct-v0-autocallable-factory-create-58961
Create :: AutoCallable -> PartiesMap -> Create

-- | Attributes to create an AutoCallable.
autoCallable :: Create -> AutoCallable

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Instrument.html#module-daml-finance-interface-instrument-structuredproduct-v0-autocallable-instrument-36015
module Daml.Finance.Interface.Instrument.StructuredProduct.V0.AutoCallable.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Instrument.html#type-daml-finance-interface-instrument-structuredproduct-v0-autocallable-instrument-i-91905
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Instrument.html#type-daml-finance-interface-instrument-structuredproduct-v0-autocallable-instrument-v-59478
type V = View

-- | View of `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Instrument.html#type-daml-finance-interface-instrument-structuredproduct-v0-autocallable-instrument-view-56578
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Instrument.html#constr-daml-finance-interface-instrument-structuredproduct-v0-autocallable-instrument-view-86473
View :: AutoCallable -> View

-- | Attributes of an AutoCallable.
autoCallable :: View -> AutoCallable

-- | Instrument interface representing an AutoCallable.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Instrument.html#type-daml-finance-interface-instrument-structuredproduct-v0-autocallable-instrument-instrument-75792
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Instrument.html#type-daml-finance-interface-instrument-structuredproduct-v0-autocallable-instrument-getview-20097
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Instrument.html#type-daml-finance-interface-instrument-structuredproduct-v0-autocallable-instrument-getview-20097
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Types.html#module-daml-finance-interface-instrument-structuredproduct-v0-autocallable-types-24024
module Daml.Finance.Interface.Instrument.StructuredProduct.V0.AutoCallable.Types

-- | Describes the attributes of an AutoCallable instrument that pays a conditional coupon.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Types.html#type-daml-finance-interface-instrument-structuredproduct-v0-autocallable-types-autocallable-58435
data AutoCallable

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-AutoCallable-Types.html#constr-daml-finance-interface-instrument-structuredproduct-v0-autocallable-types-autocallable-34750
AutoCallable :: InstrumentKey -> Text -> Text -> Decimal -> Decimal -> Decimal -> Decimal -> Decimal -> PeriodicSchedule -> PeriodicSchedule -> [Text] -> Party -> DayCountConventionEnum -> InstrumentKey -> Decimal -> Time -> [EventData] -> AutoCallable

-- | The instrument's key.
instrument :: AutoCallable -> InstrumentKey

-- | The description of the option.
description :: AutoCallable -> Text

-- | The reference asset ID. For example, in case of an AAPL underlying this should be a valid
--   reference to the AAPL fixings to be used for the payoff calculation.
referenceAssetId :: AutoCallable -> Text

-- | The strike of the put (as a percentage of the underlying closing price on the first
--   observation date).
putStrike :: AutoCallable -> Decimal

-- | The coupon barrier (as a percentage of the underlying closing price on the first
--   observation date).
couponBarrier :: AutoCallable -> Decimal

-- | The barrier used to automatically call the instrument (as a percentage of the underlying
--   closing price on the first observation date).
callBarrier :: AutoCallable -> Decimal

-- | The barrier used to determine the final redemption amount (as a percentage of the
--   underlying closing price on the first observation date).
finalBarrier :: AutoCallable -> Decimal

-- | The fixed coupon rate, either per annum or per coupon period (depending on the
--   dayCountConvention below).
couponRate :: AutoCallable -> Decimal

-- | The schedule for the observation dates. These are used to observe the barrier, determine
--   whether the instrument is automatically called and to determine the final redemption
--   amount.
observationSchedule :: AutoCallable -> PeriodicSchedule

-- | The schedule for the periodic coupon payments.
periodicSchedule :: AutoCallable -> PeriodicSchedule

-- | The identifiers of the holiday calendars to be used for the coupon schedule.
holidayCalendarIds :: AutoCallable -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: AutoCallable -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: AutoCallable -> DayCountConventionEnum

-- | The currency of the product. For example, if the product pays in USD this should be a USD
--   cash instrument.
currency :: AutoCallable -> InstrumentKey

-- | The notional of the product. This is the face value corresponding to one unit of the
--   product. For example, if one product unit corresponds to 1000 USD, this should be 1000.0.
notional :: AutoCallable -> Decimal

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: AutoCallable -> Time

-- | A list of previous events that have been lifecycled on this instrument so far.
prevEvents :: AutoCallable -> [EventData]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Factory.html#module-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-factory-91145
module Daml.Finance.Interface.Instrument.StructuredProduct.V0.BarrierReverseConvertible.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Factory.html#type-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-factory-i-60559
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Factory.html#type-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-factory-v-45512
type V = View

-- | View of `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Factory.html#type-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-factory-view-61060
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Factory.html#constr-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-factory-view-2195
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Factory.html#function-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-factory-createtick-74039
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate BRCs.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Factory.html#type-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-factory-factory-47150
data (HasInterfaceView Factory V) => Factory

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Factory.html#type-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-factory-create-85905
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Factory.html#type-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-factory-create-85905
Create :: BarrierReverseConvertible -> PartiesMap -> Create

-- | Attributes to create a BRC.
barrierReverseConvertible :: Create -> BarrierReverseConvertible

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Instrument.html#module-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-instrument-33591
module Daml.Finance.Interface.Instrument.StructuredProduct.V0.BarrierReverseConvertible.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Instrument.html#type-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-instrument-i-56857
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Instrument.html#type-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-instrument-v-93950
type V = View

-- | View of `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Instrument.html#type-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-instrument-view-1802
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Instrument.html#constr-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-instrument-view-26791
View :: BarrierReverseConvertible -> View

-- | Attributes of a BRC.
barrierReverseConvertible :: View -> BarrierReverseConvertible

-- | Instrument interface representing a BRC.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Instrument.html#type-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-instrument-instrument-96792
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Instrument.html#type-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-instrument-getview-82009
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Instrument.html#type-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-instrument-getview-82009
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Types.html#module-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-types-60320
module Daml.Finance.Interface.Instrument.StructuredProduct.V0.BarrierReverseConvertible.Types

-- | Describes the attributes of a Barrier Reverse Convertible (BRC) instrument.
--   It can be seen as a long fixed coupon bond and a short Down-And-In put option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Types.html#type-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-types-barrierreverseconvertible-74687
data BarrierReverseConvertible

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-BarrierReverseConvertible-Types.html#constr-daml-finance-interface-instrument-structuredproduct-v0-barrierreverseconvertible-types-barrierreverseconvertible-85126
BarrierReverseConvertible :: InstrumentKey -> Text -> Text -> Decimal -> Decimal -> Date -> Date -> Decimal -> PeriodicSchedule -> [Text] -> Party -> DayCountConventionEnum -> InstrumentKey -> Decimal -> Time -> [EventData] -> BarrierReverseConvertible

-- | The instrument's key.
instrument :: BarrierReverseConvertible -> InstrumentKey

-- | The description of the option.
description :: BarrierReverseConvertible -> Text

-- | The reference asset ID. For example, in case of an option on AAPL this should be a valid
--   reference to the AAPL fixings to be used for the payoff calculation.
referenceAssetId :: BarrierReverseConvertible -> Text

-- | The strike price of the option.
strike :: BarrierReverseConvertible -> Decimal

-- | The barrier level of the option.
barrier :: BarrierReverseConvertible -> Decimal

-- | The start date for barrier observations.
barrierStartDate :: BarrierReverseConvertible -> Date

-- | The expiry date of the instrument.
expiryDate :: BarrierReverseConvertible -> Date

-- | The fixed coupon rate, per annum. For example, in case of a "3.5% p.a coupon" this should
--   be 0.035.
couponRate :: BarrierReverseConvertible -> Decimal

-- | The schedule for the periodic coupon payments.
periodicSchedule :: BarrierReverseConvertible -> PeriodicSchedule

-- | The identifiers of the holiday calendars to be used for the coupon schedule.
holidayCalendarIds :: BarrierReverseConvertible -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: BarrierReverseConvertible -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: BarrierReverseConvertible -> DayCountConventionEnum

-- | The currency of the product. For example, if the product pays in USD this should be a USD
--   cash instrument.
currency :: BarrierReverseConvertible -> InstrumentKey

-- | The notional of the product. This is the face value corresponding to one unit of the
--   product. For example, if one product unit corresponds to 1000 USD, this should be 1000.0.
notional :: BarrierReverseConvertible -> Decimal

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: BarrierReverseConvertible -> Time

-- | A list of previous events that have been lifecycled on this instrument so far.
prevEvents :: BarrierReverseConvertible -> [EventData]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-Types.html#module-daml-finance-interface-instrument-structuredproduct-v0-types-45830
module Daml.Finance.Interface.Instrument.StructuredProduct.V0.Types

-- | An option type classification.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-Types.html#type-daml-finance-interface-instrument-structuredproduct-v0-types-optiontypeenum-54786
data OptionTypeEnum

-- | Call option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-Types.html#constr-daml-finance-interface-instrument-structuredproduct-v0-types-call-40827
Call :: OptionTypeEnum

-- | Put option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-StructuredProduct-V0-Types.html#constr-daml-finance-interface-instrument-structuredproduct-v0-types-put-28939
Put :: OptionTypeEnum

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Factory.html#module-daml-finance-interface-instrument-swap-v0-asset-factory-15289
module Daml.Finance.Interface.Instrument.Swap.V0.Asset.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Factory.html#type-daml-finance-interface-instrument-swap-v0-asset-factory-i-5355
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Factory.html#type-daml-finance-interface-instrument-swap-v0-asset-factory-v-25068
type V = View

-- | View of `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Factory.html#type-daml-finance-interface-instrument-swap-v0-asset-factory-view-92696
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Factory.html#constr-daml-finance-interface-instrument-swap-v0-asset-factory-view-94505
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Factory.html#function-daml-finance-interface-instrument-swap-v0-asset-factory-createtick-39315
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate asset swaps.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Factory.html#type-daml-finance-interface-instrument-swap-v0-asset-factory-factory-42186
data (HasInterfaceView Factory V) => Factory

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Factory.html#type-daml-finance-interface-instrument-swap-v0-asset-factory-create-72901
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Factory.html#type-daml-finance-interface-instrument-swap-v0-asset-factory-create-72901
Create :: Asset -> PartiesMap -> Create

-- | Attributes to create an asset swap.
asset :: Create -> Asset

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Instrument.html#module-daml-finance-interface-instrument-swap-v0-asset-instrument-80683
module Daml.Finance.Interface.Instrument.Swap.V0.Asset.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Instrument.html#type-daml-finance-interface-instrument-swap-v0-asset-instrument-i-95573
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Instrument.html#type-daml-finance-interface-instrument-swap-v0-asset-instrument-v-67426
type V = View

-- | View of `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Instrument.html#type-daml-finance-interface-instrument-swap-v0-asset-instrument-view-14814
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Instrument.html#constr-daml-finance-interface-instrument-swap-v0-asset-instrument-view-63641
View :: Asset -> View

-- | Attributes of an asset swap.
asset :: View -> Asset

-- | Instrument interface representing an asset swap.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Instrument.html#type-daml-finance-interface-instrument-swap-v0-asset-instrument-instrument-40916
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Instrument.html#type-daml-finance-interface-instrument-swap-v0-asset-instrument-getview-75677
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Instrument.html#type-daml-finance-interface-instrument-swap-v0-asset-instrument-getview-75677
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Types.html#module-daml-finance-interface-instrument-swap-v0-asset-types-5044
module Daml.Finance.Interface.Instrument.Swap.V0.Asset.Types

-- | Describes the attributes of an Asset swap.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Types.html#type-daml-finance-interface-instrument-swap-v0-asset-types-asset-43409
data Asset

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Types.html#constr-daml-finance-interface-instrument-swap-v0-asset-types-asset-98554
Asset :: InstrumentKey -> Text -> [Underlying] -> Bool -> Optional FloatingRate -> Decimal -> PeriodicSchedule -> [Text] -> Party -> DayCountConventionEnum -> InstrumentKey -> Time -> Asset

-- | The instrument's key.
instrument :: Asset -> InstrumentKey

-- | The description of the swap.
description :: Asset -> Text

-- | The list of underlyings (the basket of reference assets for the asset swap).
underlyings :: Asset -> [Underlying]

-- | Indicate whether a holding owner of this instrument receives the rate or the asset leg of
--   the swap.
ownerReceivesRate :: Asset -> Bool

-- | A description of the floating rate to be used (if applicable). This supports both Libor
--   and SOFR style reference rates (using a compounded index, e.g. the SOFR Index).
floatingRate :: Asset -> Optional FloatingRate

-- | The interest rate of the fix leg. For example, in case of "AAPL total return vs 2.5% fix"
--   this should be 0.025. This can also be used as a floating rate spread. For example, in
--   case of "3M Libor + 0.5%" this should be 0.005.
fixRate :: Asset -> Decimal

-- | The schedule for the periodic swap payments.
periodicSchedule :: Asset -> PeriodicSchedule

-- | The identifiers of the holiday calendars to be used for the swap payment schedule.
holidayCalendarIds :: Asset -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: Asset -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: Asset -> DayCountConventionEnum

-- | The currency of the swap. For example, if the swap pays in USD this should be a USD cash
--   instrument.
currency :: Asset -> InstrumentKey

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Asset -> Time

-- | Describes an underlying of a product.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Types.html#type-daml-finance-interface-instrument-swap-v0-asset-types-underlying-93813
data Underlying

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Asset-Types.html#constr-daml-finance-interface-instrument-swap-v0-asset-types-underlying-22152
Underlying :: InstrumentKey -> Text -> Decimal -> Decimal -> Underlying

-- | The underlying's key.
referenceAsset :: Underlying -> InstrumentKey

-- | The reference asset ID. This is used to retrieve observations for this underlying.
referenceAssetId :: Underlying -> Text

-- | The basket weight of the underlying.
weight :: Underlying -> Decimal

-- | The initial price of the underlying.
initialPrice :: Underlying -> Decimal

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Factory.html#module-daml-finance-interface-instrument-swap-v0-creditdefault-factory-8179
module Daml.Finance.Interface.Instrument.Swap.V0.CreditDefault.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Factory.html#type-daml-finance-interface-instrument-swap-v0-creditdefault-factory-i-74269
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Factory.html#type-daml-finance-interface-instrument-swap-v0-creditdefault-factory-v-76602
type V = View

-- | View of `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Factory.html#type-daml-finance-interface-instrument-swap-v0-creditdefault-factory-view-77110
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Factory.html#constr-daml-finance-interface-instrument-swap-v0-creditdefault-factory-view-52339
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Factory.html#function-daml-finance-interface-instrument-swap-v0-creditdefault-factory-createtick-17293
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate credit default swaps.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Factory.html#type-daml-finance-interface-instrument-swap-v0-creditdefault-factory-factory-36744
data (HasInterfaceView Factory V) => Factory

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Factory.html#type-daml-finance-interface-instrument-swap-v0-creditdefault-factory-create-56287
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Factory.html#type-daml-finance-interface-instrument-swap-v0-creditdefault-factory-create-56287
Create :: CreditDefault -> PartiesMap -> Create

-- | Attributes to create a credit default swap.
creditDefault :: Create -> CreditDefault

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Instrument.html#module-daml-finance-interface-instrument-swap-v0-creditdefault-instrument-94865
module Daml.Finance.Interface.Instrument.Swap.V0.CreditDefault.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Instrument.html#type-daml-finance-interface-instrument-swap-v0-creditdefault-instrument-i-43747
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Instrument.html#type-daml-finance-interface-instrument-swap-v0-creditdefault-instrument-v-32980
type V = View

-- | View of `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Instrument.html#type-daml-finance-interface-instrument-swap-v0-creditdefault-instrument-view-28576
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Instrument.html#constr-daml-finance-interface-instrument-swap-v0-creditdefault-instrument-view-19183
View :: CreditDefault -> View

-- | Attributes of a credit default swap.
creditDefault :: View -> CreditDefault

-- | Instrument interface representing a credit default swap.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Instrument.html#type-daml-finance-interface-instrument-swap-v0-creditdefault-instrument-instrument-93730
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Instrument.html#type-daml-finance-interface-instrument-swap-v0-creditdefault-instrument-getview-95179
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Instrument.html#type-daml-finance-interface-instrument-swap-v0-creditdefault-instrument-getview-95179
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Types.html#module-daml-finance-interface-instrument-swap-v0-creditdefault-types-7878
module Daml.Finance.Interface.Instrument.Swap.V0.CreditDefault.Types

-- | Describes the attributes of a Credit Default swap.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Types.html#type-daml-finance-interface-instrument-swap-v0-creditdefault-types-creditdefault-30509
data CreditDefault

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-CreditDefault-Types.html#constr-daml-finance-interface-instrument-swap-v0-creditdefault-types-creditdefault-31326
CreditDefault :: InstrumentKey -> Text -> Text -> Text -> Bool -> Decimal -> PeriodicSchedule -> [Text] -> Party -> DayCountConventionEnum -> InstrumentKey -> Time -> CreditDefault

-- | The instrument's key.
instrument :: CreditDefault -> InstrumentKey

-- | The description of the swap.
description :: CreditDefault -> Text

-- | The reference ID of the default probability observable. For example, in case of
--   protection against a "TSLA bond payment default" this should be a valid reference to the
--   "TSLA default probability".
defaultProbabilityReferenceId :: CreditDefault -> Text

-- | The reference ID of the recovery rate observable. For example, in case of a "TSLA bond
--   payment default with a 60% recovery rate" this should be a valid reference to the "TSLA
--   bond recovery rate".
recoveryRateReferenceId :: CreditDefault -> Text

-- | Indicate whether a holding owner of this instrument receives the fix or the default
--   protection leg of the swap.
ownerReceivesFix :: CreditDefault -> Bool

-- | The interest rate of the fix leg. For example, in case of "2.5% fix" this should be
--   0.025.
fixRate :: CreditDefault -> Decimal

-- | The schedule for the periodic swap payments.
periodicSchedule :: CreditDefault -> PeriodicSchedule

-- | The identifiers of the holiday calendars to be used for the swap payment schedule.
holidayCalendarIds :: CreditDefault -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: CreditDefault -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: CreditDefault -> DayCountConventionEnum

-- | The currency of the swap. For example, if the swap pays in USD this should be a USD cash
--   instrument.
currency :: CreditDefault -> InstrumentKey

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: CreditDefault -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Factory.html#module-daml-finance-interface-instrument-swap-v0-currency-factory-92471
module Daml.Finance.Interface.Instrument.Swap.V0.Currency.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Factory.html#type-daml-finance-interface-instrument-swap-v0-currency-factory-i-59021
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Factory.html#type-daml-finance-interface-instrument-swap-v0-currency-factory-v-394
type V = View

-- | View of `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Factory.html#type-daml-finance-interface-instrument-swap-v0-currency-factory-view-41094
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Factory.html#constr-daml-finance-interface-instrument-swap-v0-currency-factory-view-85161
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Factory.html#function-daml-finance-interface-instrument-swap-v0-currency-factory-createtick-73693
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate currency swaps.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Factory.html#type-daml-finance-interface-instrument-swap-v0-currency-factory-factory-57464
data (HasInterfaceView Factory V) => Factory

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Factory.html#type-daml-finance-interface-instrument-swap-v0-currency-factory-create-28047
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Factory.html#type-daml-finance-interface-instrument-swap-v0-currency-factory-create-28047
Create :: CurrencySwap -> PartiesMap -> Create

-- | Attributes to create a currency swap.
currencySwap :: Create -> CurrencySwap

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Instrument.html#module-daml-finance-interface-instrument-swap-v0-currency-instrument-96013
module Daml.Finance.Interface.Instrument.Swap.V0.Currency.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Instrument.html#type-daml-finance-interface-instrument-swap-v0-currency-instrument-i-94263
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Instrument.html#type-daml-finance-interface-instrument-swap-v0-currency-instrument-v-87776
type V = View

-- | View of `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Instrument.html#type-daml-finance-interface-instrument-swap-v0-currency-instrument-view-10332
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Instrument.html#constr-daml-finance-interface-instrument-swap-v0-currency-instrument-view-2849
View :: CurrencySwap -> View

-- | Attributes of a currency swap.
currencySwap :: View -> CurrencySwap

-- | Instrument interface representing a currency swap.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Instrument.html#type-daml-finance-interface-instrument-swap-v0-currency-instrument-instrument-88662
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Instrument.html#type-daml-finance-interface-instrument-swap-v0-currency-instrument-getview-82375
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Instrument.html#type-daml-finance-interface-instrument-swap-v0-currency-instrument-getview-82375
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Types.html#module-daml-finance-interface-instrument-swap-v0-currency-types-12994
module Daml.Finance.Interface.Instrument.Swap.V0.Currency.Types

-- | Describes the attributes of a Currency swap.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Types.html#type-daml-finance-interface-instrument-swap-v0-currency-types-currencyswap-39660
data CurrencySwap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Currency-Types.html#constr-daml-finance-interface-instrument-swap-v0-currency-types-currencyswap-97991
CurrencySwap :: InstrumentKey -> Text -> Bool -> Decimal -> Decimal -> PeriodicSchedule -> [Text] -> Party -> DayCountConventionEnum -> InstrumentKey -> InstrumentKey -> Decimal -> Time -> CurrencySwap

-- | The instrument's key.
instrument :: CurrencySwap -> InstrumentKey

-- | The description of the swap.
description :: CurrencySwap -> Text

-- | Indicate whether a holding owner of this instrument receives the base currency leg or the
--   foreign currency leg of the swap.
ownerReceivesBase :: CurrencySwap -> Bool

-- | The interest rate of the base currency. For example, in case of "3% in USD" this should
--   be 0.03.
baseRate :: CurrencySwap -> Decimal

-- | The interest rate of the foreign currency. For example, in case of "2% in EUR" this
--   should be 0.02.
foreignRate :: CurrencySwap -> Decimal

-- | The schedule for the periodic swap payments.
periodicSchedule :: CurrencySwap -> PeriodicSchedule

-- | The identifiers of the holiday calendars to be used for the swap payment schedule.
holidayCalendarIds :: CurrencySwap -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: CurrencySwap -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: CurrencySwap -> DayCountConventionEnum

-- | The base currency of the swap. For example, in the case of USD this should be a USD cash
--   instrument.
baseCurrency :: CurrencySwap -> InstrumentKey

-- | The foreign currency of the swap. For example, in case of EUR this should be a EUR cash
--   instrument.
foreignCurrency :: CurrencySwap -> InstrumentKey

-- | The fx rate used to convert from the base currency principal amount to the foreign
--   currency principal amount.
fxRate :: CurrencySwap -> Decimal

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: CurrencySwap -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Factory.html#module-daml-finance-interface-instrument-swap-v0-foreignexchange-factory-72042
module Daml.Finance.Interface.Instrument.Swap.V0.ForeignExchange.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Factory.html#type-daml-finance-interface-instrument-swap-v0-foreignexchange-factory-i-93494
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Factory.html#type-daml-finance-interface-instrument-swap-v0-foreignexchange-factory-v-25921
type V = View

-- | View of `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Factory.html#type-daml-finance-interface-instrument-swap-v0-foreignexchange-factory-view-9847
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Factory.html#constr-daml-finance-interface-instrument-swap-v0-foreignexchange-factory-view-1938
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Factory.html#function-daml-finance-interface-instrument-swap-v0-foreignexchange-factory-createtick-98726
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate foreign exchange swaps.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Factory.html#type-daml-finance-interface-instrument-swap-v0-foreignexchange-factory-factory-72691
data (HasInterfaceView Factory V) => Factory

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Factory.html#type-daml-finance-interface-instrument-swap-v0-foreignexchange-factory-create-93054
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Factory.html#type-daml-finance-interface-instrument-swap-v0-foreignexchange-factory-create-93054
Create :: ForeignExchange -> PartiesMap -> Create

-- | Attributes to create an FX swap.
foreignExchange :: Create -> ForeignExchange

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Instrument.html#module-daml-finance-interface-instrument-swap-v0-foreignexchange-instrument-76870
module Daml.Finance.Interface.Instrument.Swap.V0.ForeignExchange.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Instrument.html#type-daml-finance-interface-instrument-swap-v0-foreignexchange-instrument-i-60062
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Instrument.html#type-daml-finance-interface-instrument-swap-v0-foreignexchange-instrument-v-22969
type V = View

-- | View of `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Instrument.html#type-daml-finance-interface-instrument-swap-v0-foreignexchange-instrument-view-20015
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Instrument.html#constr-daml-finance-interface-instrument-swap-v0-foreignexchange-instrument-view-5620
View :: ForeignExchange -> View

-- | Attributes of an FX swap.
foreignExchange :: View -> ForeignExchange

-- | Instrument interface representing an FX swap.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Instrument.html#type-daml-finance-interface-instrument-swap-v0-foreignexchange-instrument-instrument-7777
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Instrument.html#type-daml-finance-interface-instrument-swap-v0-foreignexchange-instrument-getview-42278
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Instrument.html#type-daml-finance-interface-instrument-swap-v0-foreignexchange-instrument-getview-42278
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Types.html#module-daml-finance-interface-instrument-swap-v0-foreignexchange-types-51939
module Daml.Finance.Interface.Instrument.Swap.V0.ForeignExchange.Types

-- | Describes the attributes of a Foreign Exchange swap.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Types.html#type-daml-finance-interface-instrument-swap-v0-foreignexchange-types-foreignexchange-59609
data ForeignExchange

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-ForeignExchange-Types.html#constr-daml-finance-interface-instrument-swap-v0-foreignexchange-types-foreignexchange-74586
ForeignExchange :: InstrumentKey -> Text -> Decimal -> Decimal -> Date -> Date -> Date -> InstrumentKey -> InstrumentKey -> Time -> ForeignExchange

-- | The instrument's key.
instrument :: ForeignExchange -> InstrumentKey

-- | The description of the swap.
description :: ForeignExchange -> Text

-- | The fx rate used for the first swap payment.
firstFxRate :: ForeignExchange -> Decimal

-- | The fx rate used for the final swap payment.
finalFxRate :: ForeignExchange -> Decimal

-- | The date when the swap was issued.
issueDate :: ForeignExchange -> Date

-- | The first payment date of the swap.
firstPaymentDate :: ForeignExchange -> Date

-- | The final payment date of the swap.
maturityDate :: ForeignExchange -> Date

-- | The base currency of the swap, which will be exchanged to another (foreign) currency on
--   the first payment date. For example, in case of USD this should be a USD cash instrument.
baseCurrency :: ForeignExchange -> InstrumentKey

-- | The foreign currency of the swap. For example, in case of EUR this should be a EUR cash
--   instrument.
foreignCurrency :: ForeignExchange -> InstrumentKey

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: ForeignExchange -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Factory.html#module-daml-finance-interface-instrument-swap-v0-fpml-factory-27095
module Daml.Finance.Interface.Instrument.Swap.V0.Fpml.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Factory.html#type-daml-finance-interface-instrument-swap-v0-fpml-factory-i-73357
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Factory.html#type-daml-finance-interface-instrument-swap-v0-fpml-factory-v-14730
type V = View

-- | View of `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Factory.html#type-daml-finance-interface-instrument-swap-v0-fpml-factory-view-62118
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Factory.html#constr-daml-finance-interface-instrument-swap-v0-fpml-factory-view-48881
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Factory.html#function-daml-finance-interface-instrument-swap-v0-fpml-factory-createtick-69493
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate FpML swaps.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Factory.html#type-daml-finance-interface-instrument-swap-v0-fpml-factory-factory-93528
data (HasInterfaceView Factory V) => Factory

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Factory.html#type-daml-finance-interface-instrument-swap-v0-fpml-factory-create-21327
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Factory.html#type-daml-finance-interface-instrument-swap-v0-fpml-factory-create-21327
Create :: Fpml -> PartiesMap -> Create

-- | Attributes to create a swap specified as FpML swapStreams.
fpml :: Create -> Fpml

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#module-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-14103
module Daml.Finance.Interface.Instrument.Swap.V0.Fpml.FpmlTypes

-- | A type for defining a date that shall be subject to adjustment if it would otherwise fall on a
--   day that is not a business day in the specified business centers, together with the convention
--   for adjusting the date.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-adjustabledate-37102
data AdjustableDate

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-adjustabledate-88773
AdjustableDate :: Date -> BusinessDayAdjustments -> AdjustableDate

-- | A date subject to adjustment.
unadjustedDate :: AdjustableDate -> Date

-- | The business day convention and financial business centers used for adjusting the date
--   if it would otherwise fall on a day that is not a business date in the specified
--   business centers.
--   adjustedDate : Optional IdentifiedDate
--   ^ The date once the adjustment has been performed. (Note that this date may change if the
--   business center holidays change).
dateAdjustments :: AdjustableDate -> BusinessDayAdjustments

-- | A type for defining a time with respect to a business day calendar location. For example,
--   11:00am London time.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-businesscentertime-84241
data BusinessCenterTime

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-businesscentertime-76210
BusinessCenterTime :: HourMinuteTime -> Text -> BusinessCenterTime

-- | A time specified in hh:mm:ss format where the second component must be '00', e.g., 11am
--   would be represented as 11:00:00.
hourMinuteTime :: BusinessCenterTime -> HourMinuteTime

businessCenter :: BusinessCenterTime -> Text

-- | A type defining the business day convention and financial business centers used for adjusting
--   any relevant date if it would otherwise fall on a day that is not a business day in the
--   specified business centers.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-businessdayadjustments-9111
data BusinessDayAdjustments

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-businessdayadjustments-36204
BusinessDayAdjustments :: BusinessDayConventionEnum -> [Text] -> BusinessDayAdjustments

-- | The convention for adjusting a date if it would otherwise fall on a day that is not a
--   business day.
businessDayConvention :: BusinessDayAdjustments -> BusinessDayConventionEnum

businessCenters :: BusinessDayAdjustments -> [Text]

-- | The parameters used in the calculation of fixed or floating rate period amounts.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-calculation-57533
data Calculation

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-calculation-37464
Calculation :: NotionalScheduleValue -> RateTypeValue -> DayCountConventionEnum -> Optional CompoundingMethodEnum -> Calculation

notionalScheduleValue :: Calculation -> NotionalScheduleValue

rateTypeValue :: Calculation -> RateTypeValue

dayCountFraction :: Calculation -> DayCountConventionEnum

compoundingMethodEnum :: Calculation -> Optional CompoundingMethodEnum

-- | The calculation period amount parameters.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-calculationperiodamount-86226
data CalculationPeriodAmount

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-calculationperiodamount-61171
CalculationPeriodAmount :: Calculation -> CalculationPeriodAmount

calculation :: CalculationPeriodAmount -> Calculation

-- | The calculation periods dates schedule.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-calculationperioddates-23760
data CalculationPeriodDates

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-calculationperioddates-88403
CalculationPeriodDates :: Text -> AdjustableDate -> AdjustableDate -> CalculationPeriodDatesAdjustments -> Optional AdjustableDate -> Optional Date -> Optional Date -> CalculationPeriodFrequency -> CalculationPeriodDates

id :: CalculationPeriodDates -> Text

effectiveDate :: CalculationPeriodDates -> AdjustableDate

terminationDate :: CalculationPeriodDates -> AdjustableDate

calculationPeriodDatesAdjustments :: CalculationPeriodDates -> CalculationPeriodDatesAdjustments

firstPeriodStartDate :: CalculationPeriodDates -> Optional AdjustableDate

firstRegularPeriodStartDate :: CalculationPeriodDates -> Optional Date

lastRegularPeriodEndDate :: CalculationPeriodDates -> Optional Date

calculationPeriodFrequency :: CalculationPeriodDates -> CalculationPeriodFrequency

-- | The business day convention to apply to each calculation period end date if it would otherwise
--   fall on a day that is not a business day in the specified financial business centers.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-calculationperioddatesadjustments-85977
data CalculationPeriodDatesAdjustments

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-calculationperioddatesadjustments-43236
CalculationPeriodDatesAdjustments :: BusinessDayConventionEnum -> [Text] -> CalculationPeriodDatesAdjustments

businessDayConvention :: CalculationPeriodDatesAdjustments -> BusinessDayConventionEnum

businessCenters :: CalculationPeriodDatesAdjustments -> [Text]

-- | A type defining the frequency at which calculation period end dates occur within the regular
--   part of the calculation period schedule and thier roll date convention. In case the calculation
--   frequency is of value T (term), the period is defined by the
--   swap\swapStream\calculationPerioDates\effectiveDate and the
--   swap\swapStream\calculationPerioDates\terminationDate.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-calculationperiodfrequency-78985
data CalculationPeriodFrequency

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-calculationperiodfrequency-31442
CalculationPeriodFrequency :: Int -> PeriodExtendedEnum -> RollConventionEnum -> CalculationPeriodFrequency

-- | A time period multiplier, e.g., 1, 2 or 3 etc. If the period value is T (Term) then
--   periodMultiplier must contain the value 1.
periodMultiplier :: CalculationPeriodFrequency -> Int

-- | A time period, e.g., a day, week, month, year or term of the stream.
period :: CalculationPeriodFrequency -> PeriodExtendedEnum

-- | Used in conjunction with a frequency and the regular period start date of a calculation
--   period, determines each calculation period end date within the regular part of a c
--   alculation period schedule.
rollConvention :: CalculationPeriodFrequency -> RollConventionEnum

-- | The compounding calculation method
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-compoundingmethodenum-42513
data CompoundingMethodEnum

-- | Flat compounding. Compounding excludes the spread. Note that the first compounding period
--   has it's interest calculated including any spread then subsequent periods compound this at a
--   rate excluding the spread.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-flat-18311
Flat :: CompoundingMethodEnum

-- | No compounding is to be applied.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-nocompounding-1947
NoCompounding :: CompoundingMethodEnum

-- | Straight compounding. Compounding includes the spread.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-straight-53304
Straight :: CompoundingMethodEnum

-- | Spread Exclusive compounding.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-spreadexclusive-98588
SpreadExclusive :: CompoundingMethodEnum

-- | A type defining an offset used in calculating a date when this date is defined in reference to
--   another date through a date offset. The type includes the convention for adjusting the date and
--   an optional sequence element to indicate the order in a sequence of multiple date offsets.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-dateoffset-80142
data DateOffset

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-dateoffset-62325
DateOffset :: Int -> PeriodEnum -> Optional DayTypeEnum -> DateOffset

-- | A time period multiplier, e.g. 1, 2 or 3 etc. A negative value can be used when
--   specifying an offset relative to another date, e.g. -2 days.
periodMultiplier :: DateOffset -> Int

-- | A time period, e.g. a day, week, month or year of the stream. If the periodMultiplier
--   value is 0 (zero) then period must contain the value D (day).
period :: DateOffset -> PeriodEnum

-- | In the case of an offset specified as a number of days, this element defines whether
--   consideration is given as to whether a day is a good business day or not. If a day type of
--   business days is specified then non-business days are ignored when calculating the offset.
--   The financial business centers to use for determination of business days are implied by the
--   context in which this element is used. This element must only be included when the offset
--   is specified as a number of days. If the offset is zero days then the dayType element
--   should not be included.
dayType :: DateOffset -> Optional DayTypeEnum

-- | The specification of whether payments/resets occur relative to the first or last day of a
--   calculation period.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-daterelativetoenum-92127
data DateRelativeToEnum

-- | Payments/Resets will occur relative to the first day of each calculation period.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-calculationperiodstartdate-10356
CalculationPeriodStartDate :: DateRelativeToEnum

-- | Payments/Resets will occur relative to the last day of each calculation period.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-calculationperiodenddate-51553
CalculationPeriodEndDate :: DateRelativeToEnum

-- | A day type classification used in counting the number of days between two dates.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-daytypeenum-59419
data DayTypeEnum

-- | When calculating the number of days between two dates the count includes only business
--   days.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-business-60860
Business :: DayTypeEnum

-- | When calculating the number of days between two dates the count includes all calendar days.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-calendar-45432
Calendar :: DayTypeEnum

-- | When calculating the number of days between two dates the count includes only commodity
--   business days.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-commoditybusiness-1692
CommodityBusiness :: DayTypeEnum

-- | When calculating the number of days between two dates the count includes only currency
--   business days.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-currencybusiness-13297
CurrencyBusiness :: DayTypeEnum

-- | When calculating the number of days between two dates the count includes only stock
--   exchange business days.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-exchangebusiness-91323
ExchangeBusiness :: DayTypeEnum

-- | When calculating the number of days between two dates the count includes only scheduled
--   trading days.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-scheduledtradingday-28649
ScheduledTradingDay :: DayTypeEnum

-- | Specify the fixed rate
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-fixedrateschedule-52475
data FixedRateSchedule

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-fixedrateschedule-20378
FixedRateSchedule :: Decimal -> [Step] -> FixedRateSchedule

-- | The initial rate or amount, as the case may be. An initial rate of 5% would be
--   represented as 0.05.
initialValue :: FixedRateSchedule -> Decimal

-- | The schedule of step date and value pairs. On each step date the associated step value
--   becomes effective. A list of steps may be ordered in the document by ascending step date.
--   An FpML document containing an unordered list of steps is still regarded as a conformant
--   document.
--   type_ : Optional SpreadScheduleType
step :: FixedRateSchedule -> [Step]

-- | Specifies the fixing date relative to the reset date in terms of a business days offset and an
--   associated set of financial business centers.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-fixingdates-95248
data FixingDates

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-fixingdates-3673
FixingDates :: Int -> PeriodEnum -> Optional DayTypeEnum -> BusinessDayConventionEnum -> [Text] -> FixingDates

periodMultiplier :: FixingDates -> Int

period :: FixingDates -> PeriodEnum

dayType :: FixingDates -> Optional DayTypeEnum

businessDayConvention :: FixingDates -> BusinessDayConventionEnum

businessCenters :: FixingDates -> [Text]

-- | A type defining the floating rate and definitions
--   relating to the calculation of floating rate amounts.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-floatingratecalculation-25241
data FloatingRateCalculation

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-floatingratecalculation-49348
FloatingRateCalculation :: Text -> Optional Period -> [SpreadSchedule] -> Optional Rounding -> FloatingRateCalculation

floatingRateIndex :: FloatingRateCalculation -> Text

-- | The ISDA Designated Maturity, i.e., the tenor of the floating rate.
--   floatingRateMultiplierSchedule : Optional Schedule
--   ^ A rate multiplier or multiplier schedule to apply to the floating rate. A multiplier
--     schedule is expressed as explicit multipliers and dates. In the case of a schedule, the
--     step dates may be subject to adjustment in accordance with any adjustments specified in
--     the
--     calculationPeriodDatesAdjustments. The multiplier can be a positive or negative decimal.
--     This element should only be included if the multiplier is not equal to 1 (one) for the
--     term of the stream.
indexTenor :: FloatingRateCalculation -> Optional Period

-- | The ISDA Spread or a Spread schedule expressed as explicit spreads and dates. In the case
--   of a schedule, the step dates may be subject to adjustment in accordance with any
--   adjustments specified in calculationPeriodDatesAdjustments. The spread is a per annum
--   rate, expressed as a decimal. For purposes of determining a calculation period amount, if
--   positive the spread will be added to the floating rate and if negative the spread will be
--   subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be
--   represented as 0.001.
--   rateTreatment : Optional RateTreatmentEnum
--   ^ The specification of any rate conversion which needs to be applied to the observed rate
--   before being used in any calculations. The two common conversions are for securities
--   quoted on a bank discount basis which will need to be converted to either a Money Market
--   Yield or Bond Equivalent Yield. See the Annex to the 2000 ISDA Definitions, Section 7.3.
--   Certain General Definitions Relating to Floating Rate Options, paragraphs (g) and (h) for
--   definitions of these terms.
--   capRateSchedule : [StrikeSchedule]
--   ^ The cap rate or cap rate schedule, if any, which applies to the floating rate. The cap
--   rate (strike) is only required where the floating rate on a swap stream is capped at a
--   certain level. A cap rate schedule is expressed as explicit cap rates and dates and the
--   step dates may be subject to adjustment in accordance with any adjustments specified in
--   calculationPeriodDatesAdjustments. The cap rate is assumed to be exclusive of any spread
--   and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as
--   0.05.
--   floorRateSchedule : [StrikeSchedule]
--   ^ The floor rate or floor rate schedule, if any, which applies to the floating rate. The
--   floor rate (strike) is only required where the floating rate on a swap stream is floored
--   at a certain strike level. A floor rate schedule is expressed as explicit floor rates and
--   dates and the step dates may be subject to adjustment in accordance with any adjustments
--   specified in calculationPeriodDatesAdjustments. The floor rate is assumed to be exclusive
--   of any spread and is a per annum rate, expressed as a decimal. A floor rate of 5% would
--   be represented as 0.05.
--   initialRate : Optional Decimal
--   ^ The initial floating rate reset agreed between the principal parties involved in the
--   trade. This is assumed to be the first required reset rate for the first regular
--   calculation period. It should only be included when the rate is not equal to the rate
--   published on the source implied by the floating rate index. An initial rate of 5% would
--   be represented as 0.05.
spreadSchedule :: FloatingRateCalculation -> [SpreadSchedule]

-- | The rounding convention to apply to the final rate used in determination of a calculation
--   period amount.
--   averagingMethod : Optional AveragingMethodEnum
--   ^ If averaging is applicable, this component specifies whether a weighted or unweighted
--   average method of calculation is to be used. The component must only be included when
--   averaging applies.
--   negativeInterestRateTreatment : Optional NegativeInterestRateTreatmentEnum
--   ^ The specification of any provisions for calculating payment obligations when a floating
--   rate is negative (either due to a quoted negative floating rate or by operation of a
--   spread that is subtracted from the floating rate).
finalRateRounding :: FloatingRateCalculation -> Optional Rounding

-- | The notional amount or notional amount schedule (FX linked).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-fxlinkednotionalschedule-96927
data FxLinkedNotionalSchedule

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-fxlinkednotionalschedule-98300
FxLinkedNotionalSchedule :: Text -> Optional Decimal -> Text -> FixingDates -> FxSpotRateSource -> FxLinkedNotionalSchedule

constantNotionalScheduleReference :: FxLinkedNotionalSchedule -> Text

initialValue :: FxLinkedNotionalSchedule -> Optional Decimal

varyingNotionalCurrency :: FxLinkedNotionalSchedule -> Text

varyingNotionalFixingDates :: FxLinkedNotionalSchedule -> FixingDates

fxSpotRateSource :: FxLinkedNotionalSchedule -> FxSpotRateSource

-- | A type defining the rate source and fixing time for
--   an fx rate.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-fxspotratesource-88026
data FxSpotRateSource

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-fxspotratesource-26565
FxSpotRateSource :: InformationSource -> Optional BusinessCenterTime -> FxSpotRateSource

-- | The primary source for where the rate observation will occur. Will typically be either a
--   page or a reference bank published rate.
--   secondaryRateSource : Optional InformationSource
--   ^ An alternative, or secondary, source for where the rate observation will occur. Will
--   typically be either a page or a reference bank published rate.
primaryRateSource :: FxSpotRateSource -> InformationSource

-- | The time at which the spot currency exchange rate will be observed. It is specified as a
--   time in a business day calendar location, e.g., 11:00am London time.
fixingTime :: FxSpotRateSource -> Optional BusinessCenterTime

-- | A type defining a time specified in hh:mm:ss format where the second component must be '00',
--   e.g., 11am would be represented as 11:00:00.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-hourminutetime-47030
type HourMinuteTime = Text

-- | A type defining the source for a piece of information (e.g. a rate refix or an fx fixing).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-informationsource-74973
data InformationSource

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-informationsource-58940
InformationSource :: Text -> Text -> InformationSource

-- | An information source for obtaining a market rate. For example, Bloomberg, Reuters,
--   Telerate etc.
--   rateSourcePage : Optional RateSourcePage
rateSource :: InformationSource -> Text

-- | A specific page for the rate source for obtaining a market rate.
--   rateSourcePageHeading : Optional String
--   ^ The heading for the rate source on a given rate source page.
rateSourcePage :: InformationSource -> Text

-- | The notional amount or notional amount schedule.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-notionalschedule-81262
data NotionalSchedule

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-notionalschedule-74053
NotionalSchedule :: Text -> NotionalStepSchedule -> NotionalSchedule

id :: NotionalSchedule -> Text

notionalStepSchedule :: NotionalSchedule -> NotionalStepSchedule

-- | Specifies how the notional schedule is defined: either regular or fx linked.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-notionalschedulevalue-85970
data NotionalScheduleValue

-- | Regular notional schedule.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-notionalscheduleregular-7092
NotionalSchedule_Regular :: NotionalSchedule -> NotionalScheduleValue

-- | FX linked notional schedule.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-notionalschedulefxlinked-44562
NotionalSchedule_FxLinked :: FxLinkedNotionalSchedule -> NotionalScheduleValue

-- | The notional amount or notional amount schedule expressed as explicit outstanding notional
--   amounts and dates.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-notionalstepschedule-46668
data NotionalStepSchedule

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-notionalstepschedule-85867
NotionalStepSchedule :: Decimal -> [Step] -> Text -> NotionalStepSchedule

initialValue :: NotionalStepSchedule -> Decimal

step :: NotionalStepSchedule -> [Step]

currency :: NotionalStepSchedule -> Text

-- | The payment dates schedule.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-paymentdates-94528
data PaymentDates

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-paymentdates-90807
PaymentDates :: Text -> PaymentFrequency -> Optional Date -> Optional Date -> DateRelativeToEnum -> Optional DateOffset -> BusinessDayAdjustments -> PaymentDates

calculationPeriodDatesReference :: PaymentDates -> Text

paymentFrequency :: PaymentDates -> PaymentFrequency

firstPaymentDate :: PaymentDates -> Optional Date

lastRegularPaymentDate :: PaymentDates -> Optional Date

payRelativeTo :: PaymentDates -> DateRelativeToEnum

paymentDaysOffset :: PaymentDates -> Optional DateOffset

paymentDatesAdjustments :: PaymentDates -> BusinessDayAdjustments

-- | The frequency at which regular payment dates occur. If the payment frequency is equal to the
--   frequency defined in the calculation period dates component then one calculation period
--   contributes to each payment amount. If the payment frequency is less frequent than the
--   frequency defined in the calculation period dates component then more than one calculation
--   period will contribute to the payment amount. A payment frequency more frequent than the
--   calculation period frequency or one that is not a multiple of the calculation period frequency
--   is invalid. If the payment frequency is of value T (term), the period is defined by the
--   swap\swapStream\calculationPerioDates\effectiveDate and the
--   swap\swapStream\calculationPerioDates\terminationDate.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-paymentfrequency-30561
data PaymentFrequency

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-paymentfrequency-40030
PaymentFrequency :: Int -> PeriodExtendedEnum -> PaymentFrequency

periodMultiplier :: PaymentFrequency -> Int

period :: PaymentFrequency -> PeriodExtendedEnum

-- | The period of a schedule, for example the calculation schedule.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-periodextendedenum-38896
data PeriodExtendedEnum

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-regular-10631
Regular :: PeriodEnum -> PeriodExtendedEnum

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-t-90605
T :: PeriodExtendedEnum

-- | A type defining which principal exchanges occur for
--   the stream.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-principalexchanges-43211
data PrincipalExchanges

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-principalexchanges-27040
PrincipalExchanges :: Bool -> Bool -> Bool -> PrincipalExchanges

-- | A true/false flag to indicate whether there is an initial exchange of principal on the
--   effective date.
initialExchange :: PrincipalExchanges -> Bool

-- | A true/false flag to indicate whether there is a final exchange of principal on the
--   termination date.
finalExchange :: PrincipalExchanges -> Bool

-- | A true/false flag to indicate whether there are intermediate or interim exchanges of
--   principal during the term of the swap.
intermediateExchange :: PrincipalExchanges -> Bool

-- | Specifies whether the swapStream has a fixed or a floating rate.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-ratetypevalue-70501
data RateTypeValue

-- | Fixed rate.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-ratetypefixed-58433
RateType_Fixed :: FixedRateSchedule -> RateTypeValue

-- | Floating rate.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-ratetypefloating-46162
RateType_Floating :: FloatingRateCalculation -> RateTypeValue

-- | The reset dates schedule. This only applies for a floating rate stream.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-resetdates-28315
data ResetDates

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-resetdates-27408
ResetDates :: Text -> DateRelativeToEnum -> FixingDates -> ResetFrequency -> ResetDatesAdjustments -> ResetDates

calculationPeriodDatesReference :: ResetDates -> Text

resetRelativeTo :: ResetDates -> DateRelativeToEnum

fixingDates :: ResetDates -> FixingDates

resetFrequency :: ResetDates -> ResetFrequency

resetDatesAdjustments :: ResetDates -> ResetDatesAdjustments

-- | The business day convention to apply to each reset date if it would otherwise fall on a day
--   that is not a business day in the specified financial business centers.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-resetdatesadjustments-44820
data ResetDatesAdjustments

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-resetdatesadjustments-41001
ResetDatesAdjustments :: BusinessDayConventionEnum -> [Text] -> ResetDatesAdjustments

businessDayConvention :: ResetDatesAdjustments -> BusinessDayConventionEnum

businessCenters :: ResetDatesAdjustments -> [Text]

-- | The frequency at which reset dates occur.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-resetfrequency-57746
data ResetFrequency

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-resetfrequency-34569
ResetFrequency :: Int -> PeriodExtendedEnum -> ResetFrequency

periodMultiplier :: ResetFrequency -> Int

period :: ResetFrequency -> PeriodExtendedEnum

-- | A type defining a rounding direction and precision to be used in the rounding of a rate.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-rounding-1657
data Rounding

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-rounding-71494
Rounding :: RoundingDirectionEnum -> Int -> Rounding

-- | Specifies the rounding direction.
roundingDirection :: Rounding -> RoundingDirectionEnum

-- | Specifies the rounding precision in terms of a number of decimal places. Note how a
--   percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7 in
--   the FpML document since the percentage is expressed as a decimal, e.g. 9.876543% (or
--   0.09876543) being rounded to the nearest 5 decimal places is 9.87654% (or 0.0987654).
precision :: Rounding -> Int

-- | The method of rounding a fractional number.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-roundingdirectionenum-88988
data RoundingDirectionEnum

-- | A fractional number will be rounded up to the specified number of decimal places (the
--   precision). For example, 5.21 and 5.25 rounded up to 1 decimal place are 5.3 and 5.3
--   respectively.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-up-43299
Up :: RoundingDirectionEnum

-- | A fractional number will be rounded down to the specified number of decimal places (the
--   precision). For example, 5.29 and 5.25 rounded down to 1 decimal place are 5.2 and 5.2
--   respectively.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-down-29126
Down :: RoundingDirectionEnum

-- | A fractional number will be rounded either up or down to the specified number of decimal
--   places (the precision) depending on its value. For example, 5.24 would be rounded down to 5.2
--   and 5.25 would be rounded up to 5.3 if a precision of 1 decimal place were specified.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-nearest-14973
Nearest :: RoundingDirectionEnum

-- | Adds an optional spread type element to the Schedule to identify a long or short spread value.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-spreadschedule-59569
data SpreadSchedule

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-spreadschedule-88454
SpreadSchedule :: Decimal -> SpreadSchedule

-- | The initial rate or amount, as the case may be. An initial rate of 5% would be
--   represented as 0.05.
--   step : [Step]
--   ^ The schedule of step date and value pairs. On each step date the associated step value
--   becomes effective. A list of steps may be ordered in the document by ascending step date.
--   An FpML document containing an unordered list of steps is still regarded as a conformant
--   document.
--   type_ : Optional SpreadScheduleType
initialValue :: SpreadSchedule -> Decimal

-- | The schedule of step date and non-negative value pairs. On each step date the associated step
--   value becomes effective. A list of steps may be ordered in the document by ascending step date.
--   An FpML document containing an unordered list of steps is still regarded as a conformant
--   document.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-step-53347
data Step

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-step-25240
Step :: Date -> Decimal -> Step

stepDate :: Step -> Date

stepValue :: Step -> Decimal

-- | The stub calculation period amount parameters. This element must only be included if there is
--   an initial or final stub calculation period. Even then, it must only be included if either the
--   stub references a different floating rate tenor to the regular calculation periods, or if the
--   stub is calculated as a linear interpolation of two different floating rate tenors, or if a
--   specific stub rate or stub amount has been negotiated.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-stubcalculationperiodamount-55158
data StubCalculationPeriodAmount

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-stubcalculationperiodamount-88363
StubCalculationPeriodAmount :: Text -> Optional StubValue -> Optional StubValue -> StubCalculationPeriodAmount

calculationPeriodDatesReference :: StubCalculationPeriodAmount -> Text

initialStub :: StubCalculationPeriodAmount -> Optional StubValue

finalStub :: StubCalculationPeriodAmount -> Optional StubValue

-- | The rates to be applied to the initial or final stub may be the linear interpolation of two
--   different rates.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-stubfloatingrate-62557
data StubFloatingRate

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-stubfloatingrate-7678
StubFloatingRate :: Text -> Optional Period -> StubFloatingRate

floatingRateIndex :: StubFloatingRate -> Text

indexTenor :: StubFloatingRate -> Optional Period

-- | Specifies how the stub amount is calculated. A single floating rate tenor different to that
--   used for the regular part of the calculation periods schedule may be specified, or two floating
--   tenors may be specified. If two floating rate tenors are specified then Linear Interpolation
--   (in accordance with the 2000 ISDA Definitions, Section 8.3. Interpolation) is assumed to apply.
--   Alternatively, an actual known stub rate or stub amount may be specified.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-stubvalue-4311
data StubValue

-- | The rates to be applied to the initial or final stub may be the linear interpolation of two
--   different rates. While the majority of the time, the rate indices will be the same as that
--   specified in the stream and only the tenor itself will be different, it is possible to
--   specift two different rates. For example, a 2 month stub period may use the linear
--   interpolation of a 1 month and 3 month rate. The different rates would be specified in this
--   component. Note that a maximum of two rates can be specified. If a stub period uses the
--   same floating rate index, including tenor, as the regular calculation periods then this
--   should not be specified again within this component, i.e., the stub calculation period
--   amount component may not need to be specified even if there is an initial or final stub
--   period. If a stub period uses a different floating rate index compared to the regular
--   calculation periods then this should be specified within this component. If specified here,
--   they are likely to have id attributes, allowing them to be referenced from within the
--   cashflows component.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-stubvaluefloatingrate-91634
StubValue_FloatingRate :: [StubFloatingRate] -> StubValue

-- | An actual rate to apply for the initial or final stub period may have been agreed between
--   the principal parties (in a similar way to how an initial rate may have been agreed for the
--   first regular period). If an actual stub rate has been agreed then it would be included in
--   this component. It will be a per annum rate, expressed as a decimal. A stub rate of 5%
--   would be represented as 0.05.
--   | StubValue_StubAmount Money
--   ^ An actual amount to apply for the initial or final stub period may have been agreed between
--   the two parties. If an actual stub amount has been agreed then it would be included in this
--   component.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-stubvaluestubrate-6456
StubValue_StubRate :: Decimal -> StubValue

-- | The swap streams, describing each leg of the swap.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#type-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-swapstream-97822
data SwapStream

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-FpmlTypes.html#constr-daml-finance-interface-instrument-swap-v0-fpml-fpmltypes-swapstream-53745
SwapStream :: Text -> Text -> CalculationPeriodDates -> PaymentDates -> Optional ResetDates -> CalculationPeriodAmount -> Optional StubCalculationPeriodAmount -> Optional PrincipalExchanges -> SwapStream

payerPartyReference :: SwapStream -> Text

receiverPartyReference :: SwapStream -> Text

calculationPeriodDates :: SwapStream -> CalculationPeriodDates

paymentDates :: SwapStream -> PaymentDates

resetDates :: SwapStream -> Optional ResetDates

calculationPeriodAmount :: SwapStream -> CalculationPeriodAmount

stubCalculationPeriodAmount :: SwapStream -> Optional StubCalculationPeriodAmount

principalExchanges :: SwapStream -> Optional PrincipalExchanges

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Instrument.html#module-daml-finance-interface-instrument-swap-v0-fpml-instrument-92389
module Daml.Finance.Interface.Instrument.Swap.V0.Fpml.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Instrument.html#type-daml-finance-interface-instrument-swap-v0-fpml-instrument-i-31607
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Instrument.html#type-daml-finance-interface-instrument-swap-v0-fpml-instrument-v-25120
type V = View

-- | View of `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Instrument.html#type-daml-finance-interface-instrument-swap-v0-fpml-instrument-view-90652
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Instrument.html#constr-daml-finance-interface-instrument-swap-v0-fpml-instrument-view-16065
View :: Fpml -> View

-- | Attributes of a swap specified as FpML swapStreams.
fpml :: View -> Fpml

-- | Instrument interface representing a swap specified as FpML swapStreams.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Instrument.html#type-daml-finance-interface-instrument-swap-v0-fpml-instrument-instrument-32406
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Instrument.html#type-daml-finance-interface-instrument-swap-v0-fpml-instrument-getview-66823
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Instrument.html#type-daml-finance-interface-instrument-swap-v0-fpml-instrument-getview-66823
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Types.html#module-daml-finance-interface-instrument-swap-v0-fpml-types-85330
module Daml.Finance.Interface.Instrument.Swap.V0.Fpml.Types

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Types.html#type-daml-finance-interface-instrument-swap-v0-fpml-types-fpml-35949
data Fpml

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-Fpml-Types.html#constr-daml-finance-interface-instrument-swap-v0-fpml-types-fpml-79074
Fpml :: InstrumentKey -> Text -> [SwapStream] -> Text -> Party -> [InstrumentKey] -> Time -> Fpml

-- | The instrument's key.
instrument :: Fpml -> InstrumentKey

-- | The description of the swap.
description :: Fpml -> Text

-- | Each element describes a stream of swap payments, for example a regular fixed or floating
--   rate.
swapStreams :: Fpml -> [SwapStream]

-- | Used to the identify which counterparty is the issuer in the swapStream.
issuerPartyRef :: Fpml -> Text

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: Fpml -> Party

-- | The currencies of the different swap legs, one for each swapStream. For example, if one
--   leg pays in USD this should be a USD cash instrument.
currencies :: Fpml -> [InstrumentKey]

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: Fpml -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Factory.html#module-daml-finance-interface-instrument-swap-v0-interestrate-factory-59180
module Daml.Finance.Interface.Instrument.Swap.V0.InterestRate.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Factory.html#type-daml-finance-interface-instrument-swap-v0-interestrate-factory-i-6828
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Factory.html#type-daml-finance-interface-instrument-swap-v0-interestrate-factory-v-87115
type V = View

-- | View of `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Factory.html#type-daml-finance-interface-instrument-swap-v0-interestrate-factory-view-96657
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Factory.html#constr-daml-finance-interface-instrument-swap-v0-interestrate-factory-view-77018
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Factory.html#function-daml-finance-interface-instrument-swap-v0-interestrate-factory-createtick-52356
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate interest rate swaps.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Factory.html#type-daml-finance-interface-instrument-swap-v0-interestrate-factory-factory-42261
data (HasInterfaceView Factory V) => Factory

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Factory.html#type-daml-finance-interface-instrument-swap-v0-interestrate-factory-create-78116
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Factory.html#type-daml-finance-interface-instrument-swap-v0-interestrate-factory-create-78116
Create :: InterestRate -> PartiesMap -> Create

-- | Attributes to create an interest rate swap.
interestRate :: Create -> InterestRate

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Instrument.html#module-daml-finance-interface-instrument-swap-v0-interestrate-instrument-99532
module Daml.Finance.Interface.Instrument.Swap.V0.InterestRate.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Instrument.html#type-daml-finance-interface-instrument-swap-v0-interestrate-instrument-i-87180
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Instrument.html#type-daml-finance-interface-instrument-swap-v0-interestrate-instrument-v-67467
type V = View

-- | View of `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Instrument.html#type-daml-finance-interface-instrument-swap-v0-interestrate-instrument-view-1649
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Instrument.html#constr-daml-finance-interface-instrument-swap-v0-interestrate-instrument-view-56384
View :: InterestRate -> View

-- | Attributes of an interest rate swap.
interestRate :: View -> InterestRate

-- | Instrument interface representing an interest rate swap.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Instrument.html#type-daml-finance-interface-instrument-swap-v0-interestrate-instrument-instrument-35823
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Instrument.html#type-daml-finance-interface-instrument-swap-v0-interestrate-instrument-getview-77596
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Instrument.html#type-daml-finance-interface-instrument-swap-v0-interestrate-instrument-getview-77596
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Types.html#module-daml-finance-interface-instrument-swap-v0-interestrate-types-74433
module Daml.Finance.Interface.Instrument.Swap.V0.InterestRate.Types

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Types.html#type-daml-finance-interface-instrument-swap-v0-interestrate-types-interestrate-17655
data InterestRate

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Swap-V0-InterestRate-Types.html#constr-daml-finance-interface-instrument-swap-v0-interestrate-types-interestrate-50540
InterestRate :: InstrumentKey -> Text -> FloatingRate -> Bool -> Decimal -> PeriodicSchedule -> [Text] -> Party -> DayCountConventionEnum -> InstrumentKey -> Time -> InterestRate

-- | The instrument's key.
instrument :: InterestRate -> InstrumentKey

-- | The description of the swap.
description :: InterestRate -> Text

-- | A description of the floating rate to be used. This supports both Libor and SOFR style
--   reference rates (using a compounded index, e.g. the SOFR Index).
floatingRate :: InterestRate -> FloatingRate

-- | Indicate whether a holding owner of this instrument receives the fix or the floating leg
--   of the swap.
ownerReceivesFix :: InterestRate -> Bool

-- | The interest rate of the fix leg. For example, in case of "3M Euribor vs 2.5% fix" this
--   should be 0.025.
fixRate :: InterestRate -> Decimal

-- | The schedule for the periodic swap payments.
periodicSchedule :: InterestRate -> PeriodicSchedule

-- | The identifiers of the holiday calendars to be used for the swap payment schedule.
holidayCalendarIds :: InterestRate -> [Text]

-- | The reference data provider to use for the holiday calendar.
calendarDataProvider :: InterestRate -> Party

-- | The day count convention used to calculate day count fractions. For example: Act360.
dayCountConvention :: InterestRate -> DayCountConventionEnum

-- | The currency of the swap. For example, if the swap pays in USD this should be a USD cash
--   instrument.
currency :: InterestRate -> InstrumentKey

-- | (Market) time of the last recorded lifecycle event. If no event has occurred yet, the
--   time of creation should be used.
lastEventTimestamp :: InterestRate -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Factory.html#module-daml-finance-interface-instrument-token-v4-factory-1398
module Daml.Finance.Interface.Instrument.Token.V4.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Factory.html#type-daml-finance-interface-instrument-token-v4-factory-i-46898
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Factory.html#type-daml-finance-interface-instrument-token-v4-factory-v-36005
type V = View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Factory.html#type-daml-finance-interface-instrument-token-v4-factory-view-14603
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Factory.html#constr-daml-finance-interface-instrument-token-v4-factory-view-27112
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Factory.html#function-daml-finance-interface-instrument-token-v4-factory-createtick-64546
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate simple tokens.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Factory.html#type-daml-finance-interface-instrument-token-v4-factory-factory-54831
data (HasInterfaceView Factory V) => Factory

-- | Create a new token.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Factory.html#type-daml-finance-interface-instrument-token-v4-factory-create-20178
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new token.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Factory.html#type-daml-finance-interface-instrument-token-v4-factory-create-20178
Create :: Token -> PartiesMap -> Create

-- | Attributes to create a token.
token :: Create -> Token

-- | The instrument's observers.
observers :: Create -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Instrument.html#module-daml-finance-interface-instrument-token-v4-instrument-40238
module Daml.Finance.Interface.Instrument.Token.V4.Instrument

-- | Type synonym for `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Instrument.html#type-daml-finance-interface-instrument-token-v4-instrument-i-45050
type I = Instrument

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Instrument.html#type-daml-finance-interface-instrument-token-v4-instrument-v-42717
type V = View

-- | View of `Instrument`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Instrument.html#type-daml-finance-interface-instrument-token-v4-instrument-view-88163
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Instrument.html#constr-daml-finance-interface-instrument-token-v4-instrument-view-89686
View :: Token -> View

-- | Attributes of a Token Instrument.
token :: View -> Token

-- | Interface for a Token, an instrument whose economic terms on the ledger are represented
--   by an `id` and a textual `description`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Instrument.html#type-daml-finance-interface-instrument-token-v4-instrument-instrument-75613
data (HasInterfaceView Instrument V) => Instrument

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Instrument.html#type-daml-finance-interface-instrument-token-v4-instrument-getview-61626
data (Choice Instrument GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Instrument.html#type-daml-finance-interface-instrument-token-v4-instrument-getview-61626
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Types.html#module-daml-finance-interface-instrument-token-v4-types-62835
module Daml.Finance.Interface.Instrument.Token.V4.Types

-- | Describes the attributes of a Token Instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Types.html#type-daml-finance-interface-instrument-token-v4-types-token-51711
data Token

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Token-V4-Types.html#constr-daml-finance-interface-instrument-token-v4-types-token-60206
Token :: InstrumentKey -> Text -> Time -> Token

-- | The instrument's key.
instrument :: Token -> InstrumentKey

-- | A description of the instrument.
description :: Token -> Text

-- | Timestamp as of which the instrument is valid.
validAsOf :: Token -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Types-V2-FloatingRate.html#module-daml-finance-interface-instrument-types-v2-floatingrate-85519
module Daml.Finance.Interface.Instrument.Types.V2.FloatingRate

-- | The specification of whether payments/resets occur relative to the first or last day of a
--   calculation period.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Types-V2-FloatingRate.html#type-daml-finance-interface-instrument-types-v2-floatingrate-daterelativetoenum-35995
data DateRelativeToEnum

-- | Payments/Resets will occur relative to the first day of each calculation period.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Types-V2-FloatingRate.html#constr-daml-finance-interface-instrument-types-v2-floatingrate-calculationperiodstartdate-2130
CalculationPeriodStartDate :: DateRelativeToEnum

-- | Payments/Resets will occur relative to the last day of each calculation period.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Types-V2-FloatingRate.html#constr-daml-finance-interface-instrument-types-v2-floatingrate-calculationperiodenddate-90327
CalculationPeriodEndDate :: DateRelativeToEnum

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Types-V2-FloatingRate.html#type-daml-finance-interface-instrument-types-v2-floatingrate-fixingdates-58708
type FixingDates = DateOffset

-- | Specifies the data required for a floating rate coupon.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Types-V2-FloatingRate.html#type-daml-finance-interface-instrument-types-v2-floatingrate-floatingrate-56149
data FloatingRate

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Types-V2-FloatingRate.html#constr-daml-finance-interface-instrument-types-v2-floatingrate-floatingrate-99628
FloatingRate :: Text -> ReferenceRateTypeEnum -> FixingDates -> FloatingRate

-- | The identifier of the reference rate to be used for the coupon, e.g. Libor-3M.
referenceRateId :: FloatingRate -> Text

-- | The type of reference rate, which defines how the reference rate is calcuated.
referenceRateType :: FloatingRate -> ReferenceRateTypeEnum

-- | Specifies the fixing dates as an offset of the calculation date, e.g. -2 business days.
fixingDates :: FloatingRate -> FixingDates

-- | The type of reference rate, which defines how the reference rate is calculated.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Types-V2-FloatingRate.html#type-daml-finance-interface-instrument-types-v2-floatingrate-referenceratetypeenum-15522
data ReferenceRateTypeEnum

-- | The reference rate is fixed on one observation date. This is usually the case for Libor
--   and similar reference rates. A DateRelativeToEnum is required to indicate whether the
--   reference rate will reset relative to the first or the last day of the calculation period.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Types-V2-FloatingRate.html#constr-daml-finance-interface-instrument-types-v2-floatingrate-singlefixing-17539
SingleFixing :: DateRelativeToEnum -> ReferenceRateTypeEnum

-- | The reference rate is a regularly (e.g. daily) compounded reference rate, e.g. compounded
--   SOFR, calculated via an index that is continuously compounded since a specified start date.
--   This enables efficient calculation using only the index values at the start and at the end of
--   the calculation period: SOFR_INDEX_END / SOFR_INDEX_START - 1, as described here:
--   https://www.newyorkfed.org/markets/reference-rates/additional-information-about-reference-rates#tgcr_bgcr_sofr_calculation_methodology
--   The day count convention used for the index calculation (by the index provider) is also
--   required. For example, in the case of SOFR this is Act360, which is implied by the 360/dc
--   factor in the formula in the "Calculation Methodology for the SOFR Averages and Index"
--   section in the link above.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Instrument-Types-V2-FloatingRate.html#constr-daml-finance-interface-instrument-types-v2-floatingrate-compoundedindex-69441
CompoundedIndex :: DayCountConventionEnum -> ReferenceRateTypeEnum

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Effect.html#module-daml-finance-interface-lifecycle-v4-effect-48507
module Daml.Finance.Interface.Lifecycle.V4.Effect

-- | Data type encapsulating the effect's calculation result.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Effect.html#type-daml-finance-interface-lifecycle-v4-effect-calculationresult-17392
data CalculationResult

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Effect.html#constr-daml-finance-interface-lifecycle-v4-effect-calculationresult-42457
CalculationResult :: [InstrumentQuantity] -> [InstrumentQuantity] -> CalculationResult

-- | Consumed quantities.
consumed :: CalculationResult -> [InstrumentQuantity]

-- | Produced quantities.
produced :: CalculationResult -> [InstrumentQuantity]

-- | Type synonym for `Effect`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Effect.html#type-daml-finance-interface-lifecycle-v4-effect-i-48349
type I = Effect

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Effect.html#type-daml-finance-interface-lifecycle-v4-effect-v-50682
type V = View

-- | View for `Effect`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Effect.html#type-daml-finance-interface-lifecycle-v4-effect-view-53622
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Effect.html#constr-daml-finance-interface-lifecycle-v4-effect-view-76089
View :: Parties -> InstrumentKey -> Optional InstrumentKey -> Id -> Text -> Optional Time -> [InstrumentQuantity] -> [InstrumentQuantity] -> View

-- | The parties providing the claim processing.
providers :: View -> Parties

-- | The target instrument. A holding on this instrument is required to claim the effect.
--   For example, in the case of a swap instrument, this would be the original instrument
--   version before lifecycling, that contains the current swap payment.
targetInstrument :: View -> InstrumentKey

-- | The produced instrument, if it exists.
--   For example, in the case of a swap instrument, this would be the new instrument
--   version after lifecycling, that does not contain the current swap payment.
--   If there are no more claims remaining after the current lifecycling, this would be None.
producedInstrument :: View -> Optional InstrumentKey

-- | A textual identifier.
id :: View -> Id

-- | A human readable description of the Effect.
description :: View -> Text

-- | The effect's settlement time (if any).
settlementTime :: View -> Optional Time

-- | Consumed quantities (in addition to the target instrument).
--   For example, in the case of a fix vs floating rate swap, this could be a 2.5% fix
--   payment.
otherConsumed :: View -> [InstrumentQuantity]

-- | Produced quantities (in additon to the produced instrument).
--   For example, in the case of a fix vs floating rate swap, this could be a 3M Euribor
--   floating payment.
otherProduced :: View -> [InstrumentQuantity]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Effect.html#function-daml-finance-interface-lifecycle-v4-effect-setproviders-76675
setProviders :: Effect -> SetProviders -> Update (ContractId Effect)

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Effect.html#function-daml-finance-interface-lifecycle-v4-effect-calculate-88708
calculate :: Effect -> Calculate -> ContractId Effect -> Update CalculationResult

-- | Interface for contracts exposing effects of lifecycling processes.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Effect.html#type-daml-finance-interface-lifecycle-v4-effect-effect-33904
data (HasInterfaceView Effect V) => Effect

-- | Given an instrument quantity of the target instrument, it calculates the instrument
--   quantities to settle.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Effect.html#type-daml-finance-interface-lifecycle-v4-effect-calculate-57344
data (Choice Effect Calculate CalculationResult) => Calculate

-- | Given an instrument quantity of the target instrument, it calculates the instrument
--   quantities to settle.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Effect.html#type-daml-finance-interface-lifecycle-v4-effect-calculate-57344
Calculate :: Party -> InstrumentQuantity -> Calculate

-- | The flexible controller of the choice.
actor :: Calculate -> Party

-- | The quantity being targeted.
quantity :: Calculate -> InstrumentQuantity

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Effect.html#type-daml-finance-interface-lifecycle-v4-effect-getview-90853
data (Choice Effect GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Effect.html#type-daml-finance-interface-lifecycle-v4-effect-getview-90853
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

-- | Set the provider of the effect.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Effect.html#type-daml-finance-interface-lifecycle-v4-effect-setproviders-39879
data (Choice Effect SetProviders (ContractId Effect)) => SetProviders

-- | Set the provider of the effect.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Effect.html#type-daml-finance-interface-lifecycle-v4-effect-setproviders-39879
SetProviders :: Parties -> SetProviders

-- | The new provider.
newProviders :: SetProviders -> Parties

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#module-daml-finance-interface-lifecycle-v4-election-15483
module Daml.Finance.Interface.Lifecycle.V4.Election

-- | View for `Exercisable`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#type-daml-finance-interface-lifecycle-v4-election-exercisableview-99924
data ExercisableView

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#constr-daml-finance-interface-lifecycle-v4-election-exercisableview-60985
ExercisableView :: Party -> ExercisableView

-- | Party processing the election.
lifecycler :: ExercisableView -> Party

-- | Type synonym for `Election`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#type-daml-finance-interface-lifecycle-v4-election-i-36777
type I = Election

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#type-daml-finance-interface-lifecycle-v4-election-v-12910
type V = View

-- | View for `Election`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#type-daml-finance-interface-lifecycle-v4-election-view-84858
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#constr-daml-finance-interface-lifecycle-v4-election-view-24289
View :: Id -> Text -> Text -> Party -> Party -> Bool -> PartiesMap -> Decimal -> Party -> InstrumentKey -> View

-- | The identifier for an election.
id :: View -> Id

-- | A description of the instrument.
description :: View -> Text

-- | The tag corresponding to the elected sub-tree.
claim :: View -> Text

-- | Parties on behalf of which the election is made.
elector :: View -> Party

-- | Faces the `elector` in the `Holding`.
counterparty :: View -> Party

-- | `True` if election is on behalf of the owner of the holding, `False` otherwise.
electorIsOwner :: View -> Bool

-- | Observers of the election.
observers :: View -> PartiesMap

-- | Number of instrument units to which the election applies.
amount :: View -> Decimal

-- | Party that is authorized to process the election and generate the new instrument version
--   and effects.
provider :: View -> Party

-- | The instrument to which the election applies.
instrument :: View -> InstrumentKey

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#function-daml-finance-interface-lifecycle-v4-election-apply-60232
apply :: Election -> ContractId Election -> Apply -> Update (Optional InstrumentKey, [ContractId I])

-- | Retrieves the election's time.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#function-daml-finance-interface-lifecycle-v4-election-getelectiontime-70060
getElectionTime :: Election -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#function-daml-finance-interface-lifecycle-v4-election-applyelection-80909
applyElection :: Exercisable -> ApplyElection -> Update (Optional InstrumentKey, [ContractId I])

-- | Interface implemented by templates that represents a claim-based election. This interface
--   requires the `Event` interface implementation.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#type-daml-finance-interface-lifecycle-v4-election-election-99800
data (HasInterfaceView Election V) => Election

-- | Applies the election to the instrument, returning the new instrument as well as the
--   corresponding effects. The election is archived as part of this choice.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#type-daml-finance-interface-lifecycle-v4-election-apply-6828
data (Choice Election Apply (Optional InstrumentKey, [ContractId I])) => Apply

-- | Applies the election to the instrument, returning the new instrument as well as the
--   corresponding effects. The election is archived as part of this choice.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#type-daml-finance-interface-lifecycle-v4-election-apply-6828
Apply :: [ContractId I] -> ContractId Exercisable -> Apply

-- | Set of observables.
observableCids :: Apply -> [ContractId I]

-- | The contract that is used to apply an election to the instrument.
exercisableCid :: Apply -> ContractId Exercisable

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#type-daml-finance-interface-lifecycle-v4-election-getview-69321
data (Choice Election GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#type-daml-finance-interface-lifecycle-v4-election-getview-69321
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

-- | Interface implemented by instruments that admit (claim-based) elections.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#type-daml-finance-interface-lifecycle-v4-election-exercisable-36259
data (HasInterfaceView Exercisable ExercisableView) => Exercisable

-- | Applies an election to the instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#type-daml-finance-interface-lifecycle-v4-election-applyelection-69809
data (Choice Exercisable ApplyElection (Optional InstrumentKey, [ContractId I])) => ApplyElection

-- | Applies an election to the instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#type-daml-finance-interface-lifecycle-v4-election-applyelection-69809
ApplyElection :: ContractId Election -> [ContractId I] -> ApplyElection

-- | The election.
electionCid :: ApplyElection -> ContractId Election

-- | Set of observables.
observableCids :: ApplyElection -> [ContractId I]

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#type-daml-finance-interface-lifecycle-v4-election-exercisablegetview-56501
data (Choice Exercisable Exercisable_GetView ExercisableView) => Exercisable_GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election.html#type-daml-finance-interface-lifecycle-v4-election-exercisablegetview-56501
Exercisable_GetView :: Party -> Exercisable_GetView

-- | The party retrieving the view.
viewer :: Exercisable_GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election-Factory.html#module-daml-finance-interface-lifecycle-v4-election-factory-21763
module Daml.Finance.Interface.Lifecycle.V4.Election.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election-Factory.html#type-daml-finance-interface-lifecycle-v4-election-factory-i-34597
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election-Factory.html#type-daml-finance-interface-lifecycle-v4-election-factory-v-45490
type V = View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election-Factory.html#type-daml-finance-interface-lifecycle-v4-election-factory-view-55502
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election-Factory.html#constr-daml-finance-interface-lifecycle-v4-election-factory-view-88681
View :: Party -> View

-- | The provider of the `Factory`.
provider :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election-Factory.html#function-daml-finance-interface-lifecycle-v4-election-factory-createtick-34237
create' :: Factory -> Create -> Update (ContractId I)

-- | Factory interface to instantiate elections on generic instruments.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election-Factory.html#type-daml-finance-interface-lifecycle-v4-election-factory-factory-95552
data (HasInterfaceView Factory V) => Factory

-- | Create a new Election.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election-Factory.html#type-daml-finance-interface-lifecycle-v4-election-factory-create-20391
data (Choice Factory Create (ContractId I)) => Create

-- | Create a new Election.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Election-Factory.html#type-daml-finance-interface-lifecycle-v4-election-factory-create-20391
Create :: Parties -> Party -> Party -> Party -> Id -> Text -> Text -> Bool -> Time -> PartiesMap -> Decimal -> InstrumentKey -> Create

-- | Parties calling the `Create` choice.
actors :: Create -> Parties

-- | Parties on behalf of which the election is made.
elector :: Create -> Party

-- | Faces the `elector` in the `Holding`.
counterparty :: Create -> Party

-- | Party that signs the election (together with the elector).
provider :: Create -> Party

-- | The identifier for an election.
id :: Create -> Id

-- | A description of the instrument.
description :: Create -> Text

-- | The tag corresponding to the elected sub-tree.
claim :: Create -> Text

-- | `True` if election is on behalf of the owner of the holding, `False` otherwise.
electorIsOwner :: Create -> Bool

-- | Time at which the election is put forward.
electionTime :: Create -> Time

-- | Observers of the election.
observers :: Create -> PartiesMap

-- | Number of instrument units to which the election applies.
amount :: Create -> Decimal

-- | The instrument to which the election applies.
instrument :: Create -> InstrumentKey

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event.html#module-daml-finance-interface-lifecycle-v4-event-91777
module Daml.Finance.Interface.Lifecycle.V4.Event

-- | Type synonym for `Event`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event.html#type-daml-finance-interface-lifecycle-v4-event-i-36171
type I = Event

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event.html#type-daml-finance-interface-lifecycle-v4-event-v-55884
type V = View

-- | View for `Event`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event.html#type-daml-finance-interface-lifecycle-v4-event-view-53912
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event.html#constr-daml-finance-interface-lifecycle-v4-event-view-99385
View :: Parties -> Id -> Text -> Time -> View

-- | Providers of the event.
providers :: View -> Parties

-- | Identifier for the event.
id :: View -> Id

-- | A human readable description of the event.
description :: View -> Text

-- | The time of the event. This allows ordering of events.
eventTime :: View -> Time

-- | Given an event, retrieves the event time.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event.html#function-daml-finance-interface-lifecycle-v4-event-geteventtime-31000
getEventTime :: Event -> Time

-- | A lifecycle event. These events are ordered based on the corresponding event time.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event.html#type-daml-finance-interface-lifecycle-v4-event-event-37738
data (HasInterfaceView Event V) => Event

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event.html#type-daml-finance-interface-lifecycle-v4-event-getview-88787
data (Choice Event GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event.html#type-daml-finance-interface-lifecycle-v4-event-getview-88787
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Distribution.html#module-daml-finance-interface-lifecycle-v4-event-distribution-56030
module Daml.Finance.Interface.Lifecycle.V4.Event.Distribution

-- | Type synonym for `Event`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Distribution.html#type-daml-finance-interface-lifecycle-v4-event-distribution-i-24126
type I = Event

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Distribution.html#type-daml-finance-interface-lifecycle-v4-event-distribution-v-87033
type V = View

-- | View for `Event`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Distribution.html#type-daml-finance-interface-lifecycle-v4-event-distribution-view-42671
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Distribution.html#constr-daml-finance-interface-lifecycle-v4-event-distribution-view-5964
View :: Time -> InstrumentKey -> InstrumentKey -> [InstrumentQuantity] -> View

-- | Time on which the distribution is effectuated.
effectiveTime :: View -> Time

-- | Instrument the distribution event applies to.
targetInstrument :: View -> InstrumentKey

-- | Instrument after the distribution has been claimed.
newInstrument :: View -> InstrumentKey

-- | Distributed quantities per unit held.
perUnitDistribution :: View -> [InstrumentQuantity]

-- | Event interface for the distribution of units of an instrument for each unit of a target
--   instrument (e.g. share or cash dividends).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Distribution.html#type-daml-finance-interface-lifecycle-v4-event-distribution-event-40183
data (HasInterfaceView Event V) => Event

-- | Retrieves the event view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Distribution.html#type-daml-finance-interface-lifecycle-v4-event-distribution-getview-4518
data (Choice Event GetView View) => GetView

-- | Retrieves the event view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Distribution.html#type-daml-finance-interface-lifecycle-v4-event-distribution-getview-4518
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Replacement.html#module-daml-finance-interface-lifecycle-v4-event-replacement-41051
module Daml.Finance.Interface.Lifecycle.V4.Event.Replacement

-- | Type synonym for `Event`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Replacement.html#type-daml-finance-interface-lifecycle-v4-event-replacement-i-69673
type I = Event

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Replacement.html#type-daml-finance-interface-lifecycle-v4-event-replacement-v-45806
type V = View

-- | View for `Event`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Replacement.html#type-daml-finance-interface-lifecycle-v4-event-replacement-view-74170
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Replacement.html#constr-daml-finance-interface-lifecycle-v4-event-replacement-view-35587
View :: Time -> InstrumentKey -> [InstrumentQuantity] -> View

-- | Time on which the replacement is effectuated.
effectiveTime :: View -> Time

-- | Instrument the replacement event applies to.
targetInstrument :: View -> InstrumentKey

-- | Instrument quantities the target instrument is replaced with.
perUnitReplacement :: View -> [InstrumentQuantity]

-- | Event interface for the replacement of units of an instrument with a basket of other
--   instruments (e.g. stock merger).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Replacement.html#type-daml-finance-interface-lifecycle-v4-event-replacement-event-68664
data (HasInterfaceView Event V) => Event

-- | Retrieves the event view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Replacement.html#type-daml-finance-interface-lifecycle-v4-event-replacement-getview-52585
data (Choice Event GetView View) => GetView

-- | Retrieves the event view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Replacement.html#type-daml-finance-interface-lifecycle-v4-event-replacement-getview-52585
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Time.html#module-daml-finance-interface-lifecycle-v4-event-time-69757
module Daml.Finance.Interface.Lifecycle.V4.Event.Time

-- | Type synonym for `Event`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Time.html#type-daml-finance-interface-lifecycle-v4-event-time-i-76491
type I = Event

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Time.html#type-daml-finance-interface-lifecycle-v4-event-time-v-96204
type V = View

-- | View for `Event`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Time.html#type-daml-finance-interface-lifecycle-v4-event-time-view-67384
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Time.html#constr-daml-finance-interface-lifecycle-v4-event-time-view-61151
View :: View

-- | Event interface for events that signal the passing of (business) time.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Time.html#type-daml-finance-interface-lifecycle-v4-event-time-event-26986
data (HasInterfaceView Event V) => Event

-- | Retrieves the event view. The event's time can be retrieved from the generic `Event`
--   interface.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Time.html#type-daml-finance-interface-lifecycle-v4-event-time-getview-89523
data (Choice Event GetView View) => GetView

-- | Retrieves the event view. The event's time can be retrieved from the generic `Event`
--   interface.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Event-Time.html#type-daml-finance-interface-lifecycle-v4-event-time-getview-89523
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

-- | This module defines an interface for a `NumericObservable`, which is used to inspect
--   time-dependent numerical values.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-NumericObservable.html#module-daml-finance-interface-lifecycle-v4-observable-numericobservable-50817
module Daml.Finance.Interface.Lifecycle.V4.Observable.NumericObservable

-- | Type synonym for `Observable`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-NumericObservable.html#type-daml-finance-interface-lifecycle-v4-observable-numericobservable-i-61855
type I = NumericObservable

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-NumericObservable.html#type-daml-finance-interface-lifecycle-v4-observable-numericobservable-v-85848
type V = View

-- | View for `Observable`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-NumericObservable.html#type-daml-finance-interface-lifecycle-v4-observable-numericobservable-view-29492
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-NumericObservable.html#constr-daml-finance-interface-lifecycle-v4-observable-numericobservable-view-33363
View :: Party -> Id -> View

-- | Party providing the observations.
provider :: View -> Party

-- | Textual reference to the observable.
id :: View -> Id

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-NumericObservable.html#function-daml-finance-interface-lifecycle-v4-observable-numericobservable-observe-58380
observe :: NumericObservable -> Time -> Update Decimal

-- | An interface to inspect some (time-dependent) numerical values (e.g. a stock price or an
--   interest rate fixing) required when processing a lifecycle rule.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-NumericObservable.html#type-daml-finance-interface-lifecycle-v4-observable-numericobservable-numericobservable-46728
data (HasInterfaceView NumericObservable V) => NumericObservable

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-NumericObservable.html#type-daml-finance-interface-lifecycle-v4-observable-numericobservable-getview-36559
data (Choice NumericObservable GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-NumericObservable.html#type-daml-finance-interface-lifecycle-v4-observable-numericobservable-getview-36559
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

-- | Observe the `Observable`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-NumericObservable.html#type-daml-finance-interface-lifecycle-v4-observable-numericobservable-observe-90440
data (Choice NumericObservable Observe Decimal) => Observe

-- | Observe the `Observable`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-NumericObservable.html#type-daml-finance-interface-lifecycle-v4-observable-numericobservable-observe-90440
Observe :: Parties -> Time -> Observe

-- | Parties calling this 'Observe' choice.
actors :: Observe -> Parties

-- | Time at which the value is observed.
t :: Observe -> Time

-- | This module defines an interface for a `TimeObservable`, which is implemented by templates
--   exposing time information.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-TimeObservable.html#module-daml-finance-interface-lifecycle-v4-observable-timeobservable-64296
module Daml.Finance.Interface.Lifecycle.V4.Observable.TimeObservable

-- | Type synonym for `TimeObservable`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-TimeObservable.html#type-daml-finance-interface-lifecycle-v4-observable-timeobservable-i-1376
type I = TimeObservable

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-TimeObservable.html#type-daml-finance-interface-lifecycle-v4-observable-timeobservable-v-7863
type V = View

-- | View for `TimeObservable`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-TimeObservable.html#type-daml-finance-interface-lifecycle-v4-observable-timeobservable-view-74477
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-TimeObservable.html#constr-daml-finance-interface-lifecycle-v4-observable-timeobservable-view-24772
View :: Parties -> Id -> View

-- | Parties providing the observation.
providers :: View -> Parties

-- | Textual reference to the observable.
id :: View -> Id

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-TimeObservable.html#function-daml-finance-interface-lifecycle-v4-observable-timeobservable-gettime-11676
getTime :: TimeObservable -> Update Time

-- | An interface to inspect a time value.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-TimeObservable.html#type-daml-finance-interface-lifecycle-v4-observable-timeobservable-timeobservable-60264
data (HasInterfaceView TimeObservable V) => TimeObservable

-- | Retrieves the current time.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-TimeObservable.html#type-daml-finance-interface-lifecycle-v4-observable-timeobservable-gettime-64432
data (Choice TimeObservable GetTime Time) => GetTime

-- | Retrieves the current time.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-TimeObservable.html#type-daml-finance-interface-lifecycle-v4-observable-timeobservable-gettime-64432
GetTime :: Parties -> GetTime

-- | The party retrieving the current time.
actors :: GetTime -> Parties

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-TimeObservable.html#type-daml-finance-interface-lifecycle-v4-observable-timeobservable-getview-28136
data (Choice TimeObservable GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Observable-TimeObservable.html#type-daml-finance-interface-lifecycle-v4-observable-timeobservable-getview-28136
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Claim.html#module-daml-finance-interface-lifecycle-v4-rule-claim-89954
module Daml.Finance.Interface.Lifecycle.V4.Rule.Claim

-- | Data type wrapping the results of `Claim`ing an `Effect`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Claim.html#type-daml-finance-interface-lifecycle-v4-rule-claim-claimresult-10226
data ClaimResult

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Claim.html#constr-daml-finance-interface-lifecycle-v4-rule-claim-claimresult-83491
ClaimResult :: ContractId I -> [ContractId I] -> ClaimResult

-- | Batch used to batch-settle settlement instructions.
batchCid :: ClaimResult -> ContractId I

-- | Settlement instructions to settle all effect consequences.
instructionCids :: ClaimResult -> [ContractId I]

-- | Type synonym for `Claim`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Claim.html#type-daml-finance-interface-lifecycle-v4-rule-claim-i-38438
type I = Claim

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Claim.html#type-daml-finance-interface-lifecycle-v4-rule-claim-v-31825
type V = View

-- | View for `Settlement`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Claim.html#type-daml-finance-interface-lifecycle-v4-rule-claim-view-14471
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Claim.html#constr-daml-finance-interface-lifecycle-v4-rule-claim-view-60072
View :: Parties -> Parties -> Parties -> ContractId I -> ContractId I -> View

-- | Providers of the claim rule. Together with the actors of the `ClaimEffect` choice the
--   authorization requirements to upgrade the holdings being claimed have to be met.
providers :: View -> Parties

-- | Any of the parties can claim an effect.
claimers :: View -> Parties

-- | Any of the parties can trigger settlement of the resulting batch.
settlers :: View -> Parties

-- | RouteProvider contract used to discover settlement routes.
routeProviderCid :: View -> ContractId I

-- | Settlement factory contract used to create a `Batch` of `Instruction`\s.
settlementFactoryCid :: View -> ContractId I

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Claim.html#function-daml-finance-interface-lifecycle-v4-rule-claim-claimeffect-64470
claimEffect :: Claim -> ClaimEffect -> Update ClaimResult

-- | Interface for contracts that allow holders to claim an `Effect` and generate
--   `SettlementInstruction`\s.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Claim.html#type-daml-finance-interface-lifecycle-v4-rule-claim-claim-387
data (HasInterfaceView Claim V) => Claim

-- | Claim an effect and generate corresponding settlement instructions.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Claim.html#type-daml-finance-interface-lifecycle-v4-rule-claim-claimeffect-78754
data (Choice Claim ClaimEffect ClaimResult) => ClaimEffect

-- | Claim an effect and generate corresponding settlement instructions.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Claim.html#type-daml-finance-interface-lifecycle-v4-rule-claim-claimeffect-78754
ClaimEffect :: Party -> [ContractId I] -> ContractId I -> Id -> ClaimEffect

-- | The party claiming the effect.
claimer :: ClaimEffect -> Party

-- | The holdings to process.
holdingCids :: ClaimEffect -> [ContractId I]

-- | The effect to process.
effectCid :: ClaimEffect -> ContractId I

-- | Identifier used for the generated settlement batch.
batchId :: ClaimEffect -> Id

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Claim.html#type-daml-finance-interface-lifecycle-v4-rule-claim-getview-7150
data (Choice Claim GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Claim.html#type-daml-finance-interface-lifecycle-v4-rule-claim-getview-7150
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Lifecycle.html#module-daml-finance-interface-lifecycle-v4-rule-lifecycle-8270
module Daml.Finance.Interface.Lifecycle.V4.Rule.Lifecycle

-- | Type synonym for `Lifecycle`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Lifecycle.html#type-daml-finance-interface-lifecycle-v4-rule-lifecycle-i-54386
type I = Lifecycle

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Lifecycle.html#type-daml-finance-interface-lifecycle-v4-rule-lifecycle-v-43493
type V = View

-- | View for `Lifecycle`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Lifecycle.html#type-daml-finance-interface-lifecycle-v4-rule-lifecycle-view-1867
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Lifecycle.html#constr-daml-finance-interface-lifecycle-v4-rule-lifecycle-view-51740
View :: Id -> Text -> Party -> View

-- | Identifier for the rule contract.
id :: View -> Id

-- | Textual description.
description :: View -> Text

-- | Party performing the lifecycling.
lifecycler :: View -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Lifecycle.html#function-daml-finance-interface-lifecycle-v4-rule-lifecycle-evolve-27465
evolve :: Lifecycle -> Evolve -> Update (Optional InstrumentKey, [ContractId I])

-- | Interface implemented by instruments that can be lifecycled (either by the instrument itself
--   or by a separate rule contract).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Lifecycle.html#type-daml-finance-interface-lifecycle-v4-rule-lifecycle-lifecycle-50587
data (HasInterfaceView Lifecycle V) => Lifecycle

-- | Process an event. It returns a tuple of the lifecycled instrument (or the original
--   instrument when the former does not exist) and the effects.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Lifecycle.html#type-daml-finance-interface-lifecycle-v4-rule-lifecycle-evolve-32221
data (Choice Lifecycle Evolve (Optional InstrumentKey, [ContractId I])) => Evolve

-- | Process an event. It returns a tuple of the lifecycled instrument (or the original
--   instrument when the former does not exist) and the effects.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Lifecycle.html#type-daml-finance-interface-lifecycle-v4-rule-lifecycle-evolve-32221
Evolve :: ContractId I -> InstrumentKey -> [ContractId I] -> Evolve

-- | The event.
eventCid :: Evolve -> ContractId I

-- | The target instrument.
instrument :: Evolve -> InstrumentKey

-- | Set of numerical time-dependent observables.
observableCids :: Evolve -> [ContractId I]

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Lifecycle.html#type-daml-finance-interface-lifecycle-v4-rule-lifecycle-getview-32882
data (Choice Lifecycle GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Lifecycle-V4-Rule-Lifecycle.html#type-daml-finance-interface-lifecycle-v4-rule-lifecycle-getview-32882
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Batch.html#module-daml-finance-interface-settlement-v4-batch-88127
module Daml.Finance.Interface.Settlement.V4.Batch

-- | Type synonym for `Batch`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Batch.html#type-daml-finance-interface-settlement-v4-batch-i-86753
type I = Batch

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Batch.html#type-daml-finance-interface-settlement-v4-batch-v-54326
type V = View

-- | View for `Batch`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Batch.html#type-daml-finance-interface-settlement-v4-batch-view-11618
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Batch.html#constr-daml-finance-interface-settlement-v4-batch-view-60917
View :: Party -> Parties -> Parties -> Id -> Text -> Optional Id -> [RoutedStep] -> Optional Time -> View

-- | Party instructing settlement (and the creation of the `Batch`).
instructor :: View -> Party

-- | Parties consenting with the creation of the `Batch`.
consenters :: View -> Parties

-- | Parties that can trigger the final settlement.
settlers :: View -> Parties

-- | Batch identifier.
id :: View -> Id

-- | Batch description.
description :: View -> Text

-- | Identifier to link a batch to a context (e.g. the `Effect` it originated from).
contextId :: View -> Optional Id

-- | Routed settlement steps.
routedSteps :: View -> [RoutedStep]

-- | Settlement time (if any).
settlementTime :: View -> Optional Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Batch.html#function-daml-finance-interface-settlement-v4-batch-settle-38134
settle :: Batch -> Settle -> Update [ContractId I]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Batch.html#function-daml-finance-interface-settlement-v4-batch-cancel-24825
cancel :: Batch -> Cancel -> Update [ContractId I]

-- | An interface for atomically settling a batch of `Instruction`\s.
--   The corresponding Instructions are referenced by key.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Batch.html#type-daml-finance-interface-settlement-v4-batch-batch-20548
data (HasInterfaceView Batch V) => Batch

-- | Cancels the batch.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Batch.html#type-daml-finance-interface-settlement-v4-batch-cancel-13653
data (Choice Batch Cancel [ContractId I]) => Cancel

-- | Cancels the batch.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Batch.html#type-daml-finance-interface-settlement-v4-batch-cancel-13653
Cancel :: Parties -> Cancel

-- | The parties canceling the batch.
actors :: Cancel -> Parties

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Batch.html#type-daml-finance-interface-settlement-v4-batch-getview-66369
data (Choice Batch GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Batch.html#type-daml-finance-interface-settlement-v4-batch-getview-66369
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

-- | Settles the batch.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Batch.html#type-daml-finance-interface-settlement-v4-batch-settle-93506
data (Choice Batch Settle [ContractId I]) => Settle

-- | Settles the batch.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Batch.html#type-daml-finance-interface-settlement-v4-batch-settle-93506
Settle :: Parties -> Settle

-- | The parties settling the batch.
actors :: Settle -> Parties

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Factory.html#module-daml-finance-interface-settlement-v4-factory-85379
module Daml.Finance.Interface.Settlement.V4.Factory

-- | Type synonym for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Factory.html#type-daml-finance-interface-settlement-v4-factory-i-2953
type I = Factory

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Factory.html#type-daml-finance-interface-settlement-v4-factory-v-79086
type V = View

-- | View for `Factory`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Factory.html#type-daml-finance-interface-settlement-v4-factory-view-31386
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Factory.html#constr-daml-finance-interface-settlement-v4-factory-view-90909
View :: Party -> Parties -> View

-- | Party providing the facility.
provider :: View -> Party

-- | Observers.
observers :: View -> Parties

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Factory.html#function-daml-finance-interface-settlement-v4-factory-instruct-96835
instruct :: Factory -> Instruct -> Update (ContractId I, [ContractId I])

-- | An interface used to generate settlement instructions.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Factory.html#type-daml-finance-interface-settlement-v4-factory-factory-87188
data (HasInterfaceView Factory V) => Factory

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Factory.html#type-daml-finance-interface-settlement-v4-factory-getview-80809
data (Choice Factory GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Factory.html#type-daml-finance-interface-settlement-v4-factory-getview-80809
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

-- | Generate settlement instructions, and a batch for settling them.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Factory.html#type-daml-finance-interface-settlement-v4-factory-instruct-82391
data (Choice Factory Instruct (ContractId I, [ContractId I])) => Instruct

-- | Generate settlement instructions, and a batch for settling them.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Factory.html#type-daml-finance-interface-settlement-v4-factory-instruct-82391
Instruct :: Party -> Parties -> Parties -> Id -> Text -> Optional Id -> [RoutedStep] -> Optional Time -> Instruct

-- | Party instructing settlement (and the creation of the `Batch` and `Instruction`\s).
instructor :: Instruct -> Party

-- | Parties consenting with the `Batch` and `Instruction`\s being created.
consenters :: Instruct -> Parties

-- | Any of the parties can trigger the final settlement.
settlers :: Instruct -> Parties

-- | Batch identifier.
id :: Instruct -> Id

-- | Batch description.
description :: Instruct -> Text

-- | Identifier to link a batch to a context (e.g. the `Effect` it originated from).
contextId :: Instruct -> Optional Id

-- | Routed settlement steps to instruct.
routedSteps :: Instruct -> [RoutedStep]

-- | Settlement time (if any).
settlementTime :: Instruct -> Optional Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#module-daml-finance-interface-settlement-v4-instruction-71097
module Daml.Finance.Interface.Settlement.V4.Instruction

-- | Type synonym for `Instruction`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#type-daml-finance-interface-settlement-v4-instruction-i-65587
type I = Instruction

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#type-daml-finance-interface-settlement-v4-instruction-v-93860
type V = View

-- | View for `Instruction`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#type-daml-finance-interface-settlement-v4-instruction-view-97904
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#constr-daml-finance-interface-settlement-v4-instruction-view-99059
View :: Party -> Parties -> Parties -> Id -> Id -> RoutedStep -> Optional Time -> Allocation -> Approval -> Parties -> Parties -> View

-- | Party that instructs settlement (and the creation of the `Instruction`).
instructor :: View -> Party

-- | Parties consenting with the creation of the `Instruction`.
consenters :: View -> Parties

-- | Parties that can execute the Instruction.
settlers :: View -> Parties

-- | Batch identifier.
batchId :: View -> Id

-- | Instruction identifier.
id :: View -> Id

-- | Instruction details to execute.
routedStep :: View -> RoutedStep

-- | Settlement time (if any).
settlementTime :: View -> Optional Time

-- | Allocation from the sender.
allocation :: View -> Allocation

-- | Approval from the receiver.
approval :: View -> Approval

-- | Additional signatories, used to collect authorization (on sending side).
signedSenders :: View -> Parties

-- | Additional signatories, used to collect authorization (on receiving side).
signedReceivers :: View -> Parties

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#function-daml-finance-interface-settlement-v4-instruction-allocate-68742
allocate :: Instruction -> Allocate -> Update (ContractId Instruction, Optional (ContractId I))

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#function-daml-finance-interface-settlement-v4-instruction-approve-7151
approve :: Instruction -> Approve -> Update (ContractId Instruction)

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#function-daml-finance-interface-settlement-v4-instruction-execute-65941
execute :: Instruction -> Execute -> Update (Optional (ContractId I))

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#function-daml-finance-interface-settlement-v4-instruction-cancel-72271
cancel :: Instruction -> Cancel -> Update (Optional (ContractId I))

-- | An interface for providing a single instruction to transfer an asset.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#type-daml-finance-interface-settlement-v4-instruction-instruction-59168
data (HasInterfaceView Instruction V) => Instruction

-- | Allocates this instruction and optionally returns a previously allocated (mutated) asset.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#type-daml-finance-interface-settlement-v4-instruction-allocate-48530
data (Choice Instruction Allocate (ContractId Instruction, Optional (ContractId I))) => Allocate

-- | Allocates this instruction and optionally returns a previously allocated (mutated) asset.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#type-daml-finance-interface-settlement-v4-instruction-allocate-48530
Allocate :: Parties -> Allocation -> Allocate

-- | The parties allocating the instruction.
actors :: Allocate -> Parties

-- | Allocation of an instruction.
allocation :: Allocate -> Allocation

-- | Approves this instruction.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#type-daml-finance-interface-settlement-v4-instruction-approve-69723
data (Choice Instruction Approve (ContractId Instruction)) => Approve

-- | Approves this instruction.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#type-daml-finance-interface-settlement-v4-instruction-approve-69723
Approve :: Parties -> Approval -> Approve

-- | The parties approving the instruction.
actors :: Approve -> Parties

-- | Approval of an instruction.
approval :: Approve -> Approval

-- | Cancels this instruction.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#type-daml-finance-interface-settlement-v4-instruction-cancel-2291
data (Choice Instruction Cancel (Optional (ContractId I))) => Cancel

-- | Cancels this instruction.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#type-daml-finance-interface-settlement-v4-instruction-cancel-2291
Cancel :: Parties -> Cancel

-- | The parties canceling the instruction.
actors :: Cancel -> Parties

-- | Executes this instruction.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#type-daml-finance-interface-settlement-v4-instruction-execute-24017
data (Choice Instruction Execute (Optional (ContractId I))) => Execute

-- | Executes this instruction.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#type-daml-finance-interface-settlement-v4-instruction-execute-24017
Execute :: Parties -> Execute

-- | The parties executing the instruction.
actors :: Execute -> Parties

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#type-daml-finance-interface-settlement-v4-instruction-getview-68731
data (Choice Instruction GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Instruction.html#type-daml-finance-interface-settlement-v4-instruction-getview-68731
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-RouteProvider.html#module-daml-finance-interface-settlement-v4-routeprovider-63
module Daml.Finance.Interface.Settlement.V4.RouteProvider

-- | Type synonym for `RouteProvider`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-RouteProvider.html#type-daml-finance-interface-settlement-v4-routeprovider-i-81585
type I = RouteProvider

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-RouteProvider.html#type-daml-finance-interface-settlement-v4-routeprovider-v-88198
type V = View

-- | View for `RouteProvider`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-RouteProvider.html#type-daml-finance-interface-settlement-v4-routeprovider-view-58066
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-RouteProvider.html#constr-daml-finance-interface-settlement-v4-routeprovider-view-84673
View :: Party -> Parties -> View

-- | Party providing the `RouteProvider` facility.
provider :: View -> Party

-- | Observers.
observers :: View -> Parties

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-RouteProvider.html#function-daml-finance-interface-settlement-v4-routeprovider-discover-78064
discover :: RouteProvider -> Discover -> Update [RoutedStep]

-- | An interface used to discover the settlement route for each `Step`, i.e., `[RoutedStep]`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-RouteProvider.html#type-daml-finance-interface-settlement-v4-routeprovider-routeprovider-29628
data (HasInterfaceView RouteProvider V) => RouteProvider

-- | Discover the settlement route for each `Step`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-RouteProvider.html#type-daml-finance-interface-settlement-v4-routeprovider-discover-692
data (Choice RouteProvider Discover [RoutedStep]) => Discover

-- | Discover the settlement route for each `Step`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-RouteProvider.html#type-daml-finance-interface-settlement-v4-routeprovider-discover-692
Discover :: Parties -> Optional Id -> [Step] -> Discover

-- | Parties requesting to discover.
discoverors :: Discover -> Parties

-- | Context for the discovery.
contextId :: Discover -> Optional Id

-- | Settlement steps to route.
steps :: Discover -> [Step]

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-RouteProvider.html#type-daml-finance-interface-settlement-v4-routeprovider-getview-24625
data (Choice RouteProvider GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-RouteProvider.html#type-daml-finance-interface-settlement-v4-routeprovider-getview-24625
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#module-daml-finance-interface-settlement-v4-types-65938
module Daml.Finance.Interface.Settlement.V4.Types

-- | Describes an allocation of an `Instruction`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#type-daml-finance-interface-settlement-v4-types-allocation-41200
data Allocation

-- | An unallocated instruction.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#constr-daml-finance-interface-settlement-v4-types-unallocated-28244
Unallocated :: Allocation

-- | Settle the instruction with the pledged asset.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#constr-daml-finance-interface-settlement-v4-types-pledge-57866
Pledge :: ContractId I -> Allocation

-- | Settle the instruction by crediting the receiver account (where the sender is custodian).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#constr-daml-finance-interface-settlement-v4-types-creditreceiver-33781
CreditReceiver :: Allocation

-- | Settle the instruction off-ledger.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#constr-daml-finance-interface-settlement-v4-types-settleoffledger-82795
SettleOffledger :: Allocation

-- | Settle the instruction with the holding coming from the specified instruction and account.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#constr-daml-finance-interface-settlement-v4-types-passthroughfrom-2474
PassThroughFrom :: (AccountKey, InstructionKey) -> Allocation

-- | Describes an approval of an `Instruction`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#type-daml-finance-interface-settlement-v4-types-approval-77821
data Approval

-- | An unapproved instruction.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#constr-daml-finance-interface-settlement-v4-types-unapproved-58597
Unapproved :: Approval

-- | Take delivery to the specified account.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#constr-daml-finance-interface-settlement-v4-types-takedelivery-31030
TakeDelivery :: AccountKey -> Approval

-- | Debit the sender account with the provided asset (where the receiver is custodian).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#constr-daml-finance-interface-settlement-v4-types-debitsender-18125
DebitSender :: Approval

-- | Acknowledge settlement of the instruction off-ledger.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#constr-daml-finance-interface-settlement-v4-types-settleoffledgeracknowledge-65556
SettleOffledgerAcknowledge :: Approval

-- | Take delivery to the specified account. The holding is then immediately allocated to the
--   specified instruction.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#constr-daml-finance-interface-settlement-v4-types-passthroughto-8399
PassThroughTo :: (AccountKey, InstructionKey) -> Approval

-- | A unique key for Instructions.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#type-daml-finance-interface-settlement-v4-types-instructionkey-88375
data InstructionKey

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#constr-daml-finance-interface-settlement-v4-types-instructionkey-89360
InstructionKey :: Party -> Id -> Id -> InstructionKey

-- | Party instructing settlement (and the creation of the `Instruction`).
instructor :: InstructionKey -> Party

-- | Id of the batch the instruction belongs to.
batchId :: InstructionKey -> Id

-- | A unique identifier for an instruction.
id :: InstructionKey -> Id

-- | Describes a transfer of a position between two parties.
--   The custodian at which the position is held is also specified.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#type-daml-finance-interface-settlement-v4-types-routedstep-26293
data RoutedStep

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#constr-daml-finance-interface-settlement-v4-types-routedstep-5658
RoutedStep :: Party -> Party -> Party -> InstrumentQuantity -> RoutedStep

-- | Party transferring the asset.
sender :: RoutedStep -> Party

-- | Party receiving the asset.
receiver :: RoutedStep -> Party

-- | The custodian at which the asset is held.
custodian :: RoutedStep -> Party

-- | The instrument and amount to be transferred.
quantity :: RoutedStep -> InstrumentQuantity

-- | Describes a transfer of a position between two parties.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#type-daml-finance-interface-settlement-v4-types-step-16302
data Step

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Settlement-V4-Types.html#constr-daml-finance-interface-settlement-v4-types-step-28201
Step :: Party -> Party -> InstrumentQuantity -> Step

-- | Party transferring the asset.
sender :: Step -> Party

-- | Party receiving the asset.
receiver :: Step -> Party

-- | The instrument and amount to be transferred.
quantity :: Step -> InstrumentQuantity

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#module-daml-finance-interface-types-common-v3-types-97540
module Daml.Finance.Interface.Types.Common.V3.Types

-- | A unique key for Accounts.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#type-daml-finance-interface-types-common-v3-types-accountkey-55962
data AccountKey

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#constr-daml-finance-interface-types-common-v3-types-accountkey-81729
AccountKey :: Party -> Party -> Id -> AccountKey

-- | Account provider.
custodian :: AccountKey -> Party

-- | Account owner.
owner :: AccountKey -> Party

-- | Unique identifier for an account.
id :: AccountKey -> Id

-- | A unique key for a holding factory.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#type-daml-finance-interface-types-common-v3-types-holdingfactorykey-40007
data HoldingFactoryKey

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#constr-daml-finance-interface-types-common-v3-types-holdingfactorykey-57870
HoldingFactoryKey :: Party -> Id -> HoldingFactoryKey

-- | Holding factory provider.
provider :: HoldingFactoryKey -> Party

-- | Unique identifier for a holding factory.
id :: HoldingFactoryKey -> Id

-- | The `HoldingStandard` data type categorizes holdings into four distinct classes, each defined
--   by the combination of holding interfaces they implement: `Transferable.I`, `Fungible.I`, and
--   `Holding.I`. Notably, `Transferable.I` and `Fungible.I` both require the implementation of the
--   `Holding.I` interface. Please also note that, in this context, "Transferable.I" refers to the
--   capability of a holding to be transferred between parties (e.g., from Alice to Bob) through a
--   single custodian. Additionally, it is important to highlight that all classes of holdings can be
--   credited and debited, and thereby effectively settled.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#type-daml-finance-interface-types-common-v3-types-holdingstandard-63293
data HoldingStandard

-- | Represents the class of holdings which implement `Fungible.I` and `Transferable.I`, and by
--   extension `Holding.I`. Holdings in this class are both interchangeable (fungible) and
--   can be transferred between parties (such as Alice to Bob) via a custodian.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#constr-daml-finance-interface-types-common-v3-types-transferablefungible-71114
TransferableFungible :: HoldingStandard

-- | Represents the class of holdings which implement `Transferable.I` and, by extension,
--   `Holding.I`, but not `Fungible.I`. This class pertains to assets that can be transferred
--   between parties through a custodian, but are not interchangeable.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#constr-daml-finance-interface-types-common-v3-types-transferable-76192
Transferable :: HoldingStandard

-- | Represents the class of holdings which implement `Fungible.I` and, by extension,
--   `Holding.I`, but not `Transferable.I`. These holdings are interchangeable, suitable for
--   scenarios where asset fungibility is crucial, but do not have the transfer capability
--   between parties via a custodian.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#constr-daml-finance-interface-types-common-v3-types-fungible-50755
Fungible :: HoldingStandard

-- | Represents the class of holdings which implement only `Holding.I` and neither
--   `Transferable.I` nor `Fungible.I`. This class encompasses basic holdings without the
--   functionalities of custodian-based transferability or fungibility.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#constr-daml-finance-interface-types-common-v3-types-baseholding-71474
BaseHolding :: HoldingStandard

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#type-daml-finance-interface-types-common-v3-types-id-28519
data Id

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#constr-daml-finance-interface-types-common-v3-types-id-84864
Id :: Text -> Id

-- | A unique key for Instruments.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#type-daml-finance-interface-types-common-v3-types-instrumentkey-82717
data InstrumentKey

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#constr-daml-finance-interface-types-common-v3-types-instrumentkey-49116
InstrumentKey :: Party -> Party -> Id -> Text -> HoldingStandard -> InstrumentKey

-- | Party providing depository services.
depository :: InstrumentKey -> Party

-- | Issuer of instrument.
issuer :: InstrumentKey -> Party

-- | A unique identifier for an instrument.
id :: InstrumentKey -> Id

-- | A textual instrument version.
version :: InstrumentKey -> Text

-- | The used holding standard for the instrument.
holdingStandard :: InstrumentKey -> HoldingStandard

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#type-daml-finance-interface-types-common-v3-types-instrumentquantity-36264
type InstrumentQuantity = Quantity InstrumentKey Decimal

-- | A set of parties.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#type-daml-finance-interface-types-common-v3-types-parties-67059
type Parties = Set Party

-- | Parties mapped by a specific key (or context).
--   The textual key is the "context" which describes the value set of parties.
--   This allows processes to add/remove parties for their specific purpose, without affecting others.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#type-daml-finance-interface-types-common-v3-types-partiesmap-43006
type PartiesMap = Map Text Parties

-- | A dimensioned quantity.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#type-daml-finance-interface-types-common-v3-types-quantity-28585
data Quantity u a

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Common-V3-Types.html#constr-daml-finance-interface-types-common-v3-types-quantity-96274
Quantity :: u -> a -> Quantity

-- | The quantity's unit.
unit :: Quantity -> u

-- | A numerical amount.
amount :: Quantity -> a

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Calendar.html#module-daml-finance-interface-types-date-v3-calendar-20021
module Daml.Finance.Interface.Types.Date.V3.Calendar

-- | A data type to define how non-business days are adjusted.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Calendar.html#type-daml-finance-interface-types-date-v3-calendar-businessdayadjustment-71551
data BusinessDayAdjustment

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Calendar.html#constr-daml-finance-interface-types-date-v3-calendar-businessdayadjustment-93800
BusinessDayAdjustment :: [Text] -> BusinessDayConventionEnum -> BusinessDayAdjustment

-- | A list of calendar ids to define holidays.
calendarIds :: BusinessDayAdjustment -> [Text]

-- | The business day convention used for the adjustment.
convention :: BusinessDayAdjustment -> BusinessDayConventionEnum

-- | An enum type to specify how a non-business day is adjusted.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Calendar.html#type-daml-finance-interface-types-date-v3-calendar-businessdayconventionenum-14112
data BusinessDayConventionEnum

-- | Adjust a non-business day to the next business day.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Calendar.html#constr-daml-finance-interface-types-date-v3-calendar-following-20900
Following :: BusinessDayConventionEnum

-- | Adjust a non-business day to the next business day
--   unless it is not in the same month. In this case use
--   the previous business day.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Calendar.html#constr-daml-finance-interface-types-date-v3-calendar-modifiedfollowing-531
ModifiedFollowing :: BusinessDayConventionEnum

-- | Adjust a non-business day to the previous business day
--   unless it is not in the same month. In this case use
--   the next business day.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Calendar.html#constr-daml-finance-interface-types-date-v3-calendar-modifiedpreceding-98945
ModifiedPreceding :: BusinessDayConventionEnum

-- | Non-business days are not adjusted.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Calendar.html#constr-daml-finance-interface-types-date-v3-calendar-noadjustment-12134
NoAdjustment :: BusinessDayConventionEnum

-- | Adjust a non-business day to the previous business day.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Calendar.html#constr-daml-finance-interface-types-date-v3-calendar-preceding-85670
Preceding :: BusinessDayConventionEnum

-- | Holiday Calendar Data used to define holidays (non-business days).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Calendar.html#type-daml-finance-interface-types-date-v3-calendar-holidaycalendardata-87370
data HolidayCalendarData

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Calendar.html#constr-daml-finance-interface-types-date-v3-calendar-holidaycalendardata-20901
HolidayCalendarData :: Text -> [DayOfWeek] -> [Date] -> HolidayCalendarData

-- | The id of the holiday calendar.
id :: HolidayCalendarData -> Text

-- | A list of week days defining the weekend.
weekend :: HolidayCalendarData -> [DayOfWeek]

-- | A list of dates defining holidays.
holidays :: HolidayCalendarData -> [Date]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Classes.html#module-daml-finance-interface-types-date-v3-classes-49826
module Daml.Finance.Interface.Types.Date.V3.Classes

-- | Types that can be converted to UTC time.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Classes.html#class-daml-finance-interface-types-date-v3-classes-hasutctimeconversion-43124
class HasUTCTimeConversion a

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Classes.html#function-daml-finance-interface-types-date-v3-classes-toutctime-62631
toUTCTime :: (HasUTCTimeConversion a) => a -> Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DateOffset.html#module-daml-finance-interface-types-date-v3-dateoffset-17578
module Daml.Finance.Interface.Types.Date.V3.DateOffset

-- | A date offset type that can be used e.g. to specify a rate fixing date relative to the reset
--   date in terms of a business days offset and an associated set of financial business centers.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DateOffset.html#type-daml-finance-interface-types-date-v3-dateoffset-dateoffset-75159
data DateOffset

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DateOffset.html#constr-daml-finance-interface-types-date-v3-dateoffset-dateoffset-94650
DateOffset :: PeriodEnum -> Int -> Optional DayTypeEnum -> BusinessDayConventionEnum -> [Text] -> DateOffset

-- | The unit of the date offset, e.g. D means that the date offset is specified in days.
period :: DateOffset -> PeriodEnum

-- | The number of days (if period is D) before or after the base date the fixing is observed.
periodMultiplier :: DateOffset -> Int

-- | Indicate whether the date offset is given in Business days or Calendar days.
dayType :: DateOffset -> Optional DayTypeEnum

-- | Business day convention that describes how a non-business day is adjusted.
businessDayConvention :: DateOffset -> BusinessDayConventionEnum

-- | The identifiers of the holiday calendars to be used for date adjustment (if any).
businessCenters :: DateOffset -> [Text]

-- | A day type classification used in counting the number of days between two dates.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DateOffset.html#type-daml-finance-interface-types-date-v3-dateoffset-daytypeenum-48232
data DayTypeEnum

-- | When calculating the number of days between two dates the count includes only business
--   days.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DateOffset.html#constr-daml-finance-interface-types-date-v3-dateoffset-business-5407
Business :: DayTypeEnum

-- | When calculating the number of days between two dates the count includes all calendar days.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DateOffset.html#constr-daml-finance-interface-types-date-v3-dateoffset-calendar-92195
Calendar :: DayTypeEnum

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DayCount.html#module-daml-finance-interface-types-date-v3-daycount-5046
module Daml.Finance.Interface.Types.Date.V3.DayCount

-- | An enum type to specify a day count convention used to calculate day count fractions.
--   For a detailed definition of each convention, we refer to the "Method of Interest Computation
--   Indicator" definitions in the context of the ISO-20022 standard. Where useful, we provide
--   disambiguation comments.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DayCount.html#type-daml-finance-interface-types-date-v3-daycount-daycountconventionenum-31
data DayCountConventionEnum

-- | Actual 360.
--   In CDM it is called *DayCountFractionEnum_ACT_360*. In ISO20022 it is called *A004*.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DayCount.html#constr-daml-finance-interface-types-date-v3-daycount-act360-36898
Act360 :: DayCountConventionEnum

-- | Actual 365 fixed.
--   In CDM it is called *DayCountFractionEnum_ACT_365_FIXED*. In ISO20022 it is called *A005*.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DayCount.html#constr-daml-finance-interface-types-date-v3-daycount-act365fixed-40608
Act365Fixed :: DayCountConventionEnum

-- | Actual 365NL (No Leap).
--   It excludes any leap days from the day count in each period (exclusive-inclusive).
--   In ISO20022 it is called *A014*.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DayCount.html#constr-daml-finance-interface-types-date-v3-daycount-act365nl-19647
Act365NL :: DayCountConventionEnum

-- | Actual 365L.
--   In CDM it is called *DayCountFractionEnum_ACT_365L*. In ISO20022 it is called *A009*.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DayCount.html#constr-daml-finance-interface-types-date-v3-daycount-act365l-87322
Act365L :: DayCountConventionEnum

-- | Actual Actual AFB.
--   In CDM it is called *DayCountFractionEnum_ACT_ACT_AFB*. In ISO20022 it is called *A010*.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DayCount.html#constr-daml-finance-interface-types-date-v3-daycount-actactafb-26905
ActActAFB :: DayCountConventionEnum

-- | Actual Actual ISDA.
--   In CDM it is called *DayCountFractionEnum_ACT_ACT_ISDA*. In ISO20022 it is called *A008*.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DayCount.html#constr-daml-finance-interface-types-date-v3-daycount-actactisda-70394
ActActISDA :: DayCountConventionEnum

-- | Actual Actual ICMA.
--   In CDM it is called *DayCountFractionEnum_ACT_ACT_ICMA* and
--   *DayCountFractionEnum_ACT_ACT_ISMA* (they are identical:
--   https://www.isda.org/2011/01/07/act-act-icma/).
--   In ISO20022 it is called *A006*. Also called ISMA in the 1998 ISDA paper.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DayCount.html#constr-daml-finance-interface-types-date-v3-daycount-actacticma-2729
ActActICMA :: DayCountConventionEnum

-- | 1/1.
--   In CDM it is called *DayCountFractionEnum__1_1*. Currently not included in ISO20022.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DayCount.html#constr-daml-finance-interface-types-date-v3-daycount-basis1-23072
Basis1 :: DayCountConventionEnum

-- | 30/360.
--   In CDM it is called *DayCountFractionEnum__30_360*. In ISO20022 it is called *A001*.
--   Also called 30/360 ISDA or American Basic rule.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DayCount.html#constr-daml-finance-interface-types-date-v3-daycount-basis30360-60007
Basis30360 :: DayCountConventionEnum

-- | 30/365.
--   In ISO20022 it is called *A002*.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DayCount.html#constr-daml-finance-interface-types-date-v3-daycount-basis30365-49750
Basis30365 :: DayCountConventionEnum

-- | 30/360 ICMA.
--   In CDM it is called *DayCountFractionEnum__30E_360*. In ISO20022 it is called *A011*.
--   Also called Basic Rule. This corresponds to "30E/360" of the 2006 ISDA definitions.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DayCount.html#constr-daml-finance-interface-types-date-v3-daycount-basis30360icma-86997
Basis30360ICMA :: DayCountConventionEnum

-- | 30E/360.
--   In CDM it is called *DayCountFractionEnum__30E_360_ISDA*. In ISO20022 it is called *A007*.
--   Also called Eurobond basis. This corresponds to "30E360 (ISDA)" of the 2006 ISDA definitions.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DayCount.html#constr-daml-finance-interface-types-date-v3-daycount-basis30e360-6411
Basis30E360 :: DayCountConventionEnum

-- | 30E2/360.
--   In ISO20022 it is called *A012*. Also called Eurobond basis model 2.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DayCount.html#constr-daml-finance-interface-types-date-v3-daycount-basis30e2360-88658
Basis30E2360 :: DayCountConventionEnum

-- | 30E3/360.
--   Currently not included in CDM. In ISO20022 it is called *A013*. Also called Eurobond basis
--   model 3.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-DayCount.html#constr-daml-finance-interface-types-date-v3-daycount-basis30e3360-81973
Basis30E3360 :: DayCountConventionEnum

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-RollConvention.html#module-daml-finance-interface-types-date-v3-rollconvention-38965
module Daml.Finance.Interface.Types.Date.V3.RollConvention

-- | A data type to define periods.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-RollConvention.html#type-daml-finance-interface-types-date-v3-rollconvention-period-94990
data Period

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-RollConvention.html#constr-daml-finance-interface-types-date-v3-rollconvention-period-57915
Period :: PeriodEnum -> Int -> Period

-- | A period, e.g., a day, week, month or year.
period :: Period -> PeriodEnum

-- | A period multiplier, e.g., 1, 2 or 3 etc.
periodMultiplier :: Period -> Int

-- | An enum type to specify a period, e.g., day or week.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-RollConvention.html#type-daml-finance-interface-types-date-v3-rollconvention-periodenum-45289
data PeriodEnum

-- | Day
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-RollConvention.html#constr-daml-finance-interface-types-date-v3-rollconvention-d-28261
D :: PeriodEnum

-- | Month
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-RollConvention.html#constr-daml-finance-interface-types-date-v3-rollconvention-m-60944
M :: PeriodEnum

-- | Week
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-RollConvention.html#constr-daml-finance-interface-types-date-v3-rollconvention-w-87014
W :: PeriodEnum

-- | Year
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-RollConvention.html#constr-daml-finance-interface-types-date-v3-rollconvention-y-47844
Y :: PeriodEnum

-- | An enum type to specify how to roll dates.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-RollConvention.html#type-daml-finance-interface-types-date-v3-rollconvention-rollconventionenum-89490
data RollConventionEnum

-- | Rolls on month end.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-RollConvention.html#constr-daml-finance-interface-types-date-v3-rollconvention-eom-7578
EOM :: RollConventionEnum

-- | Rolls on the corresponding day of the month.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-RollConvention.html#constr-daml-finance-interface-types-date-v3-rollconvention-dom-47139
DOM :: Int -> RollConventionEnum

-- | No roll convention is specified. This is for e.g. when date roll is not required (`D` or `W`
--   tenors, single-period schedules).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-RollConvention.html#constr-daml-finance-interface-types-date-v3-rollconvention-norollconvention-34259
NoRollConvention :: RollConventionEnum

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Schedule.html#module-daml-finance-interface-types-date-v3-schedule-94670
module Daml.Finance.Interface.Types.Date.V3.Schedule

-- | Frequency of a periodic schedule.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Schedule.html#type-daml-finance-interface-types-date-v3-schedule-frequency-37405
data Frequency

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Schedule.html#constr-daml-finance-interface-types-date-v3-schedule-frequency-33990
Frequency :: Period -> RollConventionEnum -> Frequency

-- | The period (e.g., 1D, 3M, 1Y).
period :: Frequency -> Period

-- | The roll convention.
rollConvention :: Frequency -> RollConventionEnum

-- | A periodic schedule.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Schedule.html#type-daml-finance-interface-types-date-v3-schedule-periodicschedule-77368
data PeriodicSchedule

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Schedule.html#constr-daml-finance-interface-types-date-v3-schedule-periodicschedule-24577
PeriodicSchedule :: Date -> Date -> Optional Date -> Optional Date -> ScheduleFrequency -> BusinessDayAdjustment -> Optional BusinessDayAdjustment -> Optional BusinessDayAdjustment -> Optional StubPeriodTypeEnum -> PeriodicSchedule

-- | Effective date, i.e., the (unadjusted) start date of the first period.
effectiveDate :: PeriodicSchedule -> Date

-- | Termination date, i.e., the (unadjusted) end date of the last period.
terminationDate :: PeriodicSchedule -> Date

-- | The (unadjusted) start date of the first regular period (optional).
firstRegularPeriodStartDate :: PeriodicSchedule -> Optional Date

-- | The (unadjusted) end date of the last regular period (optional).
lastRegularPeriodEndDate :: PeriodicSchedule -> Optional Date

-- | The frequency of the periodic schedule.
frequency :: PeriodicSchedule -> ScheduleFrequency

-- | The business day adjustment to determine adjusted dates.
businessDayAdjustment :: PeriodicSchedule -> BusinessDayAdjustment

-- | The (optional) business day adjustment of the effective date
effectiveDateBusinessDayAdjustment :: PeriodicSchedule -> Optional BusinessDayAdjustment

-- | The (optional) business day adjustment of the termination date
terminationDateBusinessDayAdjustment :: PeriodicSchedule -> Optional BusinessDayAdjustment

-- | An optional stub to define a stub implicitly and not via `firstRegularPeriodStartDate` or
--   `lastRegularPeriodEndDate`.
stubPeriodType :: PeriodicSchedule -> Optional StubPeriodTypeEnum

-- | A schedule defined by a list of periods.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Schedule.html#type-daml-finance-interface-types-date-v3-schedule-schedule-18327
type Schedule = [SchedulePeriod]

-- | Frequency of a schedule. It can be specified as a regular frequency or
--   as `SinglePeriod`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Schedule.html#type-daml-finance-interface-types-date-v3-schedule-schedulefrequency-11056
data ScheduleFrequency

-- | Periodic frequency (e.g. 1D, 3M, 1Y).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Schedule.html#constr-daml-finance-interface-types-date-v3-schedule-periodic-85058
Periodic :: Frequency -> ScheduleFrequency

-- | Used for schedules that have exactly one regular period covering their full term
--   (from `effectiveDate` to `terminationDate`).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Schedule.html#constr-daml-finance-interface-types-date-v3-schedule-singleperiod-55098
SinglePeriod :: ScheduleFrequency

-- | A single period in a schedule.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Schedule.html#type-daml-finance-interface-types-date-v3-schedule-scheduleperiod-72606
data SchedulePeriod

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Schedule.html#constr-daml-finance-interface-types-date-v3-schedule-scheduleperiod-78303
SchedulePeriod :: Date -> Date -> Date -> Date -> Optional StubPeriodTypeEnum -> SchedulePeriod

-- | Adjusted end date.
adjustedEndDate :: SchedulePeriod -> Date

-- | Adjusted start date.
adjustedStartDate :: SchedulePeriod -> Date

-- | Unadjusted end date.
unadjustedEndDate :: SchedulePeriod -> Date

-- | Unadjusted start date.
unadjustedStartDate :: SchedulePeriod -> Date

-- | Indicates whether this period is a stub (and if so, what type of stub it is)
stubType :: SchedulePeriod -> Optional StubPeriodTypeEnum

-- | An enum type to specify a stub.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Schedule.html#type-daml-finance-interface-types-date-v3-schedule-stubperiodtypeenum-99734
data StubPeriodTypeEnum

-- | A long (more than one period) final stub.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Schedule.html#constr-daml-finance-interface-types-date-v3-schedule-longfinal-79474
LongFinal :: StubPeriodTypeEnum

-- | A long (more than one period) initial stub.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Schedule.html#constr-daml-finance-interface-types-date-v3-schedule-longinitial-63504
LongInitial :: StubPeriodTypeEnum

-- | A short (less than one period) final stub.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Schedule.html#constr-daml-finance-interface-types-date-v3-schedule-shortfinal-87465
ShortFinal :: StubPeriodTypeEnum

-- | A short (less than one period) initial stub.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Types-Date-V3-Schedule.html#constr-daml-finance-interface-types-date-v3-schedule-shortinitial-94551
ShortInitial :: StubPeriodTypeEnum

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Common.html#module-daml-finance-interface-util-v3-common-32871
module Daml.Finance.Interface.Util.V3.Common

-- | Verify is assertMsg with its arguments flipped.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Common.html#function-daml-finance-interface-util-v3-common-verify-84388
verify :: (CanAssert m) => Bool -> Text -> m ()

-- | Wraps an amount and an instrument key into an instrument quantity.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Common.html#function-daml-finance-interface-util-v3-common-qty-97062
qty :: Decimal -> InstrumentKey -> InstrumentQuantity

-- | Scale `quantity` by the provided factor.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Common.html#function-daml-finance-interface-util-v3-common-scale-88838
scale :: Decimal -> InstrumentQuantity -> InstrumentQuantity

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Disclosure.html#module-daml-finance-interface-util-v3-disclosure-50779
module Daml.Finance.Interface.Util.V3.Disclosure

-- | Type synonym for `Disclosure`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Disclosure.html#type-daml-finance-interface-util-v3-disclosure-i-28317
type I = Disclosure

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Disclosure.html#type-daml-finance-interface-util-v3-disclosure-v-30650
type V = View

-- | View for `Disclosure`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Disclosure.html#type-daml-finance-interface-util-v3-disclosure-view-81206
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Disclosure.html#constr-daml-finance-interface-util-v3-disclosure-view-5523
View :: Parties -> PartiesMap -> View

-- | Disjunction choice controllers.
disclosureControllers :: View -> Parties

-- | Observers with context.
--   The parties are mapped by a specific key.
--   The textual key is the "observation context" of the disclosure.
--   This allows processes to add/remove parties for their specific purpose, without affecting
--   others.
observers :: View -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Disclosure.html#function-daml-finance-interface-util-v3-disclosure-setobservers-71616
setObservers :: Disclosure -> SetObservers -> Update (ContractId Disclosure)

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Disclosure.html#function-daml-finance-interface-util-v3-disclosure-addobservers-65651
addObservers :: Disclosure -> AddObservers -> Update (ContractId Disclosure)

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Disclosure.html#function-daml-finance-interface-util-v3-disclosure-removeobservers-95863
removeObservers :: Disclosure -> ContractId Disclosure -> RemoveObservers -> Update (Optional (ContractId Disclosure))

-- | Flattens observers which use the `PartiesMap` into a `Set Party` for usage in template
--   definitions. For example:
--   ```
--   observer $ flattenObservers observers
--   ```
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Disclosure.html#function-daml-finance-interface-util-v3-disclosure-flattenobservers-40218
flattenObservers :: PartiesMap -> Parties

-- | An interface for managing the visibility of contracts for non-authorizing parties.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Disclosure.html#type-daml-finance-interface-util-v3-disclosure-disclosure-91672
data (HasInterfaceView Disclosure V) => Disclosure

-- | Add a single new observer context to the existing observers.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Disclosure.html#type-daml-finance-interface-util-v3-disclosure-addobservers-68807
data (Choice Disclosure AddObservers (ContractId Disclosure)) => AddObservers

-- | Add a single new observer context to the existing observers.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Disclosure.html#type-daml-finance-interface-util-v3-disclosure-addobservers-68807
AddObservers :: Parties -> (Text, Parties) -> AddObservers

-- | Party calling this choice.
disclosers :: AddObservers -> Parties

-- | Parties to add as observers to the contract and the corresponding observer context.
--   If the observer context already exists, the new set of parties is added to the old one.
observersToAdd :: AddObservers -> (Text, Parties)

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Disclosure.html#type-daml-finance-interface-util-v3-disclosure-getview-72965
data (Choice Disclosure GetView View) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Disclosure.html#type-daml-finance-interface-util-v3-disclosure-getview-72965
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

-- | Remove observers from a context.
--   None is returned if no update is needed. Parties for a context can be removed if any
--   of the disclosers are part of the observers to be removed or the disclosureControllers.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Disclosure.html#type-daml-finance-interface-util-v3-disclosure-removeobservers-4683
data (Choice Disclosure RemoveObservers (Optional (ContractId Disclosure))) => RemoveObservers

-- | Remove observers from a context.
--   None is returned if no update is needed. Parties for a context can be removed if any
--   of the disclosers are part of the observers to be removed or the disclosureControllers.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Disclosure.html#type-daml-finance-interface-util-v3-disclosure-removeobservers-4683
RemoveObservers :: Parties -> (Text, Parties) -> RemoveObservers

-- | Parties calling this choice.
disclosers :: RemoveObservers -> Parties

-- | Parties to be removed from the contract observers and the corresponding observer
--   context.
observersToRemove :: RemoveObservers -> (Text, Parties)

-- | Set the observers for a contract.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Disclosure.html#type-daml-finance-interface-util-v3-disclosure-setobservers-68580
data (Choice Disclosure SetObservers (ContractId Disclosure)) => SetObservers

-- | Set the observers for a contract.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Disclosure.html#type-daml-finance-interface-util-v3-disclosure-setobservers-68580
SetObservers :: Parties -> PartiesMap -> SetObservers

-- | Party calling this choice.
disclosers :: SetObservers -> Parties

-- | Observers to set for this contract. This overrides the existing observers.
--   The parties are mapped by a specific key.
--   The textual key is the "observation context" of the disclosure.
--   This allows processes to add/remove parties for their specific purpose, without affecting
--   others.
newObservers :: SetObservers -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-InterfaceKey.html#module-daml-finance-interface-util-v3-interfacekey-20882
module Daml.Finance.Interface.Util.V3.InterfaceKey

-- | Fetch an interface by key.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-InterfaceKey.html#function-daml-finance-interface-util-v3-interfacekey-fetchinterfacebykey-88026
fetchInterfaceByKey :: (HasInterfaceTypeRep i1, HasInterfaceTypeRep i2, HasFetchByKey ref k, HasField "cid" ref (ContractId i1), HasFetch i2) => k -> Update i2

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#module-daml-finance-interface-util-v3-lockable-20339
module Daml.Finance.Interface.Util.V3.Lockable

-- | Type synonym for `Lockable`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#type-daml-finance-interface-util-v3-lockable-i-3709
type I = Lockable

-- | Locking details.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#type-daml-finance-interface-util-v3-lockable-lock-18728
data Lock

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#constr-daml-finance-interface-util-v3-lockable-lock-39673
Lock :: Parties -> Set Text -> LockType -> Lock

-- | Parties which are locking the contract.
lockers :: Lock -> Parties

-- | Context of the lock, explaining why this lock is held by the locking parties. If the lock
--   is reentrant, there may be more than one locking context for the set of lockers.
context :: Lock -> Set Text

-- | The type of lock applied.
lockType :: Lock -> LockType

-- | Type of lock held.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#type-daml-finance-interface-util-v3-lockable-locktype-58900
data LockType

-- | A one time only lock.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#constr-daml-finance-interface-util-v3-lockable-semaphore-62185
Semaphore :: LockType

-- | A mutual exclusion lock where the same lockers may lock a contract multiple times.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#constr-daml-finance-interface-util-v3-lockable-reentrant-91604
Reentrant :: LockType

-- | Type synonym for `View`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#type-daml-finance-interface-util-v3-lockable-v-6042
type V = View

-- | View for `Lockable`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#type-daml-finance-interface-util-v3-lockable-view-77974
data View

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#constr-daml-finance-interface-util-v3-lockable-view-74191
View :: Optional Lock -> Parties -> View

-- | An optional lock, indicating if it is locked or not.
lock :: View -> Optional Lock

-- | All parties whose authorization is required to acquire a lock.
controllers :: View -> Parties

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#function-daml-finance-interface-util-v3-lockable-acquire-83170
acquire :: Lockable -> Acquire -> Update (ContractId Lockable)

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#function-daml-finance-interface-util-v3-lockable-release-93513
release :: Lockable -> Release -> Update (ContractId Lockable)

-- | Retrieves the lockers of a `Lockable`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#function-daml-finance-interface-util-v3-lockable-getlockers-25940
getLockers :: (HasToInterface t Lockable) => t -> Parties

-- | Asserts that a lockable is not locked.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#function-daml-finance-interface-util-v3-lockable-mustnotbelocked-7241
mustNotBeLocked :: (HasToInterface i Lockable) => i -> Update ()

-- | An interface for managing locking of contracts. Locking is a mechanism to temporarily encumber
--   contracts by adding third-party lockers as additional signatories.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#type-daml-finance-interface-util-v3-lockable-lockable-79556
data (HasInterfaceView Lockable V) => Lockable

-- | Lock a contract.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#type-daml-finance-interface-util-v3-lockable-acquire-20270
data (Choice Lockable Acquire (ContractId Lockable)) => Acquire

-- | Lock a contract.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#type-daml-finance-interface-util-v3-lockable-acquire-20270
Acquire :: Parties -> Text -> LockType -> Acquire

-- | Parties which restrain the contract's ability to perform specified actions.
newLockers :: Acquire -> Parties

-- | Reason for acquiring a lock.
context :: Acquire -> Text

-- | Type of lock to acquire.
lockType :: Acquire -> LockType

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#type-daml-finance-interface-util-v3-lockable-getview-61317
data (Choice Lockable GetView V) => GetView

-- | Retrieves the interface view.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#type-daml-finance-interface-util-v3-lockable-getview-61317
GetView :: Party -> GetView

-- | The party retrieving the view.
viewer :: GetView -> Party

-- | Unlock a locked contract.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#type-daml-finance-interface-util-v3-lockable-release-15493
data (Choice Lockable Release (ContractId Lockable)) => Release

-- | Unlock a locked contract.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Interface-Util-V3-Lockable.html#type-daml-finance-interface-util-v3-lockable-release-15493
Release :: Text -> Release

context :: Release -> Text

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Effect.html#module-daml-finance-lifecycle-v4-effect-31424
module Daml.Finance.Lifecycle.V4.Effect

-- | Type synonym for `Effect`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Effect.html#type-daml-finance-lifecycle-v4-effect-t-28329
type T = Effect

-- | A contract encoding the consequences of a lifecycle event for one unit of the target
--   instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Effect.html#type-daml-finance-lifecycle-v4-effect-effect-15931
data (Template Effect) => Effect

-- | A contract encoding the consequences of a lifecycle event for one unit of the target
--   instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Effect.html#type-daml-finance-lifecycle-v4-effect-effect-15931
Effect :: Parties -> Id -> Text -> InstrumentKey -> Optional InstrumentKey -> [InstrumentQuantity] -> [InstrumentQuantity] -> Optional Time -> PartiesMap -> Effect

-- | The effect provider.
providers :: Effect -> Parties

-- | The effect's identifier.
id :: Effect -> Id

-- | The effect's description.
description :: Effect -> Text

-- | The target instrument. A holding on this instrument is required to claim the effect.
--   For example, in the case of a swap instrument, this would be the original instrument
--   version before lifecycling, that contains the current swap payment.
targetInstrument :: Effect -> InstrumentKey

-- | The produced instrument, if it exists.
--   For example, in the case of a swap instrument, this would be the new instrument
--   version after lifecycling, that does not contain the current swap payment.
--   If there are no more claims remaining after the current lifecycling, this would be None.
producedInstrument :: Effect -> Optional InstrumentKey

-- | Consumed quantities (in addition to the target instrument).
--   For example, in the case of a fix vs floating rate swap, this could be a 2.5% fix
--   payment.
otherConsumed :: Effect -> [InstrumentQuantity]

-- | Produced quantities (in additon to the produced instrument).
--   For example, in the case of a fix vs floating rate swap, this could be a 3M Euribor
--   floating payment.
otherProduced :: Effect -> [InstrumentQuantity]

-- | The effect's settlement time (if any).
settlementTime :: Effect -> Optional Time

-- | Observers.
observers :: Effect -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Election.html#module-daml-finance-lifecycle-v4-election-2732
module Daml.Finance.Lifecycle.V4.Election

-- | Type synonym for `Election`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Election.html#type-daml-finance-lifecycle-v4-election-t-50041
type T = Election

-- | An election, such as the exercise of an option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Election.html#type-daml-finance-lifecycle-v4-election-election-87911
data (Template Election) => Election

-- | An election, such as the exercise of an option.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Election.html#type-daml-finance-lifecycle-v4-election-election-87911
Election :: Party -> Party -> Party -> Id -> Text -> InstrumentKey -> Decimal -> Text -> Bool -> Time -> PartiesMap -> Election

-- | Entity making the election.
elector :: Election -> Party

-- | Faces the `elector` in the `Holding`.
counterparty :: Election -> Party

-- | The provider of the election is an entity that has the authority to process the election
--   and create a new instrument version.
provider :: Election -> Party

-- | Election identifier.
id :: Election -> Id

-- | A human readable description of the election.
description :: Election -> Text

-- | The instrument to which the election applies.
instrument :: Election -> InstrumentKey

-- | Number of units of instrument to which the election applies.
amount :: Election -> Decimal

-- | The tag corresponding to the elected sub-tree.
claim :: Election -> Text

-- | `True` if the elector is the owner of a claim, `False` otherwise.
electorIsOwner :: Election -> Bool

-- | Time at which the election is put forward.
electionTime :: Election -> Time

-- | A set of observers.
observers :: Election -> PartiesMap

-- | Factory template to create an `Election`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Election.html#type-daml-finance-lifecycle-v4-election-factory-68585
data (Template Factory) => Factory

-- | Factory template to create an `Election`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Election.html#type-daml-finance-lifecycle-v4-election-factory-68585
Factory :: Party -> PartiesMap -> Factory

-- | The provider of the `Factory`.
provider :: Factory -> Party

-- | A set of observers.
observers :: Factory -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-ElectionEffect.html#module-daml-finance-lifecycle-v4-electioneffect-83755
module Daml.Finance.Lifecycle.V4.ElectionEffect

-- | Type synonym for `ElectionEffect`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-ElectionEffect.html#type-daml-finance-lifecycle-v4-electioneffect-t-11392
type T = ElectionEffect

-- | A contract encoding the consequences of an election for one unit of the target instrument.
--   It needs to be claimed with the right amount and is consumed after claiming.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-ElectionEffect.html#type-daml-finance-lifecycle-v4-electioneffect-electioneffect-55949
data (Template ElectionEffect) => ElectionEffect

-- | A contract encoding the consequences of an election for one unit of the target instrument.
--   It needs to be claimed with the right amount and is consumed after claiming.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-ElectionEffect.html#type-daml-finance-lifecycle-v4-electioneffect-electioneffect-55949
ElectionEffect :: Parties -> Party -> Party -> Id -> Text -> InstrumentKey -> Optional InstrumentKey -> Decimal -> [InstrumentQuantity] -> [InstrumentQuantity] -> Optional Time -> PartiesMap -> ElectionEffect

-- | The effect provider.
providers :: ElectionEffect -> Parties

-- | The custodian of the holding put forward for election.
custodian :: ElectionEffect -> Party

-- | The owner of the holding put forward for election.
owner :: ElectionEffect -> Party

-- | The effect's identifier.
id :: ElectionEffect -> Id

-- | The effect's description.
description :: ElectionEffect -> Text

-- | The target instrument.
targetInstrument :: ElectionEffect -> InstrumentKey

-- | The produced instrument, when it exists.
producedInstrument :: ElectionEffect -> Optional InstrumentKey

-- | The elected amount.
amount :: ElectionEffect -> Decimal

-- | Consumed quantities (not including the target instrument).
otherConsumed :: ElectionEffect -> [InstrumentQuantity]

-- | Produced quantities (not including the produced instrument).
otherProduced :: ElectionEffect -> [InstrumentQuantity]

-- | The effect's settlement time (if any).
settlementTime :: ElectionEffect -> Optional Time

-- | Observers.
observers :: ElectionEffect -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Event-Distribution.html#module-daml-finance-lifecycle-v4-event-distribution-38493
module Daml.Finance.Lifecycle.V4.Event.Distribution

-- | Type synonym for `Event`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Event-Distribution.html#type-daml-finance-lifecycle-v4-event-distribution-t-75422
type T = Event

-- | Event contract for the distribution of units of an instrument for each unit of a target
--   instrument (e.g. share or cash dividends).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Event-Distribution.html#type-daml-finance-lifecycle-v4-event-distribution-event-43030
data (Template Event) => Event

-- | Event contract for the distribution of units of an instrument for each unit of a target
--   instrument (e.g. share or cash dividends).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Event-Distribution.html#type-daml-finance-lifecycle-v4-event-distribution-event-43030
Event :: Parties -> Id -> Text -> Time -> InstrumentKey -> InstrumentKey -> [InstrumentQuantity] -> Parties -> Event

-- | Providers of the distribution event.
providers :: Event -> Parties

-- | Event Identifier.
id :: Event -> Id

-- | Event description.
description :: Event -> Text

-- | Time on which the distribution is effectuated.
effectiveTime :: Event -> Time

-- | Instrument the distribution event applies to.
targetInstrument :: Event -> InstrumentKey

-- | Instrument after the distribution has been claimed.
newInstrument :: Event -> InstrumentKey

-- | Distributed quantities per unit held.
perUnitDistribution :: Event -> [InstrumentQuantity]

-- | Observers.
observers :: Event -> Parties

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Event-Replacement.html#module-daml-finance-lifecycle-v4-event-replacement-94706
module Daml.Finance.Lifecycle.V4.Event.Replacement

-- | Type synonym for `Event`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Event-Replacement.html#type-daml-finance-lifecycle-v4-event-replacement-t-18539
type T = Event

-- | Event contract for the replacement of units of an instrument with a basket of other
--   instruments, e.g., a stock merger.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Event-Replacement.html#type-daml-finance-lifecycle-v4-event-replacement-event-94835
data (Template Event) => Event

-- | Event contract for the replacement of units of an instrument with a basket of other
--   instruments, e.g., a stock merger.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Event-Replacement.html#type-daml-finance-lifecycle-v4-event-replacement-event-94835
Event :: Parties -> Id -> Text -> Time -> InstrumentKey -> [InstrumentQuantity] -> Parties -> Event

-- | Providers of the distribution event.
providers :: Event -> Parties

-- | Event identifier.
id :: Event -> Id

-- | Event description.
description :: Event -> Text

-- | Time on which the replacement is effectuated.
effectiveTime :: Event -> Time

-- | Instrument the replacement event applies to.
targetInstrument :: Event -> InstrumentKey

-- | Instrument quantities the target instrument is replaced with.
perUnitReplacement :: Event -> [InstrumentQuantity]

-- | Observers.
observers :: Event -> Parties

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Rule-Claim.html#module-daml-finance-lifecycle-v4-rule-claim-11721
module Daml.Finance.Lifecycle.V4.Rule.Claim

-- | Type synonym for `Rule`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Rule-Claim.html#type-daml-finance-lifecycle-v4-rule-claim-t-44974
type T = Rule

-- | Rule contract that allows an actor to claim effects, returning settlement instructions.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Rule-Claim.html#type-daml-finance-lifecycle-v4-rule-claim-rule-66621
data (Template Rule) => Rule

-- | Rule contract that allows an actor to claim effects, returning settlement instructions.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Rule-Claim.html#type-daml-finance-lifecycle-v4-rule-claim-rule-66621
Rule :: Party -> Parties -> Parties -> ContractId I -> ContractId I -> Bool -> Rule

-- | Provider of the claim rule. Together with the actors of the `ClaimEffect` choice the
--   authorization requirements to upgrade the holdings being claimed have to be met.
provider :: Rule -> Party

-- | Any of the parties can claim an effect.
claimers :: Rule -> Parties

-- | Any of the parties can trigger settlement of the resulting batch.
settlers :: Rule -> Parties

-- | RouteProvider used to discover settlement routes.
routeProviderCid :: Rule -> ContractId I

-- | Settlement factory contract used to create a `Batch` of `Instruction`\s.
settlementFactoryCid :: Rule -> ContractId I

-- | Configure whether netting should be enabled for quantities having the same (instrument,
--   sender, receiver).
netInstructions :: Rule -> Bool

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Rule-Distribution.html#module-daml-finance-lifecycle-v4-rule-distribution-2662
module Daml.Finance.Lifecycle.V4.Rule.Distribution

-- | Type synonym for `Rule`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Rule-Distribution.html#type-daml-finance-lifecycle-v4-rule-distribution-t-33867
type T = Rule

-- | Rule contract that defines the distribution of units of an instrument for each unit of a target
--   instrument (e.g. share or cash dividends).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Rule-Distribution.html#type-daml-finance-lifecycle-v4-rule-distribution-rule-34
data (Template Rule) => Rule

-- | Rule contract that defines the distribution of units of an instrument for each unit of a target
--   instrument (e.g. share or cash dividends).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Rule-Distribution.html#type-daml-finance-lifecycle-v4-rule-distribution-rule-34
Rule :: Parties -> Party -> Parties -> Id -> Text -> Rule

-- | Providers of the distribution rule.
providers :: Rule -> Parties

-- | Party performing the lifecycling.
lifecycler :: Rule -> Party

-- | Observers of the distribution rule.
observers :: Rule -> Parties

-- | Identifier for the rule contract.
id :: Rule -> Id

-- | Textual description.
description :: Rule -> Text

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Rule-Replacement.html#module-daml-finance-lifecycle-v4-rule-replacement-25183
module Daml.Finance.Lifecycle.V4.Rule.Replacement

-- | Type synonym for `Rule`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Rule-Replacement.html#type-daml-finance-lifecycle-v4-rule-replacement-t-72652
type T = Rule

-- | Rule contract that defines the replacement of units of an instrument with a basket of other
--   instruments (e.g. stock merger).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Rule-Replacement.html#type-daml-finance-lifecycle-v4-rule-replacement-rule-24043
data (Template Rule) => Rule

-- | Rule contract that defines the replacement of units of an instrument with a basket of other
--   instruments (e.g. stock merger).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Rule-Replacement.html#type-daml-finance-lifecycle-v4-rule-replacement-rule-24043
Rule :: Parties -> Party -> Parties -> Id -> Text -> Rule

-- | Providers of the replacement rule.
providers :: Rule -> Parties

-- | Party performing the lifecycling.
lifecycler :: Rule -> Party

-- | Observers.
observers :: Rule -> Parties

-- | Identifier for the rule contract.
id :: Rule -> Id

-- | Textual description.
description :: Rule -> Text

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Rule-Util.html#module-daml-finance-lifecycle-v4-rule-util-70932
module Daml.Finance.Lifecycle.V4.Rule.Util

-- | Type used to record pending payments.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Rule-Util.html#type-daml-finance-lifecycle-v4-rule-util-pending-30518
data Pending

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Rule-Util.html#constr-daml-finance-lifecycle-v4-rule-util-pending-64409
Pending :: InstrumentKey -> Decimal -> Pending

instrument :: Pending -> InstrumentKey

amount :: Pending -> Decimal

-- | Merge consumed and produced instruments into a list of pending settlements.
--   This will only reproduce instrument and quantity, not tag or time.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Rule-Util.html#function-daml-finance-lifecycle-v4-rule-util-mergeconsumedandproduced-58739
mergeConsumedAndProduced :: [InstrumentQuantity] -> [InstrumentQuantity] -> [Pending]

-- | Map pending settlements into corresponding instrument quantities and split them into consumed
--   and produced. Pending items with an amount of `0.0` are discarded.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Rule-Util.html#function-daml-finance-lifecycle-v4-rule-util-splitpending-50551
splitPending :: [Pending] -> ([InstrumentQuantity], [InstrumentQuantity])

-- | Net pending payments on the same instrument (regardless of tags).
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Lifecycle-V4-Rule-Util.html#function-daml-finance-lifecycle-v4-rule-util-net-10510
net :: [Pending] -> [Pending]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-Batch.html#module-daml-finance-settlement-v4-batch-88124
module Daml.Finance.Settlement.V4.Batch

-- | Type synonym for `Batch`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-Batch.html#type-daml-finance-settlement-v4-batch-t-21205
type T = Batch

-- | Allows you to atomically settle a set of settlement `Step`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-Batch.html#type-daml-finance-settlement-v4-batch-batch-9941
data (Template Batch) => Batch

-- | Allows you to atomically settle a set of settlement `Step`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-Batch.html#type-daml-finance-settlement-v4-batch-batch-9941
Batch :: Party -> Parties -> Parties -> Id -> Text -> Optional Id -> [(RoutedStep, Id)] -> Optional Time -> Batch

-- | Party instructing settlement (and the creation of the `Batch`).
instructor :: Batch -> Party

-- | Parties consenting with the creation of the `Batch`.
consenters :: Batch -> Parties

-- | Any of the parties can trigger the settlement.
settlers :: Batch -> Parties

-- | Batch identifier.
id :: Batch -> Id

-- | Batch description.
description :: Batch -> Text

-- | Identifier to link a batch to a context (e.g. the `Effect` it originated from).
contextId :: Batch -> Optional Id

-- | The settlement `RoutedStep`\s and the identifiers of the corresponding `Instruction`\s.
routedStepsWithInstructionId :: Batch -> [(RoutedStep, Id)]

-- | Settlement time (if any).
settlementTime :: Batch -> Optional Time

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-Factory.html#module-daml-finance-settlement-v4-factory-65040
module Daml.Finance.Settlement.V4.Factory

-- | Factory template that implements the `Factory` interface.
--   It is used to create a set of settlement `Instruction`\s, and a `Batch` to atomically settle
--   them.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-Factory.html#type-daml-finance-settlement-v4-factory-factory-91685
data (Template Factory) => Factory

-- | Factory template that implements the `Factory` interface.
--   It is used to create a set of settlement `Instruction`\s, and a `Batch` to atomically settle
--   them.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-Factory.html#type-daml-finance-settlement-v4-factory-factory-91685
Factory :: Party -> Parties -> Factory

-- | Party providing the facility.
provider :: Factory -> Party

-- | Observers.
observers :: Factory -> Parties

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-Hierarchy.html#module-daml-finance-settlement-v4-hierarchy-83331
module Daml.Finance.Settlement.V4.Hierarchy

-- | Data type that describes a hierarchical account structure among multiple parties for holdings
--   on an instrument.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-Hierarchy.html#type-daml-finance-settlement-v4-hierarchy-hierarchy-41337
data Hierarchy

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-Hierarchy.html#constr-daml-finance-settlement-v4-hierarchy-hierarchy-81120
Hierarchy :: Party -> [[Party]] -> Hierarchy

-- | Root custodian of the instrument.
rootCustodian :: Hierarchy -> Party

-- | Paths from "leaf" owners to the root custodian of the instrument.
pathsToRootCustodian :: Hierarchy -> [[Party]]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-Hierarchy.html#function-daml-finance-settlement-v4-hierarchy-unfoldstep-66521
unfoldStep :: Hierarchy -> Step -> Optional [RoutedStep]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-Instruction.html#module-daml-finance-settlement-v4-instruction-73130
module Daml.Finance.Settlement.V4.Instruction

-- | Type synonym for `Instruction`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-Instruction.html#type-daml-finance-settlement-v4-instruction-t-83203
type T = Instruction

-- | Instruction is used to settle a single settlement `Step`. In order to settle the instruction,
--   - the sender must allocate a suitable holding
--   - the receiver must define the receiving account
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-Instruction.html#type-daml-finance-settlement-v4-instruction-instruction-65077
data (Template Instruction) => Instruction

-- | Instruction is used to settle a single settlement `Step`. In order to settle the instruction,
--   - the sender must allocate a suitable holding
--   - the receiver must define the receiving account
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-Instruction.html#type-daml-finance-settlement-v4-instruction-instruction-65077
Instruction :: Party -> Parties -> Parties -> Id -> Id -> RoutedStep -> Optional Time -> Allocation -> Approval -> Parties -> Parties -> PartiesMap -> Instruction

-- | Party instructing settlement (and the creation of the `Instruction`).
instructor :: Instruction -> Party

-- | Parties consenting with the creation of the `Instruction`.
consenters :: Instruction -> Parties

-- | Any of the parties can trigger the settlement.
settlers :: Instruction -> Parties

-- | Trade identifier.
batchId :: Instruction -> Id

-- | Instruction identifier.
id :: Instruction -> Id

-- | Routed settlement step.
routedStep :: Instruction -> RoutedStep

-- | Settlement time (if any).
settlementTime :: Instruction -> Optional Time

-- | Allocation from the sender.
allocation :: Instruction -> Allocation

-- | Approval from the receiver.
approval :: Instruction -> Approval

-- | Additional signatories, used to collect authorization.
signedSenders :: Instruction -> Parties

-- | Additional signatories, used to collect authorization.
signedReceivers :: Instruction -> Parties

-- | Observers.
observers :: Instruction -> PartiesMap

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-RouteProvider-IntermediatedStatic.html#module-daml-finance-settlement-v4-routeprovider-intermediatedstatic-92315
module Daml.Finance.Settlement.V4.RouteProvider.IntermediatedStatic

-- | Template which implements the `RouteProvider` interface.
--   It is used to discover the settlement route for each settlement `Step`, i.e., `RoutedSteps`\s.
--   For each instrument to settle as part of the batch, a hierarchy of intermediaries is specified
--   in `paths`. This hierarchy is used to generate the `RoutedStep`\s.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-RouteProvider-IntermediatedStatic.html#type-daml-finance-settlement-v4-routeprovider-intermediatedstatic-intermediatedstatic-19069
data (Template IntermediatedStatic) => IntermediatedStatic

-- | Template which implements the `RouteProvider` interface.
--   It is used to discover the settlement route for each settlement `Step`, i.e., `RoutedSteps`\s.
--   For each instrument to settle as part of the batch, a hierarchy of intermediaries is specified
--   in `paths`. This hierarchy is used to generate the `RoutedStep`\s.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-RouteProvider-IntermediatedStatic.html#type-daml-finance-settlement-v4-routeprovider-intermediatedstatic-intermediatedstatic-19069
IntermediatedStatic :: Party -> Parties -> Map Text Hierarchy -> IntermediatedStatic

-- | Party providing the facility.
provider :: IntermediatedStatic -> Party

-- | Observers.
observers :: IntermediatedStatic -> Parties

-- | Hierarchical paths used to settle holding transfers. A path is specified for each
--   instrument label.
paths :: IntermediatedStatic -> Map Text Hierarchy

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-RouteProvider-SingleCustodian.html#module-daml-finance-settlement-v4-routeprovider-singlecustodian-88974
module Daml.Finance.Settlement.V4.RouteProvider.SingleCustodian

-- | Template which implements the `RouteProvider` interface.
--   It is used to transform each settlement `Step` into a `RoutedStep` using a single custodian.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-RouteProvider-SingleCustodian.html#type-daml-finance-settlement-v4-routeprovider-singlecustodian-singlecustodian-38133
data (Template SingleCustodian) => SingleCustodian

-- | Template which implements the `RouteProvider` interface.
--   It is used to transform each settlement `Step` into a `RoutedStep` using a single custodian.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Settlement-V4-RouteProvider-SingleCustodian.html#type-daml-finance-settlement-v4-routeprovider-singlecustodian-singlecustodian-38133
SingleCustodian :: Party -> Parties -> Party -> SingleCustodian

-- | Party providing the facility.
provider :: SingleCustodian -> Party

-- | Observers.
observers :: SingleCustodian -> Parties

-- | The custodian to be used to route each `Step`.
custodian :: SingleCustodian -> Party

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Common.html#module-daml-finance-util-v4-common-85309
module Daml.Finance.Util.V4.Common

-- | Checks if the input list is not empty.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Common.html#function-daml-finance-util-v4-common-notnull-64516
notNull :: [a] -> Bool

-- | Like `List.groupOn`, but sorts the list first.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Common.html#function-daml-finance-util-v4-common-sortandgroupon-91538
sortAndGroupOn :: (Ord k) => (a -> k) -> [a] -> [[a]]

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-Calendar.html#module-daml-finance-util-v4-date-calendar-71711
module Daml.Finance.Util.V4.Date.Calendar

-- | Merge multiple holiday calendars into a single one. `id`\s are concatenated by `,`.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-Calendar.html#function-daml-finance-util-v4-date-calendar-merge-42976
merge :: [HolidayCalendarData] -> HolidayCalendarData

-- | Check if Date is a holiday.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-Calendar.html#function-daml-finance-util-v4-date-calendar-isholiday-68144
isHoliday :: HolidayCalendarData -> Date -> Bool

-- | Check if Date is a business day.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-Calendar.html#function-daml-finance-util-v4-date-calendar-isbusinessday-69488
isBusinessDay :: HolidayCalendarData -> Date -> Bool

-- | Get next business day.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-Calendar.html#function-daml-finance-util-v4-date-calendar-nextbusinessday-34187
nextBusinessDay :: HolidayCalendarData -> Date -> Date

-- | Get previous business day.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-Calendar.html#function-daml-finance-util-v4-date-calendar-previousbusinessday-90099
previousBusinessDay :: HolidayCalendarData -> Date -> Date

-- | Get next or same business day.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-Calendar.html#function-daml-finance-util-v4-date-calendar-nextorsamebusinessday-87326
nextOrSameBusinessDay :: HolidayCalendarData -> Date -> Date

-- | Get previous or same business day.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-Calendar.html#function-daml-finance-util-v4-date-calendar-previousorsamebusinessday-55758
previousOrSameBusinessDay :: HolidayCalendarData -> Date -> Date

-- | Get next or same business day if before end of month. Otherwise get last business day in month.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-Calendar.html#function-daml-finance-util-v4-date-calendar-nextsameorlastinmonthbusinessday-70564
nextSameOrLastInMonthBusinessDay :: HolidayCalendarData -> Date -> Date

-- | Get previous or same business day if before end of month. Otherwise get first business day in
--   month.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-Calendar.html#function-daml-finance-util-v4-date-calendar-previoussameorfirstinmonthbusinessday-92367
previousSameOrFirstInMonthBusinessDay :: HolidayCalendarData -> Date -> Date

-- | Add business days to a Date.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-Calendar.html#function-daml-finance-util-v4-date-calendar-addbusinessdays-98940
addBusinessDays :: HolidayCalendarData -> Int -> Date -> Date

-- | Adjust date according to the given business day convention.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-Calendar.html#function-daml-finance-util-v4-date-calendar-adjustdate-36378
adjustDate :: HolidayCalendarData -> BusinessDayConventionEnum -> Date -> Date

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-DayCount.html#module-daml-finance-util-v4-date-daycount-38488
module Daml.Finance.Util.V4.Date.DayCount

-- | Calculates the day count fraction given the correponding convention.
--   Currently 30E360 is not supported as we do not want to expose the maturity date of the product
--   as an additional parameter.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-DayCount.html#function-daml-finance-util-v4-date-daycount-calcdcf-53229
calcDcf :: DayCountConventionEnum -> Date -> Date -> Decimal

-- | Calculate day count fraction for a schedule period.
--   It takes the following parameters:
--     - DayCountConventionEnum: to specify which day count convention should be used
--     - SchedulePeriod: the schedule period for which the day count fraction should be calculated
--     - Bool: Whether day count fraction should be calculated on adjusted dates
--       (if False: unadjusted dates)
--     - Date: The maturity date of the instrument
--     - Frequency: the frequency of the schedule period
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-DayCount.html#function-daml-finance-util-v4-date-daycount-calcperioddcf-52338
calcPeriodDcf :: DayCountConventionEnum -> SchedulePeriod -> Bool -> Date -> ScheduleFrequency -> Decimal

-- | Calculate Actual Actual day count fraction according to the ISDA method.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-DayCount.html#function-daml-finance-util-v4-date-daycount-calcperioddcfactactisda-35249
calcPeriodDcfActActIsda :: SchedulePeriod -> Bool -> Date -> Decimal

-- | Calculate Actual Actual day count fraction according to the ISMA method.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-DayCount.html#function-daml-finance-util-v4-date-daycount-calcperioddcfactactisma-69762
calcPeriodDcfActActIsma :: SchedulePeriod -> Bool -> Date -> ScheduleFrequency -> Decimal

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-DayCount.html#function-daml-finance-util-v4-date-daycount-calcdcfactactafb-61269
calcDcfActActAfb :: Date -> Date -> Decimal

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-DayCount.html#function-daml-finance-util-v4-date-daycount-calcdcfact360-26626
calcDcfAct360 :: Date -> Date -> Decimal

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-DayCount.html#function-daml-finance-util-v4-date-daycount-calcdcfact365fixed-8788
calcDcfAct365Fixed :: Date -> Date -> Decimal

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-DayCount.html#function-daml-finance-util-v4-date-daycount-calcdcfact365l-68402
calcDcfAct365L :: Date -> Date -> Decimal

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-DayCount.html#function-daml-finance-util-v4-date-daycount-calcdcf30360-60494
calcDcf30360 :: Date -> Date -> Decimal

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-DayCount.html#function-daml-finance-util-v4-date-daycount-calcdcf30360icma-79284
calcDcf30360Icma :: Date -> Date -> Decimal

-- | Calculate 30E/360 day count fraction.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-DayCount.html#function-daml-finance-util-v4-date-daycount-calcdcf30e360-448
calcDcf30E360 :: Bool -> Date -> Date -> Decimal

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-RollConvention.html#module-daml-finance-util-v4-date-rollconvention-61455
module Daml.Finance.Util.V4.Date.RollConvention

-- | Get next periodic (daily `D` and weekly `W` not supported) date according
--   to a given roll convention.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-RollConvention.html#function-daml-finance-util-v4-date-rollconvention-next-12170
next :: Date -> Period -> RollConventionEnum -> Date

-- | Get previous periodic (daily `D` and weekly `W` not supported) date according
--   to a given roll convention.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-RollConvention.html#function-daml-finance-util-v4-date-rollconvention-previous-51738
previous :: Date -> Period -> RollConventionEnum -> Date

-- | Add period to given date.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-RollConvention.html#function-daml-finance-util-v4-date-rollconvention-addperiod-52786
addPeriod :: Date -> Period -> Date

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-Schedule.html#module-daml-finance-util-v4-date-schedule-63724
module Daml.Finance.Util.V4.Date.Schedule

-- | Generate schedule from a periodic schedule.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Date-Schedule.html#function-daml-finance-util-v4-date-schedule-createschedule-25415
createSchedule :: [HolidayCalendarData] -> PeriodicSchedule -> Schedule

-- | This module contains default implementations for the methods of the `Disclosure` interface.
--   These are used across multiple templates in the library.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Disclosure.html#module-daml-finance-util-v4-disclosure-31001
module Daml.Finance.Util.V4.Disclosure

-- | Default implementation for `setObservers`.
--   The `refUpdate` argument is used to update the corresponding contract `Reference` and
--   can be set to `None` if your template does not have an accompanying `Reference` contract.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Disclosure.html#function-daml-finance-util-v4-disclosure-setobserversimpl-89368
setObserversImpl :: (HasCreate t, HasField "observers" t PartiesMap, HasFromInterface t I, HasToInterface t I, HasInterfaceTypeRep i, HasToInterface i I, HasToInterface t i) => t -> Optional (PartiesMap -> ContractId i -> Update (ContractId I)) -> SetObservers -> Update (ContractId I)

-- | Default implementation for `addObservers`.
--   The `refUpdate` argument is used to update the corresponding contract `Reference` and
--   can be set to `None` if your template does not have an accompanying `Reference` contract.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Disclosure.html#function-daml-finance-util-v4-disclosure-addobserversimpl-48035
addObserversImpl :: (HasCreate t, HasField "observers" t PartiesMap, HasFromInterface t I, HasToInterface t I, HasInterfaceTypeRep i, HasToInterface i I, HasToInterface t i) => t -> Optional (PartiesMap -> ContractId i -> Update (ContractId I)) -> AddObservers -> Update (ContractId I)

-- | Default implementation for `removeObservers`.
--   The `refUpdate` argument is used to update the corresponding contract `Reference` and
--   can be set to `None` if your template does not have an accompanying `Reference` contract.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Disclosure.html#function-daml-finance-util-v4-disclosure-removeobserversimpl-23291
removeObserversImpl :: (HasCreate t, HasField "observers" t PartiesMap, HasFromInterface t I, HasToInterface t I, HasInterfaceTypeRep i, HasToInterface i I, HasToInterface t i) => t -> Optional (PartiesMap -> ContractId i -> Update (ContractId I)) -> ContractId I -> RemoveObservers -> Update (Optional (ContractId I))

@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Lockable.html#module-daml-finance-util-v4-lockable-69357
module Daml.Finance.Util.V4.Lockable

-- | Default implementation of `acquire` from the `Lockable` interface.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Lockable.html#function-daml-finance-util-v4-lockable-acquireimpl-21150
acquireImpl :: (HasCreate t, HasSignatory t, HasFromInterface t Lockable, HasToInterface t Lockable) => Optional Lock -> (Optional Lock -> t) -> Acquire -> Update (ContractId Lockable)

-- | Default implementation of `release` from the `Lockable` interface.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Lockable.html#function-daml-finance-util-v4-lockable-releaseimpl-47257
releaseImpl :: (HasCreate t, HasFromInterface t Lockable, HasToInterface t Lockable) => Optional Lock -> (Optional Lock -> t) -> Release -> Update (ContractId Lockable)

-- | Check validity of lock.
--   The lockers field must be non-empty if set.
@url https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Util-V4-Lockable.html#function-daml-finance-util-v4-lockable-isvalidlock-2139
isValidLock :: Optional Lock -> Bool


